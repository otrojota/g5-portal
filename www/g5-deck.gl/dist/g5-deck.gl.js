/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@luma.gl/gltools/dist/esm/context/context.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/context/context.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGLContext: () => (/* binding */ createGLContext),
/* harmony export */   getContextDebugInfo: () => (/* binding */ getContextDebugInfo),
/* harmony export */   instrumentGLContext: () => (/* binding */ instrumentGLContext),
/* harmony export */   resizeGLContext: () => (/* binding */ resizeGLContext)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-browser.js");
/* harmony import */ var _state_tracker_track_context_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state-tracker/track-context-state */ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/track-context-state.js");
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/log */ "./node_modules/@luma.gl/gltools/dist/esm/utils/log.js");
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/assert */ "./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js");
/* harmony import */ var _utils_device_pixels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/device-pixels */ "./node_modules/@luma.gl/gltools/dist/esm/utils/device-pixels.js");
/* harmony import */ var _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/webgl-checks */ "./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js");






const isBrowser = (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_5__["default"])();
const isPage = isBrowser && typeof document !== 'undefined';
const CONTEXT_DEFAULTS = {
  webgl2: true,
  webgl1: true,
  throwOnError: true,
  manageState: true,
  canvas: null,
  debug: false,
  width: 800,
  height: 600
};
function createGLContext() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__.assert)(isBrowser, "createGLContext only available in the browser.\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils");
  options = Object.assign({}, CONTEXT_DEFAULTS, options);
  const {
    width,
    height
  } = options;

  function onError(message) {
    if (options.throwOnError) {
      throw new Error(message);
    }

    console.error(message);
    return null;
  }

  options.onError = onError;
  let gl;
  const {
    canvas
  } = options;
  const targetCanvas = getCanvas({
    canvas,
    width,
    height,
    onError
  });
  gl = createBrowserContext(targetCanvas, options);

  if (!gl) {
    return null;
  }

  gl = instrumentGLContext(gl, options);
  logInfo(gl);
  return gl;
}
function instrumentGLContext(gl) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!gl || gl._instrumented) {
    return gl;
  }

  gl._version = gl._version || getVersion(gl);
  gl.luma = gl.luma || {};
  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};
  options = Object.assign({}, CONTEXT_DEFAULTS, options);
  const {
    manageState,
    debug
  } = options;

  if (manageState) {
    (0,_state_tracker_track_context_state__WEBPACK_IMPORTED_MODULE_0__.trackContextState)(gl, {
      copyState: false,
      log: function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _utils_log__WEBPACK_IMPORTED_MODULE_1__.log.log(1, ...args)();
      }
    });
  }

  if (isBrowser && debug) {
    if (!globalThis.makeDebugContext) {
      _utils_log__WEBPACK_IMPORTED_MODULE_1__.log.warn('WebGL debug mode not activated. import "@luma.gl/debug" to enable.')();
    } else {
      gl = globalThis.makeDebugContext(gl, options);
      _utils_log__WEBPACK_IMPORTED_MODULE_1__.log.level = Math.max(_utils_log__WEBPACK_IMPORTED_MODULE_1__.log.level, 1);
    }
  }

  gl._instrumented = true;
  return gl;
}
function getContextDebugInfo(gl) {
  const vendorMasked = gl.getParameter(7936);
  const rendererMasked = gl.getParameter(7937);
  const ext = gl.getExtension('WEBGL_debug_renderer_info');
  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || 7936);
  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || 7937);
  return {
    vendor: vendorUnmasked || vendorMasked,
    renderer: rendererUnmasked || rendererMasked,
    vendorMasked,
    rendererMasked,
    version: gl.getParameter(7938),
    shadingLanguageVersion: gl.getParameter(35724)
  };
}
function resizeGLContext(gl) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (gl.canvas) {
    const devicePixelRatio = (0,_utils_device_pixels__WEBPACK_IMPORTED_MODULE_3__.getDevicePixelRatio)(options.useDevicePixels);
    setDevicePixelRatio(gl, devicePixelRatio, options);
    return;
  }

  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');

  if (ext && "width" in options && "height" in options) {
    ext.resize(options.width, options.height);
  }
}

function createBrowserContext(canvas, options) {
  const {
    onError
  } = options;
  let errorMessage = null;

  const onCreateError = error => errorMessage = error.statusMessage || errorMessage;

  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);
  const {
    webgl1 = true,
    webgl2 = true
  } = options;
  let gl = null;

  if (webgl2) {
    gl = gl || canvas.getContext('webgl2', options);
    gl = gl || canvas.getContext('experimental-webgl2', options);
  }

  if (webgl1) {
    gl = gl || canvas.getContext('webgl', options);
    gl = gl || canvas.getContext('experimental-webgl', options);
  }

  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);

  if (!gl) {
    return onError("Failed to create ".concat(webgl2 && !webgl1 ? 'WebGL2' : 'WebGL', " context: ").concat(errorMessage || 'Unknown error'));
  }

  if (options.onContextLost) {
    canvas.addEventListener('webglcontextlost', options.onContextLost, false);
  }

  if (options.onContextRestored) {
    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);
  }

  return gl;
}

function getCanvas(_ref) {
  let {
    canvas,
    width = 800,
    height = 600,
    onError
  } = _ref;
  let targetCanvas;

  if (typeof canvas === 'string') {
    const isPageLoaded = isPage && document.readyState === 'complete';

    if (!isPageLoaded) {
      onError("createGLContext called on canvas '".concat(canvas, "' before page was loaded"));
    }

    targetCanvas = document.getElementById(canvas);
  } else if (canvas) {
    targetCanvas = canvas;
  } else {
    targetCanvas = document.createElement('canvas');
    targetCanvas.id = 'lumagl-canvas';
    targetCanvas.style.width = Number.isFinite(width) ? "".concat(width, "px") : '100%';
    targetCanvas.style.height = Number.isFinite(height) ? "".concat(height, "px") : '100%';
    document.body.insertBefore(targetCanvas, document.body.firstChild);
  }

  return targetCanvas;
}

function logInfo(gl) {
  const webGL = (0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_4__.isWebGL2)(gl) ? 'WebGL2' : 'WebGL1';
  const info = getContextDebugInfo(gl);
  const driver = info ? "(".concat(info.vendor, ",").concat(info.renderer, ")") : '';
  const debug = gl.debug ? ' debug' : '';
  _utils_log__WEBPACK_IMPORTED_MODULE_1__.log.info(1, "".concat(webGL).concat(debug, " context ").concat(driver))();
}

function getVersion(gl) {
  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {
    return 2;
  }

  return 1;
}

function setDevicePixelRatio(gl, devicePixelRatio, options) {
  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;
  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;

  if (!clientWidth || !clientHeight) {
    _utils_log__WEBPACK_IMPORTED_MODULE_1__.log.log(1, 'Canvas clientWidth/clientHeight is 0')();
    devicePixelRatio = 1;
    clientWidth = gl.canvas.width || 1;
    clientHeight = gl.canvas.height || 1;
  }

  gl.luma = gl.luma || {};
  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};
  const cachedSize = gl.luma.canvasSizeInfo;

  if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {
    let clampedPixelRatio = devicePixelRatio;
    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);
    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);
    gl.canvas.width = canvasWidth;
    gl.canvas.height = canvasHeight;

    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {
      _utils_log__WEBPACK_IMPORTED_MODULE_1__.log.warn("Device pixel ratio clamped")();
      clampedPixelRatio = Math.min(gl.drawingBufferWidth / clientWidth, gl.drawingBufferHeight / clientHeight);
      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);
      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);
    }

    Object.assign(gl.luma.canvasSizeInfo, {
      clientWidth,
      clientHeight,
      devicePixelRatio
    });
  }
}
//# sourceMappingURL=context.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertWebGL2Context: () => (/* reexport safe */ _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.assertWebGL2Context),
/* harmony export */   assertWebGLContext: () => (/* reexport safe */ _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.assertWebGLContext),
/* harmony export */   createGLContext: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_5__.createGLContext),
/* harmony export */   cssToDevicePixels: () => (/* reexport safe */ _utils_device_pixels__WEBPACK_IMPORTED_MODULE_6__.cssToDevicePixels),
/* harmony export */   cssToDeviceRatio: () => (/* reexport safe */ _utils_device_pixels__WEBPACK_IMPORTED_MODULE_6__.cssToDeviceRatio),
/* harmony export */   getContextDebugInfo: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_5__.getContextDebugInfo),
/* harmony export */   getParameters: () => (/* reexport safe */ _state_tracker_unified_parameter_api__WEBPACK_IMPORTED_MODULE_3__.getParameters),
/* harmony export */   getWebGL2Context: () => (/* reexport safe */ _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.getWebGL2Context),
/* harmony export */   instrumentGLContext: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_5__.instrumentGLContext),
/* harmony export */   isWebGL: () => (/* reexport safe */ _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.isWebGL),
/* harmony export */   isWebGL2: () => (/* reexport safe */ _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.isWebGL2),
/* harmony export */   log: () => (/* reexport safe */ _utils_log__WEBPACK_IMPORTED_MODULE_0__.log),
/* harmony export */   polyfillContext: () => (/* reexport safe */ _polyfill_polyfill_context__WEBPACK_IMPORTED_MODULE_2__.polyfillContext),
/* harmony export */   popContextState: () => (/* reexport safe */ _state_tracker_track_context_state__WEBPACK_IMPORTED_MODULE_4__.popContextState),
/* harmony export */   pushContextState: () => (/* reexport safe */ _state_tracker_track_context_state__WEBPACK_IMPORTED_MODULE_4__.pushContextState),
/* harmony export */   resetParameters: () => (/* reexport safe */ _state_tracker_unified_parameter_api__WEBPACK_IMPORTED_MODULE_3__.resetParameters),
/* harmony export */   resizeGLContext: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_5__.resizeGLContext),
/* harmony export */   setParameters: () => (/* reexport safe */ _state_tracker_unified_parameter_api__WEBPACK_IMPORTED_MODULE_3__.setParameters),
/* harmony export */   trackContextState: () => (/* reexport safe */ _state_tracker_track_context_state__WEBPACK_IMPORTED_MODULE_4__.trackContextState),
/* harmony export */   withParameters: () => (/* reexport safe */ _state_tracker_unified_parameter_api__WEBPACK_IMPORTED_MODULE_3__.withParameters)
/* harmony export */ });
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/log */ "./node_modules/@luma.gl/gltools/dist/esm/utils/log.js");
/* harmony import */ var _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/webgl-checks */ "./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js");
/* harmony import */ var _polyfill_polyfill_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfill/polyfill-context */ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-context.js");
/* harmony import */ var _state_tracker_unified_parameter_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state-tracker/unified-parameter-api */ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/unified-parameter-api.js");
/* harmony import */ var _state_tracker_track_context_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state-tracker/track-context-state */ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/track-context-state.js");
/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./context/context */ "./node_modules/@luma.gl/gltools/dist/esm/context/context.js");
/* harmony import */ var _utils_device_pixels__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/device-pixels */ "./node_modules/@luma.gl/gltools/dist/esm/utils/device-pixels.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/get-parameter-polyfill.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/polyfill/get-parameter-polyfill.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getParameterPolyfill: () => (/* binding */ getParameterPolyfill)
/* harmony export */ });
/* harmony import */ var _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/webgl-checks */ "./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js");

const OES_element_index = 'OES_element_index';
const WEBGL_draw_buffers = 'WEBGL_draw_buffers';
const EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
const EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
const EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
const WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;
const GL_DONT_CARE = 0x1100;
const GL_GPU_DISJOINT_EXT = 0x8fbb;
const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;
const GL_UNMASKED_VENDOR_WEBGL = 0x9245;
const GL_UNMASKED_RENDERER_WEBGL = 0x9246;

const getWebGL2ValueOrZero = gl => !(0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__.isWebGL2)(gl) ? 0 : undefined;

const WEBGL_PARAMETERS = {
  [3074]: gl => !(0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__.isWebGL2)(gl) ? 36064 : undefined,
  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => !(0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__.isWebGL2)(gl) ? GL_DONT_CARE : undefined,
  [35977]: getWebGL2ValueOrZero,
  [32937]: getWebGL2ValueOrZero,
  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {
    const ext = (0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__.isWebGL2)(gl) ? gl.getExtension(EXT_disjoint_timer_query_webgl2) : gl.getExtension(EXT_disjoint_timer_query);
    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;
  },
  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {
    const ext = gl.getExtension(WEBGL_debug_renderer_info);
    return getParameter(ext && ext.UNMASKED_VENDOR_WEBGL || 7936);
  },
  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {
    const ext = gl.getExtension(WEBGL_debug_renderer_info);
    return getParameter(ext && ext.UNMASKED_RENDERER_WEBGL || 7937);
  },
  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {
    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];
    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;
  },
  [32883]: getWebGL2ValueOrZero,
  [35071]: getWebGL2ValueOrZero,
  [37447]: getWebGL2ValueOrZero,
  [36063]: (gl, getParameter) => {
    if (!(0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__.isWebGL2)(gl)) {
      const ext = gl.getExtension(WEBGL_draw_buffers);
      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;
    }

    return undefined;
  },
  [35379]: getWebGL2ValueOrZero,
  [35374]: getWebGL2ValueOrZero,
  [35377]: getWebGL2ValueOrZero,
  [34852]: gl => {
    if (!(0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__.isWebGL2)(gl)) {
      const ext = gl.getExtension(WEBGL_draw_buffers);
      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;
    }

    return undefined;
  },
  [36203]: gl => gl.getExtension(OES_element_index) ? 2147483647 : 65535,
  [33001]: gl => gl.getExtension(OES_element_index) ? 16777216 : 65535,
  [33000]: gl => 16777216,
  [37157]: getWebGL2ValueOrZero,
  [35373]: getWebGL2ValueOrZero,
  [35657]: getWebGL2ValueOrZero,
  [36183]: getWebGL2ValueOrZero,
  [37137]: getWebGL2ValueOrZero,
  [34045]: getWebGL2ValueOrZero,
  [35978]: getWebGL2ValueOrZero,
  [35979]: getWebGL2ValueOrZero,
  [35968]: getWebGL2ValueOrZero,
  [35376]: getWebGL2ValueOrZero,
  [35375]: getWebGL2ValueOrZero,
  [35659]: getWebGL2ValueOrZero,
  [37154]: getWebGL2ValueOrZero,
  [35371]: getWebGL2ValueOrZero,
  [35658]: getWebGL2ValueOrZero,
  [35076]: getWebGL2ValueOrZero,
  [35077]: getWebGL2ValueOrZero,
  [35380]: getWebGL2ValueOrZero
};
function getParameterPolyfill(gl, originalGetParameter, pname) {
  const limit = WEBGL_PARAMETERS[pname];
  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;
  const result = value !== undefined ? value : originalGetParameter(pname);
  return result;
}
//# sourceMappingURL=get-parameter-polyfill.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-context.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-context.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   polyfillContext: () => (/* binding */ polyfillContext)
/* harmony export */ });
/* harmony import */ var _polyfill_vertex_array_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfill-vertex-array-object */ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-vertex-array-object.js");
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/assert */ "./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js");
/* harmony import */ var _polyfill_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfill-table */ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-table.js");



function polyfillContext(gl) {
  gl.luma = gl.luma || {};
  const {
    luma
  } = gl;

  if (!luma.polyfilled) {
    (0,_polyfill_vertex_array_object__WEBPACK_IMPORTED_MODULE_0__.polyfillVertexArrayObject)(gl);
    initializeExtensions(gl);
    installPolyfills(gl, _polyfill_table__WEBPACK_IMPORTED_MODULE_2__.WEBGL2_CONTEXT_POLYFILLS);
    installOverrides(gl, {
      target: luma,
      target2: gl
    });
    luma.polyfilled = true;
  }

  return gl;
}
globalThis.polyfillContext = polyfillContext;

function initializeExtensions(gl) {
  gl.luma.extensions = {};
  const EXTENSIONS = gl.getSupportedExtensions() || [];

  for (const extension of EXTENSIONS) {
    gl.luma[extension] = gl.getExtension(extension);
  }
}

function installOverrides(gl, _ref) {
  let {
    target,
    target2
  } = _ref;
  Object.keys(_polyfill_table__WEBPACK_IMPORTED_MODULE_2__.WEBGL2_CONTEXT_OVERRIDES).forEach(key => {
    if (typeof _polyfill_table__WEBPACK_IMPORTED_MODULE_2__.WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {
      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};
      const polyfill = _polyfill_table__WEBPACK_IMPORTED_MODULE_2__.WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  });
}

function installPolyfills(gl, polyfills) {
  for (const extension of Object.getOwnPropertyNames(polyfills)) {
    if (extension !== 'overrides') {
      polyfillExtension(gl, {
        extension,
        target: gl.luma,
        target2: gl
      });
    }
  }
}

function polyfillExtension(gl, _ref2) {
  let {
    extension,
    target,
    target2
  } = _ref2;
  const defaults = _polyfill_table__WEBPACK_IMPORTED_MODULE_2__.WEBGL2_CONTEXT_POLYFILLS[extension];
  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_1__.assert)(defaults);
  const {
    meta = {}
  } = defaults;
  const {
    suffix = ''
  } = meta;
  const ext = gl.getExtension(extension);

  for (const key of Object.keys(defaults)) {
    const extKey = "".concat(key).concat(suffix);
    let polyfill = null;

    if (key === 'meta') {} else if (typeof gl[key] === 'function') {} else if (ext && typeof ext[extKey] === 'function') {
      polyfill = function () {
        return ext[extKey](...arguments);
      };
    } else if (typeof defaults[key] === 'function') {
      polyfill = defaults[key].bind(target);
    }

    if (polyfill) {
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  }
}
//# sourceMappingURL=polyfill-context.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-table.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-table.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGL2_CONTEXT_OVERRIDES: () => (/* binding */ WEBGL2_CONTEXT_OVERRIDES),
/* harmony export */   WEBGL2_CONTEXT_POLYFILLS: () => (/* binding */ WEBGL2_CONTEXT_POLYFILLS)
/* harmony export */ });
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/assert */ "./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js");
/* harmony import */ var _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/webgl-checks */ "./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js");
/* harmony import */ var _get_parameter_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get-parameter-polyfill */ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/get-parameter-polyfill.js");



const OES_vertex_array_object = 'OES_vertex_array_object';
const ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';
const WEBGL_draw_buffers = 'WEBGL_draw_buffers';
const EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
const EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
const ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';

function getExtensionData(gl, extension) {
  return {
    webgl2: (0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.isWebGL2)(gl),
    ext: gl.getExtension(extension)
  };
}

const WEBGL2_CONTEXT_POLYFILLS = {
  [OES_vertex_array_object]: {
    meta: {
      suffix: 'OES'
    },
    createVertexArray: () => {
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(false, ERR_VAO_NOT_SUPPORTED);
    },
    deleteVertexArray: () => {},
    bindVertexArray: () => {},
    isVertexArray: () => false
  },
  [ANGLE_instanced_arrays]: {
    meta: {
      suffix: 'ANGLE'
    },

    vertexAttribDivisor(location, divisor) {
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(divisor === 0, 'WebGL instanced rendering not supported');
    },

    drawElementsInstanced: () => {},
    drawArraysInstanced: () => {}
  },
  [WEBGL_draw_buffers]: {
    meta: {
      suffix: 'WEBGL'
    },
    drawBuffers: () => {
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
    }
  },
  [EXT_disjoint_timer_query]: {
    meta: {
      suffix: 'EXT'
    },
    createQuery: () => {
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
    },
    deleteQuery: () => {
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
    },
    beginQuery: () => {
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
    },
    endQuery: () => {},

    getQuery(handle, pname) {
      return this.getQueryObject(handle, pname);
    },

    getQueryParameter(handle, pname) {
      return this.getQueryObject(handle, pname);
    },

    getQueryObject: () => {}
  }
};
const WEBGL2_CONTEXT_OVERRIDES = {
  readBuffer: (gl, originalFunc, attachment) => {
    if ((0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.isWebGL2)(gl)) {
      originalFunc(attachment);
    } else {}
  },
  getVertexAttrib: (gl, originalFunc, location, pname) => {
    const {
      webgl2,
      ext
    } = getExtensionData(gl, ANGLE_instanced_arrays);
    let result;

    switch (pname) {
      case 35069:
        result = !webgl2 ? false : undefined;
        break;

      case 35070:
        result = !webgl2 && !ext ? 0 : undefined;
        break;

      default:
    }

    return result !== undefined ? result : originalFunc(location, pname);
  },
  getProgramParameter: (gl, originalFunc, program, pname) => {
    if (!(0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.isWebGL2)(gl)) {
      switch (pname) {
        case 35967:
          return 35981;

        case 35971:
          return 0;

        case 35382:
          return 0;

        default:
      }
    }

    return originalFunc(program, pname);
  },
  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {
    if (!(0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_1__.isWebGL2)(gl)) {
      switch (pname) {
        case 32937:
          return new Int32Array([0]);

        default:
      }
    }

    return gl.getInternalformatParameter(target, format, pname);
  },

  getTexParameter(gl, originalFunc, target, pname) {
    switch (pname) {
      case 34046:
        const {
          extensions
        } = gl.luma;
        const ext = extensions[EXT_texture_filter_anisotropic];
        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;
        break;

      default:
    }

    return originalFunc(target, pname);
  },

  getParameter: _get_parameter_polyfill__WEBPACK_IMPORTED_MODULE_2__.getParameterPolyfill,

  hint(gl, originalFunc, pname, value) {
    return originalFunc(pname, value);
  }

};
//# sourceMappingURL=polyfill-table.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-vertex-array-object.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-vertex-array-object.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   polyfillVertexArrayObject: () => (/* binding */ polyfillVertexArrayObject)
/* harmony export */ });
const glErrorShadow = {};

function error(msg) {
  if (globalThis.console && globalThis.console.error) {
    globalThis.console.error(msg);
  }
}

function log(msg) {
  if (globalThis.console && globalThis.console.log) {
    globalThis.console.log(msg);
  }
}

function synthesizeGLError(err, opt_msg) {
  glErrorShadow[err] = true;

  if (opt_msg !== undefined) {
    error(opt_msg);
  }
}

function wrapGLError(gl) {
  const f = gl.getError;

  gl.getError = function getError() {
    let err;

    do {
      err = f.apply(gl);

      if (err !== 0) {
        glErrorShadow[err] = true;
      }
    } while (err !== 0);

    for (err in glErrorShadow) {
      if (glErrorShadow[err]) {
        delete glErrorShadow[err];
        return parseInt(err, 10);
      }
    }

    return 0;
  };
}

const WebGLVertexArrayObjectOES = function WebGLVertexArrayObjectOES(ext) {
  const gl = ext.gl;
  this.ext = ext;
  this.isAlive = true;
  this.hasBeenBound = false;
  this.elementArrayBuffer = null;
  this.attribs = new Array(ext.maxVertexAttribs);

  for (let n = 0; n < this.attribs.length; n++) {
    const attrib = new WebGLVertexArrayObjectOES.VertexAttrib(gl);
    this.attribs[n] = attrib;
  }

  this.maxAttrib = 0;
};

WebGLVertexArrayObjectOES.VertexAttrib = function VertexAttrib(gl) {
  this.enabled = false;
  this.buffer = null;
  this.size = 4;
  this.type = 5126;
  this.normalized = false;
  this.stride = 16;
  this.offset = 0;
  this.cached = '';
  this.recache();
};

WebGLVertexArrayObjectOES.VertexAttrib.prototype.recache = function recache() {
  this.cached = [this.size, this.type, this.normalized, this.stride, this.offset].join(':');
};

const OESVertexArrayObject = function OESVertexArrayObject(gl) {
  const self = this;
  this.gl = gl;
  wrapGLError(gl);
  const original = this.original = {
    getParameter: gl.getParameter,
    enableVertexAttribArray: gl.enableVertexAttribArray,
    disableVertexAttribArray: gl.disableVertexAttribArray,
    bindBuffer: gl.bindBuffer,
    getVertexAttrib: gl.getVertexAttrib,
    vertexAttribPointer: gl.vertexAttribPointer
  };

  gl.getParameter = function getParameter(pname) {
    if (pname === self.VERTEX_ARRAY_BINDING_OES) {
      if (self.currentVertexArrayObject === self.defaultVertexArrayObject) {
        return null;
      }

      return self.currentVertexArrayObject;
    }

    return original.getParameter.apply(this, arguments);
  };

  gl.enableVertexAttribArray = function enableVertexAttribArray(index) {
    const vao = self.currentVertexArrayObject;
    vao.maxAttrib = Math.max(vao.maxAttrib, index);
    const attrib = vao.attribs[index];
    attrib.enabled = true;
    return original.enableVertexAttribArray.apply(this, arguments);
  };

  gl.disableVertexAttribArray = function disableVertexAttribArray(index) {
    const vao = self.currentVertexArrayObject;
    vao.maxAttrib = Math.max(vao.maxAttrib, index);
    const attrib = vao.attribs[index];
    attrib.enabled = false;
    return original.disableVertexAttribArray.apply(this, arguments);
  };

  gl.bindBuffer = function bindBuffer(target, buffer) {
    switch (target) {
      case 34962:
        self.currentArrayBuffer = buffer;
        break;

      case 34963:
        self.currentVertexArrayObject.elementArrayBuffer = buffer;
        break;

      default:
    }

    return original.bindBuffer.apply(this, arguments);
  };

  gl.getVertexAttrib = function getVertexAttrib(index, pname) {
    const vao = self.currentVertexArrayObject;
    const attrib = vao.attribs[index];

    switch (pname) {
      case 34975:
        return attrib.buffer;

      case 34338:
        return attrib.enabled;

      case 34339:
        return attrib.size;

      case 34340:
        return attrib.stride;

      case 34341:
        return attrib.type;

      case 34922:
        return attrib.normalized;

      default:
        return original.getVertexAttrib.apply(this, arguments);
    }
  };

  gl.vertexAttribPointer = function vertexAttribPointer(indx, size, type, normalized, stride, offset) {
    const vao = self.currentVertexArrayObject;
    vao.maxAttrib = Math.max(vao.maxAttrib, indx);
    const attrib = vao.attribs[indx];
    attrib.buffer = self.currentArrayBuffer;
    attrib.size = size;
    attrib.type = type;
    attrib.normalized = normalized;
    attrib.stride = stride;
    attrib.offset = offset;
    attrib.recache();
    return original.vertexAttribPointer.apply(this, arguments);
  };

  if (gl.instrumentExtension) {
    gl.instrumentExtension(this, 'OES_vertex_array_object');
  }

  if (gl.canvas) {
    gl.canvas.addEventListener('webglcontextrestored', () => {
      log('OESVertexArrayObject emulation library context restored');
      self.reset_();
    }, true);
  }

  this.reset_();
};

OESVertexArrayObject.prototype.VERTEX_ARRAY_BINDING_OES = 0x85b5;

OESVertexArrayObject.prototype.reset_ = function reset_() {
  const contextWasLost = this.vertexArrayObjects !== undefined;

  if (contextWasLost) {
    for (let ii = 0; ii < this.vertexArrayObjects.length; ++ii) {
      this.vertexArrayObjects.isAlive = false;
    }
  }

  const gl = this.gl;
  this.maxVertexAttribs = gl.getParameter(34921);
  this.defaultVertexArrayObject = new WebGLVertexArrayObjectOES(this);
  this.currentVertexArrayObject = null;
  this.currentArrayBuffer = null;
  this.vertexArrayObjects = [this.defaultVertexArrayObject];
  this.bindVertexArrayOES(null);
};

OESVertexArrayObject.prototype.createVertexArrayOES = function createVertexArrayOES() {
  const arrayObject = new WebGLVertexArrayObjectOES(this);
  this.vertexArrayObjects.push(arrayObject);
  return arrayObject;
};

OESVertexArrayObject.prototype.deleteVertexArrayOES = function deleteVertexArrayOES(arrayObject) {
  arrayObject.isAlive = false;
  this.vertexArrayObjects.splice(this.vertexArrayObjects.indexOf(arrayObject), 1);

  if (this.currentVertexArrayObject === arrayObject) {
    this.bindVertexArrayOES(null);
  }
};

OESVertexArrayObject.prototype.isVertexArrayOES = function isVertexArrayOES(arrayObject) {
  if (arrayObject && arrayObject instanceof WebGLVertexArrayObjectOES) {
    if (arrayObject.hasBeenBound && arrayObject.ext === this) {
      return true;
    }
  }

  return false;
};

OESVertexArrayObject.prototype.bindVertexArrayOES = function bindVertexArrayOES(arrayObject) {
  const gl = this.gl;

  if (arrayObject && !arrayObject.isAlive) {
    synthesizeGLError(1282, 'bindVertexArrayOES: attempt to bind deleted arrayObject');
    return;
  }

  const original = this.original;
  const oldVAO = this.currentVertexArrayObject;
  this.currentVertexArrayObject = arrayObject || this.defaultVertexArrayObject;
  this.currentVertexArrayObject.hasBeenBound = true;
  const newVAO = this.currentVertexArrayObject;

  if (oldVAO === newVAO) {
    return;
  }

  if (!oldVAO || newVAO.elementArrayBuffer !== oldVAO.elementArrayBuffer) {
    original.bindBuffer.call(gl, 34963, newVAO.elementArrayBuffer);
  }

  let currentBinding = this.currentArrayBuffer;
  const maxAttrib = Math.max(oldVAO ? oldVAO.maxAttrib : 0, newVAO.maxAttrib);

  for (let n = 0; n <= maxAttrib; n++) {
    const attrib = newVAO.attribs[n];
    const oldAttrib = oldVAO ? oldVAO.attribs[n] : null;

    if (!oldVAO || attrib.enabled !== oldAttrib.enabled) {
      if (attrib.enabled) {
        original.enableVertexAttribArray.call(gl, n);
      } else {
        original.disableVertexAttribArray.call(gl, n);
      }
    }

    if (attrib.enabled) {
      let bufferChanged = false;

      if (!oldVAO || attrib.buffer !== oldAttrib.buffer) {
        if (currentBinding !== attrib.buffer) {
          original.bindBuffer.call(gl, 34962, attrib.buffer);
          currentBinding = attrib.buffer;
        }

        bufferChanged = true;
      }

      if (bufferChanged || attrib.cached !== oldAttrib.cached) {
        original.vertexAttribPointer.call(gl, n, attrib.size, attrib.type, attrib.normalized, attrib.stride, attrib.offset);
      }
    }
  }

  if (this.currentArrayBuffer !== currentBinding) {
    original.bindBuffer.call(gl, 34962, this.currentArrayBuffer);
  }
};

function polyfillVertexArrayObject(gl) {
  if (typeof gl.createVertexArray === 'function') {
    return;
  }

  const original_getSupportedExtensions = gl.getSupportedExtensions;

  gl.getSupportedExtensions = function getSupportedExtensions() {
    const list = original_getSupportedExtensions.call(this) || [];

    if (list.indexOf('OES_vertex_array_object') < 0) {
      list.push('OES_vertex_array_object');
    }

    return list;
  };

  const original_getExtension = gl.getExtension;

  gl.getExtension = function getExtension(name) {
    const ext = original_getExtension.call(this, name);

    if (ext) {
      return ext;
    }

    if (name !== 'OES_vertex_array_object') {
      return null;
    }

    if (!gl.__OESVertexArrayObject) {
      this.__OESVertexArrayObject = new OESVertexArrayObject(this);
    }

    return this.__OESVertexArrayObject;
  };
}
//# sourceMappingURL=polyfill-vertex-array-object.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/track-context-state.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/state-tracker/track-context-state.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   popContextState: () => (/* binding */ popContextState),
/* harmony export */   pushContextState: () => (/* binding */ pushContextState),
/* harmony export */   trackContextState: () => (/* binding */ trackContextState)
/* harmony export */ });
/* harmony import */ var _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webgl-parameter-tables */ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/webgl-parameter-tables.js");
/* harmony import */ var _unified_parameter_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unified-parameter-api */ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/unified-parameter-api.js");
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/assert */ "./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./node_modules/@luma.gl/gltools/dist/esm/utils/utils.js");





function installGetterOverride(gl, functionName) {
  const originalGetterFunc = gl[functionName].bind(gl);

  gl[functionName] = function get() {
    const pname = arguments.length <= 0 ? undefined : arguments[0];

    if (!(pname in gl.state.cache)) {
      return originalGetterFunc(...arguments);
    }

    return gl.state.enable ? gl.state.cache[pname] : originalGetterFunc(...arguments);
  };

  Object.defineProperty(gl[functionName], 'name', {
    value: "".concat(functionName, "-from-cache"),
    configurable: false
  });
}

function installSetterSpy(gl, functionName, setter) {
  const originalSetterFunc = gl[functionName].bind(gl);

  gl[functionName] = function set() {
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    const {
      valueChanged,
      oldValue
    } = setter(gl.state._updateCache, ...params);

    if (valueChanged) {
      originalSetterFunc(...params);
    }

    return oldValue;
  };

  Object.defineProperty(gl[functionName], 'name', {
    value: "".concat(functionName, "-to-cache"),
    configurable: false
  });
}

function installProgramSpy(gl) {
  const originalUseProgram = gl.useProgram.bind(gl);

  gl.useProgram = function useProgramLuma(handle) {
    if (gl.state.program !== handle) {
      originalUseProgram(handle);
      gl.state.program = handle;
    }
  };
}

class GLState {
  constructor(gl) {
    let {
      copyState = false,
      log = () => {}
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.gl = gl;
    this.program = null;
    this.stateStack = [];
    this.enable = true;
    this.cache = copyState ? (0,_unified_parameter_api__WEBPACK_IMPORTED_MODULE_1__.getParameters)(gl) : Object.assign({}, _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_DEFAULTS);
    this.log = log;
    this._updateCache = this._updateCache.bind(this);
    Object.seal(this);
  }

  push() {
    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.stateStack.push({});
  }

  pop() {
    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__.assert)(this.stateStack.length > 0);
    const oldValues = this.stateStack[this.stateStack.length - 1];
    (0,_unified_parameter_api__WEBPACK_IMPORTED_MODULE_1__.setParameters)(this.gl, oldValues);
    this.stateStack.pop();
  }

  _updateCache(values) {
    let valueChanged = false;
    let oldValue;
    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];

    for (const key in values) {
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__.assert)(key !== undefined);
      const value = values[key];
      const cached = this.cache[key];

      if (!(0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.deepArrayEqual)(value, cached)) {
        valueChanged = true;
        oldValue = cached;

        if (oldValues && !(key in oldValues)) {
          oldValues[key] = cached;
        }

        this.cache[key] = value;
      }
    }

    return {
      valueChanged,
      oldValue
    };
  }

}

function trackContextState(gl) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const {
    enable = true,
    copyState
  } = options;
  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__.assert)(copyState !== undefined);

  if (!gl.state) {
    const {
      polyfillContext
    } = globalThis;

    if (polyfillContext) {
      polyfillContext(gl);
    }

    gl.state = new GLState(gl, {
      copyState
    });
    installProgramSpy(gl);

    for (const key in _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_HOOKED_SETTERS) {
      const setter = _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_HOOKED_SETTERS[key];
      installSetterSpy(gl, key, setter);
    }

    installGetterOverride(gl, 'getParameter');
    installGetterOverride(gl, 'isEnabled');
  }

  gl.state.enable = enable;
  return gl;
}
function pushContextState(gl) {
  if (!gl.state) {
    trackContextState(gl, {
      copyState: false
    });
  }

  gl.state.push();
}
function popContextState(gl) {
  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__.assert)(gl.state);
  gl.state.pop();
}
//# sourceMappingURL=track-context-state.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/unified-parameter-api.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/state-tracker/unified-parameter-api.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getParameters: () => (/* binding */ getParameters),
/* harmony export */   resetParameters: () => (/* binding */ resetParameters),
/* harmony export */   setParameters: () => (/* binding */ setParameters),
/* harmony export */   withParameters: () => (/* binding */ withParameters)
/* harmony export */ });
/* harmony import */ var _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webgl-parameter-tables */ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/webgl-parameter-tables.js");
/* harmony import */ var _track_context_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./track-context-state */ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/track-context-state.js");
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/assert */ "./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js");
/* harmony import */ var _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/webgl-checks */ "./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./node_modules/@luma.gl/gltools/dist/esm/utils/utils.js");





function setParameters(gl, values) {
  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__.assert)((0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_3__.isWebGL)(gl), 'setParameters requires a WebGL context');

  if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.isObjectEmpty)(values)) {
    return;
  }

  const compositeSetters = {};

  for (const key in values) {
    const glConstant = Number(key);
    const setter = _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_SETTERS[key];

    if (setter) {
      if (typeof setter === 'string') {
        compositeSetters[setter] = true;
      } else {
        setter(gl, values[key], glConstant);
      }
    }
  }

  const cache = gl.state && gl.state.cache;

  if (cache) {
    for (const key in compositeSetters) {
      const compositeSetter = _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_COMPOSITE_PARAMETER_SETTERS[key];
      compositeSetter(gl, values, cache);
    }
  }
}
function getParameters(gl, parameters) {
  parameters = parameters || _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_DEFAULTS;

  if (typeof parameters === 'number') {
    const key = parameters;
    const getter = _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_GETTERS[key];
    return getter ? getter(gl, key) : gl.getParameter(key);
  }

  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);
  const state = {};

  for (const key of parameterKeys) {
    const getter = _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_GETTERS[key];
    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
  }

  return state;
}
function resetParameters(gl) {
  setParameters(gl, _webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_DEFAULTS);
}
function withParameters(gl, parameters, func) {
  if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.isObjectEmpty)(parameters)) {
    return func(gl);
  }

  const {
    nocatch = true
  } = parameters;
  (0,_track_context_state__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(gl);
  setParameters(gl, parameters);
  let value;

  if (nocatch) {
    value = func(gl);
    (0,_track_context_state__WEBPACK_IMPORTED_MODULE_1__.popContextState)(gl);
  } else {
    try {
      value = func(gl);
    } finally {
      (0,_track_context_state__WEBPACK_IMPORTED_MODULE_1__.popContextState)(gl);
    }
  }

  return value;
}
//# sourceMappingURL=unified-parameter-api.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/state-tracker/webgl-parameter-tables.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/state-tracker/webgl-parameter-tables.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GL_COMPOSITE_PARAMETER_SETTERS: () => (/* binding */ GL_COMPOSITE_PARAMETER_SETTERS),
/* harmony export */   GL_HOOKED_SETTERS: () => (/* binding */ GL_HOOKED_SETTERS),
/* harmony export */   GL_PARAMETER_DEFAULTS: () => (/* binding */ GL_PARAMETER_DEFAULTS),
/* harmony export */   GL_PARAMETER_GETTERS: () => (/* binding */ GL_PARAMETER_GETTERS),
/* harmony export */   GL_PARAMETER_SETTERS: () => (/* binding */ GL_PARAMETER_SETTERS)
/* harmony export */ });
/* harmony import */ var _utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/webgl-checks */ "./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js");

const GL_PARAMETER_DEFAULTS = {
  [3042]: false,
  [32773]: new Float32Array([0, 0, 0, 0]),
  [32777]: 32774,
  [34877]: 32774,
  [32969]: 1,
  [32968]: 0,
  [32971]: 1,
  [32970]: 0,
  [3106]: new Float32Array([0, 0, 0, 0]),
  [3107]: [true, true, true, true],
  [2884]: false,
  [2885]: 1029,
  [2929]: false,
  [2931]: 1,
  [2932]: 513,
  [2928]: new Float32Array([0, 1]),
  [2930]: true,
  [3024]: true,
  [36006]: null,
  [2886]: 2305,
  [33170]: 4352,
  [2849]: 1,
  [32823]: false,
  [32824]: 0,
  [10752]: 0,
  [32938]: 1.0,
  [32939]: false,
  [3089]: false,
  [3088]: new Int32Array([0, 0, 1024, 1024]),
  [2960]: false,
  [2961]: 0,
  [2968]: 0xffffffff,
  [36005]: 0xffffffff,
  [2962]: 519,
  [2967]: 0,
  [2963]: 0xffffffff,
  [34816]: 519,
  [36003]: 0,
  [36004]: 0xffffffff,
  [2964]: 7680,
  [2965]: 7680,
  [2966]: 7680,
  [34817]: 7680,
  [34818]: 7680,
  [34819]: 7680,
  [2978]: [0, 0, 1024, 1024],
  [3333]: 4,
  [3317]: 4,
  [37440]: false,
  [37441]: false,
  [37443]: 37444,
  [35723]: 4352,
  [36010]: null,
  [35977]: false,
  [3330]: 0,
  [3332]: 0,
  [3331]: 0,
  [3314]: 0,
  [32878]: 0,
  [3316]: 0,
  [3315]: 0,
  [32877]: 0
};

const enable = (gl, value, key) => value ? gl.enable(key) : gl.disable(key);

const hint = (gl, value, key) => gl.hint(key, value);

const pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);

const drawFramebuffer = (gl, value) => {
  const target = (0,_utils_webgl_checks__WEBPACK_IMPORTED_MODULE_0__.isWebGL2)(gl) ? 36009 : 36160;
  return gl.bindFramebuffer(target, value);
};

const readFramebuffer = (gl, value) => {
  return gl.bindFramebuffer(36008, value);
};

function isArray(array) {
  return Array.isArray(array) || ArrayBuffer.isView(array);
}

const GL_PARAMETER_SETTERS = {
  [3042]: enable,
  [32773]: (gl, value) => gl.blendColor(...value),
  [32777]: 'blendEquation',
  [34877]: 'blendEquation',
  [32969]: 'blendFunc',
  [32968]: 'blendFunc',
  [32971]: 'blendFunc',
  [32970]: 'blendFunc',
  [3106]: (gl, value) => gl.clearColor(...value),
  [3107]: (gl, value) => gl.colorMask(...value),
  [2884]: enable,
  [2885]: (gl, value) => gl.cullFace(value),
  [2929]: enable,
  [2931]: (gl, value) => gl.clearDepth(value),
  [2932]: (gl, value) => gl.depthFunc(value),
  [2928]: (gl, value) => gl.depthRange(...value),
  [2930]: (gl, value) => gl.depthMask(value),
  [3024]: enable,
  [35723]: hint,
  [36006]: drawFramebuffer,
  [2886]: (gl, value) => gl.frontFace(value),
  [33170]: hint,
  [2849]: (gl, value) => gl.lineWidth(value),
  [32823]: enable,
  [32824]: 'polygonOffset',
  [10752]: 'polygonOffset',
  [35977]: enable,
  [32938]: 'sampleCoverage',
  [32939]: 'sampleCoverage',
  [3089]: enable,
  [3088]: (gl, value) => gl.scissor(...value),
  [2960]: enable,
  [2961]: (gl, value) => gl.clearStencil(value),
  [2968]: (gl, value) => gl.stencilMaskSeparate(1028, value),
  [36005]: (gl, value) => gl.stencilMaskSeparate(1029, value),
  [2962]: 'stencilFuncFront',
  [2967]: 'stencilFuncFront',
  [2963]: 'stencilFuncFront',
  [34816]: 'stencilFuncBack',
  [36003]: 'stencilFuncBack',
  [36004]: 'stencilFuncBack',
  [2964]: 'stencilOpFront',
  [2965]: 'stencilOpFront',
  [2966]: 'stencilOpFront',
  [34817]: 'stencilOpBack',
  [34818]: 'stencilOpBack',
  [34819]: 'stencilOpBack',
  [2978]: (gl, value) => gl.viewport(...value),
  [3333]: pixelStorei,
  [3317]: pixelStorei,
  [37440]: pixelStorei,
  [37441]: pixelStorei,
  [37443]: pixelStorei,
  [3330]: pixelStorei,
  [3332]: pixelStorei,
  [3331]: pixelStorei,
  [36010]: readFramebuffer,
  [3314]: pixelStorei,
  [32878]: pixelStorei,
  [3316]: pixelStorei,
  [3315]: pixelStorei,
  [32877]: pixelStorei,
  framebuffer: (gl, framebuffer) => {
    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;
    return gl.bindFramebuffer(36160, handle);
  },
  blend: (gl, value) => value ? gl.enable(3042) : gl.disable(3042),
  blendColor: (gl, value) => gl.blendColor(...value),
  blendEquation: (gl, args) => {
    args = isArray(args) ? args : [args, args];
    gl.blendEquationSeparate(...args);
  },
  blendFunc: (gl, args) => {
    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;
    gl.blendFuncSeparate(...args);
  },
  clearColor: (gl, value) => gl.clearColor(...value),
  clearDepth: (gl, value) => gl.clearDepth(value),
  clearStencil: (gl, value) => gl.clearStencil(value),
  colorMask: (gl, value) => gl.colorMask(...value),
  cull: (gl, value) => value ? gl.enable(2884) : gl.disable(2884),
  cullFace: (gl, value) => gl.cullFace(value),
  depthTest: (gl, value) => value ? gl.enable(2929) : gl.disable(2929),
  depthFunc: (gl, value) => gl.depthFunc(value),
  depthMask: (gl, value) => gl.depthMask(value),
  depthRange: (gl, value) => gl.depthRange(...value),
  dither: (gl, value) => value ? gl.enable(3024) : gl.disable(3024),
  derivativeHint: (gl, value) => {
    gl.hint(35723, value);
  },
  frontFace: (gl, value) => gl.frontFace(value),
  mipmapHint: (gl, value) => gl.hint(33170, value),
  lineWidth: (gl, value) => gl.lineWidth(value),
  polygonOffsetFill: (gl, value) => value ? gl.enable(32823) : gl.disable(32823),
  polygonOffset: (gl, value) => gl.polygonOffset(...value),
  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),
  scissorTest: (gl, value) => value ? gl.enable(3089) : gl.disable(3089),
  scissor: (gl, value) => gl.scissor(...value),
  stencilTest: (gl, value) => value ? gl.enable(2960) : gl.disable(2960),
  stencilMask: (gl, value) => {
    value = isArray(value) ? value : [value, value];
    const [mask, backMask] = value;
    gl.stencilMaskSeparate(1028, mask);
    gl.stencilMaskSeparate(1029, backMask);
  },
  stencilFunc: (gl, args) => {
    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;
    const [func, ref, mask, backFunc, backRef, backMask] = args;
    gl.stencilFuncSeparate(1028, func, ref, mask);
    gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);
  },
  stencilOp: (gl, args) => {
    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;
    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;
    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
    gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);
  },
  viewport: (gl, value) => gl.viewport(...value)
};

function getValue(glEnum, values, cache) {
  return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];
}

const GL_COMPOSITE_PARAMETER_SETTERS = {
  blendEquation: (gl, values, cache) => gl.blendEquationSeparate(getValue(32777, values, cache), getValue(34877, values, cache)),
  blendFunc: (gl, values, cache) => gl.blendFuncSeparate(getValue(32969, values, cache), getValue(32968, values, cache), getValue(32971, values, cache), getValue(32970, values, cache)),
  polygonOffset: (gl, values, cache) => gl.polygonOffset(getValue(32824, values, cache), getValue(10752, values, cache)),
  sampleCoverage: (gl, values, cache) => gl.sampleCoverage(getValue(32938, values, cache), getValue(32939, values, cache)),
  stencilFuncFront: (gl, values, cache) => gl.stencilFuncSeparate(1028, getValue(2962, values, cache), getValue(2967, values, cache), getValue(2963, values, cache)),
  stencilFuncBack: (gl, values, cache) => gl.stencilFuncSeparate(1029, getValue(34816, values, cache), getValue(36003, values, cache), getValue(36004, values, cache)),
  stencilOpFront: (gl, values, cache) => gl.stencilOpSeparate(1028, getValue(2964, values, cache), getValue(2965, values, cache), getValue(2966, values, cache)),
  stencilOpBack: (gl, values, cache) => gl.stencilOpSeparate(1029, getValue(34817, values, cache), getValue(34818, values, cache), getValue(34819, values, cache))
};
const GL_HOOKED_SETTERS = {
  enable: (update, capability) => update({
    [capability]: true
  }),
  disable: (update, capability) => update({
    [capability]: false
  }),
  pixelStorei: (update, pname, value) => update({
    [pname]: value
  }),
  hint: (update, pname, hint) => update({
    [pname]: hint
  }),
  bindFramebuffer: (update, target, framebuffer) => {
    switch (target) {
      case 36160:
        return update({
          [36006]: framebuffer,
          [36010]: framebuffer
        });

      case 36009:
        return update({
          [36006]: framebuffer
        });

      case 36008:
        return update({
          [36010]: framebuffer
        });

      default:
        return null;
    }
  },
  blendColor: (update, r, g, b, a) => update({
    [32773]: new Float32Array([r, g, b, a])
  }),
  blendEquation: (update, mode) => update({
    [32777]: mode,
    [34877]: mode
  }),
  blendEquationSeparate: (update, modeRGB, modeAlpha) => update({
    [32777]: modeRGB,
    [34877]: modeAlpha
  }),
  blendFunc: (update, src, dst) => update({
    [32969]: src,
    [32968]: dst,
    [32971]: src,
    [32970]: dst
  }),
  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({
    [32969]: srcRGB,
    [32968]: dstRGB,
    [32971]: srcAlpha,
    [32970]: dstAlpha
  }),
  clearColor: (update, r, g, b, a) => update({
    [3106]: new Float32Array([r, g, b, a])
  }),
  clearDepth: (update, depth) => update({
    [2931]: depth
  }),
  clearStencil: (update, s) => update({
    [2961]: s
  }),
  colorMask: (update, r, g, b, a) => update({
    [3107]: [r, g, b, a]
  }),
  cullFace: (update, mode) => update({
    [2885]: mode
  }),
  depthFunc: (update, func) => update({
    [2932]: func
  }),
  depthRange: (update, zNear, zFar) => update({
    [2928]: new Float32Array([zNear, zFar])
  }),
  depthMask: (update, mask) => update({
    [2930]: mask
  }),
  frontFace: (update, face) => update({
    [2886]: face
  }),
  lineWidth: (update, width) => update({
    [2849]: width
  }),
  polygonOffset: (update, factor, units) => update({
    [32824]: factor,
    [10752]: units
  }),
  sampleCoverage: (update, value, invert) => update({
    [32938]: value,
    [32939]: invert
  }),
  scissor: (update, x, y, width, height) => update({
    [3088]: new Int32Array([x, y, width, height])
  }),
  stencilMask: (update, mask) => update({
    [2968]: mask,
    [36005]: mask
  }),
  stencilMaskSeparate: (update, face, mask) => update({
    [face === 1028 ? 2968 : 36005]: mask
  }),
  stencilFunc: (update, func, ref, mask) => update({
    [2962]: func,
    [2967]: ref,
    [2963]: mask,
    [34816]: func,
    [36003]: ref,
    [36004]: mask
  }),
  stencilFuncSeparate: (update, face, func, ref, mask) => update({
    [face === 1028 ? 2962 : 34816]: func,
    [face === 1028 ? 2967 : 36003]: ref,
    [face === 1028 ? 2963 : 36004]: mask
  }),
  stencilOp: (update, fail, zfail, zpass) => update({
    [2964]: fail,
    [2965]: zfail,
    [2966]: zpass,
    [34817]: fail,
    [34818]: zfail,
    [34819]: zpass
  }),
  stencilOpSeparate: (update, face, fail, zfail, zpass) => update({
    [face === 1028 ? 2964 : 34817]: fail,
    [face === 1028 ? 2965 : 34818]: zfail,
    [face === 1028 ? 2966 : 34819]: zpass
  }),
  viewport: (update, x, y, width, height) => update({
    [2978]: [x, y, width, height]
  })
};

const isEnabled = (gl, key) => gl.isEnabled(key);

const GL_PARAMETER_GETTERS = {
  [3042]: isEnabled,
  [2884]: isEnabled,
  [2929]: isEnabled,
  [3024]: isEnabled,
  [32823]: isEnabled,
  [32926]: isEnabled,
  [32928]: isEnabled,
  [3089]: isEnabled,
  [2960]: isEnabled,
  [35977]: isEnabled
};
//# sourceMappingURL=webgl-parameter-tables.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js":
/*!****************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'luma.gl: assertion failed.');
  }
}
//# sourceMappingURL=assert.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/utils/device-pixels.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/utils/device-pixels.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cssToDevicePixels: () => (/* binding */ cssToDevicePixels),
/* harmony export */   cssToDeviceRatio: () => (/* binding */ cssToDeviceRatio),
/* harmony export */   getDevicePixelRatio: () => (/* binding */ getDevicePixelRatio)
/* harmony export */ });
function cssToDeviceRatio(gl) {
  const {
    luma
  } = gl;

  if (gl.canvas && luma) {
    const cachedSize = luma.canvasSizeInfo;
    const clientWidth = 'clientWidth' in cachedSize ? cachedSize.clientWidth : gl.canvas.clientWidth;
    return clientWidth ? gl.drawingBufferWidth / clientWidth : 1;
  }

  return 1;
}
function cssToDevicePixels(gl, cssPixel) {
  let yInvert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  const ratio = cssToDeviceRatio(gl);
  const width = gl.drawingBufferWidth;
  const height = gl.drawingBufferHeight;
  return scalePixels(cssPixel, ratio, width, height, yInvert);
}
function getDevicePixelRatio(useDevicePixels) {
  const windowRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio || 1;

  if (Number.isFinite(useDevicePixels)) {
    return useDevicePixels <= 0 ? 1 : useDevicePixels;
  }

  return useDevicePixels ? windowRatio : 1;
}

function scalePixels(pixel, ratio, width, height, yInvert) {
  const x = scaleX(pixel[0], ratio, width);
  let y = scaleY(pixel[1], ratio, height, yInvert);
  let t = scaleX(pixel[0] + 1, ratio, width);
  const xHigh = t === width - 1 ? t : t - 1;
  t = scaleY(pixel[1] + 1, ratio, height, yInvert);
  let yHigh;

  if (yInvert) {
    t = t === 0 ? t : t + 1;
    yHigh = y;
    y = t;
  } else {
    yHigh = t === height - 1 ? t : t - 1;
  }

  return {
    x,
    y,
    width: Math.max(xHigh - x + 1, 1),
    height: Math.max(yHigh - y + 1, 1)
  };
}

function scaleX(x, ratio, width) {
  const r = Math.min(Math.round(x * ratio), width - 1);
  return r;
}

function scaleY(y, ratio, height, yInvert) {
  return yInvert ? Math.max(0, height - 1 - Math.round(y * ratio)) : Math.min(Math.round(y * ratio), height - 1);
}
//# sourceMappingURL=device-pixels.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   log: () => (/* binding */ log)
/* harmony export */ });
/* harmony import */ var _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/log */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/log.js");

const log = new _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__.Log({
  id: 'luma.gl'
});
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/utils/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/utils/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepArrayEqual: () => (/* binding */ deepArrayEqual),
/* harmony export */   isObjectEmpty: () => (/* binding */ isObjectEmpty)
/* harmony export */ });
function isObjectEmpty(object) {
  for (const key in object) {
    return false;
  }

  return true;
}
function deepArrayEqual(x, y) {
  if (x === y) {
    return true;
  }

  const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
  const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);

  if (isArrayX && isArrayY && x.length === y.length) {
    for (let i = 0; i < x.length; ++i) {
      if (x[i] !== y[i]) {
        return false;
      }
    }

    return true;
  }

  return false;
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ERR_WEBGL: () => (/* binding */ ERR_WEBGL),
/* harmony export */   ERR_WEBGL2: () => (/* binding */ ERR_WEBGL2),
/* harmony export */   assertWebGL2Context: () => (/* binding */ assertWebGL2Context),
/* harmony export */   assertWebGLContext: () => (/* binding */ assertWebGLContext),
/* harmony export */   getWebGL2Context: () => (/* binding */ getWebGL2Context),
/* harmony export */   isWebGL: () => (/* binding */ isWebGL),
/* harmony export */   isWebGL2: () => (/* binding */ isWebGL2)
/* harmony export */ });
/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ "./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js");

const ERR_CONTEXT = 'Invalid WebGLRenderingContext';
const ERR_WEBGL = ERR_CONTEXT;
const ERR_WEBGL2 = 'Requires WebGL2';
function isWebGL(gl) {
  if (typeof WebGLRenderingContext !== 'undefined' && gl instanceof WebGLRenderingContext) {
    return true;
  }

  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {
    return true;
  }

  return Boolean(gl && Number.isFinite(gl._version));
}
function isWebGL2(gl) {
  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {
    return true;
  }

  return Boolean(gl && gl._version === 2);
}
function getWebGL2Context(gl) {
  return isWebGL2(gl) ? gl : null;
}
function assertWebGLContext(gl) {
  (0,_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(isWebGL(gl), ERR_CONTEXT);
  return gl;
}
function assertWebGL2Context(gl) {
  (0,_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(isWebGL2(gl), ERR_WEBGL2);
  return gl;
}
//# sourceMappingURL=webgl-checks.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/globals.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/globals.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   console: () => (/* binding */ console_),
/* harmony export */   document: () => (/* binding */ document_),
/* harmony export */   global: () => (/* binding */ global_),
/* harmony export */   process: () => (/* binding */ process_),
/* harmony export */   self: () => (/* binding */ self_),
/* harmony export */   window: () => (/* binding */ window_)
/* harmony export */ });
const globals = {
  self: typeof self !== 'undefined' && self,
  window: typeof window !== 'undefined' && window,
  global: typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g,
  document: typeof document !== 'undefined' && document,
  process: typeof process === 'object' && process
};
const global_ = globalThis;
const self_ = globals.self || globals.window || globals.global;
const window_ = globals.window || globals.self || globals.global;
const document_ = globals.document || {};
const process_ = globals.process || {};
const console_ = console;

//# sourceMappingURL=globals.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-browser.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-browser.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isBrowser),
/* harmony export */   isBrowserMainThread: () => (/* binding */ isBrowserMainThread)
/* harmony export */ });
/* harmony import */ var _is_electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-electron */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-electron.js");

function isBrowser() {
  const isNode = typeof process === 'object' && String(process) === '[object process]' && !process.browser;
  return !isNode || (0,_is_electron__WEBPACK_IMPORTED_MODULE_0__["default"])();
}
function isBrowserMainThread() {
  return isBrowser() && typeof document !== 'undefined';
}
//# sourceMappingURL=is-browser.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-electron.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-electron.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isElectron)
/* harmony export */ });
function isElectron(mockUserAgent) {
  if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {
    return true;
  }

  if (typeof process !== 'undefined' && typeof process.versions === 'object' && Boolean(process.versions['electron'])) {
    return true;
  }

  const realUserAgent = typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent;
  const userAgent = mockUserAgent || realUserAgent;

  if (userAgent && userAgent.indexOf('Electron') >= 0) {
    return true;
  }

  return false;
}
//# sourceMappingURL=is-electron.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/utils/globals.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/utils/globals.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION),
/* harmony export */   console: () => (/* reexport safe */ _lib_globals__WEBPACK_IMPORTED_MODULE_0__.console),
/* harmony export */   document: () => (/* reexport safe */ _lib_globals__WEBPACK_IMPORTED_MODULE_0__.document),
/* harmony export */   global: () => (/* reexport safe */ _lib_globals__WEBPACK_IMPORTED_MODULE_0__.global),
/* harmony export */   isBrowser: () => (/* binding */ isBrowser),
/* harmony export */   process: () => (/* reexport safe */ _lib_globals__WEBPACK_IMPORTED_MODULE_0__.process),
/* harmony export */   self: () => (/* reexport safe */ _lib_globals__WEBPACK_IMPORTED_MODULE_0__.self),
/* harmony export */   window: () => (/* reexport safe */ _lib_globals__WEBPACK_IMPORTED_MODULE_0__.window)
/* harmony export */ });
/* harmony import */ var _lib_is_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/is-browser */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-browser.js");
/* harmony import */ var _lib_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/globals */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/globals.js");


const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';
const isBrowser = (0,_lib_is_browser__WEBPACK_IMPORTED_MODULE_1__["default"])();
//# sourceMappingURL=globals.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/log.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/log.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Log: () => (/* binding */ Log),
/* harmony export */   normalizeArguments: () => (/* binding */ normalizeArguments)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-browser.js");
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/utils/globals.js");
/* harmony import */ var _utils_local_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/local-storage */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/local-storage.js");
/* harmony import */ var _utils_formatters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/formatters */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/formatters.js");
/* harmony import */ var _utils_color__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/color */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/color.js");
/* harmony import */ var _utils_autobind__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/autobind */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/autobind.js");
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/assert */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/assert.js");
/* harmony import */ var _utils_hi_res_timestamp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/hi-res-timestamp */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/hi-res-timestamp.js");








const originalConsole = {
  debug: _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__["default"] ? console.debug || console.log : console.log,
  log: console.log,
  info: console.info,
  warn: console.warn,
  error: console.error
};
const DEFAULT_SETTINGS = {
  enabled: true,
  level: 0
};

function noop() {}

const cache = {};
const ONCE = {
  once: true
};
class Log {
  constructor() {
    let {
      id
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      id: ''
    };

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "id", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "VERSION", _probe_gl_env__WEBPACK_IMPORTED_MODULE_2__.VERSION);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_startTs", (0,_utils_hi_res_timestamp__WEBPACK_IMPORTED_MODULE_3__.getHiResTimestamp)());

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_deltaTs", (0,_utils_hi_res_timestamp__WEBPACK_IMPORTED_MODULE_3__.getHiResTimestamp)());

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_storage", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "userData", {});

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "LOG_THROTTLE_TIMEOUT", 0);

    this.id = id;
    this.userData = {};
    this._storage = new _utils_local_storage__WEBPACK_IMPORTED_MODULE_4__.LocalStorage("__probe-".concat(this.id, "__"), DEFAULT_SETTINGS);
    this.timeStamp("".concat(this.id, " started"));
    (0,_utils_autobind__WEBPACK_IMPORTED_MODULE_5__.autobind)(this);
    Object.seal(this);
  }

  set level(newLevel) {
    this.setLevel(newLevel);
  }

  get level() {
    return this.getLevel();
  }

  isEnabled() {
    return this._storage.config.enabled;
  }

  getLevel() {
    return this._storage.config.level;
  }

  getTotal() {
    return Number(((0,_utils_hi_res_timestamp__WEBPACK_IMPORTED_MODULE_3__.getHiResTimestamp)() - this._startTs).toPrecision(10));
  }

  getDelta() {
    return Number(((0,_utils_hi_res_timestamp__WEBPACK_IMPORTED_MODULE_3__.getHiResTimestamp)() - this._deltaTs).toPrecision(10));
  }

  set priority(newPriority) {
    this.level = newPriority;
  }

  get priority() {
    return this.level;
  }

  getPriority() {
    return this.level;
  }

  enable() {
    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this._storage.setConfiguration({
      enabled
    });

    return this;
  }

  setLevel(level) {
    this._storage.setConfiguration({
      level
    });

    return this;
  }

  get(setting) {
    return this._storage.config[setting];
  }

  set(setting, value) {
    this._storage.setConfiguration({
      [setting]: value
    });
  }

  settings() {
    if (console.table) {
      console.table(this._storage.config);
    } else {
      console.log(this._storage.config);
    }
  }

  assert(condition, message) {
    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_6__["default"])(condition, message);
  }

  warn(message) {
    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);
  }

  error(message) {
    return this._getLogFunction(0, message, originalConsole.error, arguments);
  }

  deprecated(oldUsage, newUsage) {
    return this.warn("`".concat(oldUsage, "` is deprecated and will be removed in a later version. Use `").concat(newUsage, "` instead"));
  }

  removed(oldUsage, newUsage) {
    return this.error("`".concat(oldUsage, "` has been removed. Use `").concat(newUsage, "` instead"));
  }

  probe(logLevel, message) {
    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {
      time: true,
      once: true
    });
  }

  log(logLevel, message) {
    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);
  }

  info(logLevel, message) {
    return this._getLogFunction(logLevel, message, console.info, arguments);
  }

  once(logLevel, message) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return this._getLogFunction(logLevel, message, originalConsole.debug || originalConsole.info, arguments, ONCE);
  }

  table(logLevel, table, columns) {
    if (table) {
      return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {
        tag: getTableHeader(table)
      });
    }

    return noop;
  }

  image(_ref) {
    let {
      logLevel,
      priority,
      image,
      message = '',
      scale = 1
    } = _ref;

    if (!this._shouldLog(logLevel || priority)) {
      return noop;
    }

    return _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__["default"] ? logImageInBrowser({
      image,
      message,
      scale
    }) : logImageInNode({
      image,
      message,
      scale
    });
  }

  time(logLevel, message) {
    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);
  }

  timeEnd(logLevel, message) {
    return this._getLogFunction(logLevel, message, console.timeEnd ? console.timeEnd : console.info);
  }

  timeStamp(logLevel, message) {
    return this._getLogFunction(logLevel, message, console.timeStamp || noop);
  }

  group(logLevel, message) {
    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      collapsed: false
    };
    const options = normalizeArguments({
      logLevel,
      message,
      opts
    });
    const {
      collapsed
    } = opts;
    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;
    return this._getLogFunction(options);
  }

  groupCollapsed(logLevel, message) {
    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return this.group(logLevel, message, Object.assign({}, opts, {
      collapsed: true
    }));
  }

  groupEnd(logLevel) {
    return this._getLogFunction(logLevel, '', console.groupEnd || noop);
  }

  withGroup(logLevel, message, func) {
    this.group(logLevel, message)();

    try {
      func();
    } finally {
      this.groupEnd(logLevel)();
    }
  }

  trace() {
    if (console.trace) {
      console.trace();
    }
  }

  _shouldLog(logLevel) {
    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);
  }

  _getLogFunction(logLevel, message, method, args, opts) {
    if (this._shouldLog(logLevel)) {
      opts = normalizeArguments({
        logLevel,
        message,
        args,
        opts
      });
      method = method || opts.method;
      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_6__["default"])(method);
      opts.total = this.getTotal();
      opts.delta = this.getDelta();
      this._deltaTs = (0,_utils_hi_res_timestamp__WEBPACK_IMPORTED_MODULE_3__.getHiResTimestamp)();
      const tag = opts.tag || opts.message;

      if (opts.once) {
        if (!cache[tag]) {
          cache[tag] = (0,_utils_hi_res_timestamp__WEBPACK_IMPORTED_MODULE_3__.getHiResTimestamp)();
        } else {
          return noop;
        }
      }

      message = decorateMessage(this.id, opts.message, opts);
      return method.bind(console, message, ...opts.args);
    }

    return noop;
  }

}

(0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(Log, "VERSION", _probe_gl_env__WEBPACK_IMPORTED_MODULE_2__.VERSION);

function normalizeLogLevel(logLevel) {
  if (!logLevel) {
    return 0;
  }

  let resolvedLevel;

  switch (typeof logLevel) {
    case 'number':
      resolvedLevel = logLevel;
      break;

    case 'object':
      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;
      break;

    default:
      return 0;
  }

  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_6__["default"])(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);
  return resolvedLevel;
}

function normalizeArguments(opts) {
  const {
    logLevel,
    message
  } = opts;
  opts.logLevel = normalizeLogLevel(logLevel);
  const args = opts.args ? Array.from(opts.args) : [];

  while (args.length && args.shift() !== message) {}

  switch (typeof logLevel) {
    case 'string':
    case 'function':
      if (message !== undefined) {
        args.unshift(message);
      }

      opts.message = logLevel;
      break;

    case 'object':
      Object.assign(opts, logLevel);
      break;

    default:
  }

  if (typeof opts.message === 'function') {
    opts.message = opts.message();
  }

  const messageType = typeof opts.message;
  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_6__["default"])(messageType === 'string' || messageType === 'object');
  return Object.assign(opts, {
    args
  }, opts.opts);
}

function decorateMessage(id, message, opts) {
  if (typeof message === 'string') {
    const time = opts.time ? (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_7__.leftPad)((0,_utils_formatters__WEBPACK_IMPORTED_MODULE_7__.formatTime)(opts.total)) : '';
    message = opts.time ? "".concat(id, ": ").concat(time, "  ").concat(message) : "".concat(id, ": ").concat(message);
    message = (0,_utils_color__WEBPACK_IMPORTED_MODULE_8__.addColor)(message, opts.color, opts.background);
  }

  return message;
}

function logImageInNode(_ref2) {
  let {
    image,
    message = '',
    scale = 1
  } = _ref2;
  console.warn('removed');
  return noop;
}

function logImageInBrowser(_ref3) {
  let {
    image,
    message = '',
    scale = 1
  } = _ref3;

  if (typeof image === 'string') {
    const img = new Image();

    img.onload = () => {
      const args = (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_7__.formatImage)(img, message, scale);
      console.log(...args);
    };

    img.src = image;
    return noop;
  }

  const element = image.nodeName || '';

  if (element.toLowerCase() === 'img') {
    console.log(...(0,_utils_formatters__WEBPACK_IMPORTED_MODULE_7__.formatImage)(image, message, scale));
    return noop;
  }

  if (element.toLowerCase() === 'canvas') {
    const img = new Image();

    img.onload = () => console.log(...(0,_utils_formatters__WEBPACK_IMPORTED_MODULE_7__.formatImage)(img, message, scale));

    img.src = image.toDataURL();
    return noop;
  }

  return noop;
}

function getTableHeader(table) {
  for (const key in table) {
    for (const title in table[key]) {
      return title || 'untitled';
    }
  }

  return 'empty';
}
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/assert.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/assert.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ assert)
/* harmony export */ });
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'Assertion failed');
  }
}
//# sourceMappingURL=assert.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/autobind.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/autobind.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   autobind: () => (/* binding */ autobind)
/* harmony export */ });
function autobind(obj) {
  let predefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['constructor'];
  const proto = Object.getPrototypeOf(obj);
  const propNames = Object.getOwnPropertyNames(proto);

  for (const key of propNames) {
    if (typeof obj[key] === 'function') {
      if (!predefined.find(name => key === name)) {
        obj[key] = obj[key].bind(obj);
      }
    }
  }
}
//# sourceMappingURL=autobind.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/color.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/color.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   COLOR: () => (/* binding */ COLOR),
/* harmony export */   addColor: () => (/* binding */ addColor)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-browser.js");

let COLOR;

(function (COLOR) {
  COLOR[COLOR["BLACK"] = 30] = "BLACK";
  COLOR[COLOR["RED"] = 31] = "RED";
  COLOR[COLOR["GREEN"] = 32] = "GREEN";
  COLOR[COLOR["YELLOW"] = 33] = "YELLOW";
  COLOR[COLOR["BLUE"] = 34] = "BLUE";
  COLOR[COLOR["MAGENTA"] = 35] = "MAGENTA";
  COLOR[COLOR["CYAN"] = 36] = "CYAN";
  COLOR[COLOR["WHITE"] = 37] = "WHITE";
  COLOR[COLOR["BRIGHT_BLACK"] = 90] = "BRIGHT_BLACK";
  COLOR[COLOR["BRIGHT_RED"] = 91] = "BRIGHT_RED";
  COLOR[COLOR["BRIGHT_GREEN"] = 92] = "BRIGHT_GREEN";
  COLOR[COLOR["BRIGHT_YELLOW"] = 93] = "BRIGHT_YELLOW";
  COLOR[COLOR["BRIGHT_BLUE"] = 94] = "BRIGHT_BLUE";
  COLOR[COLOR["BRIGHT_MAGENTA"] = 95] = "BRIGHT_MAGENTA";
  COLOR[COLOR["BRIGHT_CYAN"] = 96] = "BRIGHT_CYAN";
  COLOR[COLOR["BRIGHT_WHITE"] = 97] = "BRIGHT_WHITE";
})(COLOR || (COLOR = {}));

function getColor(color) {
  return typeof color === 'string' ? COLOR[color.toUpperCase()] || COLOR.WHITE : color;
}

function addColor(string, color, background) {
  if (!_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__["default"] && typeof string === 'string') {
    if (color) {
      color = getColor(color);
      string = "\x1B[".concat(color, "m").concat(string, "\x1B[39m");
    }

    if (background) {
      color = getColor(background);
      string = "\x1B[".concat(background + 10, "m").concat(string, "\x1B[49m");
    }
  }

  return string;
}
//# sourceMappingURL=color.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/formatters.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/formatters.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatImage: () => (/* binding */ formatImage),
/* harmony export */   formatTime: () => (/* binding */ formatTime),
/* harmony export */   formatValue: () => (/* binding */ formatValue),
/* harmony export */   leftPad: () => (/* binding */ leftPad),
/* harmony export */   rightPad: () => (/* binding */ rightPad)
/* harmony export */ });
function formatTime(ms) {
  let formatted;

  if (ms < 10) {
    formatted = "".concat(ms.toFixed(2), "ms");
  } else if (ms < 100) {
    formatted = "".concat(ms.toFixed(1), "ms");
  } else if (ms < 1000) {
    formatted = "".concat(ms.toFixed(0), "ms");
  } else {
    formatted = "".concat((ms / 1000).toFixed(2), "s");
  }

  return formatted;
}
function leftPad(string) {
  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  const padLength = Math.max(length - string.length, 0);
  return "".concat(' '.repeat(padLength)).concat(string);
}
function rightPad(string) {
  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  const padLength = Math.max(length - string.length, 0);
  return "".concat(string).concat(' '.repeat(padLength));
}
function formatValue(v) {
  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const EPSILON = 1e-16;
  const {
    isInteger = false
  } = opts;

  if (Array.isArray(v) || ArrayBuffer.isView(v)) {
    return formatArrayValue(v, opts);
  }

  if (!Number.isFinite(v)) {
    return String(v);
  }

  if (Math.abs(v) < EPSILON) {
    return isInteger ? '0' : '0.';
  }

  if (isInteger) {
    return v.toFixed(0);
  }

  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {
    return v.toFixed(0);
  }

  const string = v.toPrecision(2);
  const decimal = string.indexOf('.0');
  return decimal === string.length - 2 ? string.slice(0, -1) : string;
}

function formatArrayValue(v, opts) {
  const {
    maxElts = 16,
    size = 1
  } = opts;
  let string = '[';

  for (let i = 0; i < v.length && i < maxElts; ++i) {
    if (i > 0) {
      string += ",".concat(i % size === 0 ? ' ' : '');
    }

    string += formatValue(v[i], opts);
  }

  const terminator = v.length > maxElts ? '...' : ']';
  return "".concat(string).concat(terminator);
}

function formatImage(image, message, scale) {
  let maxWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;
  const imageUrl = image.src.replace(/\(/g, '%28').replace(/\)/g, '%29');

  if (image.width > maxWidth) {
    scale = Math.min(scale, maxWidth / image.width);
  }

  const width = image.width * scale;
  const height = image.height * scale;
  const style = ['font-size:1px;', "padding:".concat(Math.floor(height / 2), "px ").concat(Math.floor(width / 2), "px;"), "line-height:".concat(height, "px;"), "background:url(".concat(imageUrl, ");"), "background-size:".concat(width, "px ").concat(height, "px;"), 'color:transparent;'].join('');
  return ["".concat(message, " %c+"), style];
}
//# sourceMappingURL=formatters.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/hi-res-timestamp.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/hi-res-timestamp.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getHiResTimestamp: () => (/* binding */ getHiResTimestamp)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/is-browser.js");
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/env/dist/esm/lib/globals.js");

function getHiResTimestamp() {
  let timestamp;

  if (_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__["default"] && "performance" in _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window) {
    var _window$performance, _window$performance$n;

    timestamp = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window === null || _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window === void 0 ? void 0 : (_window$performance = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window.performance) === null || _window$performance === void 0 ? void 0 : (_window$performance$n = _window$performance.now) === null || _window$performance$n === void 0 ? void 0 : _window$performance$n.call(_window$performance);
  } else if ("hrtime" in _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process) {
    var _process$hrtime;

    const timeParts = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process === null || _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process === void 0 ? void 0 : (_process$hrtime = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process.hrtime) === null || _process$hrtime === void 0 ? void 0 : _process$hrtime.call(_probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process);
    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;
  } else {
    timestamp = Date.now();
  }

  return timestamp;
}
//# sourceMappingURL=hi-res-timestamp.js.map

/***/ }),

/***/ "./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/local-storage.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@luma.gl/gltools/node_modules/@probe.gl/log/dist/esm/utils/local-storage.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalStorage: () => (/* binding */ LocalStorage)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");


function getStorage(type) {
  try {
    const storage = window[type];
    const x = '__storage_test__';
    storage.setItem(x, x);
    storage.removeItem(x);
    return storage;
  } catch (e) {
    return null;
  }
}

class LocalStorage {
  constructor(id, defaultConfig) {
    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "storage", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "id", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "config", void 0);

    this.storage = getStorage(type);
    this.id = id;
    this.config = defaultConfig;

    this._loadConfiguration();
  }

  getConfiguration() {
    return this.config;
  }

  setConfiguration(configuration) {
    Object.assign(this.config, configuration);

    if (this.storage) {
      const serialized = JSON.stringify(this.config);
      this.storage.setItem(this.id, serialized);
    }
  }

  _loadConfiguration() {
    let configuration = {};

    if (this.storage) {
      const serializedConfiguration = this.storage.getItem(this.id);
      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};
    }

    Object.assign(this.config, configuration);
    return this;
  }

}
//# sourceMappingURL=local-storage.js.map

/***/ }),

/***/ "./node_modules/@mapbox/martini/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@mapbox/martini/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Martini)
/* harmony export */ });

class Martini {
    constructor(gridSize = 257) {
        this.gridSize = gridSize;
        const tileSize = gridSize - 1;
        if (tileSize & (tileSize - 1)) throw new Error(
            `Expected grid size to be 2^n+1, got ${gridSize}.`);

        this.numTriangles = tileSize * tileSize * 2 - 2;
        this.numParentTriangles = this.numTriangles - tileSize * tileSize;

        this.indices = new Uint32Array(this.gridSize * this.gridSize);

        // coordinates for all possible triangles in an RTIN tile
        this.coords = new Uint16Array(this.numTriangles * 4);

        // get triangle coordinates from its index in an implicit binary tree
        for (let i = 0; i < this.numTriangles; i++) {
            let id = i + 2;
            let ax = 0, ay = 0, bx = 0, by = 0, cx = 0, cy = 0;
            if (id & 1) {
                bx = by = cx = tileSize; // bottom-left triangle
            } else {
                ax = ay = cy = tileSize; // top-right triangle
            }
            while ((id >>= 1) > 1) {
                const mx = (ax + bx) >> 1;
                const my = (ay + by) >> 1;

                if (id & 1) { // left half
                    bx = ax; by = ay;
                    ax = cx; ay = cy;
                } else { // right half
                    ax = bx; ay = by;
                    bx = cx; by = cy;
                }
                cx = mx; cy = my;
            }
            const k = i * 4;
            this.coords[k + 0] = ax;
            this.coords[k + 1] = ay;
            this.coords[k + 2] = bx;
            this.coords[k + 3] = by;
        }
    }

    createTile(terrain) {
        return new Tile(terrain, this);
    }
}

class Tile {
    constructor(terrain, martini) {
        const size = martini.gridSize;
        if (terrain.length !== size * size) throw new Error(
            `Expected terrain data of length ${size * size} (${size} x ${size}), got ${terrain.length}.`);

        this.terrain = terrain;
        this.martini = martini;
        this.errors = new Float32Array(terrain.length);
        this.update();
    }

    update() {
        const {numTriangles, numParentTriangles, coords, gridSize: size} = this.martini;
        const {terrain, errors} = this;

        // iterate over all possible triangles, starting from the smallest level
        for (let i = numTriangles - 1; i >= 0; i--) {
            const k = i * 4;
            const ax = coords[k + 0];
            const ay = coords[k + 1];
            const bx = coords[k + 2];
            const by = coords[k + 3];
            const mx = (ax + bx) >> 1;
            const my = (ay + by) >> 1;
            const cx = mx + my - ay;
            const cy = my + ax - mx;

            // calculate error in the middle of the long edge of the triangle
            const interpolatedHeight = (terrain[ay * size + ax] + terrain[by * size + bx]) / 2;
            const middleIndex = my * size + mx;
            const middleError = Math.abs(interpolatedHeight - terrain[middleIndex]);

            errors[middleIndex] = Math.max(errors[middleIndex], middleError);

            if (i < numParentTriangles) { // bigger triangles; accumulate error with children
                const leftChildIndex = ((ay + cy) >> 1) * size + ((ax + cx) >> 1);
                const rightChildIndex = ((by + cy) >> 1) * size + ((bx + cx) >> 1);
                errors[middleIndex] = Math.max(errors[middleIndex], errors[leftChildIndex], errors[rightChildIndex]);
            }
        }
    }

    getMesh(maxError = 0) {
        const {gridSize: size, indices} = this.martini;
        const {errors} = this;
        let numVertices = 0;
        let numTriangles = 0;
        const max = size - 1;

        // use an index grid to keep track of vertices that were already used to avoid duplication
        indices.fill(0);

        // retrieve mesh in two stages that both traverse the error map:
        // - countElements: find used vertices (and assign each an index), and count triangles (for minimum allocation)
        // - processTriangle: fill the allocated vertices & triangles typed arrays

        function countElements(ax, ay, bx, by, cx, cy) {
            const mx = (ax + bx) >> 1;
            const my = (ay + by) >> 1;

            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {
                countElements(cx, cy, ax, ay, mx, my);
                countElements(bx, by, cx, cy, mx, my);
            } else {
                indices[ay * size + ax] = indices[ay * size + ax] || ++numVertices;
                indices[by * size + bx] = indices[by * size + bx] || ++numVertices;
                indices[cy * size + cx] = indices[cy * size + cx] || ++numVertices;
                numTriangles++;
            }
        }
        countElements(0, 0, max, max, max, 0);
        countElements(max, max, 0, 0, 0, max);

        const vertices = new Uint16Array(numVertices * 2);
        const triangles = new Uint32Array(numTriangles * 3);
        let triIndex = 0;

        function processTriangle(ax, ay, bx, by, cx, cy) {
            const mx = (ax + bx) >> 1;
            const my = (ay + by) >> 1;

            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {
                // triangle doesn't approximate the surface well enough; drill down further
                processTriangle(cx, cy, ax, ay, mx, my);
                processTriangle(bx, by, cx, cy, mx, my);

            } else {
                // add a triangle
                const a = indices[ay * size + ax] - 1;
                const b = indices[by * size + bx] - 1;
                const c = indices[cy * size + cx] - 1;

                vertices[2 * a] = ax;
                vertices[2 * a + 1] = ay;

                vertices[2 * b] = bx;
                vertices[2 * b + 1] = by;

                vertices[2 * c] = cx;
                vertices[2 * c + 1] = cy;

                triangles[triIndex++] = a;
                triangles[triIndex++] = b;
                triangles[triIndex++] = c;
            }
        }
        processTriangle(0, 0, max, max, max, 0);
        processTriangle(max, max, 0, 0, 0, max);

        return {vertices, triangles};
    }
}


/***/ }),

/***/ "./node_modules/earcut/src/earcut.js":
/*!*******************************************!*\
  !*** ./node_modules/earcut/src/earcut.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


module.exports = earcut;
module.exports["default"] = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode || outerNode.next === outerNode.prev) return triangles;

    var minX, minY, maxX, maxY, x, y, invSize;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 32767 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);

            removeNode(ear);

            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

    var p = c.next;
    while (p !== a) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(x0, y0, minX, minY, invSize),
        maxZ = zOrder(x1, y1, minX, minY, invSize);

    var p = ear.prevZ,
        n = ear.nextZ;

    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;

        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return filterPoints(p);
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        outerNode = eliminateHole(queue[i], outerNode);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    var bridge = findHoleBridge(hole, outerNode);
    if (!bridge) {
        return outerNode;
    }

    var bridgeReverse = splitPolygon(bridge, hole);

    // filter collinear points around the cuts
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m;

    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if (locallyInside(p, hole) &&
                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    } while (p !== stop);

    return m;
}

// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&
           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&
           (bx - px) * (cy - py) >= (cx - px) * (by - py);
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    var o1 = sign(area(p1, q1, p2));
    var o2 = sign(area(p1, q1, q2));
    var o3 = sign(area(p2, q2, p1));
    var o4 = sign(area(p2, q2, q1));

    if (o1 !== o2 && o3 !== o4) return true; // general case

    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

    return false;
}

// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}

function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = 0;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};


/***/ }),

/***/ "./node_modules/hammerjs/hammer.js":
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
  'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}

/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}

/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;

    if (!obj) {
        return;
    }

    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}

/**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */
function deprecate(method, name, message) {
    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
    return function() {
        var e = new Error('get-stack-trace');
        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

        var log = window.console && (window.console.warn || window.console.log);
        if (log) {
            log.call(window.console, deprecationMessage, stack);
        }
        return method.apply(this, arguments);
    };
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */
var assign;
if (typeof Object.assign !== 'function') {
    assign = function assign(target) {
        if (target === undefined || target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var output = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                    if (source.hasOwnProperty(nextKey)) {
                        output[nextKey] = source[nextKey];
                    }
                }
            }
        }
        return output;
    };
} else {
    assign = Object.assign;
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */
var extend = deprecate(function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
        if (!merge || (merge && dest[keys[i]] === undefined)) {
            dest[keys[i]] = src[keys[i]];
        }
        i++;
    }
    return dest;
}, 'extend', 'Use `assign`.');

/**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */
var merge = deprecate(function merge(dest, src) {
    return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;

    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
        assign(childP, properties);
    }
}

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}

/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}

/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return (val1 === undefined) ? val2 : val1;
}

/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.addEventListener(type, handler, false);
    });
}

/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.removeEventListener(type, handler, false);
    });
}

/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}

/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}

/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}

/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}

/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}

/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }

    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
    }

    return results;
}

/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);

    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = (prefix) ? prefix + camelProp : property;

        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}

/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}

/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;

    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };

    this.init();

}

Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function() { },

    /**
     * bind the events
     */
    init: function() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },

    /**
     * unbind the events
     */
    destroy: function() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};

/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;

    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new (Type)(manager, inputHandler);
}

/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
        manager.session = {};
    }

    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;

    // compute scale, rotation etc
    computeInputData(manager, input);

    // emit secret event
    manager.emit('hammer.input', input);

    manager.recognize(input);
    manager.session.prevInput = input;
}

/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;

    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }

    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }

    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;

    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);

    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

    computeIntervalInputData(session, input);

    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}

function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };

        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}

/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity, velocityX, velocityY, direction;

    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;

        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);

        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}

/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }

    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}

/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;

    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }

    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }

    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}

/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}

/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];

    return Math.sqrt((x * x) + (y * y));
}

/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}

/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;

    this.pressed = false; // mousedown state

    Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];

        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }

        // mouse must be down
        if (!this.pressed) {
            return;
        }

        if (eventType & INPUT_END) {
            this.pressed = false;
        }

        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});

var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};

// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
if (window.MSPointerEvent && !window.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;

    Input.apply(this, arguments);

    this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;

        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }

        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }

        // update the event in the store
        store[storeIndex] = ev;

        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });

        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});

var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;

    Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }

        if (!this.started) {
            return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type);

        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
}

var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};

    Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;

    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }

    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;

    // get target touches from touches
    targetTouches = allTouches.filter(function(touch) {
        return hasParent(touch.target, target);
    });

    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }

    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }

        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }

    if (!changedTargetTouches.length) {
        return;
    }

    return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
        changedTargetTouches
    ];
}

/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */

var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
    Input.apply(this, arguments);

    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);

    this.primaryTouch = null;
    this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
        }

        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
        if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
        }

        this.callback(manager, inputEvent, inputData);
    },

    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});

function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
        this.primaryTouch = eventData.changedPointers[0].identifier;
        setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        setLastTouch.call(this, eventData);
    }
}

function setLastTouch(eventData) {
    var touch = eventData.changedPointers[0];

    if (touch.identifier === this.primaryTouch) {
        var lastTouch = {x: touch.clientX, y: touch.clientY};
        this.lastTouches.push(lastTouch);
        var lts = this.lastTouches;
        var removeLastTouch = function() {
            var i = lts.indexOf(lastTouch);
            if (i > -1) {
                lts.splice(i, 1);
            }
        };
        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
}

function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
    for (var i = 0; i < this.lastTouches.length; i++) {
        var t = this.lastTouches[i];
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
        }
    }
    return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}

TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }

        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },

    /**
     * just re-set the touchAction value
     */
    update: function() {
        this.set(this.manager.options.touchAction);
    },

    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function() {
        var actions = [];
        each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },

    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function(input) {
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;

        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }

        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

        if (hasNone) {
            //do not prevent defaults if this is a tap gesture

            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;

            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }

        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }

        if (hasNone ||
            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
            (hasPanX && direction & DIRECTION_VERTICAL)) {
            return this.preventSrc(srcEvent);
        }
    },

    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};

/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }

    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }

    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
        return false;
    }
    var touchMap = {};
    var cssSupports = window.CSS && window.CSS.supports;
    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

        // If css.supports is not supported but there is native touch-action assume it supports
        // all values. This is the case for IE 10 and 11.
        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
    });
    return touchMap;
}

/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = assign({}, this.defaults, options || {});

    this.id = uniqueId();

    this.manager = null;

    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);

    this.state = STATE_POSSIBLE;

    this.simultaneous = {};
    this.requireFail = [];
}

Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},

    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function(options) {
        assign(this.options, options);

        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },

    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },

    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },

    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },

    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },

    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function() {
        return this.requireFail.length > 0;
    },

    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },

    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function(input) {
        var self = this;
        var state = this.state;

        function emit(event) {
            self.manager.emit(event, input);
        }

        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }

        emit(self.options.event); // simple 'eventName' events

        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
        }

        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },

    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },

    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },

    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = assign({}, inputData);

        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }

        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone);

        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },

    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function(inputData) { }, // jshint ignore:line

    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function() { },

    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function() { }
};

/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}

/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}

/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}

/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },

    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },

    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function(input) {
        var state = this.state;
        var eventType = input.eventType;

        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);

        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});

/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);

    this.pX = null;
    this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },

    getTouchAction: function() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },

    directionTest: function(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;

        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },

    attrTest: function(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) &&
            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
    },

    emit: function(input) {

        this.pX = input.deltaX;
        this.pY = input.deltaY;

        var direction = directionStr(input.direction);

        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },

    emit: function(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);

    this._timer = null;
    this._input = null;
}

inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251, // minimal time of the pointer to be pressed
        threshold: 9 // a minimal movement is ok, but keep it low
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_AUTO];
    },

    process: function(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;

        this._input = input;

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }

        if (input && (input.eventType & INPUT_END)) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});

/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },

    getTouchAction: function() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },

    attrTest: function(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }

        return this._super.attrTest.call(this, input) &&
            direction & input.offsetDirection &&
            input.distance > this.options.threshold &&
            input.maxPointers == this.options.pointers &&
            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },

    emit: function(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
    }
});

/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);

    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;

    this._timer = null;
    this._input = null;
    this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300, // max time between the multi-tap taps
        time: 250, // max time of the pointer to be down (like finger on the screen)
        threshold: 9, // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_MANIPULATION];
    },

    process: function(input) {
        var options = this.options;

        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;

        this.reset();

        if ((input.eventType & INPUT_START) && (this.count === 0)) {
            return this.failTimeout();
        }

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }

            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }

            this._input = input;

            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },

    failTimeout: function() {
        this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
}

/**
 * @const {string}
 */
Hammer.VERSION = '2.0.7';

/**
 * default settings
 * @namespace
 */
Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, {enable: false}],
        [PinchRecognizer, {enable: false}, ['rotate']],
        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
        [TapRecognizer],
        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
        [PressRecognizer]
    ],

    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};

var STOP = 1;
var FORCED_STOP = 2;

/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = assign({}, Hammer.defaults, options || {});

    this.options.inputTarget = this.options.inputTarget || element;

    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};

    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);

    toggleCssProps(this, true);

    each(this.options.recognizers, function(item) {
        var recognizer = this.add(new (item[0])(item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}

Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function(options) {
        assign(this.options, options);

        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },

    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },

    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }

        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);

        var recognizer;
        var recognizers = this.recognizers;

        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;

        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
            curRecognizer = session.curRecognizer = null;
        }

        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];

            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }

            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },

    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }

        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },

    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }

        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;

        this.touchAction.update();
        return recognizer;
    },

    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }

        recognizer = this.get(recognizer);

        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);

            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }

        return this;
    },

    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function(events, handler) {
        if (events === undefined) {
            return;
        }
        if (handler === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },

    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function(events, handler) {
        if (events === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },

    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }

        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }

        data.type = event;
        data.preventDefault = function() {
            data.srcEvent.preventDefault();
        };

        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },

    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function() {
        this.element && toggleCssProps(this, false);

        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};

/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    var prop;
    each(manager.options.cssProps, function(value, name) {
        prop = prefixed(element.style, name);
        if (add) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
        } else {
            element.style[prop] = manager.oldCssProps[prop] || '';
        }
    });
    if (!add) {
        manager.oldCssProps = {};
    }
}

/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,

    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,

    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,

    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,

    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,

    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,

    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    assign: assign,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.
var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
        return Hammer;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}

})(window, document, 'Hammer');


/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/constants.js":
/*!*******************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/constants.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BASIC_EVENT_ALIASES: () => (/* binding */ BASIC_EVENT_ALIASES),
/* harmony export */   EVENT_RECOGNIZER_MAP: () => (/* binding */ EVENT_RECOGNIZER_MAP),
/* harmony export */   GESTURE_EVENT_ALIASES: () => (/* binding */ GESTURE_EVENT_ALIASES),
/* harmony export */   INPUT_EVENT_TYPES: () => (/* binding */ INPUT_EVENT_TYPES),
/* harmony export */   RECOGNIZERS: () => (/* binding */ RECOGNIZERS),
/* harmony export */   RECOGNIZER_COMPATIBLE_MAP: () => (/* binding */ RECOGNIZER_COMPATIBLE_MAP),
/* harmony export */   RECOGNIZER_FALLBACK_MAP: () => (/* binding */ RECOGNIZER_FALLBACK_MAP)
/* harmony export */ });
/* harmony import */ var _utils_hammer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/hammer */ "./node_modules/mjolnir.js/dist/esm/utils/hammer.browser.js");

// This module contains constants that must be conditionally required
// due to `window`/`document` references downstream.
const RECOGNIZERS = _utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"]
    ? [
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Pan, { event: 'tripan', pointers: 3, threshold: 0, enable: false }],
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Rotate, { enable: false }],
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Pinch, { enable: false }],
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Swipe, { enable: false }],
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Pan, { threshold: 0, enable: false }],
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Press, { enable: false }],
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Tap, { event: 'doubletap', taps: 2, enable: false }],
        // TODO - rename to 'tap' and 'singletap' in the next major release
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Tap, { event: 'anytap', enable: false }],
        [_utils_hammer__WEBPACK_IMPORTED_MODULE_0__["default"].Tap, { enable: false }]
    ]
    : null;
// Recognize the following gestures even if a given recognizer succeeds
const RECOGNIZER_COMPATIBLE_MAP = {
    tripan: ['rotate', 'pinch', 'pan'],
    rotate: ['pinch'],
    pinch: ['pan'],
    pan: ['press', 'doubletap', 'anytap', 'tap'],
    doubletap: ['anytap'],
    anytap: ['tap']
};
// Recognize the folling gestures only if a given recognizer fails
const RECOGNIZER_FALLBACK_MAP = {
    doubletap: ['tap']
};
/**
 * Only one set of basic input events will be fired by Hammer.js:
 * either pointer, touch, or mouse, depending on system support.
 * In order to enable an application to be agnostic of system support,
 * alias basic input events into "classes" of events: down, move, and up.
 * See `_onBasicInput()` for usage of these aliases.
 */
const BASIC_EVENT_ALIASES = {
    pointerdown: 'pointerdown',
    pointermove: 'pointermove',
    pointerup: 'pointerup',
    touchstart: 'pointerdown',
    touchmove: 'pointermove',
    touchend: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove',
    mouseup: 'pointerup'
};
const INPUT_EVENT_TYPES = {
    KEY_EVENTS: ['keydown', 'keyup'],
    MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],
    WHEEL_EVENTS: [
        // Chrome, Safari
        'wheel',
        // IE
        'mousewheel'
    ]
};
/**
 * "Gestural" events are those that have semantic meaning beyond the basic input event,
 * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.
 * Hammer.js handles these with its Recognizer system;
 * this block maps event names to the Recognizers required to detect the events.
 */
const EVENT_RECOGNIZER_MAP = {
    tap: 'tap',
    anytap: 'anytap',
    doubletap: 'doubletap',
    press: 'press',
    pinch: 'pinch',
    pinchin: 'pinch',
    pinchout: 'pinch',
    pinchstart: 'pinch',
    pinchmove: 'pinch',
    pinchend: 'pinch',
    pinchcancel: 'pinch',
    rotate: 'rotate',
    rotatestart: 'rotate',
    rotatemove: 'rotate',
    rotateend: 'rotate',
    rotatecancel: 'rotate',
    tripan: 'tripan',
    tripanstart: 'tripan',
    tripanmove: 'tripan',
    tripanup: 'tripan',
    tripandown: 'tripan',
    tripanleft: 'tripan',
    tripanright: 'tripan',
    tripanend: 'tripan',
    tripancancel: 'tripan',
    pan: 'pan',
    panstart: 'pan',
    panmove: 'pan',
    panup: 'pan',
    pandown: 'pan',
    panleft: 'pan',
    panright: 'pan',
    panend: 'pan',
    pancancel: 'pan',
    swipe: 'swipe',
    swipeleft: 'swipe',
    swiperight: 'swipe',
    swipeup: 'swipe',
    swipedown: 'swipe'
};
/**
 * Map gestural events typically provided by browsers
 * that are not reported in 'hammer.input' events
 * to corresponding Hammer.js gestures.
 */
const GESTURE_EVENT_ALIASES = {
    click: 'tap',
    anyclick: 'anytap',
    dblclick: 'doubletap',
    mousedown: 'pointerdown',
    mousemove: 'pointermove',
    mouseup: 'pointerup',
    mouseover: 'pointerover',
    mouseout: 'pointerout',
    mouseleave: 'pointerleave'
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/event-manager.js":
/*!***********************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/event-manager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventManager)
/* harmony export */ });
/* harmony import */ var _utils_hammer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/hammer */ "./node_modules/mjolnir.js/dist/esm/utils/hammer.browser.js");
/* harmony import */ var _inputs_wheel_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inputs/wheel-input */ "./node_modules/mjolnir.js/dist/esm/inputs/wheel-input.js");
/* harmony import */ var _inputs_move_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inputs/move-input */ "./node_modules/mjolnir.js/dist/esm/inputs/move-input.js");
/* harmony import */ var _inputs_key_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./inputs/key-input */ "./node_modules/mjolnir.js/dist/esm/inputs/key-input.js");
/* harmony import */ var _inputs_contextmenu_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./inputs/contextmenu-input */ "./node_modules/mjolnir.js/dist/esm/inputs/contextmenu-input.js");
/* harmony import */ var _utils_event_registrar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/event-registrar */ "./node_modules/mjolnir.js/dist/esm/utils/event-registrar.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */ "./node_modules/mjolnir.js/dist/esm/constants.js");







const DEFAULT_OPTIONS = {
    // event handlers
    events: null,
    // custom recognizers
    recognizers: null,
    recognizerOptions: {},
    // Manager class
    Manager: _utils_hammer__WEBPACK_IMPORTED_MODULE_0__.Manager,
    // allow browser default touch action
    // https://github.com/uber/react-map-gl/issues/506
    touchAction: 'none',
    tabIndex: 0
};
// Unified API for subscribing to events about both
// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')
// and gestural input (e.g. 'click', 'tap', 'panstart').
// Delegates gesture related event registration and handling to Hammer.js.
class EventManager {
    constructor(element = null, options) {
        /**
         * Handle basic events using the 'hammer.input' Hammer.js API:
         * Before running Recognizers, Hammer emits a 'hammer.input' event
         * with the basic event info. This function emits all basic events
         * aliased to the "class" of event received.
         * See constants.BASIC_EVENT_CLASSES basic event class definitions.
         */
        this._onBasicInput = (event) => {
            const { srcEvent } = event;
            const alias = _constants__WEBPACK_IMPORTED_MODULE_6__.BASIC_EVENT_ALIASES[srcEvent.type];
            if (alias) {
                // fire all events aliased to srcEvent.type
                this.manager.emit(alias, event);
            }
        };
        /**
         * Handle events not supported by Hammer.js,
         * and pipe back out through same (Hammer) channel used by other events.
         */
        this._onOtherEvent = (event) => {
            // console.log('onotherevent', event.type, event)
            this.manager.emit(event.type, event);
        };
        this.options = { ...DEFAULT_OPTIONS, ...options };
        this.events = new Map();
        this.setElement(element);
        // Register all passed events.
        const { events } = this.options;
        if (events) {
            this.on(events);
        }
    }
    getElement() {
        return this.element;
    }
    setElement(element) {
        if (this.element) {
            // unregister all events
            this.destroy();
        }
        this.element = element;
        if (!element) {
            return;
        }
        const { options } = this;
        const ManagerClass = options.Manager;
        this.manager = new ManagerClass(element, {
            touchAction: options.touchAction,
            recognizers: options.recognizers || _constants__WEBPACK_IMPORTED_MODULE_6__.RECOGNIZERS
        }).on('hammer.input', this._onBasicInput);
        if (!options.recognizers) {
            // Set default recognize withs
            // http://hammerjs.github.io/recognize-with/
            Object.keys(_constants__WEBPACK_IMPORTED_MODULE_6__.RECOGNIZER_COMPATIBLE_MAP).forEach(name => {
                const recognizer = this.manager.get(name);
                if (recognizer) {
                    _constants__WEBPACK_IMPORTED_MODULE_6__.RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {
                        recognizer.recognizeWith(otherName);
                    });
                }
            });
        }
        // Set recognizer options
        for (const recognizerName in options.recognizerOptions) {
            const recognizer = this.manager.get(recognizerName);
            if (recognizer) {
                const recognizerOption = options.recognizerOptions[recognizerName];
                // `enable` is managed by the event registrations
                delete recognizerOption.enable;
                recognizer.set(recognizerOption);
            }
        }
        // Handle events not handled by Hammer.js:
        // - mouse wheel
        // - pointer/touch/mouse move
        this.wheelInput = new _inputs_wheel_input__WEBPACK_IMPORTED_MODULE_1__["default"](element, this._onOtherEvent, {
            enable: false
        });
        this.moveInput = new _inputs_move_input__WEBPACK_IMPORTED_MODULE_2__["default"](element, this._onOtherEvent, {
            enable: false
        });
        this.keyInput = new _inputs_key_input__WEBPACK_IMPORTED_MODULE_3__["default"](element, this._onOtherEvent, {
            enable: false,
            tabIndex: options.tabIndex
        });
        this.contextmenuInput = new _inputs_contextmenu_input__WEBPACK_IMPORTED_MODULE_4__["default"](element, this._onOtherEvent, {
            enable: false
        });
        // Register all existing events
        for (const [eventAlias, eventRegistrar] of this.events) {
            if (!eventRegistrar.isEmpty()) {
                // Enable recognizer for this event.
                this._toggleRecognizer(eventRegistrar.recognizerName, true);
                this.manager.on(eventAlias, eventRegistrar.handleEvent);
            }
        }
    }
    // Tear down internal event management implementations.
    destroy() {
        if (this.element) {
            // wheelInput etc. are created in setElement() and therefore
            // cannot exist if there is no element
            this.wheelInput.destroy();
            this.moveInput.destroy();
            this.keyInput.destroy();
            this.contextmenuInput.destroy();
            this.manager.destroy();
            this.wheelInput = null;
            this.moveInput = null;
            this.keyInput = null;
            this.contextmenuInput = null;
            this.manager = null;
            this.element = null;
        }
    }
    /** Register an event handler function to be called on `event` */
    on(event, handler, opts) {
        this._addEventHandler(event, handler, opts, false);
    }
    once(event, handler, opts) {
        this._addEventHandler(event, handler, opts, true);
    }
    watch(event, handler, opts) {
        this._addEventHandler(event, handler, opts, false, true);
    }
    off(event, handler) {
        this._removeEventHandler(event, handler);
    }
    /*
     * Enable/disable recognizer for the given event
     */
    _toggleRecognizer(name, enabled) {
        const { manager } = this;
        if (!manager) {
            return;
        }
        const recognizer = manager.get(name);
        // @ts-ignore
        if (recognizer && recognizer.options.enable !== enabled) {
            recognizer.set({ enable: enabled });
            const fallbackRecognizers = _constants__WEBPACK_IMPORTED_MODULE_6__.RECOGNIZER_FALLBACK_MAP[name];
            if (fallbackRecognizers && !this.options.recognizers) {
                // Set default require failures
                // http://hammerjs.github.io/require-failure/
                fallbackRecognizers.forEach(otherName => {
                    const otherRecognizer = manager.get(otherName);
                    if (enabled) {
                        // Wait for this recognizer to fail
                        otherRecognizer.requireFailure(name);
                        /**
                         * This seems to be a bug in hammerjs:
                         * requireFailure() adds both ways
                         * dropRequireFailure() only drops one way
                         * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/
                           recognizer-constructor.js#L136
                         */
                        recognizer.dropRequireFailure(otherName);
                    }
                    else {
                        // Do not wait for this recognizer to fail
                        otherRecognizer.dropRequireFailure(name);
                    }
                });
            }
        }
        this.wheelInput.enableEventType(name, enabled);
        this.moveInput.enableEventType(name, enabled);
        this.keyInput.enableEventType(name, enabled);
        this.contextmenuInput.enableEventType(name, enabled);
    }
    /**
     * Process the event registration for a single event + handler.
     */
    _addEventHandler(event, handler, opts, once, passive) {
        if (typeof event !== 'string') {
            // @ts-ignore
            opts = handler;
            // If `event` is a map, call `on()` for each entry.
            for (const eventName in event) {
                this._addEventHandler(eventName, event[eventName], opts, once, passive);
            }
            return;
        }
        const { manager, events } = this;
        // Alias to a recognized gesture as necessary.
        const eventAlias = _constants__WEBPACK_IMPORTED_MODULE_6__.GESTURE_EVENT_ALIASES[event] || event;
        let eventRegistrar = events.get(eventAlias);
        if (!eventRegistrar) {
            eventRegistrar = new _utils_event_registrar__WEBPACK_IMPORTED_MODULE_5__["default"](this);
            events.set(eventAlias, eventRegistrar);
            // Enable recognizer for this event.
            eventRegistrar.recognizerName = _constants__WEBPACK_IMPORTED_MODULE_6__.EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias;
            // Listen to the event
            if (manager) {
                manager.on(eventAlias, eventRegistrar.handleEvent);
            }
        }
        eventRegistrar.add(event, handler, opts, once, passive);
        if (!eventRegistrar.isEmpty()) {
            this._toggleRecognizer(eventRegistrar.recognizerName, true);
        }
    }
    /**
     * Process the event deregistration for a single event + handler.
     */
    _removeEventHandler(event, handler) {
        if (typeof event !== 'string') {
            // If `event` is a map, call `off()` for each entry.
            for (const eventName in event) {
                this._removeEventHandler(eventName, event[eventName]);
            }
            return;
        }
        const { events } = this;
        // Alias to a recognized gesture as necessary.
        const eventAlias = _constants__WEBPACK_IMPORTED_MODULE_6__.GESTURE_EVENT_ALIASES[event] || event;
        const eventRegistrar = events.get(eventAlias);
        if (!eventRegistrar) {
            return;
        }
        eventRegistrar.remove(event, handler);
        if (eventRegistrar.isEmpty()) {
            const { recognizerName } = eventRegistrar;
            // Disable recognizer if no more handlers are attached to its events
            let isRecognizerUsed = false;
            for (const eh of events.values()) {
                if (eh.recognizerName === recognizerName && !eh.isEmpty()) {
                    isRecognizerUsed = true;
                    break;
                }
            }
            if (!isRecognizerUsed) {
                this._toggleRecognizer(recognizerName, false);
            }
        }
    }
}
//# sourceMappingURL=event-manager.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/index.js":
/*!***************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventManager: () => (/* reexport safe */ _event_manager__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _event_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-manager */ "./node_modules/mjolnir.js/dist/esm/event-manager.js");

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/inputs/contextmenu-input.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/inputs/contextmenu-input.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ContextmenuInput)
/* harmony export */ });
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ "./node_modules/mjolnir.js/dist/esm/inputs/input.js");

const EVENT_TYPE = 'contextmenu';
class ContextmenuInput extends _input__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(element, callback, options) {
        super(element, callback, options);
        this.handleEvent = (event) => {
            if (!this.options.enable) {
                return;
            }
            this.callback({
                type: EVENT_TYPE,
                center: {
                    x: event.clientX,
                    y: event.clientY
                },
                srcEvent: event,
                pointerType: 'mouse',
                target: event.target
            });
        };
        element.addEventListener('contextmenu', this.handleEvent);
    }
    destroy() {
        this.element.removeEventListener('contextmenu', this.handleEvent);
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
        if (eventType === EVENT_TYPE) {
            this.options.enable = enabled;
        }
    }
}
//# sourceMappingURL=contextmenu-input.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/inputs/input.js":
/*!**********************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/inputs/input.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Input)
/* harmony export */ });
class Input {
    constructor(element, callback, options) {
        this.element = element;
        this.callback = callback;
        this.options = { enable: true, ...options };
    }
}
//# sourceMappingURL=input.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/inputs/key-input.js":
/*!**************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/inputs/key-input.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KeyInput)
/* harmony export */ });
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ "./node_modules/mjolnir.js/dist/esm/inputs/input.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/mjolnir.js/dist/esm/constants.js");


const { KEY_EVENTS } = _constants__WEBPACK_IMPORTED_MODULE_1__.INPUT_EVENT_TYPES;
const DOWN_EVENT_TYPE = 'keydown';
const UP_EVENT_TYPE = 'keyup';
class KeyInput extends _input__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(element, callback, options) {
        super(element, callback, options);
        this.handleEvent = (event) => {
            // Ignore if focused on text input
            const targetElement = (event.target || event.srcElement);
            if ((targetElement.tagName === 'INPUT' && targetElement.type === 'text') ||
                targetElement.tagName === 'TEXTAREA') {
                return;
            }
            if (this.enableDownEvent && event.type === 'keydown') {
                this.callback({
                    type: DOWN_EVENT_TYPE,
                    srcEvent: event,
                    key: event.key,
                    target: event.target
                });
            }
            if (this.enableUpEvent && event.type === 'keyup') {
                this.callback({
                    type: UP_EVENT_TYPE,
                    srcEvent: event,
                    key: event.key,
                    target: event.target
                });
            }
        };
        this.enableDownEvent = this.options.enable;
        this.enableUpEvent = this.options.enable;
        this.events = (this.options.events || []).concat(KEY_EVENTS);
        element.tabIndex = this.options.tabIndex || 0;
        element.style.outline = 'none';
        this.events.forEach(event => element.addEventListener(event, this.handleEvent));
    }
    destroy() {
        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
        if (eventType === DOWN_EVENT_TYPE) {
            this.enableDownEvent = enabled;
        }
        if (eventType === UP_EVENT_TYPE) {
            this.enableUpEvent = enabled;
        }
    }
}
//# sourceMappingURL=key-input.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/inputs/move-input.js":
/*!***************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/inputs/move-input.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MoveInput)
/* harmony export */ });
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ "./node_modules/mjolnir.js/dist/esm/inputs/input.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/mjolnir.js/dist/esm/constants.js");


const { MOUSE_EVENTS } = _constants__WEBPACK_IMPORTED_MODULE_1__.INPUT_EVENT_TYPES;
const MOVE_EVENT_TYPE = 'pointermove';
const OVER_EVENT_TYPE = 'pointerover';
const OUT_EVENT_TYPE = 'pointerout';
const ENTER_EVENT_TYPE = 'pointerenter';
const LEAVE_EVENT_TYPE = 'pointerleave';
/**
 * Hammer.js swallows 'move' events (for pointer/touch/mouse)
 * when the pointer is not down. This class sets up a handler
 * specifically for these events to work around this limitation.
 * Note that this could be extended to more intelligently handle
 * move events across input types, e.g. storing multiple simultaneous
 * pointer/touch events, calculating speed/direction, etc.
 */
class MoveInput extends _input__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(element, callback, options) {
        super(element, callback, options);
        this.handleEvent = (event) => {
            this.handleOverEvent(event);
            this.handleOutEvent(event);
            this.handleEnterEvent(event);
            this.handleLeaveEvent(event);
            this.handleMoveEvent(event);
        };
        this.pressed = false;
        const { enable } = this.options;
        this.enableMoveEvent = enable;
        this.enableLeaveEvent = enable;
        this.enableEnterEvent = enable;
        this.enableOutEvent = enable;
        this.enableOverEvent = enable;
        this.events = (this.options.events || []).concat(MOUSE_EVENTS);
        this.events.forEach(event => element.addEventListener(event, this.handleEvent));
    }
    destroy() {
        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
        if (eventType === MOVE_EVENT_TYPE) {
            this.enableMoveEvent = enabled;
        }
        if (eventType === OVER_EVENT_TYPE) {
            this.enableOverEvent = enabled;
        }
        if (eventType === OUT_EVENT_TYPE) {
            this.enableOutEvent = enabled;
        }
        if (eventType === ENTER_EVENT_TYPE) {
            this.enableEnterEvent = enabled;
        }
        if (eventType === LEAVE_EVENT_TYPE) {
            this.enableLeaveEvent = enabled;
        }
    }
    handleOverEvent(event) {
        if (this.enableOverEvent) {
            if (event.type === 'mouseover') {
                this._emit(OVER_EVENT_TYPE, event);
            }
        }
    }
    handleOutEvent(event) {
        if (this.enableOutEvent) {
            if (event.type === 'mouseout') {
                this._emit(OUT_EVENT_TYPE, event);
            }
        }
    }
    handleEnterEvent(event) {
        if (this.enableEnterEvent) {
            if (event.type === 'mouseenter') {
                this._emit(ENTER_EVENT_TYPE, event);
            }
        }
    }
    handleLeaveEvent(event) {
        if (this.enableLeaveEvent) {
            if (event.type === 'mouseleave') {
                this._emit(LEAVE_EVENT_TYPE, event);
            }
        }
    }
    handleMoveEvent(event) {
        if (this.enableMoveEvent) {
            switch (event.type) {
                case 'mousedown':
                    if (event.button >= 0) {
                        // Button is down
                        this.pressed = true;
                    }
                    break;
                case 'mousemove':
                    // Move events use `bottons` to track the button being pressed
                    if (event.buttons === 0) {
                        // Button is not down
                        this.pressed = false;
                    }
                    if (!this.pressed) {
                        // Drag events are emitted by hammer already
                        // we just need to emit the move event on hover
                        this._emit(MOVE_EVENT_TYPE, event);
                    }
                    break;
                case 'mouseup':
                    this.pressed = false;
                    break;
                default:
            }
        }
    }
    _emit(type, event) {
        this.callback({
            type,
            center: {
                x: event.clientX,
                y: event.clientY
            },
            srcEvent: event,
            pointerType: 'mouse',
            target: event.target
        });
    }
}
//# sourceMappingURL=move-input.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/inputs/wheel-input.js":
/*!****************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/inputs/wheel-input.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WheelInput)
/* harmony export */ });
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ "./node_modules/mjolnir.js/dist/esm/inputs/input.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/mjolnir.js/dist/esm/constants.js");
/* harmony import */ var _utils_globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/globals */ "./node_modules/mjolnir.js/dist/esm/utils/globals.js");



const firefox = _utils_globals__WEBPACK_IMPORTED_MODULE_2__.userAgent.indexOf('firefox') !== -1;
const { WHEEL_EVENTS } = _constants__WEBPACK_IMPORTED_MODULE_1__.INPUT_EVENT_TYPES;
const EVENT_TYPE = 'wheel';
// Constants for normalizing input delta
const WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;
const WHEEL_DELTA_PER_LINE = 40;
// Slow down zoom if shift key is held for more precise zooming
const SHIFT_MULTIPLIER = 0.25;
class WheelInput extends _input__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(element, callback, options) {
        super(element, callback, options);
        /* eslint-disable complexity, max-statements */
        this.handleEvent = (event) => {
            if (!this.options.enable) {
                return;
            }
            let value = event.deltaY;
            if (_utils_globals__WEBPACK_IMPORTED_MODULE_2__.window.WheelEvent) {
                // Firefox doubles the values on retina screens...
                if (firefox && event.deltaMode === _utils_globals__WEBPACK_IMPORTED_MODULE_2__.window.WheelEvent.DOM_DELTA_PIXEL) {
                    value /= _utils_globals__WEBPACK_IMPORTED_MODULE_2__.window.devicePixelRatio;
                }
                if (event.deltaMode === _utils_globals__WEBPACK_IMPORTED_MODULE_2__.window.WheelEvent.DOM_DELTA_LINE) {
                    value *= WHEEL_DELTA_PER_LINE;
                }
            }
            if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {
                // This one is definitely a mouse wheel event.
                // Normalize this value to match trackpad.
                value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);
            }
            if (event.shiftKey && value) {
                value = value * SHIFT_MULTIPLIER;
            }
            this.callback({
                type: EVENT_TYPE,
                center: {
                    x: event.clientX,
                    y: event.clientY
                },
                delta: -value,
                srcEvent: event,
                pointerType: 'mouse',
                target: event.target
            });
        };
        this.events = (this.options.events || []).concat(WHEEL_EVENTS);
        this.events.forEach(event => element.addEventListener(event, this.handleEvent, _utils_globals__WEBPACK_IMPORTED_MODULE_2__.passiveSupported ? { passive: false } : false));
    }
    destroy() {
        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
        if (eventType === EVENT_TYPE) {
            this.options.enable = enabled;
        }
    }
}
//# sourceMappingURL=wheel-input.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/utils/event-registrar.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/utils/event-registrar.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventRegistrar)
/* harmony export */ });
/* harmony import */ var _event_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-utils */ "./node_modules/mjolnir.js/dist/esm/utils/event-utils.js");

const DEFAULT_OPTIONS = {
    srcElement: 'root',
    priority: 0
};
class EventRegistrar {
    constructor(eventManager) {
        /**
         * Handles hammerjs event
         */
        this.handleEvent = (event) => {
            if (this.isEmpty()) {
                return;
            }
            const mjolnirEvent = this._normalizeEvent(event);
            let target = event.srcEvent.target;
            while (target && target !== mjolnirEvent.rootElement) {
                this._emit(mjolnirEvent, target);
                if (mjolnirEvent.handled) {
                    return;
                }
                target = target.parentNode;
            }
            this._emit(mjolnirEvent, 'root');
        };
        this.eventManager = eventManager;
        this.handlers = [];
        // Element -> handler map
        this.handlersByElement = new Map();
        this._active = false;
    }
    // Returns true if there are no non-passive handlers
    isEmpty() {
        return !this._active;
    }
    add(type, handler, options, once = false, passive = false) {
        const { handlers, handlersByElement } = this;
        let opts = DEFAULT_OPTIONS;
        if (typeof options === 'string' || (options && options.addEventListener)) {
            // is DOM element, backward compatibility
            // @ts-ignore
            opts = { ...DEFAULT_OPTIONS, srcElement: options };
        }
        else if (options) {
            opts = { ...DEFAULT_OPTIONS, ...options };
        }
        let entries = handlersByElement.get(opts.srcElement);
        if (!entries) {
            entries = [];
            handlersByElement.set(opts.srcElement, entries);
        }
        const entry = {
            type,
            handler,
            srcElement: opts.srcElement,
            priority: opts.priority
        };
        if (once) {
            entry.once = true;
        }
        if (passive) {
            entry.passive = true;
        }
        handlers.push(entry);
        this._active = this._active || !entry.passive;
        // Sort handlers by descending priority
        // Handlers with the same priority are excuted in the order of registration
        let insertPosition = entries.length - 1;
        while (insertPosition >= 0) {
            if (entries[insertPosition].priority >= entry.priority) {
                break;
            }
            insertPosition--;
        }
        entries.splice(insertPosition + 1, 0, entry);
    }
    remove(type, handler) {
        const { handlers, handlersByElement } = this;
        for (let i = handlers.length - 1; i >= 0; i--) {
            const entry = handlers[i];
            if (entry.type === type && entry.handler === handler) {
                handlers.splice(i, 1);
                const entries = handlersByElement.get(entry.srcElement);
                entries.splice(entries.indexOf(entry), 1);
                if (entries.length === 0) {
                    handlersByElement.delete(entry.srcElement);
                }
            }
        }
        this._active = handlers.some(entry => !entry.passive);
    }
    /**
     * Invoke handlers on a particular element
     */
    _emit(event, srcElement) {
        const entries = this.handlersByElement.get(srcElement);
        if (entries) {
            let immediatePropagationStopped = false;
            // Prevents the current event from bubbling up
            const stopPropagation = () => {
                event.handled = true;
            };
            // Prevent any remaining listeners from being called
            const stopImmediatePropagation = () => {
                event.handled = true;
                immediatePropagationStopped = true;
            };
            const entriesToRemove = [];
            for (let i = 0; i < entries.length; i++) {
                const { type, handler, once } = entries[i];
                handler({
                    ...event,
                    // @ts-ignore
                    type,
                    stopPropagation,
                    stopImmediatePropagation
                });
                if (once) {
                    entriesToRemove.push(entries[i]);
                }
                if (immediatePropagationStopped) {
                    break;
                }
            }
            for (let i = 0; i < entriesToRemove.length; i++) {
                const { type, handler } = entriesToRemove[i];
                this.remove(type, handler);
            }
        }
    }
    /**
     * Normalizes hammerjs and custom events to have predictable fields.
     */
    _normalizeEvent(event) {
        const rootElement = this.eventManager.getElement();
        return {
            ...event,
            ...(0,_event_utils__WEBPACK_IMPORTED_MODULE_0__.whichButtons)(event),
            ...(0,_event_utils__WEBPACK_IMPORTED_MODULE_0__.getOffsetPosition)(event, rootElement),
            preventDefault: () => {
                event.srcEvent.preventDefault();
            },
            stopImmediatePropagation: null,
            stopPropagation: null,
            handled: false,
            rootElement
        };
    }
}
//# sourceMappingURL=event-registrar.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/utils/event-utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/utils/event-utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOffsetPosition: () => (/* binding */ getOffsetPosition),
/* harmony export */   whichButtons: () => (/* binding */ whichButtons)
/* harmony export */ });
/* Constants */
const DOWN_EVENT = 1;
const MOVE_EVENT = 2;
const UP_EVENT = 4;
const MOUSE_EVENTS = {
    pointerdown: DOWN_EVENT,
    pointermove: MOVE_EVENT,
    pointerup: UP_EVENT,
    mousedown: DOWN_EVENT,
    mousemove: MOVE_EVENT,
    mouseup: UP_EVENT
};
// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
const MOUSE_EVENT_BUTTON_LEFT = 0;
const MOUSE_EVENT_BUTTON_MIDDLE = 1;
const MOUSE_EVENT_BUTTON_RIGHT = 2;
// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons
const MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;
const MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;
const MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;
/**
 * Extract the involved mouse button
 */
function whichButtons(event) {
    const eventType = MOUSE_EVENTS[event.srcEvent.type];
    if (!eventType) {
        // Not a mouse evet
        return null;
    }
    const { buttons, button } = event.srcEvent;
    let leftButton = false;
    let middleButton = false;
    let rightButton = false;
    if (eventType === MOVE_EVENT) {
        leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);
        middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);
        rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);
    }
    else {
        leftButton = button === MOUSE_EVENT_BUTTON_LEFT;
        middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;
        rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;
    }
    return { leftButton, middleButton, rightButton };
}
/**
 * Calculate event position relative to the root element
 */
function getOffsetPosition(event, rootElement) {
    const center = event.center;
    // `center` is a hammer.js event property
    if (!center) {
        // Not a gestural event
        return null;
    }
    const rect = rootElement.getBoundingClientRect();
    // Fix scale for map affected by a CSS transform.
    // See https://stackoverflow.com/a/26893663/3528533
    const scaleX = rect.width / rootElement.offsetWidth || 1;
    const scaleY = rect.height / rootElement.offsetHeight || 1;
    // Calculate center relative to the root element
    const offsetCenter = {
        x: (center.x - rect.left - rootElement.clientLeft) / scaleX,
        y: (center.y - rect.top - rootElement.clientTop) / scaleY
    };
    return { center, offsetCenter };
}
//# sourceMappingURL=event-utils.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/utils/globals.js":
/*!***********************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/utils/globals.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   document: () => (/* binding */ document_),
/* harmony export */   global: () => (/* binding */ global_),
/* harmony export */   passiveSupported: () => (/* binding */ passiveSupported),
/* harmony export */   userAgent: () => (/* binding */ userAgent),
/* harmony export */   window: () => (/* binding */ window_)
/* harmony export */ });
// Purpose: include this in your module to avoids adding dependencies on
// micro modules like 'global'
/* global window, global, document, navigator */
const userAgent = typeof navigator !== 'undefined' && navigator.userAgent ? navigator.userAgent.toLowerCase() : '';
const window_ = typeof window !== 'undefined' ? window : __webpack_require__.g;
const global_ = typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : window;
const document_ = typeof document !== 'undefined' ? document : {};

/*
 * Detect whether passive option is supported by the current browser.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
   #Safely_detecting_option_support
 */
let passiveSupported = false;
/* eslint-disable accessor-pairs, no-empty */
try {
    const options = {
        // This function will be called when the browser
        // attempts to access the passive property.
        get passive() {
            passiveSupported = true;
            return true;
        }
    };
    window_.addEventListener('test', null, options);
    window_.removeEventListener('test', null);
}
catch (err) {
    passiveSupported = false;
}

//# sourceMappingURL=globals.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/utils/hammer-overrides.js":
/*!********************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/utils/hammer-overrides.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   enhanceMouseInput: () => (/* binding */ enhanceMouseInput),
/* harmony export */   enhancePointerEventInput: () => (/* binding */ enhancePointerEventInput)
/* harmony export */ });
/**
 * This file contains overrides the default
 * hammer.js functions to add our own utility
 */
/* eslint-disable */
/* Hammer.js constants */
const INPUT_START = 1;
const INPUT_MOVE = 2;
const INPUT_END = 4;
const MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};
/**
 * Helper function that returns true if any element in an array meets given criteria.
 * Because older browsers do not support `Array.prototype.some`
 * @params array {Array}
 * @params predict {Function}
 */
function some(array, predict) {
    for (let i = 0; i < array.length; i++) {
        if (predict(array[i])) {
            return true;
        }
    }
    return false;
}
/* eslint-disable no-invalid-this */
function enhancePointerEventInput(PointerEventInput) {
    const oldHandler = PointerEventInput.prototype.handler;
    // overrides PointerEventInput.handler to accept right mouse button
    PointerEventInput.prototype.handler = function handler(ev) {
        const store = this.store;
        // Allow non-left mouse buttons through
        if (ev.button > 0 && ev.type === 'pointerdown') {
            if (!some(store, e => e.pointerId === ev.pointerId)) {
                store.push(ev);
            }
        }
        oldHandler.call(this, ev);
    };
}
// overrides MouseInput.handler to accept right mouse button
function enhanceMouseInput(MouseInput) {
    MouseInput.prototype.handler = function handler(ev) {
        let eventType = MOUSE_INPUT_MAP[ev.type];
        // on start we want to have the mouse button down
        if (eventType & INPUT_START && ev.button >= 0) {
            this.pressed = true;
        }
        if (eventType & INPUT_MOVE && ev.buttons === 0) {
            eventType = INPUT_END;
        }
        // mouse must be down
        if (!this.pressed) {
            return;
        }
        if (eventType & INPUT_END) {
            this.pressed = false;
        }
        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: 'mouse',
            srcEvent: ev
        });
    };
}
//# sourceMappingURL=hammer-overrides.js.map

/***/ }),

/***/ "./node_modules/mjolnir.js/dist/esm/utils/hammer.browser.js":
/*!******************************************************************!*\
  !*** ./node_modules/mjolnir.js/dist/esm/utils/hammer.browser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Manager: () => (/* binding */ Manager),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hammerjs */ "./node_modules/hammerjs/hammer.js");
/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _hammer_overrides__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hammer-overrides */ "./node_modules/mjolnir.js/dist/esm/utils/hammer-overrides.js");


(0,_hammer_overrides__WEBPACK_IMPORTED_MODULE_1__.enhancePointerEventInput)(hammerjs__WEBPACK_IMPORTED_MODULE_0__.PointerEventInput);
(0,_hammer_overrides__WEBPACK_IMPORTED_MODULE_1__.enhanceMouseInput)(hammerjs__WEBPACK_IMPORTED_MODULE_0__.MouseInput);
const Manager = hammerjs__WEBPACK_IMPORTED_MODULE_0__.Manager;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hammerjs__WEBPACK_IMPORTED_MODULE_0__);
//# sourceMappingURL=hammer.browser.js.map

/***/ }),

/***/ "./node_modules/wgsl_reflect/wgsl_reflect.module.js":
/*!**********************************************************!*\
  !*** ./node_modules/wgsl_reflect/wgsl_reflect.module.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Alias: () => (/* binding */ Alias),
/* harmony export */   AliasInfo: () => (/* binding */ AliasInfo),
/* harmony export */   Argument: () => (/* binding */ Argument),
/* harmony export */   ArrayIndex: () => (/* binding */ ArrayIndex),
/* harmony export */   ArrayInfo: () => (/* binding */ ArrayInfo),
/* harmony export */   ArrayType: () => (/* binding */ ArrayType),
/* harmony export */   Assign: () => (/* binding */ Assign),
/* harmony export */   AssignOperator: () => (/* binding */ AssignOperator),
/* harmony export */   Attribute: () => (/* binding */ Attribute),
/* harmony export */   BinaryOperator: () => (/* binding */ BinaryOperator),
/* harmony export */   BitcastExpr: () => (/* binding */ BitcastExpr),
/* harmony export */   Break: () => (/* binding */ Break),
/* harmony export */   Call: () => (/* binding */ Call),
/* harmony export */   CallExpr: () => (/* binding */ CallExpr),
/* harmony export */   Case: () => (/* binding */ Case),
/* harmony export */   Const: () => (/* binding */ Const),
/* harmony export */   ConstExpr: () => (/* binding */ ConstExpr),
/* harmony export */   Continue: () => (/* binding */ Continue),
/* harmony export */   Continuing: () => (/* binding */ Continuing),
/* harmony export */   CreateExpr: () => (/* binding */ CreateExpr),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   Discard: () => (/* binding */ Discard),
/* harmony export */   ElseIf: () => (/* binding */ ElseIf),
/* harmony export */   Enable: () => (/* binding */ Enable),
/* harmony export */   EntryFunctions: () => (/* binding */ EntryFunctions),
/* harmony export */   Expression: () => (/* binding */ Expression),
/* harmony export */   For: () => (/* binding */ For),
/* harmony export */   Function: () => (/* binding */ Function),
/* harmony export */   FunctionInfo: () => (/* binding */ FunctionInfo),
/* harmony export */   GroupingExpr: () => (/* binding */ GroupingExpr),
/* harmony export */   If: () => (/* binding */ If),
/* harmony export */   Increment: () => (/* binding */ Increment),
/* harmony export */   IncrementOperator: () => (/* binding */ IncrementOperator),
/* harmony export */   InputInfo: () => (/* binding */ InputInfo),
/* harmony export */   Let: () => (/* binding */ Let),
/* harmony export */   LiteralExpr: () => (/* binding */ LiteralExpr),
/* harmony export */   Loop: () => (/* binding */ Loop),
/* harmony export */   Member: () => (/* binding */ Member),
/* harmony export */   MemberInfo: () => (/* binding */ MemberInfo),
/* harmony export */   Node: () => (/* binding */ Node),
/* harmony export */   Operator: () => (/* binding */ Operator),
/* harmony export */   OutputInfo: () => (/* binding */ OutputInfo),
/* harmony export */   Override: () => (/* binding */ Override),
/* harmony export */   OverrideInfo: () => (/* binding */ OverrideInfo),
/* harmony export */   ParseContext: () => (/* binding */ ParseContext),
/* harmony export */   PointerType: () => (/* binding */ PointerType),
/* harmony export */   Requires: () => (/* binding */ Requires),
/* harmony export */   ResourceType: () => (/* binding */ ResourceType),
/* harmony export */   Return: () => (/* binding */ Return),
/* harmony export */   SamplerType: () => (/* binding */ SamplerType),
/* harmony export */   Statement: () => (/* binding */ Statement),
/* harmony export */   StaticAssert: () => (/* binding */ StaticAssert),
/* harmony export */   StringExpr: () => (/* binding */ StringExpr),
/* harmony export */   Struct: () => (/* binding */ Struct),
/* harmony export */   StructInfo: () => (/* binding */ StructInfo),
/* harmony export */   Switch: () => (/* binding */ Switch),
/* harmony export */   SwitchCase: () => (/* binding */ SwitchCase),
/* harmony export */   TemplateInfo: () => (/* binding */ TemplateInfo),
/* harmony export */   TemplateType: () => (/* binding */ TemplateType),
/* harmony export */   Token: () => (/* binding */ Token),
/* harmony export */   TokenClass: () => (/* binding */ TokenClass),
/* harmony export */   TokenType: () => (/* binding */ TokenType),
/* harmony export */   TokenTypes: () => (/* binding */ TokenTypes),
/* harmony export */   Type: () => (/* binding */ Type),
/* harmony export */   TypeInfo: () => (/* binding */ TypeInfo),
/* harmony export */   TypecastExpr: () => (/* binding */ TypecastExpr),
/* harmony export */   UnaryOperator: () => (/* binding */ UnaryOperator),
/* harmony export */   Var: () => (/* binding */ Var),
/* harmony export */   VariableExpr: () => (/* binding */ VariableExpr),
/* harmony export */   VariableInfo: () => (/* binding */ VariableInfo),
/* harmony export */   WgslParser: () => (/* binding */ WgslParser),
/* harmony export */   WgslReflect: () => (/* binding */ WgslReflect),
/* harmony export */   WgslScanner: () => (/* binding */ WgslScanner),
/* harmony export */   While: () => (/* binding */ While),
/* harmony export */   _BlockEnd: () => (/* binding */ _BlockEnd),
/* harmony export */   _BlockStart: () => (/* binding */ _BlockStart)
/* harmony export */ });
class ParseContext {
    constructor() {
        this.constants = new Map();
        this.aliases = new Map();
        this.structs = new Map();
    }
}
/**
 * @class Node
 * @category AST
 * Base class for AST nodes parsed from a WGSL shader.
 */
class Node {
    constructor() { }
    get isAstNode() {
        return true;
    }
    get astNodeType() {
        return "";
    }
    evaluate(context) {
        throw new Error("Cannot evaluate node");
    }
    evaluateString(context) {
        return this.evaluate(context).toString();
    }
    search(callback) { }
    searchBlock(block, callback) {
        if (block) {
            callback(_BlockStart.instance);
            for (const node of block) {
                if (node instanceof Array) {
                    this.searchBlock(node, callback);
                }
                else {
                    node.search(callback);
                }
            }
            callback(_BlockEnd.instance);
        }
    }
}
// For internal use only
class _BlockStart extends Node {
}
_BlockStart.instance = new _BlockStart();
// For internal use only
class _BlockEnd extends Node {
}
_BlockEnd.instance = new _BlockEnd();
/**
 * @class Statement
 * @extends Node
 * @category AST
 */
class Statement extends Node {
    constructor() {
        super();
    }
}
/**
 * @class Function
 * @extends Statement
 * @category AST
 */
class Function extends Statement {
    constructor(name, args, returnType, body, startLine, endLine) {
        super();
        this.calls = new Set();
        this.name = name;
        this.args = args;
        this.returnType = returnType;
        this.body = body;
        this.startLine = startLine;
        this.endLine = endLine;
    }
    get astNodeType() {
        return "function";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class StaticAssert
 * @extends Statement
 * @category AST
 */
class StaticAssert extends Statement {
    constructor(expression) {
        super();
        this.expression = expression;
    }
    get astNodeType() {
        return "staticAssert";
    }
    search(callback) {
        this.expression.search(callback);
    }
}
/**
 * @class While
 * @extends Statement
 * @category AST
 */
class While extends Statement {
    constructor(condition, body) {
        super();
        this.condition = condition;
        this.body = body;
    }
    get astNodeType() {
        return "while";
    }
    search(callback) {
        this.condition.search(callback);
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Continuing
 * @extends Statement
 * @category AST
 */
class Continuing extends Statement {
    constructor(body) {
        super();
        this.body = body;
    }
    get astNodeType() {
        return "continuing";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class For
 * @extends Statement
 * @category AST
 */
class For extends Statement {
    constructor(init, condition, increment, body) {
        super();
        this.init = init;
        this.condition = condition;
        this.increment = increment;
        this.body = body;
    }
    get astNodeType() {
        return "for";
    }
    search(callback) {
        var _a, _b, _c;
        (_a = this.init) === null || _a === void 0 ? void 0 : _a.search(callback);
        (_b = this.condition) === null || _b === void 0 ? void 0 : _b.search(callback);
        (_c = this.increment) === null || _c === void 0 ? void 0 : _c.search(callback);
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Var
 * @extends Statement
 * @category AST
 */
class Var extends Statement {
    constructor(name, type, storage, access, value) {
        super();
        this.name = name;
        this.type = type;
        this.storage = storage;
        this.access = access;
        this.value = value;
    }
    get astNodeType() {
        return "var";
    }
    search(callback) {
        var _a;
        callback(this);
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Override
 * @extends Statement
 * @category AST
 */
class Override extends Statement {
    constructor(name, type, value) {
        super();
        this.name = name;
        this.type = type;
        this.value = value;
    }
    get astNodeType() {
        return "override";
    }
    search(callback) {
        var _a;
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Let
 * @extends Statement
 * @category AST
 */
class Let extends Statement {
    constructor(name, type, storage, access, value) {
        super();
        this.name = name;
        this.type = type;
        this.storage = storage;
        this.access = access;
        this.value = value;
    }
    get astNodeType() {
        return "let";
    }
    search(callback) {
        var _a;
        callback(this);
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Const
 * @extends Statement
 * @category AST
 */
class Const extends Statement {
    constructor(name, type, storage, access, value) {
        super();
        this.name = name;
        this.type = type;
        this.storage = storage;
        this.access = access;
        this.value = value;
    }
    get astNodeType() {
        return "const";
    }
    evaluate(context) {
        return this.value.evaluate(context);
    }
    search(callback) {
        var _a;
        callback(this);
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
var IncrementOperator;
(function (IncrementOperator) {
    IncrementOperator["increment"] = "++";
    IncrementOperator["decrement"] = "--";
})(IncrementOperator || (IncrementOperator = {}));
(function (IncrementOperator) {
    function parse(val) {
        const key = val;
        if (key == "parse")
            throw new Error("Invalid value for IncrementOperator");
        return IncrementOperator[key];
    }
    IncrementOperator.parse = parse;
})(IncrementOperator || (IncrementOperator = {}));
/**
 * @class Increment
 * @extends Statement
 * @category AST
 */
class Increment extends Statement {
    constructor(operator, variable) {
        super();
        this.operator = operator;
        this.variable = variable;
    }
    get astNodeType() {
        return "increment";
    }
    search(callback) {
        this.variable.search(callback);
    }
}
var AssignOperator;
(function (AssignOperator) {
    AssignOperator["assign"] = "=";
    AssignOperator["addAssign"] = "+=";
    AssignOperator["subtractAssin"] = "-=";
    AssignOperator["multiplyAssign"] = "*=";
    AssignOperator["divideAssign"] = "/=";
    AssignOperator["moduloAssign"] = "%=";
    AssignOperator["andAssign"] = "&=";
    AssignOperator["orAssign"] = "|=";
    AssignOperator["xorAssign"] = "^=";
    AssignOperator["shiftLeftAssign"] = "<<=";
    AssignOperator["shiftRightAssign"] = ">>=";
})(AssignOperator || (AssignOperator = {}));
(function (AssignOperator) {
    function parse(val) {
        const key = val;
        if (key == "parse") {
            throw new Error("Invalid value for AssignOperator");
        }
        //return AssignOperator[key];
        return key;
    }
    AssignOperator.parse = parse;
})(AssignOperator || (AssignOperator = {}));
/**
 * @class Assign
 * @extends Statement
 * @category AST
 */
class Assign extends Statement {
    constructor(operator, variable, value) {
        super();
        this.operator = operator;
        this.variable = variable;
        this.value = value;
    }
    get astNodeType() {
        return "assign";
    }
    search(callback) {
        this.variable.search(callback);
        this.value.search(callback);
    }
}
/**
 * @class Call
 * @extends Statement
 * @category AST
 */
class Call extends Statement {
    constructor(name, args) {
        super();
        this.name = name;
        this.args = args;
    }
    get astNodeType() {
        return "call";
    }
    search(callback) {
        for (const node of this.args) {
            node.search(callback);
        }
        callback(this);
    }
}
/**
 * @class Loop
 * @extends Statement
 * @category AST
 */
class Loop extends Statement {
    constructor(body, continuing) {
        super();
        this.body = body;
        this.continuing = continuing;
    }
    get astNodeType() {
        return "loop";
    }
}
/**
 * @class Switch
 * @extends Statement
 * @category AST
 */
class Switch extends Statement {
    constructor(condition, body) {
        super();
        this.condition = condition;
        this.body = body;
    }
    get astNodeType() {
        return "body";
    }
}
/**
 * @class If
 * @extends Statement
 * @category AST
 */
class If extends Statement {
    constructor(condition, body, elseif, _else) {
        super();
        this.condition = condition;
        this.body = body;
        this.elseif = elseif;
        this.else = _else;
    }
    get astNodeType() {
        return "if";
    }
    search(callback) {
        this.condition.search(callback);
        this.searchBlock(this.body, callback);
        this.searchBlock(this.elseif, callback);
        this.searchBlock(this.else, callback);
    }
}
/**
 * @class Return
 * @extends Statement
 * @category AST
 */
class Return extends Statement {
    constructor(value) {
        super();
        this.value = value;
    }
    get astNodeType() {
        return "return";
    }
    search(callback) {
        var _a;
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Enable
 * @extends Statement
 * @category AST
 */
class Enable extends Statement {
    constructor(name) {
        super();
        this.name = name;
    }
    get astNodeType() {
        return "enable";
    }
}
/**
 * @class Requires
 * @extends Statement
 * @category AST
 */
class Requires extends Statement {
    constructor(extensions) {
        super();
        this.extensions = extensions;
    }
    get astNodeType() {
        return "requires";
    }
}
/**
 * @class Diagnostic
 * @extends Statement
 * @category AST
 */
class Diagnostic extends Statement {
    constructor(severity, rule) {
        super();
        this.severity = severity;
        this.rule = rule;
    }
    get astNodeType() {
        return "diagnostic";
    }
}
/**
 * @class Alias
 * @extends Statement
 * @category AST
 */
class Alias extends Statement {
    constructor(name, type) {
        super();
        this.name = name;
        this.type = type;
    }
    get astNodeType() {
        return "alias";
    }
}
/**
 * @class Discard
 * @extends Statement
 * @category AST
 */
class Discard extends Statement {
    constructor() {
        super();
    }
    get astNodeType() {
        return "discard";
    }
}
/**
 * @class Break
 * @extends Statement
 * @category AST
 */
class Break extends Statement {
    constructor() {
        super();
    }
    get astNodeType() {
        return "break";
    }
}
/**
 * @class Continue
 * @extends Statement
 * @category AST
 */
class Continue extends Statement {
    constructor() {
        super();
    }
    get astNodeType() {
        return "continue";
    }
}
/**
 * @class Type
 * @extends Statement
 * @category AST
 */
class Type extends Statement {
    constructor(name) {
        super();
        this.name = name;
    }
    get astNodeType() {
        return "type";
    }
    get isStruct() {
        return false;
    }
    get isArray() {
        return false;
    }
}
/**
 * @class StructType
 * @extends Type
 * @category AST
 */
class Struct extends Type {
    constructor(name, members, startLine, endLine) {
        super(name);
        this.members = members;
        this.startLine = startLine;
        this.endLine = endLine;
    }
    get astNodeType() {
        return "struct";
    }
    get isStruct() {
        return true;
    }
    /// Return the index of the member with the given name, or -1 if not found.
    getMemberIndex(name) {
        for (let i = 0; i < this.members.length; i++) {
            if (this.members[i].name == name)
                return i;
        }
        return -1;
    }
}
/**
 * @class TemplateType
 * @extends Type
 * @category AST
 */
class TemplateType extends Type {
    constructor(name, format, access) {
        super(name);
        this.format = format;
        this.access = access;
    }
    get astNodeType() {
        return "template";
    }
}
/**
 * @class PointerType
 * @extends Type
 * @category AST
 */
class PointerType extends Type {
    constructor(name, storage, type, access) {
        super(name);
        this.storage = storage;
        this.type = type;
        this.access = access;
    }
    get astNodeType() {
        return "pointer";
    }
}
/**
 * @class ArrayType
 * @extends Type
 * @category AST
 */
class ArrayType extends Type {
    constructor(name, attributes, format, count) {
        super(name);
        this.attributes = attributes;
        this.format = format;
        this.count = count;
    }
    get astNodeType() {
        return "array";
    }
    get isArray() {
        return true;
    }
}
/**
 * @class SamplerType
 * @extends Type
 * @category AST
 */
class SamplerType extends Type {
    constructor(name, format, access) {
        super(name);
        this.format = format;
        this.access = access;
    }
    get astNodeType() {
        return "sampler";
    }
}
/**
 * @class Expression
 * @extends Node
 * @category AST
 */
class Expression extends Node {
    constructor() {
        super();
    }
}
/**
 * @class StringExpr
 * @extends Expression
 * @category AST
 */
class StringExpr extends Expression {
    constructor(value) {
        super();
        this.value = value;
    }
    get astNodeType() {
        return "stringExpr";
    }
    toString() {
        return this.value;
    }
    evaluateString() {
        return this.value;
    }
}
/**
 * @class CreateExpr
 * @extends Expression
 * @category AST
 */
class CreateExpr extends Expression {
    constructor(type, args) {
        super();
        this.type = type;
        this.args = args;
    }
    get astNodeType() {
        return "createExpr";
    }
    search(callback) {
        callback(this);
        for (const node of this.args) {
            node.search(callback);
        }
    }
}
/**
 * @class CallExpr
 * @extends Expression
 * @category AST
 */
class CallExpr extends Expression {
    constructor(name, args) {
        super();
        this.name = name;
        this.args = args;
    }
    get astNodeType() {
        return "callExpr";
    }
    evaluate(context) {
        switch (this.name) {
            case "abs":
                return Math.abs(this.args[0].evaluate(context));
            case "acos":
                return Math.acos(this.args[0].evaluate(context));
            case "acosh":
                return Math.acosh(this.args[0].evaluate(context));
            case "asin":
                return Math.asin(this.args[0].evaluate(context));
            case "asinh":
                return Math.asinh(this.args[0].evaluate(context));
            case "atan":
                return Math.atan(this.args[0].evaluate(context));
            case "atan2":
                return Math.atan2(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "atanh":
                return Math.atanh(this.args[0].evaluate(context));
            case "ceil":
                return Math.ceil(this.args[0].evaluate(context));
            case "clamp":
                return Math.min(Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context)), this.args[2].evaluate(context));
            case "cos":
                return Math.cos(this.args[0].evaluate(context));
            //case "cross":
            //TODO: (x[i] * y[j] - x[j] * y[i])
            case "degrees":
                return (this.args[0].evaluate(context) * 180) / Math.PI;
            //case "determinant":
            //TODO implement
            case "distance":
                return Math.sqrt(Math.pow(this.args[0].evaluate(context) - this.args[1].evaluate(context), 2));
            case "dot":
            //TODO: (x[i] * y[i])
            case "exp":
                return Math.exp(this.args[0].evaluate(context));
            case "exp2":
                return Math.pow(2, this.args[0].evaluate(context));
            //case "extractBits":
            //TODO: implement
            //case "firstLeadingBit":
            //TODO: implement
            case "floor":
                return Math.floor(this.args[0].evaluate(context));
            case "fma":
                return (this.args[0].evaluate(context) * this.args[1].evaluate(context) +
                    this.args[2].evaluate(context));
            case "fract":
                return (this.args[0].evaluate(context) -
                    Math.floor(this.args[0].evaluate(context)));
            //case "frexp":
            //TODO: implement
            case "inverseSqrt":
                return 1 / Math.sqrt(this.args[0].evaluate(context));
            //case "length":
            //TODO: implement
            case "log":
                return Math.log(this.args[0].evaluate(context));
            case "log2":
                return Math.log2(this.args[0].evaluate(context));
            case "max":
                return Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "min":
                return Math.min(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "mix":
                return (this.args[0].evaluate(context) *
                    (1 - this.args[2].evaluate(context)) +
                    this.args[1].evaluate(context) * this.args[2].evaluate(context));
            case "modf":
                return (this.args[0].evaluate(context) -
                    Math.floor(this.args[0].evaluate(context)));
            case "pow":
                return Math.pow(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "radians":
                return (this.args[0].evaluate(context) * Math.PI) / 180;
            case "round":
                return Math.round(this.args[0].evaluate(context));
            case "sign":
                return Math.sign(this.args[0].evaluate(context));
            case "sin":
                return Math.sin(this.args[0].evaluate(context));
            case "sinh":
                return Math.sinh(this.args[0].evaluate(context));
            case "saturate":
                return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);
            case "smoothstep":
                return (this.args[0].evaluate(context) *
                    this.args[0].evaluate(context) *
                    (3 - 2 * this.args[0].evaluate(context)));
            case "sqrt":
                return Math.sqrt(this.args[0].evaluate(context));
            case "step":
                return this.args[0].evaluate(context) < this.args[1].evaluate(context)
                    ? 0
                    : 1;
            case "tan":
                return Math.tan(this.args[0].evaluate(context));
            case "tanh":
                return Math.tanh(this.args[0].evaluate(context));
            case "trunc":
                return Math.trunc(this.args[0].evaluate(context));
            default:
                throw new Error("Non const function: " + this.name);
        }
    }
    search(callback) {
        for (const node of this.args) {
            node.search(callback);
        }
        callback(this);
    }
}
/**
 * @class VariableExpr
 * @extends Expression
 * @category AST
 */
class VariableExpr extends Expression {
    constructor(name) {
        super();
        this.name = name;
    }
    get astNodeType() {
        return "varExpr";
    }
    search(callback) {
        callback(this);
        if (this.postfix) {
            this.postfix.search(callback);
        }
    }
    evaluate(context) {
        const constant = context.constants.get(this.name);
        if (!constant) {
            throw new Error("Cannot evaluate node");
        }
        return constant.evaluate(context);
    }
}
/**
 * @class ConstExpr
 * @extends Expression
 * @category AST
 */
class ConstExpr extends Expression {
    constructor(name, initializer) {
        super();
        this.name = name;
        this.initializer = initializer;
    }
    get astNodeType() {
        return "constExpr";
    }
    evaluate(context) {
        var _a, _b;
        if (this.initializer instanceof CreateExpr) {
            // This is a struct constant
            const property = (_a = this.postfix) === null || _a === void 0 ? void 0 : _a.evaluateString(context);
            const type = (_b = this.initializer.type) === null || _b === void 0 ? void 0 : _b.name;
            const struct = context.structs.get(type);
            const memberIndex = struct === null || struct === void 0 ? void 0 : struct.getMemberIndex(property);
            if (memberIndex != -1) {
                const value = this.initializer.args[memberIndex].evaluate(context);
                return value;
            }
            console.log(memberIndex);
        }
        return this.initializer.evaluate(context);
    }
    search(callback) {
        this.initializer.search(callback);
    }
}
/**
 * @class LiteralExpr
 * @extends Expression
 * @category AST
 */
class LiteralExpr extends Expression {
    constructor(value) {
        super();
        this.value = value;
    }
    get astNodeType() {
        return "literalExpr";
    }
    evaluate() {
        return this.value;
    }
}
/**
 * @class BitcastExpr
 * @extends Expression
 * @category AST
 */
class BitcastExpr extends Expression {
    constructor(type, value) {
        super();
        this.type = type;
        this.value = value;
    }
    get astNodeType() {
        return "bitcastExpr";
    }
    search(callback) {
        this.value.search(callback);
    }
}
/**
 * @class TypecastExpr
 * @extends Expression
 * @category AST
 */
class TypecastExpr extends Expression {
    constructor(type, args) {
        super();
        this.type = type;
        this.args = args;
    }
    get astNodeType() {
        return "typecastExpr";
    }
    evaluate(context) {
        return this.args[0].evaluate(context);
    }
    search(callback) {
        this.searchBlock(this.args, callback);
    }
}
/**
 * @class GroupingExpr
 * @extends Expression
 * @category AST
 */
class GroupingExpr extends Expression {
    constructor(contents) {
        super();
        this.contents = contents;
    }
    get astNodeType() {
        return "groupExpr";
    }
    evaluate(context) {
        return this.contents[0].evaluate(context);
    }
    search(callback) {
        this.searchBlock(this.contents, callback);
    }
}
/**
 * @class ArrayIndex
 * @extends Expression
 * @category AST
 */
class ArrayIndex extends Expression {
    constructor(index) {
        super();
        this.index = index;
    }
    search(callback) {
        this.index.search(callback);
    }
}
/**
 * @class Operator
 * @extends Expression
 * @category AST
 */
class Operator extends Expression {
    constructor() {
        super();
    }
}
/**
 * @class UnaryOperator
 * @extends Operator
 * @category AST
 * @property {string} operator +, -, !, ~
 */
class UnaryOperator extends Operator {
    constructor(operator, right) {
        super();
        this.operator = operator;
        this.right = right;
    }
    get astNodeType() {
        return "unaryOp";
    }
    evaluate(context) {
        switch (this.operator) {
            case "+":
                return this.right.evaluate(context);
            case "-":
                return -this.right.evaluate(context);
            case "!":
                return this.right.evaluate(context) ? 0 : 1;
            case "~":
                return ~this.right.evaluate(context);
            default:
                throw new Error("Unknown unary operator: " + this.operator);
        }
    }
    search(callback) {
        this.right.search(callback);
    }
}
/**
 * @class BinaryOperator
 * @extends Operator
 * @category AST
 * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||
 */
class BinaryOperator extends Operator {
    constructor(operator, left, right) {
        super();
        this.operator = operator;
        this.left = left;
        this.right = right;
    }
    get astNodeType() {
        return "binaryOp";
    }
    evaluate(context) {
        switch (this.operator) {
            case "+":
                return this.left.evaluate(context) + this.right.evaluate(context);
            case "-":
                return this.left.evaluate(context) - this.right.evaluate(context);
            case "*":
                return this.left.evaluate(context) * this.right.evaluate(context);
            case "/":
                return this.left.evaluate(context) / this.right.evaluate(context);
            case "%":
                return this.left.evaluate(context) % this.right.evaluate(context);
            case "==":
                return this.left.evaluate(context) == this.right.evaluate(context)
                    ? 1
                    : 0;
            case "!=":
                return this.left.evaluate(context) != this.right.evaluate(context)
                    ? 1
                    : 0;
            case "<":
                return this.left.evaluate(context) < this.right.evaluate(context)
                    ? 1
                    : 0;
            case ">":
                return this.left.evaluate(context) > this.right.evaluate(context)
                    ? 1
                    : 0;
            case "<=":
                return this.left.evaluate(context) <= this.right.evaluate(context)
                    ? 1
                    : 0;
            case ">=":
                return this.left.evaluate(context) >= this.right.evaluate(context)
                    ? 1
                    : 0;
            case "&&":
                return this.left.evaluate(context) && this.right.evaluate(context)
                    ? 1
                    : 0;
            case "||":
                return this.left.evaluate(context) || this.right.evaluate(context)
                    ? 1
                    : 0;
            default:
                throw new Error(`Unknown operator ${this.operator}`);
        }
    }
    search(callback) {
        this.left.search(callback);
        this.right.search(callback);
    }
}
/**
 * @class SwitchCase
 * @extends Node
 * @category AST
 */
class SwitchCase extends Node {
    constructor() {
        super();
    }
}
/**
 * @class Case
 * @extends SwitchCase
 * @category AST
 */
class Case extends SwitchCase {
    constructor(selector, body) {
        super();
        this.selector = selector;
        this.body = body;
    }
    get astNodeType() {
        return "case";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Default
 * @extends SwitchCase
 * @category AST
 */
class Default extends SwitchCase {
    constructor(body) {
        super();
        this.body = body;
    }
    get astNodeType() {
        return "default";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Argument
 * @extends Node
 * @category AST
 */
class Argument extends Node {
    constructor(name, type, attributes) {
        super();
        this.name = name;
        this.type = type;
        this.attributes = attributes;
    }
    get astNodeType() {
        return "argument";
    }
}
/**
 * @class ElseIf
 * @extends Node
 * @category AST
 */
class ElseIf extends Node {
    constructor(condition, body) {
        super();
        this.condition = condition;
        this.body = body;
    }
    get astNodeType() {
        return "elseif";
    }
    search(callback) {
        this.condition.search(callback);
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Member
 * @extends Node
 * @category AST
 */
class Member extends Node {
    constructor(name, type, attributes) {
        super();
        this.name = name;
        this.type = type;
        this.attributes = attributes;
    }
    get astNodeType() {
        return "member";
    }
}
/**
 * @class Attribute
 * @extends Node
 * @category AST
 */
class Attribute extends Node {
    constructor(name, value) {
        super();
        this.name = name;
        this.value = value;
    }
    get astNodeType() {
        return "attribute";
    }
}

var _a;
var TokenClass;
(function (TokenClass) {
    TokenClass[TokenClass["token"] = 0] = "token";
    TokenClass[TokenClass["keyword"] = 1] = "keyword";
    TokenClass[TokenClass["reserved"] = 2] = "reserved";
})(TokenClass || (TokenClass = {}));
class TokenType {
    constructor(name, type, rule) {
        this.name = name;
        this.type = type;
        this.rule = rule;
    }
    toString() {
        return this.name;
    }
}
/// Catalog of defined token types, keywords, and reserved words.
class TokenTypes {
}
_a = TokenTypes;
TokenTypes.none = new TokenType("", TokenClass.reserved, "");
TokenTypes.eof = new TokenType("EOF", TokenClass.token, "");
TokenTypes.reserved = {
    asm: new TokenType("asm", TokenClass.reserved, "asm"),
    bf16: new TokenType("bf16", TokenClass.reserved, "bf16"),
    do: new TokenType("do", TokenClass.reserved, "do"),
    enum: new TokenType("enum", TokenClass.reserved, "enum"),
    f16: new TokenType("f16", TokenClass.reserved, "f16"),
    f64: new TokenType("f64", TokenClass.reserved, "f64"),
    handle: new TokenType("handle", TokenClass.reserved, "handle"),
    i8: new TokenType("i8", TokenClass.reserved, "i8"),
    i16: new TokenType("i16", TokenClass.reserved, "i16"),
    i64: new TokenType("i64", TokenClass.reserved, "i64"),
    mat: new TokenType("mat", TokenClass.reserved, "mat"),
    premerge: new TokenType("premerge", TokenClass.reserved, "premerge"),
    regardless: new TokenType("regardless", TokenClass.reserved, "regardless"),
    typedef: new TokenType("typedef", TokenClass.reserved, "typedef"),
    u8: new TokenType("u8", TokenClass.reserved, "u8"),
    u16: new TokenType("u16", TokenClass.reserved, "u16"),
    u64: new TokenType("u64", TokenClass.reserved, "u64"),
    unless: new TokenType("unless", TokenClass.reserved, "unless"),
    using: new TokenType("using", TokenClass.reserved, "using"),
    vec: new TokenType("vec", TokenClass.reserved, "vec"),
    void: new TokenType("void", TokenClass.reserved, "void"),
};
TokenTypes.keywords = {
    array: new TokenType("array", TokenClass.keyword, "array"),
    atomic: new TokenType("atomic", TokenClass.keyword, "atomic"),
    bool: new TokenType("bool", TokenClass.keyword, "bool"),
    f32: new TokenType("f32", TokenClass.keyword, "f32"),
    i32: new TokenType("i32", TokenClass.keyword, "i32"),
    mat2x2: new TokenType("mat2x2", TokenClass.keyword, "mat2x2"),
    mat2x3: new TokenType("mat2x3", TokenClass.keyword, "mat2x3"),
    mat2x4: new TokenType("mat2x4", TokenClass.keyword, "mat2x4"),
    mat3x2: new TokenType("mat3x2", TokenClass.keyword, "mat3x2"),
    mat3x3: new TokenType("mat3x3", TokenClass.keyword, "mat3x3"),
    mat3x4: new TokenType("mat3x4", TokenClass.keyword, "mat3x4"),
    mat4x2: new TokenType("mat4x2", TokenClass.keyword, "mat4x2"),
    mat4x3: new TokenType("mat4x3", TokenClass.keyword, "mat4x3"),
    mat4x4: new TokenType("mat4x4", TokenClass.keyword, "mat4x4"),
    ptr: new TokenType("ptr", TokenClass.keyword, "ptr"),
    sampler: new TokenType("sampler", TokenClass.keyword, "sampler"),
    sampler_comparison: new TokenType("sampler_comparison", TokenClass.keyword, "sampler_comparison"),
    struct: new TokenType("struct", TokenClass.keyword, "struct"),
    texture_1d: new TokenType("texture_1d", TokenClass.keyword, "texture_1d"),
    texture_2d: new TokenType("texture_2d", TokenClass.keyword, "texture_2d"),
    texture_2d_array: new TokenType("texture_2d_array", TokenClass.keyword, "texture_2d_array"),
    texture_3d: new TokenType("texture_3d", TokenClass.keyword, "texture_3d"),
    texture_cube: new TokenType("texture_cube", TokenClass.keyword, "texture_cube"),
    texture_cube_array: new TokenType("texture_cube_array", TokenClass.keyword, "texture_cube_array"),
    texture_multisampled_2d: new TokenType("texture_multisampled_2d", TokenClass.keyword, "texture_multisampled_2d"),
    texture_storage_1d: new TokenType("texture_storage_1d", TokenClass.keyword, "texture_storage_1d"),
    texture_storage_2d: new TokenType("texture_storage_2d", TokenClass.keyword, "texture_storage_2d"),
    texture_storage_2d_array: new TokenType("texture_storage_2d_array", TokenClass.keyword, "texture_storage_2d_array"),
    texture_storage_3d: new TokenType("texture_storage_3d", TokenClass.keyword, "texture_storage_3d"),
    texture_depth_2d: new TokenType("texture_depth_2d", TokenClass.keyword, "texture_depth_2d"),
    texture_depth_2d_array: new TokenType("texture_depth_2d_array", TokenClass.keyword, "texture_depth_2d_array"),
    texture_depth_cube: new TokenType("texture_depth_cube", TokenClass.keyword, "texture_depth_cube"),
    texture_depth_cube_array: new TokenType("texture_depth_cube_array", TokenClass.keyword, "texture_depth_cube_array"),
    texture_depth_multisampled_2d: new TokenType("texture_depth_multisampled_2d", TokenClass.keyword, "texture_depth_multisampled_2d"),
    texture_external: new TokenType("texture_external", TokenClass.keyword, "texture_external"),
    u32: new TokenType("u32", TokenClass.keyword, "u32"),
    vec2: new TokenType("vec2", TokenClass.keyword, "vec2"),
    vec3: new TokenType("vec3", TokenClass.keyword, "vec3"),
    vec4: new TokenType("vec4", TokenClass.keyword, "vec4"),
    bitcast: new TokenType("bitcast", TokenClass.keyword, "bitcast"),
    block: new TokenType("block", TokenClass.keyword, "block"),
    break: new TokenType("break", TokenClass.keyword, "break"),
    case: new TokenType("case", TokenClass.keyword, "case"),
    continue: new TokenType("continue", TokenClass.keyword, "continue"),
    continuing: new TokenType("continuing", TokenClass.keyword, "continuing"),
    default: new TokenType("default", TokenClass.keyword, "default"),
    diagnostic: new TokenType("diagnostic", TokenClass.keyword, "diagnostic"),
    discard: new TokenType("discard", TokenClass.keyword, "discard"),
    else: new TokenType("else", TokenClass.keyword, "else"),
    enable: new TokenType("enable", TokenClass.keyword, "enable"),
    fallthrough: new TokenType("fallthrough", TokenClass.keyword, "fallthrough"),
    false: new TokenType("false", TokenClass.keyword, "false"),
    fn: new TokenType("fn", TokenClass.keyword, "fn"),
    for: new TokenType("for", TokenClass.keyword, "for"),
    function: new TokenType("function", TokenClass.keyword, "function"),
    if: new TokenType("if", TokenClass.keyword, "if"),
    let: new TokenType("let", TokenClass.keyword, "let"),
    const: new TokenType("const", TokenClass.keyword, "const"),
    loop: new TokenType("loop", TokenClass.keyword, "loop"),
    while: new TokenType("while", TokenClass.keyword, "while"),
    private: new TokenType("private", TokenClass.keyword, "private"),
    read: new TokenType("read", TokenClass.keyword, "read"),
    read_write: new TokenType("read_write", TokenClass.keyword, "read_write"),
    return: new TokenType("return", TokenClass.keyword, "return"),
    requires: new TokenType("requires", TokenClass.keyword, "requires"),
    storage: new TokenType("storage", TokenClass.keyword, "storage"),
    switch: new TokenType("switch", TokenClass.keyword, "switch"),
    true: new TokenType("true", TokenClass.keyword, "true"),
    alias: new TokenType("alias", TokenClass.keyword, "alias"),
    type: new TokenType("type", TokenClass.keyword, "type"),
    uniform: new TokenType("uniform", TokenClass.keyword, "uniform"),
    var: new TokenType("var", TokenClass.keyword, "var"),
    override: new TokenType("override", TokenClass.keyword, "override"),
    workgroup: new TokenType("workgroup", TokenClass.keyword, "workgroup"),
    write: new TokenType("write", TokenClass.keyword, "write"),
    r8unorm: new TokenType("r8unorm", TokenClass.keyword, "r8unorm"),
    r8snorm: new TokenType("r8snorm", TokenClass.keyword, "r8snorm"),
    r8uint: new TokenType("r8uint", TokenClass.keyword, "r8uint"),
    r8sint: new TokenType("r8sint", TokenClass.keyword, "r8sint"),
    r16uint: new TokenType("r16uint", TokenClass.keyword, "r16uint"),
    r16sint: new TokenType("r16sint", TokenClass.keyword, "r16sint"),
    r16float: new TokenType("r16float", TokenClass.keyword, "r16float"),
    rg8unorm: new TokenType("rg8unorm", TokenClass.keyword, "rg8unorm"),
    rg8snorm: new TokenType("rg8snorm", TokenClass.keyword, "rg8snorm"),
    rg8uint: new TokenType("rg8uint", TokenClass.keyword, "rg8uint"),
    rg8sint: new TokenType("rg8sint", TokenClass.keyword, "rg8sint"),
    r32uint: new TokenType("r32uint", TokenClass.keyword, "r32uint"),
    r32sint: new TokenType("r32sint", TokenClass.keyword, "r32sint"),
    r32float: new TokenType("r32float", TokenClass.keyword, "r32float"),
    rg16uint: new TokenType("rg16uint", TokenClass.keyword, "rg16uint"),
    rg16sint: new TokenType("rg16sint", TokenClass.keyword, "rg16sint"),
    rg16float: new TokenType("rg16float", TokenClass.keyword, "rg16float"),
    rgba8unorm: new TokenType("rgba8unorm", TokenClass.keyword, "rgba8unorm"),
    rgba8unorm_srgb: new TokenType("rgba8unorm_srgb", TokenClass.keyword, "rgba8unorm_srgb"),
    rgba8snorm: new TokenType("rgba8snorm", TokenClass.keyword, "rgba8snorm"),
    rgba8uint: new TokenType("rgba8uint", TokenClass.keyword, "rgba8uint"),
    rgba8sint: new TokenType("rgba8sint", TokenClass.keyword, "rgba8sint"),
    bgra8unorm: new TokenType("bgra8unorm", TokenClass.keyword, "bgra8unorm"),
    bgra8unorm_srgb: new TokenType("bgra8unorm_srgb", TokenClass.keyword, "bgra8unorm_srgb"),
    rgb10a2unorm: new TokenType("rgb10a2unorm", TokenClass.keyword, "rgb10a2unorm"),
    rg11b10float: new TokenType("rg11b10float", TokenClass.keyword, "rg11b10float"),
    rg32uint: new TokenType("rg32uint", TokenClass.keyword, "rg32uint"),
    rg32sint: new TokenType("rg32sint", TokenClass.keyword, "rg32sint"),
    rg32float: new TokenType("rg32float", TokenClass.keyword, "rg32float"),
    rgba16uint: new TokenType("rgba16uint", TokenClass.keyword, "rgba16uint"),
    rgba16sint: new TokenType("rgba16sint", TokenClass.keyword, "rgba16sint"),
    rgba16float: new TokenType("rgba16float", TokenClass.keyword, "rgba16float"),
    rgba32uint: new TokenType("rgba32uint", TokenClass.keyword, "rgba32uint"),
    rgba32sint: new TokenType("rgba32sint", TokenClass.keyword, "rgba32sint"),
    rgba32float: new TokenType("rgba32float", TokenClass.keyword, "rgba32float"),
    static_assert: new TokenType("static_assert", TokenClass.keyword, "static_assert"),
    // WGSL grammar has a few keywords that have different token names than the strings they
    // represent. Aliasing them here.
    /*int32: new TokenType("i32", TokenClass.keyword, "i32"),
        uint32: new TokenType("u32", TokenClass.keyword, "u32"),
        float32: new TokenType("f32", TokenClass.keyword, "f32"),
        pointer: new TokenType("ptr", TokenClass.keyword, "ptr"),*/
};
TokenTypes.tokens = {
    decimal_float_literal: new TokenType("decimal_float_literal", TokenClass.token, /((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),
    hex_float_literal: new TokenType("hex_float_literal", TokenClass.token, /-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),
    int_literal: new TokenType("int_literal", TokenClass.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),
    uint_literal: new TokenType("uint_literal", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),
    ident: new TokenType("ident", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),
    and: new TokenType("and", TokenClass.token, "&"),
    and_and: new TokenType("and_and", TokenClass.token, "&&"),
    arrow: new TokenType("arrow ", TokenClass.token, "->"),
    attr: new TokenType("attr", TokenClass.token, "@"),
    forward_slash: new TokenType("forward_slash", TokenClass.token, "/"),
    bang: new TokenType("bang", TokenClass.token, "!"),
    bracket_left: new TokenType("bracket_left", TokenClass.token, "["),
    bracket_right: new TokenType("bracket_right", TokenClass.token, "]"),
    brace_left: new TokenType("brace_left", TokenClass.token, "{"),
    brace_right: new TokenType("brace_right", TokenClass.token, "}"),
    colon: new TokenType("colon", TokenClass.token, ":"),
    comma: new TokenType("comma", TokenClass.token, ","),
    equal: new TokenType("equal", TokenClass.token, "="),
    equal_equal: new TokenType("equal_equal", TokenClass.token, "=="),
    not_equal: new TokenType("not_equal", TokenClass.token, "!="),
    greater_than: new TokenType("greater_than", TokenClass.token, ">"),
    greater_than_equal: new TokenType("greater_than_equal", TokenClass.token, ">="),
    shift_right: new TokenType("shift_right", TokenClass.token, ">>"),
    less_than: new TokenType("less_than", TokenClass.token, "<"),
    less_than_equal: new TokenType("less_than_equal", TokenClass.token, "<="),
    shift_left: new TokenType("shift_left", TokenClass.token, "<<"),
    modulo: new TokenType("modulo", TokenClass.token, "%"),
    minus: new TokenType("minus", TokenClass.token, "-"),
    minus_minus: new TokenType("minus_minus", TokenClass.token, "--"),
    period: new TokenType("period", TokenClass.token, "."),
    plus: new TokenType("plus", TokenClass.token, "+"),
    plus_plus: new TokenType("plus_plus", TokenClass.token, "++"),
    or: new TokenType("or", TokenClass.token, "|"),
    or_or: new TokenType("or_or", TokenClass.token, "||"),
    paren_left: new TokenType("paren_left", TokenClass.token, "("),
    paren_right: new TokenType("paren_right", TokenClass.token, ")"),
    semicolon: new TokenType("semicolon", TokenClass.token, ";"),
    star: new TokenType("star", TokenClass.token, "*"),
    tilde: new TokenType("tilde", TokenClass.token, "~"),
    underscore: new TokenType("underscore", TokenClass.token, "_"),
    xor: new TokenType("xor", TokenClass.token, "^"),
    plus_equal: new TokenType("plus_equal", TokenClass.token, "+="),
    minus_equal: new TokenType("minus_equal", TokenClass.token, "-="),
    times_equal: new TokenType("times_equal", TokenClass.token, "*="),
    division_equal: new TokenType("division_equal", TokenClass.token, "/="),
    modulo_equal: new TokenType("modulo_equal", TokenClass.token, "%="),
    and_equal: new TokenType("and_equal", TokenClass.token, "&="),
    or_equal: new TokenType("or_equal", TokenClass.token, "|="),
    xor_equal: new TokenType("xor_equal", TokenClass.token, "^="),
    shift_right_equal: new TokenType("shift_right_equal", TokenClass.token, ">>="),
    shift_left_equal: new TokenType("shift_left_equal", TokenClass.token, "<<="),
};
TokenTypes.simpleTokens = {
    "@": _a.tokens.attr,
    "{": _a.tokens.brace_left,
    "}": _a.tokens.brace_right,
    ":": _a.tokens.colon,
    ",": _a.tokens.comma,
    "(": _a.tokens.paren_left,
    ")": _a.tokens.paren_right,
    ";": _a.tokens.semicolon,
};
TokenTypes.literalTokens = {
    "&": _a.tokens.and,
    "&&": _a.tokens.and_and,
    "->": _a.tokens.arrow,
    "/": _a.tokens.forward_slash,
    "!": _a.tokens.bang,
    "[": _a.tokens.bracket_left,
    "]": _a.tokens.bracket_right,
    "=": _a.tokens.equal,
    "==": _a.tokens.equal_equal,
    "!=": _a.tokens.not_equal,
    ">": _a.tokens.greater_than,
    ">=": _a.tokens.greater_than_equal,
    ">>": _a.tokens.shift_right,
    "<": _a.tokens.less_than,
    "<=": _a.tokens.less_than_equal,
    "<<": _a.tokens.shift_left,
    "%": _a.tokens.modulo,
    "-": _a.tokens.minus,
    "--": _a.tokens.minus_minus,
    ".": _a.tokens.period,
    "+": _a.tokens.plus,
    "++": _a.tokens.plus_plus,
    "|": _a.tokens.or,
    "||": _a.tokens.or_or,
    "*": _a.tokens.star,
    "~": _a.tokens.tilde,
    "_": _a.tokens.underscore,
    "^": _a.tokens.xor,
    "+=": _a.tokens.plus_equal,
    "-=": _a.tokens.minus_equal,
    "*=": _a.tokens.times_equal,
    "/=": _a.tokens.division_equal,
    "%=": _a.tokens.modulo_equal,
    "&=": _a.tokens.and_equal,
    "|=": _a.tokens.or_equal,
    "^=": _a.tokens.xor_equal,
    ">>=": _a.tokens.shift_right_equal,
    "<<=": _a.tokens.shift_left_equal,
};
TokenTypes.regexTokens = {
    decimal_float_literal: _a.tokens.decimal_float_literal,
    hex_float_literal: _a.tokens.hex_float_literal,
    int_literal: _a.tokens.int_literal,
    uint_literal: _a.tokens.uint_literal,
    ident: _a.tokens.ident,
};
TokenTypes.storage_class = [
    _a.keywords.function,
    _a.keywords.private,
    _a.keywords.workgroup,
    _a.keywords.uniform,
    _a.keywords.storage,
];
TokenTypes.access_mode = [
    _a.keywords.read,
    _a.keywords.write,
    _a.keywords.read_write,
];
TokenTypes.sampler_type = [
    _a.keywords.sampler,
    _a.keywords.sampler_comparison,
];
TokenTypes.sampled_texture_type = [
    _a.keywords.texture_1d,
    _a.keywords.texture_2d,
    _a.keywords.texture_2d_array,
    _a.keywords.texture_3d,
    _a.keywords.texture_cube,
    _a.keywords.texture_cube_array,
];
TokenTypes.multisampled_texture_type = [
    _a.keywords.texture_multisampled_2d,
];
TokenTypes.storage_texture_type = [
    _a.keywords.texture_storage_1d,
    _a.keywords.texture_storage_2d,
    _a.keywords.texture_storage_2d_array,
    _a.keywords.texture_storage_3d,
];
TokenTypes.depth_texture_type = [
    _a.keywords.texture_depth_2d,
    _a.keywords.texture_depth_2d_array,
    _a.keywords.texture_depth_cube,
    _a.keywords.texture_depth_cube_array,
    _a.keywords.texture_depth_multisampled_2d,
];
TokenTypes.texture_external_type = [_a.keywords.texture_external];
TokenTypes.any_texture_type = [
    ..._a.sampled_texture_type,
    ..._a.multisampled_texture_type,
    ..._a.storage_texture_type,
    ..._a.depth_texture_type,
    ..._a.texture_external_type,
];
TokenTypes.texel_format = [
    _a.keywords.r8unorm,
    _a.keywords.r8snorm,
    _a.keywords.r8uint,
    _a.keywords.r8sint,
    _a.keywords.r16uint,
    _a.keywords.r16sint,
    _a.keywords.r16float,
    _a.keywords.rg8unorm,
    _a.keywords.rg8snorm,
    _a.keywords.rg8uint,
    _a.keywords.rg8sint,
    _a.keywords.r32uint,
    _a.keywords.r32sint,
    _a.keywords.r32float,
    _a.keywords.rg16uint,
    _a.keywords.rg16sint,
    _a.keywords.rg16float,
    _a.keywords.rgba8unorm,
    _a.keywords.rgba8unorm_srgb,
    _a.keywords.rgba8snorm,
    _a.keywords.rgba8uint,
    _a.keywords.rgba8sint,
    _a.keywords.bgra8unorm,
    _a.keywords.bgra8unorm_srgb,
    _a.keywords.rgb10a2unorm,
    _a.keywords.rg11b10float,
    _a.keywords.rg32uint,
    _a.keywords.rg32sint,
    _a.keywords.rg32float,
    _a.keywords.rgba16uint,
    _a.keywords.rgba16sint,
    _a.keywords.rgba16float,
    _a.keywords.rgba32uint,
    _a.keywords.rgba32sint,
    _a.keywords.rgba32float,
];
TokenTypes.const_literal = [
    _a.tokens.int_literal,
    _a.tokens.uint_literal,
    _a.tokens.decimal_float_literal,
    _a.tokens.hex_float_literal,
    _a.keywords.true,
    _a.keywords.false,
];
TokenTypes.literal_or_ident = [
    _a.tokens.ident,
    _a.tokens.int_literal,
    _a.tokens.uint_literal,
    _a.tokens.decimal_float_literal,
    _a.tokens.hex_float_literal,
];
TokenTypes.element_count_expression = [
    _a.tokens.int_literal,
    _a.tokens.uint_literal,
    _a.tokens.ident,
];
TokenTypes.template_types = [
    _a.keywords.vec2,
    _a.keywords.vec3,
    _a.keywords.vec4,
    _a.keywords.mat2x2,
    _a.keywords.mat2x3,
    _a.keywords.mat2x4,
    _a.keywords.mat3x2,
    _a.keywords.mat3x3,
    _a.keywords.mat3x4,
    _a.keywords.mat4x2,
    _a.keywords.mat4x3,
    _a.keywords.mat4x4,
    _a.keywords.atomic,
    _a.keywords.bitcast,
    ..._a.any_texture_type,
];
// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.
// The attribute grammar should be ident | block.
TokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block, _a.keywords.diagnostic];
TokenTypes.assignment_operators = [
    _a.tokens.equal,
    _a.tokens.plus_equal,
    _a.tokens.minus_equal,
    _a.tokens.times_equal,
    _a.tokens.division_equal,
    _a.tokens.modulo_equal,
    _a.tokens.and_equal,
    _a.tokens.or_equal,
    _a.tokens.xor_equal,
    _a.tokens.shift_right_equal,
    _a.tokens.shift_left_equal,
];
TokenTypes.increment_operators = [
    _a.tokens.plus_plus,
    _a.tokens.minus_minus,
];
/// A token parsed by the WgslScanner.
class Token {
    constructor(type, lexeme, line) {
        this.type = type;
        this.lexeme = lexeme;
        this.line = line;
    }
    toString() {
        return this.lexeme;
    }
    isTemplateType() {
        return TokenTypes.template_types.indexOf(this.type) != -1;
    }
    isArrayType() {
        return this.type == TokenTypes.keywords.array;
    }
    isArrayOrTemplateType() {
        return this.isArrayType() || this.isTemplateType();
    }
}
/// Lexical scanner for the WGSL language. This takes an input source text and generates a list
/// of Token objects, which can then be fed into the WgslParser to generate an AST.
class WgslScanner {
    constructor(source) {
        this._tokens = [];
        this._start = 0;
        this._current = 0;
        this._line = 1;
        this._source = source !== null && source !== void 0 ? source : "";
    }
    /// Scan all tokens from the source.
    scanTokens() {
        while (!this._isAtEnd()) {
            this._start = this._current;
            if (!this.scanToken()) {
                throw `Invalid syntax at line ${this._line}`;
            }
        }
        this._tokens.push(new Token(TokenTypes.eof, "", this._line));
        return this._tokens;
    }
    /// Scan a single token from the source.
    scanToken() {
        // Find the longest consecutive set of characters that match a rule.
        let lexeme = this._advance();
        // Skip line-feed, adding to the line counter.
        if (lexeme == "\n") {
            this._line++;
            return true;
        }
        // Skip whitespace
        if (this._isWhitespace(lexeme)) {
            return true;
        }
        if (lexeme == "/") {
            // If it's a // comment, skip everything until the next line-feed.
            if (this._peekAhead() == "/") {
                while (lexeme != "\n") {
                    if (this._isAtEnd()) {
                        return true;
                    }
                    lexeme = this._advance();
                }
                // skip the linefeed
                this._line++;
                return true;
            }
            else if (this._peekAhead() == "*") {
                // If it's a / * block comment, skip everything until the matching * /,
                // allowing for nested block comments.
                this._advance();
                let commentLevel = 1;
                while (commentLevel > 0) {
                    if (this._isAtEnd()) {
                        return true;
                    }
                    lexeme = this._advance();
                    if (lexeme == "\n") {
                        this._line++;
                    }
                    else if (lexeme == "*") {
                        if (this._peekAhead() == "/") {
                            this._advance();
                            commentLevel--;
                            if (commentLevel == 0) {
                                return true;
                            }
                        }
                    }
                    else if (lexeme == "/") {
                        if (this._peekAhead() == "*") {
                            this._advance();
                            commentLevel++;
                        }
                    }
                }
                return true;
            }
        }
        // Shortcut single character tokens
        const simpleToken = TokenTypes.simpleTokens[lexeme];
        if (simpleToken) {
            this._addToken(simpleToken);
            return true;
        }
        // Shortcut keywords and identifiers
        let matchType = TokenTypes.none;
        const isAlpha = this._isAlpha(lexeme);
        const isUnderscore = lexeme === "_";
        if (this._isAlphaNumeric(lexeme)) {
            let nextChar = this._peekAhead();
            while (this._isAlphaNumeric(nextChar)) {
                lexeme += this._advance();
                nextChar = this._peekAhead();
            }
        }
        if (isAlpha) {
            const matchedType = TokenTypes.keywords[lexeme];
            if (matchedType) {
                this._addToken(matchedType);
                return true;
            }
        }
        if (isAlpha || isUnderscore) {
            this._addToken(TokenTypes.tokens.ident);
            return true;
        }
        // Scan for the next valid token type
        for (;;) {
            let matchedType = this._findType(lexeme);
            // An exception to "longest lexeme" rule is '>>'. In the case of 1>>2, it's a
            // shift_right.
            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,
            // and one to close the array).
            // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),
            // it's a greather_than and an equal, not a greater_than_equal.
            // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases
            // are predicated on it the > either closing a template, or being part of an operator.
            // The solution here is to check if there was a less_than up to some number of tokens
            // previously, and the token prior to that is a keyword that requires a '<', then it will be
            // split into two operators; otherwise it's a single operator.
            const nextLexeme = this._peekAhead();
            if (lexeme == ">" && (nextLexeme == ">" || nextLexeme == "=")) {
                let foundLessThan = false;
                let ti = this._tokens.length - 1;
                for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {
                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {
                        if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {
                            foundLessThan = true;
                        }
                        break;
                    }
                }
                // If there was a less_than in the recent token history, then this is probably a
                // greater_than.
                if (foundLessThan) {
                    this._addToken(matchedType);
                    return true;
                }
            }
            // The current lexeme may not match any rule, but some token types may be invalid for
            // part of the string but valid after a few more characters.
            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,
            // "0" is a int_literal, then "0x" is invalid. If we stopped there, it would return
            // the int_literal "0", but that's incorrect. So if we look forward a few characters,
            // we'd get "0x.", which is still invalid, followed by "0x.5" which is the correct
            // hex_float_literal. So that means if we hit an non-matching string, we should look
            // ahead up to two characters to see if the string starts matching a valid rule again.
            if (matchedType === TokenTypes.none) {
                let lookAheadLexeme = lexeme;
                let lookAhead = 0;
                const maxLookAhead = 2;
                for (let li = 0; li < maxLookAhead; ++li) {
                    lookAheadLexeme += this._peekAhead(li);
                    matchedType = this._findType(lookAheadLexeme);
                    if (matchedType !== TokenTypes.none) {
                        lookAhead = li;
                        break;
                    }
                }
                if (matchedType === TokenTypes.none) {
                    if (matchType === TokenTypes.none) {
                        return false;
                    }
                    this._current--;
                    this._addToken(matchType);
                    return true;
                }
                lexeme = lookAheadLexeme;
                this._current += lookAhead + 1;
            }
            matchType = matchedType;
            if (this._isAtEnd()) {
                break;
            }
            lexeme += this._advance();
        }
        // We got to the end of the input stream. Then the token we've ready so far is it.
        if (matchType === TokenTypes.none) {
            return false;
        }
        this._addToken(matchType);
        return true;
    }
    _findType(lexeme) {
        for (const name in TokenTypes.regexTokens) {
            const type = TokenTypes.regexTokens[name];
            if (this._match(lexeme, type.rule)) {
                return type;
            }
        }
        const type = TokenTypes.literalTokens[lexeme];
        if (type) {
            return type;
        }
        return TokenTypes.none;
    }
    _match(lexeme, rule) {
        const match = rule.exec(lexeme);
        return match && match.index == 0 && match[0] == lexeme;
    }
    _isAtEnd() {
        return this._current >= this._source.length;
    }
    _isAlpha(c) {
        return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z");
    }
    _isAlphaNumeric(c) {
        return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z") || c == "_" || (c >= "0" && c <= "9");
    }
    _isWhitespace(c) {
        return c == " " || c == "\t" || c == "\r";
    }
    _advance(amount = 0) {
        let c = this._source[this._current];
        amount = amount || 0;
        amount++;
        this._current += amount;
        return c;
    }
    _peekAhead(offset = 0) {
        offset = offset || 0;
        if (this._current + offset >= this._source.length) {
            return "\0";
        }
        return this._source[this._current + offset];
    }
    _addToken(type) {
        const text = this._source.substring(this._start, this._current);
        this._tokens.push(new Token(type, text, this._line));
    }
}

/**
 * @author Brendan Duncan / https://github.com/brendan-duncan
 */
/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).
class WgslParser {
    constructor() {
        this._tokens = [];
        this._current = 0;
        this._currentLine = 0;
        this._context = new ParseContext();
        this._deferArrayCountEval = [];
    }
    parse(tokensOrCode) {
        this._initialize(tokensOrCode);
        this._deferArrayCountEval.length = 0;
        const statements = [];
        while (!this._isAtEnd()) {
            const statement = this._global_decl_or_directive();
            if (!statement) {
                break;
            }
            statements.push(statement);
        }
        // Since constants can be declared after they are used, and
        // constants can be used to size arrays, defer calculating the
        // size until after the shader has finished parsing.
        if (this._deferArrayCountEval.length > 0) {
            for (const arrayDecl of this._deferArrayCountEval) {
                const arrayType = arrayDecl["arrayType"];
                const countNode = arrayDecl["countNode"];
                if (countNode instanceof VariableExpr) {
                    const variable = countNode;
                    const name = variable.name;
                    const constant = this._context.constants.get(name);
                    if (constant) {
                        try {
                            const count = constant.evaluate(this._context);
                            arrayType.count = count;
                        }
                        catch (e) {
                        }
                    }
                }
            }
            this._deferArrayCountEval.length = 0;
        }
        return statements;
    }
    _initialize(tokensOrCode) {
        if (tokensOrCode) {
            if (typeof tokensOrCode == "string") {
                const scanner = new WgslScanner(tokensOrCode);
                this._tokens = scanner.scanTokens();
            }
            else {
                this._tokens = tokensOrCode;
            }
        }
        else {
            this._tokens = [];
        }
        this._current = 0;
    }
    _error(token, message) {
        return {
            token,
            message,
            toString: function () {
                return `${message}`;
            },
        };
    }
    _isAtEnd() {
        return (this._current >= this._tokens.length ||
            this._peek().type == TokenTypes.eof);
    }
    _match(types) {
        if (types instanceof TokenType) {
            if (this._check(types)) {
                this._advance();
                return true;
            }
            return false;
        }
        for (let i = 0, l = types.length; i < l; ++i) {
            const type = types[i];
            if (this._check(type)) {
                this._advance();
                return true;
            }
        }
        return false;
    }
    _consume(types, message) {
        if (this._check(types)) {
            return this._advance();
        }
        throw this._error(this._peek(), message);
    }
    _check(types) {
        if (this._isAtEnd()) {
            return false;
        }
        const tk = this._peek();
        if (types instanceof Array) {
            const t = tk.type;
            const index = types.indexOf(t);
            return index != -1;
        }
        return tk.type == types;
    }
    _advance() {
        var _a, _b;
        this._currentLine = (_b = (_a = this._peek()) === null || _a === void 0 ? void 0 : _a.line) !== null && _b !== void 0 ? _b : -1;
        if (!this._isAtEnd()) {
            this._current++;
        }
        return this._previous();
    }
    _peek() {
        return this._tokens[this._current];
    }
    _previous() {
        return this._tokens[this._current - 1];
    }
    _global_decl_or_directive() {
        // semicolon
        // global_variable_decl semicolon
        // global_constant_decl semicolon
        // type_alias semicolon
        // struct_decl
        // function_decl
        // enable_directive
        // Ignore any stand-alone semicolons
        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())
            ;
        if (this._match(TokenTypes.keywords.alias)) {
            const type = this._type_alias();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return type;
        }
        if (this._match(TokenTypes.keywords.diagnostic)) {
            const directive = this._diagnostic();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return directive;
        }
        if (this._match(TokenTypes.keywords.requires)) {
            const requires = this._requires_directive();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return requires;
        }
        if (this._match(TokenTypes.keywords.enable)) {
            const enable = this._enable_directive();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return enable;
        }
        // The following statements have an optional attribute*
        const attrs = this._attribute();
        if (this._check(TokenTypes.keywords.var)) {
            const _var = this._global_variable_decl();
            if (_var != null) {
                _var.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _var;
        }
        if (this._check(TokenTypes.keywords.override)) {
            const _override = this._override_variable_decl();
            if (_override != null) {
                _override.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _override;
        }
        if (this._check(TokenTypes.keywords.let)) {
            const _let = this._global_let_decl();
            if (_let != null) {
                _let.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _let;
        }
        if (this._check(TokenTypes.keywords.const)) {
            const _const = this._global_const_decl();
            if (_const != null) {
                _const.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _const;
        }
        if (this._check(TokenTypes.keywords.struct)) {
            const _struct = this._struct_decl();
            if (_struct != null) {
                _struct.attributes = attrs;
            }
            return _struct;
        }
        if (this._check(TokenTypes.keywords.fn)) {
            const _fn = this._function_decl();
            if (_fn != null) {
                _fn.attributes = attrs;
            }
            return _fn;
        }
        return null;
    }
    _function_decl() {
        // attribute* function_header compound_statement
        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?
        if (!this._match(TokenTypes.keywords.fn)) {
            return null;
        }
        const startLine = this._currentLine;
        const name = this._consume(TokenTypes.tokens.ident, "Expected function name.").toString();
        this._consume(TokenTypes.tokens.paren_left, "Expected '(' for function arguments.");
        const args = [];
        if (!this._check(TokenTypes.tokens.paren_right)) {
            do {
                if (this._check(TokenTypes.tokens.paren_right)) {
                    break;
                }
                const argAttrs = this._attribute();
                const name = this._consume(TokenTypes.tokens.ident, "Expected argument name.").toString();
                this._consume(TokenTypes.tokens.colon, "Expected ':' for argument type.");
                const typeAttrs = this._attribute();
                const type = this._type_decl();
                if (type != null) {
                    type.attributes = typeAttrs;
                    args.push(new Argument(name, type, argAttrs));
                }
            } while (this._match(TokenTypes.tokens.comma));
        }
        this._consume(TokenTypes.tokens.paren_right, "Expected ')' after function arguments.");
        let _return = null;
        if (this._match(TokenTypes.tokens.arrow)) {
            const attrs = this._attribute();
            _return = this._type_decl();
            if (_return != null) {
                _return.attributes = attrs;
            }
        }
        const body = this._compound_statement();
        const endLine = this._currentLine;
        return new Function(name, args, _return, body, startLine, endLine);
    }
    _compound_statement() {
        // brace_left statement* brace_right
        const statements = [];
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for block.");
        while (!this._check(TokenTypes.tokens.brace_right)) {
            const statement = this._statement();
            if (statement !== null) {
                statements.push(statement);
            }
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' for block.");
        return statements;
    }
    _statement() {
        // semicolon
        // return_statement semicolon
        // if_statement
        // switch_statement
        // loop_statement
        // for_statement
        // func_call_statement semicolon
        // variable_statement semicolon
        // break_statement semicolon
        // continue_statement semicolon
        // continuing_statement compound_statement
        // discard semicolon
        // assignment_statement semicolon
        // compound_statement
        // increment_statement semicolon
        // decrement_statement semicolon
        // static_assert_statement semicolon
        // Ignore any stand-alone semicolons
        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())
            ;
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        if (this._check(TokenTypes.keywords.if)) {
            return this._if_statement();
        }
        if (this._check(TokenTypes.keywords.switch)) {
            return this._switch_statement();
        }
        if (this._check(TokenTypes.keywords.loop)) {
            return this._loop_statement();
        }
        if (this._check(TokenTypes.keywords.for)) {
            return this._for_statement();
        }
        if (this._check(TokenTypes.keywords.while)) {
            return this._while_statement();
        }
        if (this._check(TokenTypes.keywords.continuing)) {
            return this._continuing_statement();
        }
        if (this._check(TokenTypes.keywords.static_assert)) {
            return this._static_assert_statement();
        }
        if (this._check(TokenTypes.tokens.brace_left)) {
            return this._compound_statement();
        }
        let result = null;
        if (this._check(TokenTypes.keywords.return)) {
            result = this._return_statement();
        }
        else if (this._check([
            TokenTypes.keywords.var,
            TokenTypes.keywords.let,
            TokenTypes.keywords.const,
        ])) {
            result = this._variable_statement();
        }
        else if (this._match(TokenTypes.keywords.discard)) {
            result = new Discard();
        }
        else if (this._match(TokenTypes.keywords.break)) {
            result = new Break();
        }
        else if (this._match(TokenTypes.keywords.continue)) {
            result = new Continue();
        }
        else {
            result =
                this._increment_decrement_statement() ||
                    this._func_call_statement() ||
                    this._assignment_statement();
        }
        if (result != null) {
            this._consume(TokenTypes.tokens.semicolon, "Expected ';' after statement.");
        }
        return result;
    }
    _static_assert_statement() {
        if (!this._match(TokenTypes.keywords.static_assert)) {
            return null;
        }
        const expression = this._optional_paren_expression();
        return new StaticAssert(expression);
    }
    _while_statement() {
        if (!this._match(TokenTypes.keywords.while)) {
            return null;
        }
        const condition = this._optional_paren_expression();
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        const block = this._compound_statement();
        return new While(condition, block);
    }
    _continuing_statement() {
        if (!this._match(TokenTypes.keywords.continuing)) {
            return null;
        }
        const block = this._compound_statement();
        return new Continuing(block);
    }
    _for_statement() {
        // for paren_left for_header paren_right compound_statement
        if (!this._match(TokenTypes.keywords.for)) {
            return null;
        }
        this._consume(TokenTypes.tokens.paren_left, "Expected '('.");
        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?
        const init = !this._check(TokenTypes.tokens.semicolon)
            ? this._for_init()
            : null;
        this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
        const condition = !this._check(TokenTypes.tokens.semicolon)
            ? this._short_circuit_or_expression()
            : null;
        this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
        const increment = !this._check(TokenTypes.tokens.paren_right)
            ? this._for_increment()
            : null;
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'.");
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        const body = this._compound_statement();
        return new For(init, condition, increment, body);
    }
    _for_init() {
        // (variable_statement assignment_statement func_call_statement)?
        return (this._variable_statement() ||
            this._func_call_statement() ||
            this._assignment_statement());
    }
    _for_increment() {
        // (assignment_statement func_call_statement increment_statement)?
        return (this._func_call_statement() ||
            this._increment_decrement_statement() ||
            this._assignment_statement());
    }
    _variable_statement() {
        // variable_decl
        // variable_decl equal short_circuit_or_expression
        // let (ident variable_ident_decl) equal short_circuit_or_expression
        // const (ident variable_ident_decl) equal short_circuit_or_expression
        if (this._check(TokenTypes.keywords.var)) {
            const _var = this._variable_decl();
            if (_var === null) {
                throw this._error(this._peek(), "Variable declaration expected.");
            }
            let value = null;
            if (this._match(TokenTypes.tokens.equal)) {
                value = this._short_circuit_or_expression();
            }
            return new Var(_var.name, _var.type, _var.storage, _var.access, value);
        }
        if (this._match(TokenTypes.keywords.let)) {
            const name = this._consume(TokenTypes.tokens.ident, "Expected name for let.").toString();
            let type = null;
            if (this._match(TokenTypes.tokens.colon)) {
                const typeAttrs = this._attribute();
                type = this._type_decl();
                if (type != null) {
                    type.attributes = typeAttrs;
                }
            }
            this._consume(TokenTypes.tokens.equal, "Expected '=' for let.");
            const value = this._short_circuit_or_expression();
            return new Let(name, type, null, null, value);
        }
        if (this._match(TokenTypes.keywords.const)) {
            const name = this._consume(TokenTypes.tokens.ident, "Expected name for const.").toString();
            let type = null;
            if (this._match(TokenTypes.tokens.colon)) {
                const typeAttrs = this._attribute();
                type = this._type_decl();
                if (type != null) {
                    type.attributes = typeAttrs;
                }
            }
            this._consume(TokenTypes.tokens.equal, "Expected '=' for const.");
            const value = this._short_circuit_or_expression();
            return new Const(name, type, null, null, value);
        }
        return null;
    }
    _increment_decrement_statement() {
        const savedPos = this._current;
        const _var = this._unary_expression();
        if (_var == null) {
            return null;
        }
        if (!this._check(TokenTypes.increment_operators)) {
            this._current = savedPos;
            return null;
        }
        const token = this._consume(TokenTypes.increment_operators, "Expected increment operator");
        return new Increment(token.type === TokenTypes.tokens.plus_plus
            ? IncrementOperator.increment
            : IncrementOperator.decrement, _var);
    }
    _assignment_statement() {
        // (unary_expression underscore) equal short_circuit_or_expression
        let _var = null;
        if (this._check(TokenTypes.tokens.brace_right)) {
            return null;
        }
        let isUnderscore = this._match(TokenTypes.tokens.underscore);
        if (!isUnderscore) {
            _var = this._unary_expression();
        }
        if (!isUnderscore && _var == null) {
            return null;
        }
        const type = this._consume(TokenTypes.assignment_operators, "Expected assignment operator.");
        const value = this._short_circuit_or_expression();
        return new Assign(AssignOperator.parse(type.lexeme), _var, value);
    }
    _func_call_statement() {
        // ident argument_expression_list
        if (!this._check(TokenTypes.tokens.ident)) {
            return null;
        }
        const savedPos = this._current;
        const name = this._consume(TokenTypes.tokens.ident, "Expected function name.");
        const args = this._argument_expression_list();
        if (args === null) {
            this._current = savedPos;
            return null;
        }
        return new Call(name.lexeme, args);
    }
    _loop_statement() {
        // loop brace_left statement* continuing_statement? brace_right
        if (!this._match(TokenTypes.keywords.loop)) {
            return null;
        }
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for loop.");
        // statement*
        const statements = [];
        let statement = this._statement();
        while (statement !== null) {
            if (Array.isArray(statement)) {
                for (let s of statement) {
                    statements.push(s);
                }
            }
            else {
                statements.push(statement);
            }
            statement = this._statement();
        }
        // continuing_statement: continuing compound_statement
        let continuing = null;
        if (this._match(TokenTypes.keywords.continuing)) {
            continuing = this._compound_statement();
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' for loop.");
        return new Loop(statements, continuing);
    }
    _switch_statement() {
        // switch optional_paren_expression brace_left switch_body+ brace_right
        if (!this._match(TokenTypes.keywords.switch)) {
            return null;
        }
        const condition = this._optional_paren_expression();
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for switch.");
        const body = this._switch_body();
        if (body == null || body.length == 0) {
            throw this._error(this._previous(), "Expected 'case' or 'default'.");
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' for switch.");
        return new Switch(condition, body);
    }
    _switch_body() {
        // case case_selectors colon brace_left case_body? brace_right
        // default colon brace_left case_body? brace_right
        const cases = [];
        if (this._match(TokenTypes.keywords.case)) {
            const selector = this._case_selectors();
            this._match(TokenTypes.tokens.colon); // colon is optional
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            this._consume(TokenTypes.tokens.brace_left, "Exected '{' for switch case.");
            const body = this._case_body();
            this._consume(TokenTypes.tokens.brace_right, "Exected '}' for switch case.");
            cases.push(new Case(selector, body));
        }
        if (this._match(TokenTypes.keywords.default)) {
            this._match(TokenTypes.tokens.colon); // colon is optional
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            this._consume(TokenTypes.tokens.brace_left, "Exected '{' for switch default.");
            const body = this._case_body();
            this._consume(TokenTypes.tokens.brace_right, "Exected '}' for switch default.");
            cases.push(new Default(body));
        }
        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {
            const _cases = this._switch_body();
            cases.push(_cases[0]);
        }
        return cases;
    }
    _case_selectors() {
        // const_literal (comma const_literal)* comma?
        const selectors = [
            this._shift_expression(), //?.evaluate(this._context).toString() ?? "",
        ];
        while (this._match(TokenTypes.tokens.comma)) {
            selectors.push(this._shift_expression());
        }
        return selectors;
    }
    _case_body() {
        // statement case_body?
        // fallthrough semicolon
        if (this._match(TokenTypes.keywords.fallthrough)) {
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return [];
        }
        let statement = this._statement();
        if (statement == null) {
            return [];
        }
        if (!(statement instanceof Array)) {
            statement = [statement];
        }
        const nextStatement = this._case_body();
        if (nextStatement.length == 0) {
            return statement;
        }
        return [...statement, nextStatement[0]];
    }
    _if_statement() {
        // if optional_paren_expression compound_statement elseif_statement? else_statement?
        if (!this._match(TokenTypes.keywords.if)) {
            return null;
        }
        const condition = this._optional_paren_expression();
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        const block = this._compound_statement();
        let elseif = [];
        if (this._match_elseif()) {
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            elseif = this._elseif_statement(elseif);
        }
        let _else = null;
        if (this._match(TokenTypes.keywords.else)) {
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            _else = this._compound_statement();
        }
        return new If(condition, block, elseif, _else);
    }
    _match_elseif() {
        if (this._tokens[this._current].type === TokenTypes.keywords.else &&
            this._tokens[this._current + 1].type === TokenTypes.keywords.if) {
            this._advance();
            this._advance();
            return true;
        }
        return false;
    }
    _elseif_statement(elseif = []) {
        // else_if optional_paren_expression compound_statement elseif_statement?
        const condition = this._optional_paren_expression();
        const block = this._compound_statement();
        elseif.push(new ElseIf(condition, block));
        if (this._match_elseif()) {
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            this._elseif_statement(elseif);
        }
        return elseif;
    }
    _return_statement() {
        // return short_circuit_or_expression?
        if (!this._match(TokenTypes.keywords.return)) {
            return null;
        }
        const value = this._short_circuit_or_expression();
        return new Return(value);
    }
    _short_circuit_or_expression() {
        // short_circuit_and_expression
        // short_circuit_or_expression or_or short_circuit_and_expression
        let expr = this._short_circuit_and_expr();
        while (this._match(TokenTypes.tokens.or_or)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());
        }
        return expr;
    }
    _short_circuit_and_expr() {
        // inclusive_or_expression
        // short_circuit_and_expression and_and inclusive_or_expression
        let expr = this._inclusive_or_expression();
        while (this._match(TokenTypes.tokens.and_and)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());
        }
        return expr;
    }
    _inclusive_or_expression() {
        // exclusive_or_expression
        // inclusive_or_expression or exclusive_or_expression
        let expr = this._exclusive_or_expression();
        while (this._match(TokenTypes.tokens.or)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());
        }
        return expr;
    }
    _exclusive_or_expression() {
        // and_expression
        // exclusive_or_expression xor and_expression
        let expr = this._and_expression();
        while (this._match(TokenTypes.tokens.xor)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());
        }
        return expr;
    }
    _and_expression() {
        // equality_expression
        // and_expression and equality_expression
        let expr = this._equality_expression();
        while (this._match(TokenTypes.tokens.and)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());
        }
        return expr;
    }
    _equality_expression() {
        // relational_expression
        // relational_expression equal_equal relational_expression
        // relational_expression not_equal relational_expression
        const expr = this._relational_expression();
        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {
            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());
        }
        return expr;
    }
    _relational_expression() {
        // shift_expression
        // relational_expression less_than shift_expression
        // relational_expression greater_than shift_expression
        // relational_expression less_than_equal shift_expression
        // relational_expression greater_than_equal shift_expression
        let expr = this._shift_expression();
        while (this._match([
            TokenTypes.tokens.less_than,
            TokenTypes.tokens.greater_than,
            TokenTypes.tokens.less_than_equal,
            TokenTypes.tokens.greater_than_equal,
        ])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());
        }
        return expr;
    }
    _shift_expression() {
        // additive_expression
        // shift_expression shift_left additive_expression
        // shift_expression shift_right additive_expression
        let expr = this._additive_expression();
        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());
        }
        return expr;
    }
    _additive_expression() {
        // multiplicative_expression
        // additive_expression plus multiplicative_expression
        // additive_expression minus multiplicative_expression
        let expr = this._multiplicative_expression();
        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());
        }
        return expr;
    }
    _multiplicative_expression() {
        // unary_expression
        // multiplicative_expression star unary_expression
        // multiplicative_expression forward_slash unary_expression
        // multiplicative_expression modulo unary_expression
        let expr = this._unary_expression();
        while (this._match([
            TokenTypes.tokens.star,
            TokenTypes.tokens.forward_slash,
            TokenTypes.tokens.modulo,
        ])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());
        }
        return expr;
    }
    _unary_expression() {
        // singular_expression
        // minus unary_expression
        // bang unary_expression
        // tilde unary_expression
        // star unary_expression
        // and unary_expression
        if (this._match([
            TokenTypes.tokens.minus,
            TokenTypes.tokens.bang,
            TokenTypes.tokens.tilde,
            TokenTypes.tokens.star,
            TokenTypes.tokens.and,
        ])) {
            return new UnaryOperator(this._previous().toString(), this._unary_expression());
        }
        return this._singular_expression();
    }
    _singular_expression() {
        // primary_expression postfix_expression ?
        const expr = this._primary_expression();
        const p = this._postfix_expression();
        if (p) {
            expr.postfix = p;
        }
        return expr;
    }
    _postfix_expression() {
        // bracket_left short_circuit_or_expression bracket_right postfix_expression?
        if (this._match(TokenTypes.tokens.bracket_left)) {
            const expr = this._short_circuit_or_expression();
            this._consume(TokenTypes.tokens.bracket_right, "Expected ']'.");
            const arrayIndex = new ArrayIndex(expr);
            const p = this._postfix_expression();
            if (p) {
                arrayIndex.postfix = p;
            }
            return arrayIndex;
        }
        // period ident postfix_expression?
        if (this._match(TokenTypes.tokens.period)) {
            const name = this._consume(TokenTypes.tokens.ident, "Expected member name.");
            const p = this._postfix_expression();
            const expr = new StringExpr(name.lexeme);
            if (p) {
                expr.postfix = p;
            }
            return expr;
        }
        return null;
    }
    _getStruct(name) {
        if (this._context.aliases.has(name)) {
            const alias = this._context.aliases.get(name).type;
            return alias;
        }
        if (this._context.structs.has(name)) {
            const struct = this._context.structs.get(name);
            return struct;
        }
        return null;
    }
    _primary_expression() {
        // ident argument_expression_list?
        if (this._match(TokenTypes.tokens.ident)) {
            const name = this._previous().toString();
            if (this._check(TokenTypes.tokens.paren_left)) {
                const args = this._argument_expression_list();
                const struct = this._getStruct(name);
                if (struct != null) {
                    return new CreateExpr(struct, args);
                }
                return new CallExpr(name, args);
            }
            if (this._context.constants.has(name)) {
                const c = this._context.constants.get(name);
                return new ConstExpr(name, c.value);
            }
            return new VariableExpr(name);
        }
        // const_literal
        if (this._match(TokenTypes.const_literal)) {
            return new LiteralExpr(parseFloat(this._previous().toString()));
        }
        // paren_expression
        if (this._check(TokenTypes.tokens.paren_left)) {
            return this._paren_expression();
        }
        // bitcast less_than type_decl greater_than paren_expression
        if (this._match(TokenTypes.keywords.bitcast)) {
            this._consume(TokenTypes.tokens.less_than, "Expected '<'.");
            const type = this._type_decl();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>'.");
            const value = this._paren_expression();
            return new BitcastExpr(type, value);
        }
        // type_decl argument_expression_list
        const type = this._type_decl();
        const args = this._argument_expression_list();
        return new TypecastExpr(type, args);
    }
    _argument_expression_list() {
        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right
        if (!this._match(TokenTypes.tokens.paren_left)) {
            return null;
        }
        const args = [];
        do {
            if (this._check(TokenTypes.tokens.paren_right)) {
                break;
            }
            const arg = this._short_circuit_or_expression();
            args.push(arg);
        } while (this._match(TokenTypes.tokens.comma));
        this._consume(TokenTypes.tokens.paren_right, "Expected ')' for agument list");
        return args;
    }
    _optional_paren_expression() {
        // [paren_left] short_circuit_or_expression [paren_right]
        this._match(TokenTypes.tokens.paren_left);
        const expr = this._short_circuit_or_expression();
        this._match(TokenTypes.tokens.paren_right);
        return new GroupingExpr([expr]);
    }
    _paren_expression() {
        // paren_left short_circuit_or_expression paren_right
        this._consume(TokenTypes.tokens.paren_left, "Expected '('.");
        const expr = this._short_circuit_or_expression();
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'.");
        return new GroupingExpr([expr]);
    }
    _struct_decl() {
        // attribute* struct ident struct_body_decl
        if (!this._match(TokenTypes.keywords.struct)) {
            return null;
        }
        const startLine = this._currentLine;
        const name = this._consume(TokenTypes.tokens.ident, "Expected name for struct.").toString();
        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for struct body.");
        const members = [];
        while (!this._check(TokenTypes.tokens.brace_right)) {
            // struct_member: attribute* variable_ident_decl
            const memberAttrs = this._attribute();
            const memberName = this._consume(TokenTypes.tokens.ident, "Expected variable name.").toString();
            this._consume(TokenTypes.tokens.colon, "Expected ':' for struct member type.");
            const typeAttrs = this._attribute();
            const memberType = this._type_decl();
            if (memberType != null) {
                memberType.attributes = typeAttrs;
            }
            if (!this._check(TokenTypes.tokens.brace_right))
                this._consume(TokenTypes.tokens.comma, "Expected ',' for struct member.");
            else
                this._match(TokenTypes.tokens.comma); // trailing comma optional.
            members.push(new Member(memberName, memberType, memberAttrs));
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' after struct body.");
        const endLine = this._currentLine;
        const structNode = new Struct(name, members, startLine, endLine);
        this._context.structs.set(name, structNode);
        return structNode;
    }
    _global_variable_decl() {
        // attribute* variable_decl (equal const_expression)?
        const _var = this._variable_decl();
        if (_var && this._match(TokenTypes.tokens.equal)) {
            _var.value = this._const_expression();
        }
        return _var;
    }
    _override_variable_decl() {
        // attribute* override_decl (equal const_expression)?
        const _override = this._override_decl();
        if (_override && this._match(TokenTypes.tokens.equal)) {
            _override.value = this._const_expression();
        }
        return _override;
    }
    _global_const_decl() {
        // attribute* const (ident variable_ident_decl) global_const_initializer?
        if (!this._match(TokenTypes.keywords.const)) {
            return null;
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        let value = null;
        if (this._match(TokenTypes.tokens.equal)) {
            const valueExpr = this._short_circuit_or_expression();
            if (valueExpr instanceof CreateExpr) {
                value = valueExpr;
            }
            else if (valueExpr instanceof ConstExpr &&
                valueExpr.initializer instanceof CreateExpr) {
                value = valueExpr.initializer;
            }
            else {
                try {
                    const constValue = valueExpr.evaluate(this._context);
                    value = new LiteralExpr(constValue);
                }
                catch (_a) {
                    value = valueExpr;
                }
            }
        }
        const c = new Const(name.toString(), type, "", "", value);
        this._context.constants.set(c.name, c);
        return c;
    }
    _global_let_decl() {
        // attribute* let (ident variable_ident_decl) global_const_initializer?
        if (!this._match(TokenTypes.keywords.let)) {
            return null;
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        let value = null;
        if (this._match(TokenTypes.tokens.equal)) {
            value = this._const_expression();
        }
        return new Let(name.toString(), type, "", "", value);
    }
    _const_expression() {
        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right
        // const_literal
        if (this._match(TokenTypes.const_literal)) {
            return new StringExpr(this._previous().toString());
        }
        const type = this._type_decl();
        this._consume(TokenTypes.tokens.paren_left, "Expected '('.");
        let args = [];
        while (!this._check(TokenTypes.tokens.paren_right)) {
            args.push(this._const_expression());
            if (!this._check(TokenTypes.tokens.comma)) {
                break;
            }
            this._advance();
        }
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'.");
        return new CreateExpr(type, args);
    }
    _variable_decl() {
        // var variable_qualifier? (ident variable_ident_decl)
        if (!this._match(TokenTypes.keywords.var)) {
            return null;
        }
        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than
        let storage = "";
        let access = "";
        if (this._match(TokenTypes.tokens.less_than)) {
            storage = this._consume(TokenTypes.storage_class, "Expected storage_class.").toString();
            if (this._match(TokenTypes.tokens.comma))
                access = this._consume(TokenTypes.access_mode, "Expected access_mode.").toString();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>'.");
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        return new Var(name.toString(), type, storage, access, null);
    }
    _override_decl() {
        // override (ident variable_ident_decl)
        if (!this._match(TokenTypes.keywords.override)) {
            return null;
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        return new Override(name.toString(), type, null);
    }
    _diagnostic() {
        // diagnostic(severity_control_name, diagnostic_rule_name)
        this._consume(TokenTypes.tokens.paren_left, "Expected '('");
        const severity = this._consume(TokenTypes.tokens.ident, "Expected severity control name.");
        this._consume(TokenTypes.tokens.comma, "Expected ','");
        const rule = this._consume(TokenTypes.tokens.ident, "Expected diagnostic rule name.");
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'");
        return new Diagnostic(severity.toString(), rule.toString());
    }
    _enable_directive() {
        // enable ident semicolon
        const name = this._consume(TokenTypes.tokens.ident, "identity expected.");
        return new Enable(name.toString());
    }
    _requires_directive() {
        // requires extension [, extension]* semicolon
        const extensions = [this._consume(TokenTypes.tokens.ident, "identity expected.").toString()];
        while (this._match(TokenTypes.tokens.comma)) {
            const name = this._consume(TokenTypes.tokens.ident, "identity expected.");
            extensions.push(name.toString());
        }
        return new Requires(extensions);
    }
    _type_alias() {
        // type ident equal type_decl
        const name = this._consume(TokenTypes.tokens.ident, "identity expected.");
        this._consume(TokenTypes.tokens.equal, "Expected '=' for type alias.");
        let aliasType = this._type_decl();
        if (aliasType === null) {
            throw this._error(this._peek(), "Expected Type for Alias.");
        }
        if (this._context.aliases.has(aliasType.name)) {
            aliasType = this._context.aliases.get(aliasType.name).type;
        }
        const aliasNode = new Alias(name.toString(), aliasType);
        this._context.aliases.set(aliasNode.name, aliasNode);
        return aliasNode;
    }
    _type_decl() {
        // ident
        // bool
        // float32
        // int32
        // uint32
        // vec2 less_than type_decl greater_than
        // vec3 less_than type_decl greater_than
        // vec4 less_than type_decl greater_than
        // mat2x2 less_than type_decl greater_than
        // mat2x3 less_than type_decl greater_than
        // mat2x4 less_than type_decl greater_than
        // mat3x2 less_than type_decl greater_than
        // mat3x3 less_than type_decl greater_than
        // mat3x4 less_than type_decl greater_than
        // mat4x2 less_than type_decl greater_than
        // mat4x3 less_than type_decl greater_than
        // mat4x4 less_than type_decl greater_than
        // atomic less_than type_decl greater_than
        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than
        // array_type_decl
        // texture_sampler_types
        if (this._check([
            TokenTypes.tokens.ident,
            ...TokenTypes.texel_format,
            TokenTypes.keywords.bool,
            TokenTypes.keywords.f32,
            TokenTypes.keywords.i32,
            TokenTypes.keywords.u32,
        ])) {
            const type = this._advance();
            const typeName = type.toString();
            if (this._context.structs.has(typeName)) {
                return this._context.structs.get(typeName);
            }
            if (this._context.aliases.has(typeName)) {
                return this._context.aliases.get(typeName).type;
            }
            return new Type(type.toString());
        }
        // texture_sampler_types
        let type = this._texture_sampler_types();
        if (type) {
            return type;
        }
        if (this._check(TokenTypes.template_types)) {
            let type = this._advance().toString();
            let format = null;
            let access = null;
            if (this._match(TokenTypes.tokens.less_than)) {
                format = this._type_decl();
                access = null;
                if (this._match(TokenTypes.tokens.comma)) {
                    access = this._consume(TokenTypes.access_mode, "Expected access_mode for pointer").toString();
                }
                this._consume(TokenTypes.tokens.greater_than, "Expected '>' for type.");
            }
            return new TemplateType(type, format, access);
        }
        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than
        if (this._match(TokenTypes.keywords.ptr)) {
            let pointer = this._previous().toString();
            this._consume(TokenTypes.tokens.less_than, "Expected '<' for pointer.");
            const storage = this._consume(TokenTypes.storage_class, "Expected storage_class for pointer");
            this._consume(TokenTypes.tokens.comma, "Expected ',' for pointer.");
            const decl = this._type_decl();
            let access = null;
            if (this._match(TokenTypes.tokens.comma)) {
                access = this._consume(TokenTypes.access_mode, "Expected access_mode for pointer").toString();
            }
            this._consume(TokenTypes.tokens.greater_than, "Expected '>' for pointer.");
            return new PointerType(pointer, storage.toString(), decl, access);
        }
        // The following type_decl's have an optional attribyte_list*
        const attrs = this._attribute();
        // attribute* array
        // attribute* array less_than type_decl (comma element_count_expression)? greater_than
        if (this._match(TokenTypes.keywords.array)) {
            let format = null;
            let countInt = -1;
            const array = this._previous();
            let countNode = null;
            if (this._match(TokenTypes.tokens.less_than)) {
                format = this._type_decl();
                if (this._context.aliases.has(format.name)) {
                    format = this._context.aliases.get(format.name).type;
                }
                let count = "";
                if (this._match(TokenTypes.tokens.comma)) {
                    countNode = this._shift_expression();
                    // If we can't evaluate the node, defer evaluating it until after the shader has
                    // finished being parsed, because const statements can be declared **after** they
                    // are used.
                    try {
                        count = countNode.evaluate(this._context).toString();
                        countNode = null;
                    }
                    catch (e) {
                        count = "1";
                    }
                }
                this._consume(TokenTypes.tokens.greater_than, "Expected '>' for array.");
                countInt = count ? parseInt(count) : 0;
            }
            const arrayType = new ArrayType(array.toString(), attrs, format, countInt);
            if (countNode) {
                this._deferArrayCountEval.push({ arrayType, countNode });
            }
            return arrayType;
        }
        return null;
    }
    _texture_sampler_types() {
        // sampler_type
        if (this._match(TokenTypes.sampler_type)) {
            return new SamplerType(this._previous().toString(), null, null);
        }
        // depth_texture_type
        if (this._match(TokenTypes.depth_texture_type)) {
            return new SamplerType(this._previous().toString(), null, null);
        }
        // sampled_texture_type less_than type_decl greater_than
        // multisampled_texture_type less_than type_decl greater_than
        if (this._match(TokenTypes.sampled_texture_type) ||
            this._match(TokenTypes.multisampled_texture_type)) {
            const sampler = this._previous();
            this._consume(TokenTypes.tokens.less_than, "Expected '<' for sampler type.");
            const format = this._type_decl();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>' for sampler type.");
            return new SamplerType(sampler.toString(), format, null);
        }
        // storage_texture_type less_than texel_format comma access_mode greater_than
        if (this._match(TokenTypes.storage_texture_type)) {
            const sampler = this._previous();
            this._consume(TokenTypes.tokens.less_than, "Expected '<' for sampler type.");
            const format = this._consume(TokenTypes.texel_format, "Invalid texel format.").toString();
            this._consume(TokenTypes.tokens.comma, "Expected ',' after texel format.");
            const access = this._consume(TokenTypes.access_mode, "Expected access mode for storage texture type.").toString();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>' for sampler type.");
            return new SamplerType(sampler.toString(), format, access);
        }
        return null;
    }
    _attribute() {
        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right
        // attr ident
        let attributes = [];
        while (this._match(TokenTypes.tokens.attr)) {
            const name = this._consume(TokenTypes.attribute_name, "Expected attribute name");
            const attr = new Attribute(name.toString(), null);
            if (this._match(TokenTypes.tokens.paren_left)) {
                // literal_or_ident
                attr.value = this._consume(TokenTypes.literal_or_ident, "Expected attribute value").toString();
                if (this._check(TokenTypes.tokens.comma)) {
                    this._advance();
                    do {
                        const v = this._consume(TokenTypes.literal_or_ident, "Expected attribute value").toString();
                        if (!(attr.value instanceof Array)) {
                            attr.value = [attr.value];
                        }
                        attr.value.push(v);
                    } while (this._match(TokenTypes.tokens.comma));
                }
                this._consume(TokenTypes.tokens.paren_right, "Expected ')'");
            }
            attributes.push(attr);
        }
        if (attributes.length == 0) {
            return null;
        }
        return attributes;
    }
}

/**
 * @author Brendan Duncan / https://github.com/brendan-duncan
 */
class TypeInfo {
    constructor(name, attributes) {
        this.name = name;
        this.attributes = attributes;
        this.size = 0;
    }
    get isArray() {
        return false;
    }
    get isStruct() {
        return false;
    }
    get isTemplate() {
        return false;
    }
}
class MemberInfo {
    constructor(name, type, attributes) {
        this.name = name;
        this.type = type;
        this.attributes = attributes;
        this.offset = 0;
        this.size = 0;
    }
    get isArray() {
        return this.type.isArray;
    }
    get isStruct() {
        return this.type.isStruct;
    }
    get isTemplate() {
        return this.type.isTemplate;
    }
    get align() {
        return this.type.isStruct ? this.type.align : 0;
    }
    get members() {
        return this.type.isStruct ? this.type.members : null;
    }
    get format() {
        return this.type.isArray
            ? this.type.format
            : this.type.isTemplate
                ? this.type.format
                : null;
    }
    get count() {
        return this.type.isArray ? this.type.count : 0;
    }
    get stride() {
        return this.type.isArray ? this.type.stride : this.size;
    }
}
class StructInfo extends TypeInfo {
    constructor(name, attributes) {
        super(name, attributes);
        this.members = [];
        this.align = 0;
        this.startLine = -1;
        this.endLine = -1;
        this.inUse = false;
    }
    get isStruct() {
        return true;
    }
}
class ArrayInfo extends TypeInfo {
    constructor(name, attributes) {
        super(name, attributes);
        this.count = 0;
        this.stride = 0;
    }
    get isArray() {
        return true;
    }
}
class TemplateInfo extends TypeInfo {
    constructor(name, format, attributes, access) {
        super(name, attributes);
        this.format = format;
        this.access = access;
    }
    get isTemplate() {
        return true;
    }
}
var ResourceType;
(function (ResourceType) {
    ResourceType[ResourceType["Uniform"] = 0] = "Uniform";
    ResourceType[ResourceType["Storage"] = 1] = "Storage";
    ResourceType[ResourceType["Texture"] = 2] = "Texture";
    ResourceType[ResourceType["Sampler"] = 3] = "Sampler";
    ResourceType[ResourceType["StorageTexture"] = 4] = "StorageTexture";
})(ResourceType || (ResourceType = {}));
class VariableInfo {
    constructor(name, type, group, binding, attributes, resourceType, access) {
        this.name = name;
        this.type = type;
        this.group = group;
        this.binding = binding;
        this.attributes = attributes;
        this.resourceType = resourceType;
        this.access = access;
    }
    get isArray() {
        return this.type.isArray;
    }
    get isStruct() {
        return this.type.isStruct;
    }
    get isTemplate() {
        return this.type.isTemplate;
    }
    get size() {
        return this.type.size;
    }
    get align() {
        return this.type.isStruct ? this.type.align : 0;
    }
    get members() {
        return this.type.isStruct ? this.type.members : null;
    }
    get format() {
        return this.type.isArray
            ? this.type.format
            : this.type.isTemplate
                ? this.type.format
                : null;
    }
    get count() {
        return this.type.isArray ? this.type.count : 0;
    }
    get stride() {
        return this.type.isArray ? this.type.stride : this.size;
    }
}
class AliasInfo {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
}
class _TypeSize {
    constructor(align, size) {
        this.align = align;
        this.size = size;
    }
}
class InputInfo {
    constructor(name, type, locationType, location) {
        this.name = name;
        this.type = type;
        this.locationType = locationType;
        this.location = location;
        this.interpolation = null;
    }
}
class OutputInfo {
    constructor(name, type, locationType, location) {
        this.name = name;
        this.type = type;
        this.locationType = locationType;
        this.location = location;
    }
}
class FunctionInfo {
    constructor(name, stage = null) {
        this.stage = null;
        this.inputs = [];
        this.outputs = [];
        this.resources = [];
        this.startLine = -1;
        this.endLine = -1;
        this.inUse = false;
        this.calls = new Set();
        this.name = name;
        this.stage = stage;
    }
}
class EntryFunctions {
    constructor() {
        this.vertex = [];
        this.fragment = [];
        this.compute = [];
    }
}
class OverrideInfo {
    constructor(name, type, attributes, id) {
        this.name = name;
        this.type = type;
        this.attributes = attributes;
        this.id = id;
    }
}
class _FunctionResources {
    constructor(node) {
        this.resources = null;
        this.inUse = false;
        this.info = null;
        this.node = node;
    }
}
class WgslReflect {
    constructor(code) {
        /// All top-level uniform vars in the shader.
        this.uniforms = [];
        /// All top-level storage vars in the shader.
        this.storage = [];
        /// All top-level texture vars in the shader;
        this.textures = [];
        // All top-level sampler vars in the shader.
        this.samplers = [];
        /// All top-level type aliases in the shader.
        this.aliases = [];
        /// All top-level overrides in the shader.
        this.overrides = [];
        /// All top-level structs in the shader.
        this.structs = [];
        /// All entry functions in the shader: vertex, fragment, and/or compute.
        this.entry = new EntryFunctions();
        /// All functions in the shader, including entry functions.
        this.functions = [];
        this._types = new Map();
        this._functions = new Map();
        if (code) {
            this.update(code);
        }
    }
    _isStorageTexture(type) {
        return (type.name == "texture_storage_1d" ||
            type.name == "texture_storage_2d" ||
            type.name == "texture_storage_2d_array" ||
            type.name == "texture_storage_3d");
    }
    update(code) {
        const parser = new WgslParser();
        const ast = parser.parse(code);
        for (const node of ast) {
            if (node instanceof Function) {
                this._functions.set(node.name, new _FunctionResources(node));
            }
        }
        for (const node of ast) {
            if (node instanceof Struct) {
                const info = this._getTypeInfo(node, null);
                if (info instanceof StructInfo) {
                    this.structs.push(info);
                }
            }
        }
        for (const node of ast) {
            if (node instanceof Alias) {
                this.aliases.push(this._getAliasInfo(node));
                continue;
            }
            if (node instanceof Override) {
                const v = node;
                const id = this._getAttributeNum(v.attributes, "id", 0);
                const type = v.type != null ? this._getTypeInfo(v.type, v.attributes) : null;
                this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));
                continue;
            }
            if (this._isUniformVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);
                this.uniforms.push(varInfo);
                continue;
            }
            if (this._isStorageVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const isStorageTexture = this._isStorageTexture(type);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);
                this.storage.push(varInfo);
                continue;
            }
            if (this._isTextureVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const isStorageTexture = this._isStorageTexture(type);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);
                if (isStorageTexture) {
                    this.storage.push(varInfo);
                }
                else {
                    this.textures.push(varInfo);
                }
                continue;
            }
            if (this._isSamplerVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);
                this.samplers.push(varInfo);
                continue;
            }
            if (node instanceof Function) {
                const vertexStage = this._getAttribute(node, "vertex");
                const fragmentStage = this._getAttribute(node, "fragment");
                const computeStage = this._getAttribute(node, "compute");
                const stage = vertexStage || fragmentStage || computeStage;
                const fn = new FunctionInfo(node.name, stage === null || stage === void 0 ? void 0 : stage.name);
                fn.startLine = node.startLine;
                fn.endLine = node.endLine;
                this.functions.push(fn);
                this._functions.get(node.name).info = fn;
                if (stage) {
                    this._functions.get(node.name).inUse = true;
                    fn.inUse = true;
                    fn.resources = this._findResources(node, !!stage);
                    fn.inputs = this._getInputs(node.args);
                    fn.outputs = this._getOutputs(node.returnType);
                    this.entry[stage.name].push(fn);
                }
                continue;
            }
        }
        for (const fn of this._functions.values()) {
            if (fn.info) {
                fn.info.inUse = fn.inUse;
                this._addCalls(fn.node, fn.info.calls);
            }
        }
        for (const u of this.uniforms) {
            this._markStructsInUse(u.type);
        }
        for (const s of this.storage) {
            this._markStructsInUse(s.type);
        }
    }
    _markStructsInUse(type) {
        if (type.isStruct) {
            type.inUse = true;
            for (const m of type.members) {
                this._markStructsInUse(m.type);
            }
        }
        else if (type.isArray) {
            this._markStructsInUse(type.format);
        }
        else if (type.isTemplate) {
            this._markStructsInUse(type.format);
        }
        else {
            const alias = this._getAlias(type.name);
            if (alias) {
                this._markStructsInUse(alias);
            }
        }
    }
    _addCalls(fn, calls) {
        var _a;
        for (const call of fn.calls) {
            const info = (_a = this._functions.get(call.name)) === null || _a === void 0 ? void 0 : _a.info;
            if (info) {
                calls.add(info);
            }
        }
    }
    /// Find a resource by its group and binding.
    findResource(group, binding) {
        for (const u of this.uniforms) {
            if (u.group == group && u.binding == binding) {
                return u;
            }
        }
        for (const s of this.storage) {
            if (s.group == group && s.binding == binding) {
                return s;
            }
        }
        for (const t of this.textures) {
            if (t.group == group && t.binding == binding) {
                return t;
            }
        }
        for (const s of this.samplers) {
            if (s.group == group && s.binding == binding) {
                return s;
            }
        }
        return null;
    }
    _findResource(name) {
        for (const u of this.uniforms) {
            if (u.name == name) {
                return u;
            }
        }
        for (const s of this.storage) {
            if (s.name == name) {
                return s;
            }
        }
        for (const t of this.textures) {
            if (t.name == name) {
                return t;
            }
        }
        for (const s of this.samplers) {
            if (s.name == name) {
                return s;
            }
        }
        return null;
    }
    _markStructsFromAST(type) {
        const info = this._getTypeInfo(type, null);
        this._markStructsInUse(info);
    }
    _findResources(fn, isEntry) {
        const resources = [];
        const self = this;
        const varStack = [];
        fn.search((node) => {
            if (node instanceof _BlockStart) {
                varStack.push({});
            }
            else if (node instanceof _BlockEnd) {
                varStack.pop();
            }
            else if (node instanceof Var) {
                const v = node;
                if (isEntry && v.type !== null) {
                    this._markStructsFromAST(v.type);
                }
                if (varStack.length > 0) {
                    varStack[varStack.length - 1][v.name] = v;
                }
            }
            else if (node instanceof CreateExpr) {
                const c = node;
                if (isEntry && c.type !== null) {
                    this._markStructsFromAST(c.type);
                }
            }
            else if (node instanceof Let) {
                const v = node;
                if (isEntry && v.type !== null) {
                    this._markStructsFromAST(v.type);
                }
                if (varStack.length > 0) {
                    varStack[varStack.length - 1][v.name] = v;
                }
            }
            else if (node instanceof VariableExpr) {
                const v = node;
                // Check to see if the variable is a local variable before checking to see if it's
                // a resource.
                if (varStack.length > 0) {
                    const varInfo = varStack[varStack.length - 1][v.name];
                    if (varInfo) {
                        return;
                    }
                }
                const varInfo = self._findResource(v.name);
                if (varInfo) {
                    resources.push(varInfo);
                }
            }
            else if (node instanceof CallExpr) {
                const c = node;
                const callFn = self._functions.get(c.name);
                if (callFn) {
                    if (isEntry) {
                        callFn.inUse = true;
                    }
                    fn.calls.add(callFn.node);
                    if (callFn.resources === null) {
                        callFn.resources = self._findResources(callFn.node, isEntry);
                    }
                    resources.push(...callFn.resources);
                }
            }
            else if (node instanceof Call) {
                const c = node;
                const callFn = self._functions.get(c.name);
                if (callFn) {
                    if (isEntry) {
                        callFn.inUse = true;
                    }
                    fn.calls.add(callFn.node);
                    if (callFn.resources === null) {
                        callFn.resources = self._findResources(callFn.node, isEntry);
                    }
                    resources.push(...callFn.resources);
                }
            }
        });
        return [...new Map(resources.map(r => [r.name, r])).values()];
    }
    getBindGroups() {
        const groups = [];
        function _makeRoom(group, binding) {
            if (group >= groups.length) {
                groups.length = group + 1;
            }
            if (groups[group] === undefined) {
                groups[group] = [];
            }
            if (binding >= groups[group].length) {
                groups[group].length = binding + 1;
            }
        }
        for (const u of this.uniforms) {
            _makeRoom(u.group, u.binding);
            const group = groups[u.group];
            group[u.binding] = u;
        }
        for (const u of this.storage) {
            _makeRoom(u.group, u.binding);
            const group = groups[u.group];
            group[u.binding] = u;
        }
        for (const t of this.textures) {
            _makeRoom(t.group, t.binding);
            const group = groups[t.group];
            group[t.binding] = t;
        }
        for (const t of this.samplers) {
            _makeRoom(t.group, t.binding);
            const group = groups[t.group];
            group[t.binding] = t;
        }
        return groups;
    }
    _getOutputs(type, outputs = undefined) {
        if (outputs === undefined) {
            outputs = [];
        }
        if (type instanceof Struct) {
            this._getStructOutputs(type, outputs);
        }
        else {
            const output = this._getOutputInfo(type);
            if (output !== null) {
                outputs.push(output);
            }
        }
        return outputs;
    }
    _getStructOutputs(struct, outputs) {
        for (const m of struct.members) {
            if (m.type instanceof Struct) {
                this._getStructOutputs(m.type, outputs);
            }
            else {
                const location = this._getAttribute(m, "location") || this._getAttribute(m, "builtin");
                if (location !== null) {
                    const typeInfo = this._getTypeInfo(m.type, m.type.attributes);
                    const locationValue = this._parseInt(location.value);
                    const info = new OutputInfo(m.name, typeInfo, location.name, locationValue);
                    outputs.push(info);
                }
            }
        }
    }
    _getOutputInfo(type) {
        const location = this._getAttribute(type, "location") ||
            this._getAttribute(type, "builtin");
        if (location !== null) {
            const typeInfo = this._getTypeInfo(type, type.attributes);
            const locationValue = this._parseInt(location.value);
            const info = new OutputInfo("", typeInfo, location.name, locationValue);
            return info;
        }
        return null;
    }
    _getInputs(args, inputs = undefined) {
        if (inputs === undefined) {
            inputs = [];
        }
        for (const arg of args) {
            if (arg.type instanceof Struct) {
                this._getStructInputs(arg.type, inputs);
            }
            else {
                const input = this._getInputInfo(arg);
                if (input !== null) {
                    inputs.push(input);
                }
            }
        }
        return inputs;
    }
    _getStructInputs(struct, inputs) {
        for (const m of struct.members) {
            if (m.type instanceof Struct) {
                this._getStructInputs(m.type, inputs);
            }
            else {
                const input = this._getInputInfo(m);
                if (input !== null) {
                    inputs.push(input);
                }
            }
        }
    }
    _getInputInfo(node) {
        const location = this._getAttribute(node, "location") ||
            this._getAttribute(node, "builtin");
        if (location !== null) {
            const interpolation = this._getAttribute(node, "interpolation");
            const type = this._getTypeInfo(node.type, node.attributes);
            const locationValue = this._parseInt(location.value);
            const info = new InputInfo(node.name, type, location.name, locationValue);
            if (interpolation !== null) {
                info.interpolation = this._parseString(interpolation.value);
            }
            return info;
        }
        return null;
    }
    _parseString(s) {
        if (s instanceof Array) {
            s = s[0];
        }
        return s;
    }
    _parseInt(s) {
        if (s instanceof Array) {
            s = s[0];
        }
        const n = parseInt(s);
        return isNaN(n) ? s : n;
    }
    _getAlias(name) {
        for (const a of this.aliases) {
            if (a.name == name) {
                return a.type;
            }
        }
        return null;
    }
    _getAliasInfo(node) {
        return new AliasInfo(node.name, this._getTypeInfo(node.type, null));
    }
    _getTypeInfo(type, attributes) {
        if (this._types.has(type)) {
            return this._types.get(type);
        }
        if (type instanceof ArrayType) {
            const a = type;
            const t = this._getTypeInfo(a.format, a.attributes);
            const info = new ArrayInfo(a.name, attributes);
            info.format = t;
            info.count = a.count;
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        if (type instanceof Struct) {
            const s = type;
            const info = new StructInfo(s.name, attributes);
            info.startLine = s.startLine;
            info.endLine = s.endLine;
            for (const m of s.members) {
                const t = this._getTypeInfo(m.type, m.attributes);
                info.members.push(new MemberInfo(m.name, t, m.attributes));
            }
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        if (type instanceof SamplerType) {
            const s = type;
            const formatIsType = s.format instanceof Type;
            const format = s.format
                ? formatIsType
                    ? this._getTypeInfo(s.format, null)
                    : new TypeInfo(s.format, null)
                : null;
            const info = new TemplateInfo(s.name, format, attributes, s.access);
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        if (type instanceof TemplateType) {
            const t = type;
            const format = t.format ? this._getTypeInfo(t.format, null) : null;
            const info = new TemplateInfo(t.name, format, attributes, t.access);
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        const info = new TypeInfo(type.name, attributes);
        this._types.set(type, info);
        this._updateTypeInfo(info);
        return info;
    }
    _updateTypeInfo(type) {
        var _a, _b;
        const typeSize = this._getTypeSize(type);
        type.size = (_a = typeSize === null || typeSize === void 0 ? void 0 : typeSize.size) !== null && _a !== void 0 ? _a : 0;
        if (type instanceof ArrayInfo) {
            const formatInfo = this._getTypeSize(type["format"]);
            type.stride = (_b = formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.size) !== null && _b !== void 0 ? _b : 0;
            this._updateTypeInfo(type["format"]);
        }
        if (type instanceof StructInfo) {
            this._updateStructInfo(type);
        }
    }
    _updateStructInfo(struct) {
        var _a;
        let offset = 0;
        let lastSize = 0;
        let lastOffset = 0;
        let structAlign = 0;
        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {
            const member = struct.members[mi];
            const sizeInfo = this._getTypeSize(member);
            if (!sizeInfo) {
                continue;
            }
            (_a = this._getAlias(member.type.name)) !== null && _a !== void 0 ? _a : member.type;
            const align = sizeInfo.align;
            const size = sizeInfo.size;
            offset = this._roundUp(align, offset + lastSize);
            lastSize = size;
            lastOffset = offset;
            structAlign = Math.max(structAlign, align);
            member.offset = offset;
            member.size = size;
            this._updateTypeInfo(member.type);
        }
        struct.size = this._roundUp(structAlign, lastOffset + lastSize);
        struct.align = structAlign;
    }
    _getTypeSize(type) {
        var _a;
        if (type === null || type === undefined) {
            return null;
        }
        const explicitSize = this._getAttributeNum(type.attributes, "size", 0);
        const explicitAlign = this._getAttributeNum(type.attributes, "align", 0);
        if (type instanceof MemberInfo) {
            type = type.type;
        }
        if (type instanceof TypeInfo) {
            const alias = this._getAlias(type.name);
            if (alias !== null) {
                type = alias;
            }
        }
        {
            const info = WgslReflect._typeInfo[type.name];
            if (info !== undefined) {
                const divisor = type["format"] === "f16" ? 2 : 1;
                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));
            }
        }
        {
            const info = WgslReflect._typeInfo[type.name.substring(0, type.name.length - 1)];
            if (info) {
                const divisor = type.name[type.name.length - 1] === "h" ? 2 : 1;
                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));
            }
        }
        if (type instanceof ArrayInfo) {
            let arrayType = type;
            let align = 8;
            let size = 8;
            // Type                 AlignOf(T)          Sizeof(T)
            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))
            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)
            //
            // @stride(Q)
            // array<E, N>          AlignOf(E)          N * Q
            //
            // @stride(Q)
            // array<E>             AlignOf(E)          Nruntime * Q
            //const E = type.format.name;
            const E = this._getTypeSize(arrayType.format);
            if (E !== null) {
                size = E.size;
                align = E.align;
            }
            const N = arrayType.count;
            const stride = this._getAttributeNum((_a = type === null || type === void 0 ? void 0 : type.attributes) !== null && _a !== void 0 ? _a : null, "stride", this._roundUp(align, size));
            size = N * stride;
            if (explicitSize) {
                size = explicitSize;
            }
            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));
        }
        if (type instanceof StructInfo) {
            let align = 0;
            let size = 0;
            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))
            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))
            //                          Where L is the last member of the structure
            let offset = 0;
            let lastSize = 0;
            let lastOffset = 0;
            for (const m of type.members) {
                const mi = this._getTypeSize(m.type);
                if (mi !== null) {
                    align = Math.max(mi.align, align);
                    offset = this._roundUp(mi.align, offset + lastSize);
                    lastSize = mi.size;
                    lastOffset = offset;
                }
            }
            size = this._roundUp(align, lastOffset + lastSize);
            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));
        }
        return null;
    }
    _isUniformVar(node) {
        return node instanceof Var && node.storage == "uniform";
    }
    _isStorageVar(node) {
        return node instanceof Var && node.storage == "storage";
    }
    _isTextureVar(node) {
        return (node instanceof Var &&
            node.type !== null &&
            WgslReflect._textureTypes.indexOf(node.type.name) != -1);
    }
    _isSamplerVar(node) {
        return (node instanceof Var &&
            node.type !== null &&
            WgslReflect._samplerTypes.indexOf(node.type.name) != -1);
    }
    _getAttribute(node, name) {
        const obj = node;
        if (!obj || !obj["attributes"]) {
            return null;
        }
        const attrs = obj["attributes"];
        for (let a of attrs) {
            if (a.name == name) {
                return a;
            }
        }
        return null;
    }
    _getAttributeNum(attributes, name, defaultValue) {
        if (attributes === null) {
            return defaultValue;
        }
        for (let a of attributes) {
            if (a.name == name) {
                let v = a !== null && a.value !== null ? a.value : defaultValue;
                if (v instanceof Array) {
                    v = v[0];
                }
                if (typeof v === "number") {
                    return v;
                }
                if (typeof v === "string") {
                    return parseInt(v);
                }
                return defaultValue;
            }
        }
        return defaultValue;
    }
    _roundUp(k, n) {
        return Math.ceil(n / k) * k;
    }
}
// Type                 AlignOf(T)          Sizeof(T)
// i32, u32, or f32     4                   4
// atomic<T>            4                   4
// vec2<T>              8                   8
// vec3<T>              16                  12
// vec4<T>              16                  16
// mat2x2<f32>          8                   16
// mat3x2<f32>          8                   24
// mat4x2<f32>          8                   32
// mat2x3<f32>          16                  32
// mat3x3<f32>          16                  48
// mat4x3<f32>          16                  64
// mat2x4<f32>          16                  32
// mat3x4<f32>          16                  48
// mat4x4<f32>          16                  64
WgslReflect._typeInfo = {
    f16: { align: 2, size: 2 },
    i32: { align: 4, size: 4 },
    u32: { align: 4, size: 4 },
    f32: { align: 4, size: 4 },
    atomic: { align: 4, size: 4 },
    vec2: { align: 8, size: 8 },
    vec3: { align: 16, size: 12 },
    vec4: { align: 16, size: 16 },
    mat2x2: { align: 8, size: 16 },
    mat3x2: { align: 8, size: 24 },
    mat4x2: { align: 8, size: 32 },
    mat2x3: { align: 16, size: 32 },
    mat3x3: { align: 16, size: 48 },
    mat4x3: { align: 16, size: 64 },
    mat2x4: { align: 16, size: 32 },
    mat3x4: { align: 16, size: 48 },
    mat4x4: { align: 16, size: 64 },
};
WgslReflect._textureTypes = TokenTypes.any_texture_type.map((t) => {
    return t.name;
});
WgslReflect._samplerTypes = TokenTypes.sampler_type.map((t) => {
    return t.name;
});


//# sourceMappingURL=wgsl_reflect.module.js.map


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ "./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");

function _defineProperty(e, r, t) {
  return (r = (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toPrimitive.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPrimitive)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");

function toPrimitive(t, r) {
  if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPropertyKey)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrimitive.js */ "./node_modules/@babel/runtime/helpers/esm/toPrimitive.js");


function toPropertyKey(t) {
  var i = (0,_toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__["default"])(t, "string");
  return "symbol" == (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i) ? i : i + "";
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/controllers/controller.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/controllers/controller.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Controller)
/* harmony export */ });
/* harmony import */ var _transition_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transition-manager.js */ "./node_modules/@deck.gl/core/dist/controllers/transition-manager.js");
/* harmony import */ var _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transitions/linear-interpolator.js */ "./node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js");
// Copyright (c) 2015 Uber Technologies, Inc.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-statements, complexity */


const NO_TRANSITION_PROPS = {
    transitionDuration: 0
};
const DEFAULT_INERTIA = 300;
const INERTIA_EASING = t => 1 - (1 - t) * (1 - t);
const EVENT_TYPES = {
    WHEEL: ['wheel'],
    PAN: ['panstart', 'panmove', 'panend'],
    PINCH: ['pinchstart', 'pinchmove', 'pinchend'],
    TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],
    DOUBLE_TAP: ['doubletap'],
    KEYBOARD: ['keydown']
};
const pinchEventWorkaround = {};
class Controller {
    constructor(opts) {
        this.state = {};
        this._events = {};
        this._interactionState = {
            isDragging: false
        };
        this._customEvents = [];
        this._eventStartBlocked = null;
        this._panMove = false;
        this.invertPan = false;
        this.dragMode = 'rotate';
        this.inertia = 0;
        this.scrollZoom = true;
        this.dragPan = true;
        this.dragRotate = true;
        this.doubleClickZoom = true;
        this.touchZoom = true;
        this.touchRotate = false;
        this.keyboard = true;
        this.transitionManager = new _transition_manager_js__WEBPACK_IMPORTED_MODULE_0__["default"]({
            ...opts,
            getControllerState: props => new this.ControllerState(props),
            onViewStateChange: this._onTransition.bind(this),
            onStateChange: this._setInteractionState.bind(this)
        });
        this.handleEvent = this.handleEvent.bind(this);
        this.eventManager = opts.eventManager;
        this.onViewStateChange = opts.onViewStateChange || (() => { });
        this.onStateChange = opts.onStateChange || (() => { });
        this.makeViewport = opts.makeViewport;
    }
    set events(customEvents) {
        this.toggleEvents(this._customEvents, false);
        this.toggleEvents(customEvents, true);
        this._customEvents = customEvents;
        // Make sure default events are not overwritten
        if (this.props) {
            this.setProps(this.props);
        }
    }
    finalize() {
        for (const eventName in this._events) {
            if (this._events[eventName]) {
                // @ts-ignore (2345) event type string cannot be assifned to enum
                // eslint-disable-next-line @typescript-eslint/unbound-method
                this.eventManager?.off(eventName, this.handleEvent);
            }
        }
        this.transitionManager.finalize();
    }
    /**
     * Callback for events
     */
    handleEvent(event) {
        // Force recalculate controller state
        this._controllerState = undefined;
        const eventStartBlocked = this._eventStartBlocked;
        switch (event.type) {
            case 'panstart':
                return eventStartBlocked ? false : this._onPanStart(event);
            case 'panmove':
                return this._onPan(event);
            case 'panend':
                return this._onPanEnd(event);
            case 'pinchstart':
                return eventStartBlocked ? false : this._onPinchStart(event);
            case 'pinchmove':
                return this._onPinch(event);
            case 'pinchend':
                return this._onPinchEnd(event);
            case 'tripanstart':
                return eventStartBlocked ? false : this._onTriplePanStart(event);
            case 'tripanmove':
                return this._onTriplePan(event);
            case 'tripanend':
                return this._onTriplePanEnd(event);
            case 'doubletap':
                return this._onDoubleTap(event);
            case 'wheel':
                return this._onWheel(event);
            case 'keydown':
                return this._onKeyDown(event);
            default:
                return false;
        }
    }
    /* Event utils */
    // Event object: http://hammerjs.github.io/api/#event-object
    get controllerState() {
        this._controllerState = this._controllerState || new this.ControllerState({
            makeViewport: this.makeViewport,
            ...this.props,
            ...this.state
        });
        return this._controllerState;
    }
    getCenter(event) {
        const { x, y } = this.props;
        const { offsetCenter } = event;
        return [offsetCenter.x - x, offsetCenter.y - y];
    }
    isPointInBounds(pos, event) {
        const { width, height } = this.props;
        if (event && event.handled) {
            return false;
        }
        const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;
        if (inside && event) {
            event.stopPropagation();
        }
        return inside;
    }
    isFunctionKeyPressed(event) {
        const { srcEvent } = event;
        return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);
    }
    isDragging() {
        return this._interactionState.isDragging || false;
    }
    // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.
    // This triggers a brief `pan` event.
    // Calling this method will temporarily disable *start events to avoid conflicting transitions.
    blockEvents(timeout) {
        /* global setTimeout */
        const timer = setTimeout(() => {
            if (this._eventStartBlocked === timer) {
                this._eventStartBlocked = null;
            }
        }, timeout);
        this._eventStartBlocked = timer;
    }
    /**
     * Extract interactivity options
     */
    setProps(props) {
        if (props.dragMode) {
            this.dragMode = props.dragMode;
        }
        this.props = props;
        if (!('transitionInterpolator' in props)) {
            // Add default transition interpolator
            props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;
        }
        this.transitionManager.processViewStateChange(props);
        const { inertia } = props;
        this.inertia = Number.isFinite(inertia) ? inertia : (inertia === true ? DEFAULT_INERTIA : 0);
        // TODO - make sure these are not reset on every setProps
        const { scrollZoom = true, dragPan = true, dragRotate = true, doubleClickZoom = true, touchZoom = true, touchRotate = false, keyboard = true } = props;
        // Register/unregister events
        const isInteractive = Boolean(this.onViewStateChange);
        this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);
        // We always need the pan events to set the correct isDragging state, even if dragPan & dragRotate are both false
        this.toggleEvents(EVENT_TYPES.PAN, isInteractive);
        this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));
        this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);
        this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);
        this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);
        // Interaction toggles
        this.scrollZoom = scrollZoom;
        this.dragPan = dragPan;
        this.dragRotate = dragRotate;
        this.doubleClickZoom = doubleClickZoom;
        this.touchZoom = touchZoom;
        this.touchRotate = touchRotate;
        this.keyboard = keyboard;
    }
    updateTransition() {
        this.transitionManager.updateTransition();
    }
    toggleEvents(eventNames, enabled) {
        if (this.eventManager) {
            eventNames.forEach(eventName => {
                if (this._events[eventName] !== enabled) {
                    this._events[eventName] = enabled;
                    if (enabled) {
                        // eslint-disable-next-line @typescript-eslint/unbound-method
                        this.eventManager.on(eventName, this.handleEvent);
                    }
                    else {
                        // eslint-disable-next-line @typescript-eslint/unbound-method
                        this.eventManager.off(eventName, this.handleEvent);
                    }
                }
            });
        }
    }
    // Private Methods
    /* Callback util */
    // formats map state and invokes callback function
    updateViewport(newControllerState, extraProps = null, interactionState = {}) {
        const viewState = { ...newControllerState.getViewportProps(), ...extraProps };
        // TODO - to restore diffing, we need to include interactionState
        const changed = this.controllerState !== newControllerState;
        // const oldViewState = this.controllerState.getViewportProps();
        // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);
        this.state = newControllerState.getState();
        this._setInteractionState(interactionState);
        if (changed) {
            const oldViewState = this.controllerState && this.controllerState.getViewportProps();
            if (this.onViewStateChange) {
                this.onViewStateChange({ viewState, interactionState: this._interactionState, oldViewState, viewId: this.props.id });
            }
        }
    }
    _onTransition(params) {
        this.onViewStateChange({ ...params, interactionState: this._interactionState, viewId: this.props.id });
    }
    _setInteractionState(newStates) {
        Object.assign(this._interactionState, newStates);
        this.onStateChange(this._interactionState);
    }
    /* Event handlers */
    // Default handler for the `panstart` event.
    _onPanStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;
        if (this.invertPan || this.dragMode === 'pan') {
            // invertPan is replaced by props.dragMode, keeping for backward compatibility
            alternateMode = !alternateMode;
        }
        const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({
            pos
        });
        this._panMove = alternateMode;
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
        return true;
    }
    // Default handler for the `panmove` and `panend` event.
    _onPan(event) {
        if (!this.isDragging()) {
            return false;
        }
        return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);
    }
    _onPanEnd(event) {
        if (!this.isDragging()) {
            return false;
        }
        return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);
    }
    // Default handler for panning to move.
    // Called by `_onPan` when panning without function key pressed.
    _onPanMove(event) {
        if (!this.dragPan) {
            return false;
        }
        const pos = this.getCenter(event);
        const newControllerState = this.controllerState.pan({ pos });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isPanning: true
        });
        return true;
    }
    _onPanMoveEnd(event) {
        const { inertia } = this;
        if (this.dragPan && inertia && event.velocity) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0] + (event.velocityX * inertia) / 2,
                pos[1] + (event.velocityY * inertia) / 2
            ];
            const newControllerState = this.controllerState.pan({ pos: endPos }).panEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isPanning: true
            });
        }
        else {
            const newControllerState = this.controllerState.panEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isPanning: false
            });
        }
        return true;
    }
    // Default handler for panning to rotate.
    // Called by `_onPan` when panning with function key pressed.
    _onPanRotate(event) {
        if (!this.dragRotate) {
            return false;
        }
        const pos = this.getCenter(event);
        const newControllerState = this.controllerState.rotate({ pos });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isRotating: true
        });
        return true;
    }
    _onPanRotateEnd(event) {
        const { inertia } = this;
        if (this.dragRotate && inertia && event.velocity) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0] + (event.velocityX * inertia) / 2,
                pos[1] + (event.velocityY * inertia) / 2
            ];
            const newControllerState = this.controllerState.rotate({ pos: endPos }).rotateEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isRotating: true
            });
        }
        else {
            const newControllerState = this.controllerState.rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isRotating: false
            });
        }
        return true;
    }
    // Default handler for the `wheel` event.
    _onWheel(event) {
        if (!this.scrollZoom) {
            return false;
        }
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        event.srcEvent.preventDefault();
        const { speed = 0.01, smooth = false } = this.scrollZoom === true ? {} : this.scrollZoom;
        const { delta } = event;
        // Map wheel delta to relative scale
        let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));
        if (delta < 0 && scale !== 0) {
            scale = 1 / scale;
        }
        const newControllerState = this.controllerState.zoom({ pos, scale });
        this.updateViewport(newControllerState, { ...this._getTransitionProps({ around: pos }), transitionDuration: smooth ? 250 : 1 }, {
            isZooming: true,
            isPanning: true
        });
        return true;
    }
    _onTriplePanStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        const newControllerState = this.controllerState.rotateStart({ pos });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
        return true;
    }
    _onTriplePan(event) {
        if (!this.touchRotate) {
            return false;
        }
        if (!this.isDragging()) {
            return false;
        }
        const pos = this.getCenter(event);
        pos[0] -= event.deltaX;
        const newControllerState = this.controllerState.rotate({ pos });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isRotating: true
        });
        return true;
    }
    _onTriplePanEnd(event) {
        if (!this.isDragging()) {
            return false;
        }
        const { inertia } = this;
        if (this.touchRotate && inertia && event.velocityY) {
            const pos = this.getCenter(event);
            const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];
            const newControllerState = this.controllerState.rotate({ pos: endPos });
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isRotating: true
            });
            this.blockEvents(inertia);
        }
        else {
            const newControllerState = this.controllerState.rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isRotating: false
            });
        }
        return true;
    }
    // Default handler for the `pinchstart` event.
    _onPinchStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        const newControllerState = this.controllerState.zoomStart({ pos }).rotateStart({ pos });
        // hack - hammer's `rotation` field doesn't seem to produce the correct angle
        pinchEventWorkaround._startPinchRotation = event.rotation;
        pinchEventWorkaround._lastPinchEvent = event;
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
        return true;
    }
    // Default handler for the `pinchmove` and `pinchend` events.
    _onPinch(event) {
        if (!this.touchZoom && !this.touchRotate) {
            return false;
        }
        if (!this.isDragging()) {
            return false;
        }
        let newControllerState = this.controllerState;
        if (this.touchZoom) {
            const { scale } = event;
            const pos = this.getCenter(event);
            newControllerState = newControllerState.zoom({ pos, scale });
        }
        if (this.touchRotate) {
            const { rotation } = event;
            newControllerState = newControllerState.rotate({
                deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation
            });
        }
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isPanning: this.touchZoom,
            isZooming: this.touchZoom,
            isRotating: this.touchRotate
        });
        pinchEventWorkaround._lastPinchEvent = event;
        return true;
    }
    _onPinchEnd(event) {
        if (!this.isDragging()) {
            return false;
        }
        const { inertia } = this;
        const { _lastPinchEvent } = pinchEventWorkaround;
        if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {
            const pos = this.getCenter(event);
            let newControllerState = this.controllerState.rotateEnd();
            const z = Math.log2(event.scale);
            const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);
            const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);
            newControllerState = newControllerState.zoom({ pos, scale: endScale }).zoomEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps({ around: pos }),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isPanning: this.touchZoom,
                isZooming: this.touchZoom,
                isRotating: false
            });
            this.blockEvents(inertia);
        }
        else {
            const newControllerState = this.controllerState.zoomEnd().rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isPanning: false,
                isZooming: false,
                isRotating: false
            });
        }
        pinchEventWorkaround._startPinchRotation = null;
        pinchEventWorkaround._lastPinchEvent = null;
        return true;
    }
    // Default handler for the `doubletap` event.
    _onDoubleTap(event) {
        if (!this.doubleClickZoom) {
            return false;
        }
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        const isZoomOut = this.isFunctionKeyPressed(event);
        const newControllerState = this.controllerState.zoom({ pos, scale: isZoomOut ? 0.5 : 2 });
        this.updateViewport(newControllerState, this._getTransitionProps({ around: pos }), {
            isZooming: true,
            isPanning: true
        });
        this.blockEvents(100);
        return true;
    }
    // Default handler for the `keydown` event
    _onKeyDown(event) {
        if (!this.keyboard) {
            return false;
        }
        const funcKey = this.isFunctionKeyPressed(event);
        // @ts-ignore
        const { zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY } = this.keyboard === true ? {} : this.keyboard;
        const { controllerState } = this;
        let newControllerState;
        const interactionState = {};
        switch (event.srcEvent.code) {
            case 'Minus':
                newControllerState = funcKey
                    ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)
                    : controllerState.zoomOut(zoomSpeed);
                interactionState.isZooming = true;
                break;
            case 'Equal':
                newControllerState = funcKey
                    ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)
                    : controllerState.zoomIn(zoomSpeed);
                interactionState.isZooming = true;
                break;
            case 'ArrowLeft':
                if (funcKey) {
                    newControllerState = controllerState.rotateLeft(rotateSpeedX);
                    interactionState.isRotating = true;
                }
                else {
                    newControllerState = controllerState.moveLeft(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowRight':
                if (funcKey) {
                    newControllerState = controllerState.rotateRight(rotateSpeedX);
                    interactionState.isRotating = true;
                }
                else {
                    newControllerState = controllerState.moveRight(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowUp':
                if (funcKey) {
                    newControllerState = controllerState.rotateUp(rotateSpeedY);
                    interactionState.isRotating = true;
                }
                else {
                    newControllerState = controllerState.moveUp(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowDown':
                if (funcKey) {
                    newControllerState = controllerState.rotateDown(rotateSpeedY);
                    interactionState.isRotating = true;
                }
                else {
                    newControllerState = controllerState.moveDown(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            default:
                return false;
        }
        this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);
        return true;
    }
    _getTransitionProps(opts) {
        const { transition } = this;
        if (!transition || !transition.transitionInterpolator) {
            return NO_TRANSITION_PROPS;
        }
        // Enables Transitions on double-tap and key-down events.
        return opts
            ? {
                ...transition,
                transitionInterpolator: new _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
                    ...opts,
                    ...transition.transitionInterpolator.opts,
                    makeViewport: this.controllerState.makeViewport
                })
            }
            : transition;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/controllers/first-person-controller.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/controllers/first-person-controller.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FirstPersonController)
/* harmony export */ });
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controller.js */ "./node_modules/@deck.gl/core/dist/controllers/controller.js");
/* harmony import */ var _view_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view-state.js */ "./node_modules/@deck.gl/core/dist/controllers/view-state.js");
/* harmony import */ var _utils_math_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/math-utils.js */ "./node_modules/@deck.gl/core/dist/utils/math-utils.js");
/* harmony import */ var _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../transitions/linear-interpolator.js */ "./node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/spherical-coordinates.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");





const MOVEMENT_SPEED = 20;
const PAN_SPEED = 500;
class FirstPersonState extends _view_state_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(options) {
        const { 
        /* Viewport arguments */
        width, // Width of viewport
        height, // Height of viewport
        // Position and orientation
        position = [0, 0, 0], // typically in meters from anchor point
        bearing = 0, // Rotation around y axis
        pitch = 0, // Rotation around x axis
        // Geospatial anchor
        longitude = null, latitude = null, maxPitch = 90, minPitch = -90, 
        // Model state when the rotate operation first started
        startRotatePos, startBearing, startPitch, startZoomPosition, startPanPos, startPanPosition } = options;
        super({
            width,
            height,
            position,
            bearing,
            pitch,
            longitude,
            latitude,
            maxPitch,
            minPitch
        }, {
            startRotatePos,
            startBearing,
            startPitch,
            startZoomPosition,
            startPanPos,
            startPanPosition
        });
        this.makeViewport = options.makeViewport;
    }
    /* Public API */
    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    panStart({ pos }) {
        const { position } = this.getViewportProps();
        return this._getUpdatedState({
            startPanPos: pos,
            startPanPosition: position
        });
    }
    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */
    pan({ pos }) {
        if (!pos) {
            return this;
        }
        const { startPanPos = [0, 0], startPanPosition = [0, 0] } = this.getState();
        const { width, height, bearing, pitch } = this.getViewportProps();
        const deltaScaleX = (PAN_SPEED * (pos[0] - startPanPos[0])) / width;
        const deltaScaleY = (PAN_SPEED * (pos[1] - startPanPos[1])) / height;
        const up = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.SphericalCoordinates({ bearing, pitch });
        const forward = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.SphericalCoordinates({ bearing, pitch: -90 });
        const yDirection = up.toVector3().normalize();
        const xDirection = forward.toVector3().cross(yDirection).normalize();
        return this._getUpdatedState({
            position: new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(startPanPosition)
                .add(xDirection.scale(deltaScaleX))
                .add(yDirection.scale(deltaScaleY))
        });
    }
    /**
     * End panning
     * Must call if `panStart()` was called
     */
    panEnd() {
        return this._getUpdatedState({
            startPanPos: null,
            startPanPosition: null
        });
    }
    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    rotateStart({ pos }) {
        return this._getUpdatedState({
            startRotatePos: pos,
            startBearing: this.getViewportProps().bearing,
            startPitch: this.getViewportProps().pitch
        });
    }
    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */
    rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {
        const { startRotatePos, startBearing, startPitch } = this.getState();
        const { width, height } = this.getViewportProps();
        if (!startRotatePos || startBearing === undefined || startPitch === undefined) {
            return this;
        }
        let newRotation;
        if (pos) {
            const deltaScaleX = (pos[0] - startRotatePos[0]) / width;
            const deltaScaleY = (pos[1] - startRotatePos[1]) / height;
            newRotation = {
                bearing: startBearing - deltaScaleX * 180,
                pitch: startPitch - deltaScaleY * 90
            };
        }
        else {
            newRotation = {
                bearing: startBearing - deltaAngleX,
                pitch: startPitch - deltaAngleY
            };
        }
        return this._getUpdatedState(newRotation);
    }
    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */
    rotateEnd() {
        return this._getUpdatedState({
            startRotatePos: null,
            startBearing: null,
            startPitch: null
        });
    }
    /**
     * Start zooming
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    zoomStart() {
        return this._getUpdatedState({
            startZoomPosition: this.getViewportProps().position
        });
    }
    /**
     * Zoom
     * @param {[Number, Number]} pos - position on screen where the current center is
     * @param {[Number, Number]} startPos - the center position at
     *   the start of the operation. Must be supplied of `zoomStart()` was not called
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */
    zoom({ pos, scale }) {
        const viewportProps = this.getViewportProps();
        const startZoomPosition = this.getState().startZoomPosition || viewportProps.position;
        const viewport = this.makeViewport(viewportProps);
        const { projectionMatrix, width } = viewport;
        const fovxRadians = 2.0 * Math.atan(1.0 / projectionMatrix[0]);
        const angle = fovxRadians * (pos[0] / width - 0.5);
        const direction = this.getDirection(true);
        return this._move(direction.rotateZ({ radians: -angle }), Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);
    }
    /**
     * End zooming
     * Must call if `zoomStart()` was called
     */
    zoomEnd() {
        return this._getUpdatedState({
            startZoomPosition: null
        });
    }
    moveLeft(speed = MOVEMENT_SPEED) {
        const direction = this.getDirection(true);
        return this._move(direction.rotateZ({ radians: Math.PI / 2 }), speed);
    }
    moveRight(speed = MOVEMENT_SPEED) {
        const direction = this.getDirection(true);
        return this._move(direction.rotateZ({ radians: -Math.PI / 2 }), speed);
    }
    // forward
    moveUp(speed = MOVEMENT_SPEED) {
        const direction = this.getDirection(true);
        return this._move(direction, speed);
    }
    // backward
    moveDown(speed = MOVEMENT_SPEED) {
        const direction = this.getDirection(true);
        return this._move(direction.negate(), speed);
    }
    rotateLeft(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing - speed
        });
    }
    rotateRight(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing + speed
        });
    }
    rotateUp(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch + speed
        });
    }
    rotateDown(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch - speed
        });
    }
    zoomIn(speed = MOVEMENT_SPEED) {
        return this._move(new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 1), speed);
    }
    zoomOut(speed = MOVEMENT_SPEED) {
        return this._move(new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, -1), speed);
    }
    // shortest path between two view states
    shortestPathFrom(viewState) {
        const fromProps = viewState.getViewportProps();
        const props = { ...this.getViewportProps() };
        const { bearing, longitude } = props;
        if (Math.abs(bearing - fromProps.bearing) > 180) {
            props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
        }
        if (longitude !== null &&
            fromProps.longitude !== null &&
            Math.abs(longitude - fromProps.longitude) > 180) {
            props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
        }
        return props;
    }
    /* Private methods */
    _move(direction, speed, fromPosition = this.getViewportProps().position) {
        const delta = direction.scale(speed);
        return this._getUpdatedState({
            position: new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(fromPosition).add(delta)
        });
    }
    getDirection(use2D = false) {
        const spherical = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.SphericalCoordinates({
            bearing: this.getViewportProps().bearing,
            pitch: use2D ? 90 : 90 + this.getViewportProps().pitch
        });
        const direction = spherical.toVector3().normalize();
        return direction;
    }
    _getUpdatedState(newProps) {
        // Update _viewportProps
        return new FirstPersonState({
            makeViewport: this.makeViewport,
            ...this.getViewportProps(),
            ...this.getState(),
            ...newProps
        });
    }
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
        // Ensure pitch and zoom are within specified range
        const { pitch, maxPitch, minPitch, longitude, bearing } = props;
        props.pitch = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)(pitch, minPitch, maxPitch);
        // Normalize degrees
        if (longitude !== null && (longitude < -180 || longitude > 180)) {
            props.longitude = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_4__.mod)(longitude + 180, 360) - 180;
        }
        if (bearing < -180 || bearing > 180) {
            props.bearing = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_4__.mod)(bearing + 180, 360) - 180;
        }
        return props;
    }
}
class FirstPersonController extends _controller_js__WEBPACK_IMPORTED_MODULE_5__["default"] {
    constructor() {
        super(...arguments);
        this.ControllerState = FirstPersonState;
        this.transition = {
            transitionDuration: 300,
            transitionInterpolator: new _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_6__["default"](['position', 'pitch', 'bearing'])
        };
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/controllers/globe-controller.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/controllers/globe-controller.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlobeController)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controller.js */ "./node_modules/@deck.gl/core/dist/controllers/controller.js");
/* harmony import */ var _map_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map-controller.js */ "./node_modules/@deck.gl/core/dist/controllers/map-controller.js");
/* harmony import */ var _utils_math_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/math-utils.js */ "./node_modules/@deck.gl/core/dist/utils/math-utils.js");
/* harmony import */ var _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transitions/linear-interpolator.js */ "./node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js");





class GlobeState extends _map_controller_js__WEBPACK_IMPORTED_MODULE_0__.MapState {
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
        // Ensure zoom is within specified range
        const { maxZoom, minZoom, zoom } = props;
        props.zoom = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.clamp)(zoom, minZoom, maxZoom);
        const { longitude, latitude } = props;
        if (longitude < -180 || longitude > 180) {
            props.longitude = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_2__.mod)(longitude + 180, 360) - 180;
        }
        props.latitude = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.clamp)(latitude, -89, 89);
        return props;
    }
}
class GlobeController extends _controller_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor() {
        super(...arguments);
        this.ControllerState = GlobeState;
        this.transition = {
            transitionDuration: 300,
            transitionInterpolator: new _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_4__["default"](['longitude', 'latitude', 'zoom'])
        };
        this.dragMode = 'pan';
    }
    setProps(props) {
        super.setProps(props);
        // TODO - support pitching?
        this.dragRotate = false;
        this.touchRotate = false;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/controllers/map-controller.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/controllers/map-controller.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MapState: () => (/* binding */ MapState),
/* harmony export */   "default": () => (/* binding */ MapController)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./controller.js */ "./node_modules/@deck.gl/core/dist/controllers/controller.js");
/* harmony import */ var _view_state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view-state.js */ "./node_modules/@deck.gl/core/dist/controllers/view-state.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@deck.gl/core/dist/utils/assert.js");
/* harmony import */ var _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transitions/linear-interpolator.js */ "./node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js");






const PITCH_MOUSE_THRESHOLD = 5;
const PITCH_ACCEL = 1.2;
/* Utils */
class MapState extends _view_state_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(options) {
        const { 
        /** Mapbox viewport properties */
        /** The width of the viewport */
        width, 
        /** The height of the viewport */
        height, 
        /** The latitude at the center of the viewport */
        latitude, 
        /** The longitude at the center of the viewport */
        longitude, 
        /** The tile zoom level of the map. */
        zoom, 
        /** The bearing of the viewport in degrees */
        bearing = 0, 
        /** The pitch of the viewport in degrees */
        pitch = 0, 
        /**
         * Specify the altitude of the viewport camera
         * Unit: map heights, default 1.5
         * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137
         */
        altitude = 1.5, 
        /** Viewport position */
        position = [0, 0, 0], 
        /** Viewport constraints */
        maxZoom = 20, minZoom = 0, maxPitch = 60, minPitch = 0, 
        /** Interaction states, required to calculate change during transform */
        /* The point on map being grabbed when the operation first started */
        startPanLngLat, 
        /* Center of the zoom when the operation first started */
        startZoomLngLat, 
        /* Pointer position when rotation started */
        startRotatePos, 
        /** Bearing when current perspective rotate operation started */
        startBearing, 
        /** Pitch when current perspective rotate operation started */
        startPitch, 
        /** Zoom when current zoom operation started */
        startZoom, 
        /** Normalize viewport props to fit map height into viewport */
        normalize = true } = options;
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Number.isFinite(longitude)); // `longitude` must be supplied
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Number.isFinite(latitude)); // `latitude` must be supplied
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Number.isFinite(zoom)); // `zoom` must be supplied
        super({
            width,
            height,
            latitude,
            longitude,
            zoom,
            bearing,
            pitch,
            altitude,
            maxZoom,
            minZoom,
            maxPitch,
            minPitch,
            normalize,
            position
        }, {
            startPanLngLat,
            startZoomLngLat,
            startRotatePos,
            startBearing,
            startPitch,
            startZoom
        });
        this.makeViewport = options.makeViewport;
    }
    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    panStart({ pos }) {
        return this._getUpdatedState({
            startPanLngLat: this._unproject(pos)
        });
    }
    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     * @param {[Number, Number], optional} startPos - where the pointer grabbed at
     *   the start of the operation. Must be supplied of `panStart()` was not called
     */
    pan({ pos, startPos }) {
        const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);
        if (!startPanLngLat) {
            return this;
        }
        const viewport = this.makeViewport(this.getViewportProps());
        const newProps = viewport.panByPosition(startPanLngLat, pos);
        return this._getUpdatedState(newProps);
    }
    /**
     * End panning
     * Must call if `panStart()` was called
     */
    panEnd() {
        return this._getUpdatedState({
            startPanLngLat: null
        });
    }
    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the center is
     */
    rotateStart({ pos }) {
        return this._getUpdatedState({
            startRotatePos: pos,
            startBearing: this.getViewportProps().bearing,
            startPitch: this.getViewportProps().pitch
        });
    }
    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the center is
     */
    rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {
        const { startRotatePos, startBearing, startPitch } = this.getState();
        if (!startRotatePos || startBearing === undefined || startPitch === undefined) {
            return this;
        }
        let newRotation;
        if (pos) {
            newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);
        }
        else {
            newRotation = {
                bearing: startBearing + deltaAngleX,
                pitch: startPitch + deltaAngleY
            };
        }
        return this._getUpdatedState(newRotation);
    }
    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */
    rotateEnd() {
        return this._getUpdatedState({
            startBearing: null,
            startPitch: null
        });
    }
    /**
     * Start zooming
     * @param {[Number, Number]} pos - position on screen where the center is
     */
    zoomStart({ pos }) {
        return this._getUpdatedState({
            startZoomLngLat: this._unproject(pos),
            startZoom: this.getViewportProps().zoom
        });
    }
    /**
     * Zoom
     * @param {[Number, Number]} pos - position on screen where the current center is
     * @param {[Number, Number]} startPos - the center position at
     *   the start of the operation. Must be supplied of `zoomStart()` was not called
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */
    zoom({ pos, startPos, scale }) {
        // Make sure we zoom around the current mouse position rather than map center
        let { startZoom, startZoomLngLat } = this.getState();
        if (!startZoomLngLat) {
            // We have two modes of zoom:
            // scroll zoom that are discrete events (transform from the current zoom level),
            // and pinch zoom that are continuous events (transform from the zoom level when
            // pinch started).
            // If startZoom state is defined, then use the startZoom state;
            // otherwise assume discrete zooming
            startZoom = this.getViewportProps().zoom;
            startZoomLngLat = this._unproject(startPos) || this._unproject(pos);
        }
        if (!startZoomLngLat) {
            return this;
        }
        const { maxZoom, minZoom } = this.getViewportProps();
        let zoom = startZoom + Math.log2(scale);
        zoom = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)(zoom, minZoom, maxZoom);
        const zoomedViewport = this.makeViewport({ ...this.getViewportProps(), zoom });
        return this._getUpdatedState({
            zoom,
            ...zoomedViewport.panByPosition(startZoomLngLat, pos)
        });
    }
    /**
     * End zooming
     * Must call if `zoomStart()` was called
     */
    zoomEnd() {
        return this._getUpdatedState({
            startZoomLngLat: null,
            startZoom: null
        });
    }
    zoomIn(speed = 2) {
        return this._zoomFromCenter(speed);
    }
    zoomOut(speed = 2) {
        return this._zoomFromCenter(1 / speed);
    }
    moveLeft(speed = 100) {
        return this._panFromCenter([speed, 0]);
    }
    moveRight(speed = 100) {
        return this._panFromCenter([-speed, 0]);
    }
    moveUp(speed = 100) {
        return this._panFromCenter([0, speed]);
    }
    moveDown(speed = 100) {
        return this._panFromCenter([0, -speed]);
    }
    rotateLeft(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing - speed
        });
    }
    rotateRight(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing + speed
        });
    }
    rotateUp(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch + speed
        });
    }
    rotateDown(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch - speed
        });
    }
    shortestPathFrom(viewState) {
        // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);
        const fromProps = viewState.getViewportProps();
        const props = { ...this.getViewportProps() };
        const { bearing, longitude } = props;
        if (Math.abs(bearing - fromProps.bearing) > 180) {
            props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
        }
        if (Math.abs(longitude - fromProps.longitude) > 180) {
            props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
        }
        return props;
    }
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
        // Ensure zoom is within specified range
        const { maxZoom, minZoom, zoom } = props;
        props.zoom = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)(zoom, minZoom, maxZoom);
        // Ensure pitch is within specified range
        const { maxPitch, minPitch, pitch } = props;
        props.pitch = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)(pitch, minPitch, maxPitch);
        // Normalize viewport props to fit map height into viewport
        const { normalize = true } = props;
        if (normalize) {
            Object.assign(props, (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.normalizeViewportProps)(props));
        }
        return props;
    }
    /* Private methods */
    _zoomFromCenter(scale) {
        const { width, height } = this.getViewportProps();
        return this.zoom({
            pos: [width / 2, height / 2],
            scale
        });
    }
    _panFromCenter(offset) {
        const { width, height } = this.getViewportProps();
        return this.pan({
            startPos: [width / 2, height / 2],
            pos: [width / 2 + offset[0], height / 2 + offset[1]]
        });
    }
    _getUpdatedState(newProps) {
        // @ts-ignore
        return new this.constructor({
            makeViewport: this.makeViewport,
            ...this.getViewportProps(),
            ...this.getState(),
            ...newProps
        });
    }
    _unproject(pos) {
        const viewport = this.makeViewport(this.getViewportProps());
        // @ts-ignore
        return pos && viewport.unproject(pos);
    }
    _getNewRotation(pos, startPos, startPitch, startBearing) {
        const deltaX = pos[0] - startPos[0];
        const deltaY = pos[1] - startPos[1];
        const centerY = pos[1];
        const startY = startPos[1];
        const { width, height } = this.getViewportProps();
        const deltaScaleX = deltaX / width;
        let deltaScaleY = 0;
        if (deltaY > 0) {
            if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {
                // Move from 0 to -1 as we drag upwards
                deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;
            }
        }
        else if (deltaY < 0) {
            if (startY > PITCH_MOUSE_THRESHOLD) {
                // Move from 0 to 1 as we drag upwards
                deltaScaleY = 1 - centerY / startY;
            }
        }
        // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.
        // deltaScaleX does not need to be clamped as bearing does not have constraints.
        deltaScaleY = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)(deltaScaleY, -1, 1);
        const { minPitch, maxPitch } = this.getViewportProps();
        const bearing = startBearing + 180 * deltaScaleX;
        let pitch = startPitch;
        if (deltaScaleY > 0) {
            // Gradually increase pitch
            pitch = startPitch + deltaScaleY * (maxPitch - startPitch);
        }
        else if (deltaScaleY < 0) {
            // Gradually decrease pitch
            pitch = startPitch - deltaScaleY * (minPitch - startPitch);
        }
        return {
            pitch,
            bearing
        };
    }
}
class MapController extends _controller_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
    constructor() {
        super(...arguments);
        this.ControllerState = MapState;
        this.transition = {
            transitionDuration: 300,
            transitionInterpolator: new _transitions_linear_interpolator_js__WEBPACK_IMPORTED_MODULE_5__["default"]({
                transitionProps: {
                    compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],
                    required: ['longitude', 'latitude', 'zoom']
                }
            })
        };
        this.dragMode = 'pan';
    }
    setProps(props) {
        props.position = props.position || [0, 0, 0];
        const oldProps = this.props;
        super.setProps(props);
        const dimensionChanged = !oldProps || oldProps.height !== props.height;
        if (dimensionChanged) {
            // Dimensions changed, normalize the props
            this.updateViewport(new this.ControllerState({
                makeViewport: this.makeViewport,
                ...props,
                ...this.state
            }));
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/controllers/transition-manager.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/controllers/transition-manager.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TRANSITION_EVENTS: () => (/* binding */ TRANSITION_EVENTS),
/* harmony export */   "default": () => (/* binding */ TransitionManager)
/* harmony export */ });
/* harmony import */ var _transitions_transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transitions/transition.js */ "./node_modules/@deck.gl/core/dist/transitions/transition.js");

const noop = () => { };
// Enums cannot be directly exported as they are not transpiled correctly into ES5, see https://github.com/visgl/deck.gl/issues/7130
const TRANSITION_EVENTS = {
    BREAK: 1,
    SNAP_TO_END: 2,
    IGNORE: 3
};
const DEFAULT_EASING = t => t;
const DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;
class TransitionManager {
    constructor(opts) {
        this._onTransitionUpdate = transition => {
            // NOTE: Be cautious re-ordering statements in this function.
            const { time, settings: { interpolator, startProps, endProps, duration, easing } } = transition;
            const t = easing(time / duration);
            const viewport = interpolator.interpolateProps(startProps, endProps, t);
            // This gurantees all props (e.g. bearing, longitude) are normalized
            // So when viewports are compared they are in same range.
            this.propsInTransition = this.getControllerState({
                ...this.props,
                ...viewport
            }).getViewportProps();
            this.onViewStateChange({
                viewState: this.propsInTransition,
                oldViewState: this.props
            });
        };
        this.getControllerState = opts.getControllerState;
        this.propsInTransition = null;
        this.transition = new _transitions_transition_js__WEBPACK_IMPORTED_MODULE_0__["default"](opts.timeline);
        this.onViewStateChange = opts.onViewStateChange || noop;
        this.onStateChange = opts.onStateChange || noop;
    }
    finalize() {
        this.transition.cancel();
    }
    // Returns current transitioned viewport.
    getViewportInTransition() {
        return this.propsInTransition;
    }
    // Process the vewiport change, either ignore or trigger a new transition.
    // Return true if a new transition is triggered, false otherwise.
    processViewStateChange(nextProps) {
        let transitionTriggered = false;
        const currentProps = this.props;
        // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.
        this.props = nextProps;
        // NOTE: Be cautious re-ordering statements in this function.
        if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {
            return false;
        }
        if (this._isTransitionEnabled(nextProps)) {
            let startProps = currentProps;
            if (this.transition.inProgress) {
                // @ts-expect-error
                const { interruption, endProps } = this.transition.settings;
                startProps = {
                    ...currentProps,
                    ...(interruption === TRANSITION_EVENTS.SNAP_TO_END
                        ? endProps
                        : this.propsInTransition || currentProps)
                };
            }
            this._triggerTransition(startProps, nextProps);
            transitionTriggered = true;
        }
        else {
            this.transition.cancel();
        }
        return transitionTriggered;
    }
    updateTransition() {
        this.transition.update();
    }
    // Helper methods
    _isTransitionEnabled(props) {
        const { transitionDuration, transitionInterpolator } = props;
        return ((transitionDuration > 0 || transitionDuration === 'auto') &&
            Boolean(transitionInterpolator));
    }
    _isUpdateDueToCurrentTransition(props) {
        if (this.transition.inProgress && this.propsInTransition) {
            // @ts-expect-error
            return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);
        }
        return false;
    }
    _shouldIgnoreViewportChange(currentProps, nextProps) {
        if (this.transition.inProgress) {
            // @ts-expect-error
            const transitionSettings = this.transition.settings;
            // Ignore update if it is requested to be ignored
            return (transitionSettings.interruption === TRANSITION_EVENTS.IGNORE ||
                // Ignore update if it is due to current active transition.
                this._isUpdateDueToCurrentTransition(nextProps));
        }
        if (this._isTransitionEnabled(nextProps)) {
            // Ignore if none of the viewport props changed.
            return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);
        }
        return true;
    }
    _triggerTransition(startProps, endProps) {
        const startViewstate = this.getControllerState(startProps);
        const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);
        // update transitionDuration for 'auto' mode
        const transitionInterpolator = endProps.transitionInterpolator;
        const duration = transitionInterpolator.getDuration
            ? transitionInterpolator.getDuration(startProps, endProps)
            : endProps.transitionDuration;
        if (duration === 0) {
            return;
        }
        const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);
        this.propsInTransition = {};
        const transitionSettings = {
            duration,
            easing: endProps.transitionEasing || DEFAULT_EASING,
            interpolator: transitionInterpolator,
            interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,
            startProps: initialProps.start,
            endProps: initialProps.end,
            onStart: endProps.onTransitionStart,
            onUpdate: this._onTransitionUpdate,
            onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),
            onEnd: this._onTransitionEnd(endProps.onTransitionEnd)
        };
        this.transition.start(transitionSettings);
        this.onStateChange({ inTransition: true });
        this.updateTransition();
    }
    _onTransitionEnd(callback) {
        return transition => {
            this.propsInTransition = null;
            this.onStateChange({
                inTransition: false,
                isZooming: false,
                isPanning: false,
                isRotating: false
            });
            callback?.(transition);
        };
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/controllers/view-state.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/controllers/view-state.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ViewState)
/* harmony export */ });
class ViewState {
    constructor(props, state) {
        this._viewportProps = this.applyConstraints(props);
        this._state = state;
    }
    getViewportProps() {
        return this._viewportProps;
    }
    getState() {
        return this._state;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/debug/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/debug/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ debug),
/* harmony export */   register: () => (/* binding */ register)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _loggers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loggers.js */ "./node_modules/@deck.gl/core/dist/debug/loggers.js");


/* debug utility */
let loggers = {};
// Conditionally load default loggers in development mode
// eslint-disable-next-line
if (true) {
    loggers = (0,_loggers_js__WEBPACK_IMPORTED_MODULE_0__.getLoggers)(_utils_log_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
}
function register(handlers) {
    loggers = handlers;
}
function debug(eventType, arg1, arg2, arg3) {
    if (_utils_log_js__WEBPACK_IMPORTED_MODULE_1__["default"].level > 0 && loggers[eventType]) {
        // Not using rest parameters to defeat perf hit from array construction
        loggers[eventType].call(null, arg1, arg2, arg3);
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/debug/loggers.js":
/*!**********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/debug/loggers.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLoggers: () => (/* binding */ getLoggers)
/* harmony export */ });
const logState = {
    attributeUpdateStart: -1,
    attributeManagerUpdateStart: -1,
    attributeUpdateMessages: []
};
const LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact
const LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf
const LOG_LEVEL_UPDATE_DETAIL = 3;
const LOG_LEVEL_INFO = 4;
const LOG_LEVEL_DRAW = 2;
const getLoggers = (log) => ({
    /* Layer events */
    'layer.changeFlag': (layer, key, flags) => {
        log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();
    },
    'layer.initialize': layer => {
        log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();
    },
    'layer.update': (layer, needsUpdate) => {
        if (needsUpdate) {
            const flags = layer.getChangeFlags();
            log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layer} because: ${Object.keys(flags)
                .filter(key => flags[key])
                .join(', ')}`)();
        }
        else {
            log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();
        }
    },
    'layer.matched': (layer, changed) => {
        if (changed) {
            log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();
        }
    },
    'layer.finalize': layer => {
        log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();
    },
    /* CompositeLayer events */
    'compositeLayer.renderLayers': (layer, updated, subLayers) => {
        if (updated) {
            log.log(LOG_LEVEL_MINOR_UPDATE, `Composite layer rendered new subLayers ${layer}`, subLayers)();
        }
        else {
            log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();
        }
    },
    /* LayerManager events */
    'layerManager.setLayers': (layerManager, updated, layers) => {
        if (updated) {
            log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();
        }
    },
    'layerManager.activateViewport': (layerManager, viewport) => {
        log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();
    },
    /* AttributeManager events */
    'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {
        log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames
            ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`
            : `invalidated all attributes for ${attributeManager.id}`)();
    },
    'attributeManager.updateStart': attributeManager => {
        logState.attributeUpdateMessages.length = 0;
        logState.attributeManagerUpdateStart = Date.now();
    },
    'attributeManager.updateEnd': (attributeManager, numInstances) => {
        const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);
        log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`)();
        for (const updateMessage of logState.attributeUpdateMessages) {
            log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();
        }
        log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();
    },
    /* Attribute events */
    'attribute.updateStart': attribute => {
        logState.attributeUpdateStart = Date.now();
    },
    'attribute.allocate': (attribute, numInstances) => {
        const message = `${attribute.id} allocated ${numInstances}`;
        logState.attributeUpdateMessages.push(message);
    },
    'attribute.updateEnd': (attribute, numInstances) => {
        const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);
        const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;
        logState.attributeUpdateMessages.push(message);
    },
    /* Render events */
    'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {
        const { pass, redrawReason, stats } = opts;
        for (const status of renderStats) {
            const { totalCount, visibleCount, compositeCount, pickableCount } = status;
            const primitiveCount = totalCount - compositeCount;
            const hiddenCount = primitiveCount - visibleCount;
            log.log(LOG_LEVEL_DRAW, `RENDER #${deckRenderer.renderCount} \
  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \
  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`)();
            if (stats) {
                stats.get('Redraw Layers').add(visibleCount);
            }
        }
    }
});


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/effects/lighting/ambient-light.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/effects/lighting/ambient-light.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AmbientLight: () => (/* binding */ AmbientLight)
/* harmony export */ });
const DEFAULT_LIGHT_COLOR = [255, 255, 255];
const DEFAULT_LIGHT_INTENSITY = 1.0;
let idCount = 0;
class AmbientLight {
    constructor(props = {}) {
        this.type = 'ambient';
        const { color = DEFAULT_LIGHT_COLOR } = props;
        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
        this.id = props.id || `ambient-${idCount++}`;
        this.color = color;
        this.intensity = intensity;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/effects/lighting/directional-light.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/effects/lighting/directional-light.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DirectionalLight: () => (/* binding */ DirectionalLight)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");

const DEFAULT_LIGHT_COLOR = [255, 255, 255];
const DEFAULT_LIGHT_INTENSITY = 1.0;
const DEFAULT_LIGHT_DIRECTION = [0.0, 0.0, -1.0];
let idCount = 0;
class DirectionalLight {
    constructor(props = {}) {
        this.type = 'directional';
        const { color = DEFAULT_LIGHT_COLOR } = props;
        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
        const { direction = DEFAULT_LIGHT_DIRECTION } = props;
        const { _shadow = false } = props;
        this.id = props.id || `directional-${idCount++}`;
        this.color = color;
        this.intensity = intensity;
        this.type = 'directional';
        this.direction = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Vector3(direction).normalize().toArray();
        this.shadow = _shadow;
    }
    getProjectedLight(opts) {
        return this;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/effects/lighting/lighting-effect.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/effects/lighting/lighting-effect.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LightingEffect)
/* harmony export */ });
/* harmony import */ var _ambient_light_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ambient-light.js */ "./node_modules/@deck.gl/core/dist/effects/lighting/ambient-light.js");
/* harmony import */ var _directional_light_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./directional-light.js */ "./node_modules/@deck.gl/core/dist/effects/lighting/directional-light.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _passes_shadow_pass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../passes/shadow-pass.js */ "./node_modules/@deck.gl/core/dist/passes/shadow-pass.js");
/* harmony import */ var _shaderlib_shadow_shadow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaderlib/shadow/shadow.js */ "./node_modules/@deck.gl/core/dist/shaderlib/shadow/shadow.js");





const DEFAULT_AMBIENT_LIGHT_PROPS = { color: [255, 255, 255], intensity: 1.0 };
const DEFAULT_DIRECTIONAL_LIGHT_PROPS = [
    {
        color: [255, 255, 255],
        intensity: 1.0,
        direction: [-1, 3, -1]
    },
    {
        color: [255, 255, 255],
        intensity: 0.9,
        direction: [1, -8, -2.5]
    }
];
const DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];
// Class to manage ambient, point and directional light sources in deck
class LightingEffect {
    constructor(props = {}) {
        this.id = 'lighting-effect';
        this.shadowColor = DEFAULT_SHADOW_COLOR;
        this.shadow = false;
        this.ambientLight = null;
        this.directionalLights = [];
        this.pointLights = [];
        this.shadowPasses = [];
        this.shadowMaps = [];
        this.dummyShadowMap = null;
        this.setProps(props);
    }
    setup(context) {
        this.context = context;
        const { device, deck } = context;
        if (this.shadow && !this.dummyShadowMap) {
            this._createShadowPasses(device);
            deck._addDefaultShaderModule(_shaderlib_shadow_shadow_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
            this.dummyShadowMap = device.createTexture({
                width: 1,
                height: 1
            });
        }
    }
    setProps(props) {
        this.ambientLight = null;
        this.directionalLights = [];
        this.pointLights = [];
        for (const key in props) {
            const lightSource = props[key];
            switch (lightSource.type) {
                case 'ambient':
                    this.ambientLight = lightSource;
                    break;
                case 'directional':
                    this.directionalLights.push(lightSource);
                    break;
                case 'point':
                    this.pointLights.push(lightSource);
                    break;
                default:
            }
        }
        this._applyDefaultLights();
        this.shadow = this.directionalLights.some(light => light.shadow);
        if (this.context) {
            // Create resources if necessary
            this.setup(this.context);
        }
        this.props = props;
    }
    preRender({ layers, layerFilter, viewports, onViewportActive, views }) {
        if (!this.shadow)
            return;
        // create light matrix every frame to make sure always updated from light source
        this.shadowMatrices = this._calculateMatrices();
        for (let i = 0; i < this.shadowPasses.length; i++) {
            const shadowPass = this.shadowPasses[i];
            shadowPass.render({
                layers,
                layerFilter,
                viewports,
                onViewportActive,
                views,
                moduleParameters: {
                    shadowLightId: i,
                    dummyShadowMap: this.dummyShadowMap,
                    shadowMatrices: this.shadowMatrices
                }
            });
        }
    }
    getModuleParameters(layer) {
        const parameters = this.shadow
            ? {
                shadowMaps: this.shadowMaps,
                dummyShadowMap: this.dummyShadowMap,
                shadowColor: this.shadowColor,
                shadowMatrices: this.shadowMatrices
            }
            : {};
        // when not rendering to screen, turn off lighting by adding empty light source object
        // lights shader module relies on the `lightSources` to turn on/off lighting
        parameters.lightSources = {
            ambientLight: this.ambientLight,
            directionalLights: this.directionalLights.map(directionalLight => directionalLight.getProjectedLight({ layer })),
            pointLights: this.pointLights.map(pointLight => pointLight.getProjectedLight({ layer }))
        };
        return parameters;
    }
    cleanup(context) {
        for (const shadowPass of this.shadowPasses) {
            shadowPass.delete();
        }
        this.shadowPasses.length = 0;
        this.shadowMaps.length = 0;
        if (this.dummyShadowMap) {
            this.dummyShadowMap.destroy();
            this.dummyShadowMap = null;
            context.deck._removeDefaultShaderModule(_shaderlib_shadow_shadow_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
        }
    }
    _calculateMatrices() {
        const lightMatrices = [];
        for (const light of this.directionalLights) {
            const viewMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Matrix4().lookAt({
                eye: new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(light.direction).negate()
            });
            lightMatrices.push(viewMatrix);
        }
        return lightMatrices;
    }
    _createShadowPasses(device) {
        for (let i = 0; i < this.directionalLights.length; i++) {
            const shadowPass = new _passes_shadow_pass_js__WEBPACK_IMPORTED_MODULE_3__["default"](device);
            this.shadowPasses[i] = shadowPass;
            this.shadowMaps[i] = shadowPass.shadowMap;
        }
    }
    _applyDefaultLights() {
        const { ambientLight, pointLights, directionalLights } = this;
        if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {
            this.ambientLight = new _ambient_light_js__WEBPACK_IMPORTED_MODULE_4__.AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);
            this.directionalLights.push(new _directional_light_js__WEBPACK_IMPORTED_MODULE_5__.DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new _directional_light_js__WEBPACK_IMPORTED_MODULE_5__.DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AttributeManager)
/* harmony export */ });
/* harmony import */ var _attribute_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./attribute.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/attribute.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_memoize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/memoize.js */ "./node_modules/@deck.gl/core/dist/utils/memoize.js");
/* harmony import */ var _utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/math-utils.js */ "./node_modules/@deck.gl/core/dist/utils/math-utils.js");
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../debug/index.js */ "./node_modules/@deck.gl/core/dist/debug/index.js");
/* harmony import */ var _attribute_transition_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./attribute-transition-manager.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/attribute-transition-manager.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable guard-for-in */






const TRACE_INVALIDATE = 'attributeManager.invalidate';
const TRACE_UPDATE_START = 'attributeManager.updateStart';
const TRACE_UPDATE_END = 'attributeManager.updateEnd';
const TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';
const TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';
const TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';
class AttributeManager {
    constructor(device, { id = 'attribute-manager', stats, timeline } = {}) {
        this.mergeBoundsMemoized = (0,_utils_memoize_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeBounds);
        this.id = id;
        this.device = device;
        this.attributes = {};
        this.updateTriggers = {};
        this.needsRedraw = true;
        this.userData = {};
        this.stats = stats;
        this.attributeTransitionManager = new _attribute_transition_manager_js__WEBPACK_IMPORTED_MODULE_2__["default"](device, {
            id: `${id}-transitions`,
            timeline
        });
        // For debugging sanity, prevent uninitialized members
        Object.seal(this);
    }
    finalize() {
        for (const attributeName in this.attributes) {
            this.attributes[attributeName].delete();
        }
        this.attributeTransitionManager.finalize();
    }
    // Returns the redraw flag, optionally clearing it.
    // Redraw flag will be set if any attributes attributes changed since
    // flag was last cleared.
    //
    // @param {String} [clearRedrawFlags=false] - whether to clear the flag
    // @return {false|String} - reason a redraw is needed.
    getNeedsRedraw(opts = { clearRedrawFlags: false }) {
        const redraw = this.needsRedraw;
        this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;
        return redraw && this.id;
    }
    // Sets the redraw flag.
    // @param {Boolean} redraw=true
    setNeedsRedraw() {
        this.needsRedraw = true;
    }
    // Adds attributes
    add(attributes) {
        this._add(attributes);
    }
    // Adds attributes
    addInstanced(attributes) {
        this._add(attributes, { stepMode: 'instance' });
    }
    /**
     * Removes attributes
     * Takes an array of attribute names and delete them from
     * the attribute map if they exists
     *
     * @example
     * attributeManager.remove(['position']);
     *
     * @param {Object} attributeNameArray - attribute name array (see above)
     */
    remove(attributeNameArray) {
        for (const name of attributeNameArray) {
            if (this.attributes[name] !== undefined) {
                this.attributes[name].delete();
                delete this.attributes[name];
            }
        }
    }
    // Marks an attribute for update
    invalidate(triggerName, dataRange) {
        const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);
        // For performance tuning
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);
    }
    invalidateAll(dataRange) {
        for (const attributeName in this.attributes) {
            this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);
        }
        // For performance tuning
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_INVALIDATE, this, 'all');
    }
    // Ensure all attribute buffers are updated from props or data.
    // eslint-disable-next-line complexity
    update({ data, numInstances, startIndices = null, transitions, props = {}, buffers = {}, context = {} }) {
        // keep track of whether some attributes are updated
        let updated = false;
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_UPDATE_START, this);
        if (this.stats) {
            this.stats.get('Update Attributes').timeStart();
        }
        for (const attributeName in this.attributes) {
            const attribute = this.attributes[attributeName];
            const accessorName = attribute.settings.accessor;
            attribute.startIndices = startIndices;
            attribute.numInstances = numInstances;
            if (props[attributeName]) {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_4__["default"].removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();
            }
            if (attribute.setExternalBuffer(buffers[attributeName])) {
                // Step 1: try update attribute directly from external buffers
            }
            else if (attribute.setBinaryValue(typeof accessorName === 'string' ? buffers[accessorName] : undefined, data.startIndices)) {
                // Step 2: try set packed value from external typed array
            }
            else if (typeof accessorName === 'string' &&
                !buffers[accessorName] &&
                attribute.setConstantValue(props[accessorName])) {
                // Step 3: try set constant value from props
                // Note: if buffers[accessorName] is supplied, ignore props[accessorName]
                // This may happen when setBinaryValue falls through to use the auto updater
            }
            else if (attribute.needsUpdate()) {
                // Step 4: update via updater callback
                updated = true;
                this._updateAttribute({
                    attribute,
                    numInstances,
                    data,
                    props,
                    context
                });
            }
            this.needsRedraw = this.needsRedraw || attribute.needsRedraw();
        }
        if (updated) {
            // Only initiate alloc/update (and logging) if actually needed
            (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_UPDATE_END, this, numInstances);
        }
        if (this.stats) {
            this.stats.get('Update Attributes').timeEnd();
        }
        this.attributeTransitionManager.update({
            attributes: this.attributes,
            numInstances,
            transitions
        });
    }
    // Update attribute transition to the current timestamp
    // Returns `true` if any transition is in progress
    updateTransition() {
        const { attributeTransitionManager } = this;
        const transitionUpdated = attributeTransitionManager.run();
        this.needsRedraw = this.needsRedraw || transitionUpdated;
        return transitionUpdated;
    }
    /**
     * Returns all attribute descriptors
     * Note: Format matches luma.gl Model/Program.setAttributes()
     * @return {Object} attributes - descriptors
     */
    getAttributes() {
        return { ...this.attributes, ...this.attributeTransitionManager.getAttributes() };
    }
    /**
     * Computes the spatial bounds of a given set of attributes
     */
    getBounds(attributeNames) {
        const bounds = attributeNames.map(attributeName => this.attributes[attributeName]?.getBounds());
        return this.mergeBoundsMemoized(bounds);
    }
    /**
     * Returns changed attribute descriptors
     * This indicates which WebGLBuffers need to be updated
     * @return {Object} attributes - descriptors
     */
    getChangedAttributes(opts = { clearChangedFlags: false }) {
        const { attributes, attributeTransitionManager } = this;
        const changedAttributes = { ...attributeTransitionManager.getAttributes() };
        for (const attributeName in attributes) {
            const attribute = attributes[attributeName];
            if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {
                changedAttributes[attributeName] = attribute;
            }
        }
        return changedAttributes;
    }
    /** Generate WebGPU-style buffer layout descriptors from all attributes */
    getBufferLayouts(
    /** A luma.gl Model-shaped object that supplies additional hint to attribute resolution */
    modelInfo) {
        return Object.values(this.getAttributes()).map(attribute => attribute.getBufferLayout(modelInfo));
    }
    // PRIVATE METHODS
    /** Register new attributes */
    _add(
    /** A map from attribute name to attribute descriptors */
    attributes, 
    /** Additional attribute settings to pass to all attributes */
    overrideOptions) {
        for (const attributeName in attributes) {
            const attribute = attributes[attributeName];
            const props = {
                ...attribute,
                id: attributeName,
                size: (attribute.isIndexed && 1) || attribute.size || 1,
                ...overrideOptions
            };
            // Initialize the attribute descriptor, with WebGL and metadata fields
            this.attributes[attributeName] = new _attribute_js__WEBPACK_IMPORTED_MODULE_5__["default"](this.device, props);
        }
        this._mapUpdateTriggersToAttributes();
    }
    // build updateTrigger name to attribute name mapping
    _mapUpdateTriggersToAttributes() {
        const triggers = {};
        for (const attributeName in this.attributes) {
            const attribute = this.attributes[attributeName];
            attribute.getUpdateTriggers().forEach(triggerName => {
                if (!triggers[triggerName]) {
                    triggers[triggerName] = [];
                }
                triggers[triggerName].push(attributeName);
            });
        }
        this.updateTriggers = triggers;
    }
    _invalidateTrigger(triggerName, dataRange) {
        const { attributes, updateTriggers } = this;
        const invalidatedAttributes = updateTriggers[triggerName];
        if (invalidatedAttributes) {
            invalidatedAttributes.forEach(name => {
                const attribute = attributes[name];
                if (attribute) {
                    attribute.setNeedsUpdate(attribute.id, dataRange);
                }
            });
        }
        return invalidatedAttributes;
    }
    _updateAttribute(opts) {
        const { attribute, numInstances } = opts;
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_ATTRIBUTE_UPDATE_START, attribute);
        if (attribute.constant) {
            // The attribute is flagged as constant outside of an update cycle
            // Skip allocation and updater call
            // @ts-ignore value can be set to an array by user but always cast to typed array during attribute update
            attribute.setConstantValue(attribute.value);
            return;
        }
        if (attribute.allocate(numInstances)) {
            (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);
        }
        // Calls update on any buffers that need update
        const updated = attribute.updateBuffer(opts);
        if (updated) {
            this.needsRedraw = true;
            (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/attribute/attribute-transition-manager.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/attribute/attribute-transition-manager.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AttributeTransitionManager)
/* harmony export */ });
/* harmony import */ var _transitions_gpu_interpolation_transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../transitions/gpu-interpolation-transition.js */ "./node_modules/@deck.gl/core/dist/transitions/gpu-interpolation-transition.js");
/* harmony import */ var _transitions_gpu_spring_transition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../transitions/gpu-spring-transition.js */ "./node_modules/@deck.gl/core/dist/transitions/gpu-spring-transition.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
// deck.gl, MIT license



const TRANSITION_TYPES = {
    interpolation: _transitions_gpu_interpolation_transition_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    spring: _transitions_gpu_spring_transition_js__WEBPACK_IMPORTED_MODULE_1__["default"]
};
class AttributeTransitionManager {
    constructor(device, { id, timeline }) {
        if (!device)
            throw new Error('AttributeTransitionManager is constructed without device');
        this.id = id;
        this.device = device;
        this.timeline = timeline;
        this.transitions = {};
        this.needsRedraw = false;
        this.numInstances = 1;
    }
    finalize() {
        for (const attributeName in this.transitions) {
            this._removeTransition(attributeName);
        }
    }
    /* Public methods */
    // Called when attribute manager updates
    // Check the latest attributes for updates.
    update({ attributes, transitions, numInstances }) {
        // Transform class will crash if elementCount is 0
        this.numInstances = numInstances || 1;
        for (const attributeName in attributes) {
            const attribute = attributes[attributeName];
            const settings = attribute.getTransitionSetting(transitions);
            // this attribute might not support transitions?
            if (!settings)
                continue; // eslint-disable-line no-continue
            this._updateAttribute(attributeName, attribute, settings);
        }
        for (const attributeName in this.transitions) {
            const attribute = attributes[attributeName];
            if (!attribute || !attribute.getTransitionSetting(transitions)) {
                // Animated attribute has been removed
                this._removeTransition(attributeName);
            }
        }
    }
    // Returns `true` if attribute is transition-enabled
    hasAttribute(attributeName) {
        const transition = this.transitions[attributeName];
        return transition && transition.inProgress;
    }
    // Get all the animated attributes
    getAttributes() {
        const animatedAttributes = {};
        for (const attributeName in this.transitions) {
            const transition = this.transitions[attributeName];
            if (transition.inProgress) {
                animatedAttributes[attributeName] = transition.attributeInTransition;
            }
        }
        return animatedAttributes;
    }
    /* eslint-disable max-statements */
    // Called every render cycle, run transform feedback
    // Returns `true` if anything changes
    run() {
        if (this.numInstances === 0) {
            return false;
        }
        for (const attributeName in this.transitions) {
            const updated = this.transitions[attributeName].update();
            if (updated) {
                this.needsRedraw = true;
            }
        }
        const needsRedraw = this.needsRedraw;
        this.needsRedraw = false;
        return needsRedraw;
    }
    /* eslint-enable max-statements */
    /* Private methods */
    _removeTransition(attributeName) {
        this.transitions[attributeName].delete();
        delete this.transitions[attributeName];
    }
    // Check an attributes for updates
    // Returns a transition object if a new transition is triggered.
    _updateAttribute(attributeName, attribute, settings) {
        const transition = this.transitions[attributeName];
        // an attribute can change transition type when it updates
        // let's remove the transition when that happens so we can create the new transition type
        // TODO: when switching transition types, make sure to carry over the attribute's
        // previous buffers, currentLength, startIndices, etc, to be used as the starting point
        // for the next transition
        let isNew = !transition || transition.type !== settings.type;
        if (isNew) {
            if (transition) {
                this._removeTransition(attributeName);
            }
            const TransitionType = TRANSITION_TYPES[settings.type];
            if (TransitionType) {
                this.transitions[attributeName] = new TransitionType({
                    attribute,
                    timeline: this.timeline,
                    device: this.device
                });
            }
            else {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(`unsupported transition type '${settings.type}'`)();
                isNew = false;
            }
        }
        if (isNew || attribute.needsRedraw()) {
            this.needsRedraw = true;
            this.transitions[attributeName].start(settings, this.numInstances);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/attribute/attribute.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/attribute/attribute.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Attribute)
/* harmony export */ });
/* harmony import */ var _data_column_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data-column.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/data-column.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/assert.js */ "./node_modules/@deck.gl/core/dist/utils/assert.js");
/* harmony import */ var _utils_iterable_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/iterable-utils.js */ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js");
/* harmony import */ var _utils_flatten_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/flatten.js */ "./node_modules/@deck.gl/core/dist/utils/flatten.js");
/* harmony import */ var _utils_range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/range.js */ "./node_modules/@deck.gl/core/dist/utils/range.js");
/* harmony import */ var _gl_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gl-utils.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js");
/* harmony import */ var _transition_settings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transition-settings.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js");
/* eslint-disable complexity */







class Attribute extends _data_column_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(device, opts) {
        super(device, opts, {
            startIndices: null,
            lastExternalBuffer: null,
            binaryValue: null,
            binaryAccessor: null,
            needsUpdate: true,
            needsRedraw: false,
            layoutChanged: false,
            updateRanges: _utils_range_js__WEBPACK_IMPORTED_MODULE_1__.FULL
        });
        /** Legacy approach to set attribute value - read `isConstant` instead for attribute state */
        this.constant = false;
        // eslint-disable-next-line
        this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);
        Object.seal(this.settings);
        Object.seal(this.state);
        // Check all fields and generate helpful error messages
        this._validateAttributeUpdaters();
    }
    get startIndices() {
        return this.state.startIndices;
    }
    set startIndices(layout) {
        this.state.startIndices = layout;
    }
    needsUpdate() {
        return this.state.needsUpdate;
    }
    needsRedraw({ clearChangedFlags = false } = {}) {
        const needsRedraw = this.state.needsRedraw;
        this.state.needsRedraw = needsRedraw && !clearChangedFlags;
        return needsRedraw;
    }
    layoutChanged() {
        return this.state.layoutChanged;
    }
    setAccessor(accessor) {
        this.state.layoutChanged ||= !(0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_2__.bufferLayoutEqual)(accessor, this.getAccessor());
        super.setAccessor(accessor);
    }
    getUpdateTriggers() {
        const { accessor } = this.settings;
        // Backards compatibility: allow attribute name to be used as update trigger key
        return [this.id].concat((typeof accessor !== 'function' && accessor) || []);
    }
    supportsTransition() {
        return Boolean(this.settings.transition);
    }
    // Resolve transition settings object if transition is enabled, otherwise `null`
    getTransitionSetting(opts) {
        if (!opts || !this.supportsTransition()) {
            return null;
        }
        const { accessor } = this.settings;
        // TODO: have the layer resolve these transition settings itself?
        const layerSettings = this.settings.transition;
        // these are the transition settings passed in by the user
        const userSettings = Array.isArray(accessor)
            ? // @ts-ignore
                opts[accessor.find(a => opts[a])]
            : // @ts-ignore
                opts[accessor];
        // Shorthand: use duration instead of parameter object
        return (0,_transition_settings_js__WEBPACK_IMPORTED_MODULE_3__.normalizeTransitionSettings)(userSettings, layerSettings);
    }
    setNeedsUpdate(reason = this.id, dataRange) {
        this.state.needsUpdate = this.state.needsUpdate || reason;
        this.setNeedsRedraw(reason);
        if (dataRange) {
            const { startRow = 0, endRow = Infinity } = dataRange;
            this.state.updateRanges = _utils_range_js__WEBPACK_IMPORTED_MODULE_1__.add(this.state.updateRanges, [startRow, endRow]);
        }
        else {
            this.state.updateRanges = _utils_range_js__WEBPACK_IMPORTED_MODULE_1__.FULL;
        }
    }
    clearNeedsUpdate() {
        this.state.needsUpdate = false;
        this.state.updateRanges = _utils_range_js__WEBPACK_IMPORTED_MODULE_1__.EMPTY;
    }
    setNeedsRedraw(reason = this.id) {
        this.state.needsRedraw = this.state.needsRedraw || reason;
    }
    allocate(numInstances) {
        const { state, settings } = this;
        if (settings.noAlloc) {
            // Data is provided through a Buffer object.
            return false;
        }
        if (settings.update) {
            super.allocate(numInstances, state.updateRanges !== _utils_range_js__WEBPACK_IMPORTED_MODULE_1__.FULL);
            return true;
        }
        return false;
    }
    updateBuffer({ numInstances, data, props, context }) {
        if (!this.needsUpdate()) {
            return false;
        }
        const { state: { updateRanges }, settings: { update, noAlloc } } = this;
        let updated = true;
        if (update) {
            // Custom updater - typically for non-instanced layers
            for (const [startRow, endRow] of updateRanges) {
                update.call(context, this, { data, startRow, endRow, props, numInstances });
            }
            if (!this.value) {
                // no value was assigned during update
            }
            else if (this.constant ||
                !this.buffer ||
                this.buffer.byteLength < this.value.byteLength + this.byteOffset) {
                this.setData({
                    value: this.value,
                    constant: this.constant
                });
                // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle
                // Respect it here but reset after use
                this.constant = false;
            }
            else {
                for (const [startRow, endRow] of updateRanges) {
                    const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;
                    const endOffset = Number.isFinite(endRow)
                        ? this.getVertexOffset(endRow)
                        : noAlloc || !Number.isFinite(numInstances)
                            ? this.value.length
                            : numInstances * this.size;
                    super.updateSubBuffer({ startOffset, endOffset });
                }
            }
            this._checkAttributeArray();
        }
        else {
            updated = false;
        }
        this.clearNeedsUpdate();
        this.setNeedsRedraw();
        return updated;
    }
    // Use generic value
    // Returns true if successful
    setConstantValue(value) {
        if (value === undefined || typeof value === 'function') {
            return false;
        }
        const hasChanged = this.setData({ constant: true, value });
        if (hasChanged) {
            this.setNeedsRedraw();
        }
        this.clearNeedsUpdate();
        return true;
    }
    // Use external buffer
    // Returns true if successful
    // eslint-disable-next-line max-statements
    setExternalBuffer(buffer) {
        const { state } = this;
        if (!buffer) {
            state.lastExternalBuffer = null;
            return false;
        }
        this.clearNeedsUpdate();
        if (state.lastExternalBuffer === buffer) {
            return true;
        }
        state.lastExternalBuffer = buffer;
        this.setNeedsRedraw();
        this.setData(buffer);
        return true;
    }
    // Binary value is a typed array packed from mapping the source data with the accessor
    // If the returned value from the accessor is the same as the attribute value, set it directly
    // Otherwise use the auto updater for transform/normalization
    setBinaryValue(buffer, startIndices = null) {
        const { state, settings } = this;
        if (!buffer) {
            state.binaryValue = null;
            state.binaryAccessor = null;
            return false;
        }
        if (settings.noAlloc) {
            // Let the layer handle this
            return false;
        }
        if (state.binaryValue === buffer) {
            this.clearNeedsUpdate();
            return true;
        }
        state.binaryValue = buffer;
        this.setNeedsRedraw();
        const needsUpdate = settings.transform || startIndices !== this.startIndices;
        if (needsUpdate) {
            if (ArrayBuffer.isView(buffer)) {
                buffer = { value: buffer };
            }
            const binaryValue = buffer;
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_4__["default"])(ArrayBuffer.isView(binaryValue.value), `invalid ${settings.accessor}`);
            const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;
            state.binaryAccessor = (0,_utils_iterable_utils_js__WEBPACK_IMPORTED_MODULE_5__.getAccessorFromBuffer)(binaryValue.value, {
                size: binaryValue.size || this.size,
                stride: binaryValue.stride,
                offset: binaryValue.offset,
                startIndices: startIndices,
                nested: needsNormalize
            });
            // Fall through to auto updater
            return false;
        }
        this.clearNeedsUpdate();
        this.setData(buffer);
        return true;
    }
    getVertexOffset(row) {
        const { startIndices } = this;
        const vertexIndex = startIndices
            ? row < startIndices.length
                ? startIndices[row]
                : this.numInstances
            : row;
        return vertexIndex * this.size;
    }
    getValue() {
        const shaderAttributeDefs = this.settings.shaderAttributes;
        const result = super.getValue();
        if (!shaderAttributeDefs) {
            return result;
        }
        for (const shaderAttributeName in shaderAttributeDefs) {
            Object.assign(result, super.getValue(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));
        }
        return result;
    }
    /** Generate WebGPU-style buffer layout descriptor from this attribute */
    getBufferLayout(
    /** A luma.gl Model-shaped object that supplies additional hint to attribute resolution */
    modelInfo) {
        // Clear change flag
        this.state.layoutChanged = false;
        const shaderAttributeDefs = this.settings.shaderAttributes;
        const result = super._getBufferLayout();
        const { stepMode } = this.settings;
        if (stepMode === 'dynamic') {
            // If model info is provided, use isInstanced flag to determine step mode
            // If no model info is provided, assume it's an instanced model (most common use case)
            result.stepMode = modelInfo ? (modelInfo.isInstanced ? 'instance' : 'vertex') : 'instance';
        }
        else {
            result.stepMode = stepMode ?? 'vertex';
        }
        if (!shaderAttributeDefs) {
            return result;
        }
        for (const shaderAttributeName in shaderAttributeDefs) {
            const map = super._getBufferLayout(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]);
            // @ts-ignore
            result.attributes.push(...map.attributes);
        }
        return result;
    }
    /* eslint-disable max-depth, max-statements */
    _autoUpdater(attribute, { data, startRow, endRow, props, numInstances }) {
        if (attribute.constant) {
            return;
        }
        const { settings, state, value, size, startIndices } = attribute;
        const { accessor, transform } = settings;
        const accessorFunc = state.binaryAccessor ||
            // @ts-ignore
            (typeof accessor === 'function' ? accessor : props[accessor]);
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_4__["default"])(typeof accessorFunc === 'function', `accessor "${accessor}" is not a function`);
        let i = attribute.getVertexOffset(startRow);
        const { iterable, objectInfo } = (0,_utils_iterable_utils_js__WEBPACK_IMPORTED_MODULE_5__.createIterable)(data, startRow, endRow);
        for (const object of iterable) {
            objectInfo.index++;
            let objectValue = accessorFunc(object, objectInfo);
            if (transform) {
                // transform callbacks could be bound to a particular layer instance.
                // always point `this` to the current layer.
                objectValue = transform.call(this, objectValue);
            }
            if (startIndices) {
                const numVertices = (objectInfo.index < startIndices.length - 1
                    ? startIndices[objectInfo.index + 1]
                    : numInstances) - startIndices[objectInfo.index];
                if (objectValue && Array.isArray(objectValue[0])) {
                    let startIndex = i;
                    for (const item of objectValue) {
                        attribute._normalizeValue(item, value, startIndex);
                        startIndex += size;
                    }
                }
                else if (objectValue && objectValue.length > size) {
                    value.set(objectValue, i);
                }
                else {
                    attribute._normalizeValue(objectValue, objectInfo.target, 0);
                    (0,_utils_flatten_js__WEBPACK_IMPORTED_MODULE_6__.fillArray)({
                        target: value,
                        source: objectInfo.target,
                        start: i,
                        count: numVertices
                    });
                }
                i += numVertices * size;
            }
            else {
                attribute._normalizeValue(objectValue, value, i);
                i += size;
            }
        }
    }
    /* eslint-enable max-depth, max-statements */
    // Validate deck.gl level fields
    _validateAttributeUpdaters() {
        const { settings } = this;
        // Check that 'update' is a valid function
        const hasUpdater = settings.noAlloc || typeof settings.update === 'function';
        if (!hasUpdater) {
            throw new Error(`Attribute ${this.id} missing update or accessor`);
        }
    }
    // check that the first few elements of the attribute are reasonable
    /* eslint-disable no-fallthrough */
    _checkAttributeArray() {
        const { value } = this;
        const limit = Math.min(4, this.size);
        if (value && value.length >= limit) {
            let valid = true;
            switch (limit) {
                case 4:
                    valid = valid && Number.isFinite(value[3]);
                case 3:
                    valid = valid && Number.isFinite(value[2]);
                case 2:
                    valid = valid && Number.isFinite(value[1]);
                case 1:
                    valid = valid && Number.isFinite(value[0]);
                    break;
                default:
                    valid = false;
            }
            if (!valid) {
                throw new Error(`Illegal attribute generated for ${this.id}`);
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/attribute/data-column.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/attribute/data-column.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataColumn)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _gl_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gl-utils.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js");
/* harmony import */ var _utils_typed_array_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/typed-array-manager.js */ "./node_modules/@deck.gl/core/dist/utils/typed-array-manager.js");
/* harmony import */ var _utils_math_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/math-utils.js */ "./node_modules/@deck.gl/core/dist/utils/math-utils.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");





function resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {
    if (shaderAttributeOptions.offset) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();
    }
    // All shader attributes share the parent's stride
    const stride = (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getStride)(baseAccessor);
    // `vertexOffset` is used to access the neighboring vertex's value
    // e.g. `nextPositions` in polygon
    const vertexOffset = shaderAttributeOptions.vertexOffset !== undefined
        ? shaderAttributeOptions.vertexOffset
        : baseAccessor.vertexOffset || 0;
    // `elementOffset` is defined when shader attribute's size is smaller than the parent's
    // e.g. `translations` in transform matrix
    const elementOffset = shaderAttributeOptions.elementOffset || 0;
    const offset = 
    // offsets defined by the attribute
    vertexOffset * stride +
        elementOffset * baseAccessor.bytesPerElement +
        // offsets defined by external buffers if any
        (baseAccessor.offset || 0);
    return {
        ...shaderAttributeOptions,
        offset,
        stride
    };
}
function resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {
    const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);
    return {
        high: resolvedOptions,
        low: {
            ...resolvedOptions,
            offset: resolvedOptions.offset + baseAccessor.size * 4
        }
    };
}
class DataColumn {
    /* eslint-disable max-statements */
    constructor(device, opts, state) {
        this._buffer = null;
        this.device = device;
        this.id = opts.id || '';
        this.size = opts.size || 1;
        const logicalType = opts.logicalType || opts.type;
        const doublePrecision = logicalType === 'float64';
        let { defaultValue } = opts;
        defaultValue = Number.isFinite(defaultValue)
            ? [defaultValue]
            : defaultValue || new Array(this.size).fill(0);
        let bufferType;
        if (doublePrecision) {
            bufferType = 'float32';
        }
        else if (!logicalType && opts.isIndexed) {
            bufferType = 'uint32';
        }
        else {
            bufferType = logicalType || 'float32';
        }
        // This is the attribute type defined by the layer
        // If an external buffer is provided, this.type may be overwritten
        // But we always want to use defaultType for allocation
        let defaultType = (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.typedArrayFromDataType)(logicalType || bufferType);
        this.doublePrecision = doublePrecision;
        // `fp64: false` tells a double-precision attribute to allocate Float32Arrays
        // by default when using auto-packing. This is more efficient in use cases where
        // high precision is unnecessary, but the `64Low` attribute is still required
        // by the shader.
        if (doublePrecision && opts.fp64 === false) {
            defaultType = Float32Array;
        }
        this.value = null;
        this.settings = {
            ...opts,
            defaultType,
            defaultValue: defaultValue,
            logicalType,
            type: bufferType,
            normalized: bufferType.includes('norm'),
            size: this.size,
            bytesPerElement: defaultType.BYTES_PER_ELEMENT
        };
        this.state = {
            ...state,
            externalBuffer: null,
            bufferAccessor: this.settings,
            allocatedValue: null,
            numInstances: 0,
            bounds: null,
            constant: false
        };
    }
    /* eslint-enable max-statements */
    get isConstant() {
        return this.state.constant;
    }
    get buffer() {
        return this._buffer;
    }
    get byteOffset() {
        const accessor = this.getAccessor();
        if (accessor.vertexOffset) {
            return accessor.vertexOffset * (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getStride)(accessor);
        }
        return 0;
    }
    get numInstances() {
        return this.state.numInstances;
    }
    set numInstances(n) {
        this.state.numInstances = n;
    }
    delete() {
        if (this._buffer) {
            this._buffer.delete();
            this._buffer = null;
        }
        _utils_typed_array_manager_js__WEBPACK_IMPORTED_MODULE_2__["default"].release(this.state.allocatedValue);
    }
    getBuffer() {
        if (this.state.constant) {
            return null;
        }
        return this.state.externalBuffer || this._buffer;
    }
    getValue(attributeName = this.id, options = null) {
        const result = {};
        if (this.state.constant) {
            const value = this.value;
            if (options) {
                const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);
                const offset = shaderAttributeDef.offset / value.BYTES_PER_ELEMENT;
                const size = shaderAttributeDef.size || this.size;
                result[attributeName] = value.subarray(offset, offset + size);
            }
            else {
                result[attributeName] = value;
            }
        }
        else {
            result[attributeName] = this.getBuffer();
        }
        if (this.doublePrecision) {
            if (this.value instanceof Float64Array) {
                result[`${attributeName}64Low`] = result[attributeName];
            }
            else {
                // Disable fp64 low part
                result[`${attributeName}64Low`] = new Float32Array(this.size);
            }
        }
        return result;
    }
    _getBufferLayout(attributeName = this.id, options = null) {
        const accessor = this.getAccessor();
        const attributes = [];
        const result = {
            name: this.id,
            byteStride: (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getStride)(accessor),
            attributes
        };
        if (this.doublePrecision) {
            const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(accessor, options || {});
            attributes.push((0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getBufferAttributeLayout)(attributeName, { ...accessor, ...doubleShaderAttributeDefs.high }), (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getBufferAttributeLayout)(`${attributeName}64Low`, {
                ...accessor,
                ...doubleShaderAttributeDefs.low
            }));
        }
        else if (options) {
            const shaderAttributeDef = resolveShaderAttribute(accessor, options);
            attributes.push((0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getBufferAttributeLayout)(attributeName, { ...accessor, ...shaderAttributeDef }));
        }
        else {
            attributes.push((0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getBufferAttributeLayout)(attributeName, accessor));
        }
        return result;
    }
    setAccessor(accessor) {
        this.state.bufferAccessor = accessor;
    }
    getAccessor() {
        return this.state.bufferAccessor;
    }
    // Returns [min: Array(size), max: Array(size)]
    /* eslint-disable max-depth */
    getBounds() {
        if (this.state.bounds) {
            return this.state.bounds;
        }
        let result = null;
        if (this.state.constant && this.value) {
            const min = Array.from(this.value);
            result = [min, min];
        }
        else {
            const { value, numInstances, size } = this;
            const len = numInstances * size;
            if (value && len && value.length >= len) {
                const min = new Array(size).fill(Infinity);
                const max = new Array(size).fill(-Infinity);
                for (let i = 0; i < len;) {
                    for (let j = 0; j < size; j++) {
                        const v = value[i++];
                        if (v < min[j])
                            min[j] = v;
                        if (v > max[j])
                            max[j] = v;
                    }
                }
                result = [min, max];
            }
        }
        this.state.bounds = result;
        return result;
    }
    // returns true if success
    // eslint-disable-next-line max-statements
    setData(data) {
        const { state } = this;
        let opts;
        if (ArrayBuffer.isView(data)) {
            opts = { value: data };
        }
        else if (data instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Buffer) {
            opts = { buffer: data };
        }
        else {
            opts = data;
        }
        const accessor = { ...this.settings, ...opts };
        if (ArrayBuffer.isView(opts.value)) {
            if (!opts.type) {
                // Deduce data type
                const is64Bit = this.doublePrecision && opts.value instanceof Float64Array;
                if (is64Bit) {
                    accessor.type = 'float32';
                }
                else {
                    const type = (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.dataTypeFromTypedArray)(opts.value);
                    accessor.type = accessor.normalized ? type.replace('int', 'norm') : type;
                }
            }
            accessor.bytesPerElement = opts.value.BYTES_PER_ELEMENT;
            accessor.stride = (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getStride)(accessor);
        }
        state.bounds = null; // clear cached bounds
        if (opts.constant) {
            // set constant
            let value = opts.value;
            value = this._normalizeValue(value, [], 0);
            if (this.settings.normalized) {
                value = this.normalizeConstant(value);
            }
            const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);
            if (!hasChanged) {
                return false;
            }
            state.externalBuffer = null;
            state.constant = true;
            this.value = ArrayBuffer.isView(value) ? value : new Float32Array(value);
        }
        else if (opts.buffer) {
            const buffer = opts.buffer;
            state.externalBuffer = buffer;
            state.constant = false;
            this.value = opts.value || null;
        }
        else if (opts.value) {
            this._checkExternalBuffer(opts);
            let value = opts.value;
            state.externalBuffer = null;
            state.constant = false;
            this.value = value;
            let { buffer } = this;
            const stride = (0,_gl_utils_js__WEBPACK_IMPORTED_MODULE_1__.getStride)(accessor);
            const byteOffset = (accessor.vertexOffset || 0) * stride;
            if (this.doublePrecision && value instanceof Float64Array) {
                value = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_4__.toDoublePrecisionArray)(value, accessor);
            }
            if (this.settings.isIndexed) {
                const ArrayType = this.settings.defaultType;
                if (value.constructor !== ArrayType) {
                    // Cast the index buffer to expected type
                    value = new ArrayType(value);
                }
            }
            // A small over allocation is used as safety margin
            // Shader attributes may try to access this buffer with bigger offsets
            const requiredBufferSize = value.byteLength + byteOffset + stride * 2;
            if (!buffer || buffer.byteLength < requiredBufferSize) {
                buffer = this._createBuffer(requiredBufferSize);
            }
            buffer.write(value, byteOffset);
        }
        this.setAccessor(accessor);
        return true;
    }
    updateSubBuffer(opts = {}) {
        this.state.bounds = null; // clear cached bounds
        const value = this.value;
        const { startOffset = 0, endOffset } = opts;
        this.buffer.write(this.doublePrecision && value instanceof Float64Array
            ? (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_4__.toDoublePrecisionArray)(value, {
                size: this.size,
                startIndex: startOffset,
                endIndex: endOffset
            })
            : value.subarray(startOffset, endOffset), startOffset * value.BYTES_PER_ELEMENT + this.byteOffset);
    }
    allocate(numInstances, copy = false) {
        const { state } = this;
        const oldValue = state.allocatedValue;
        // Allocate at least one element to ensure a valid buffer
        const value = _utils_typed_array_manager_js__WEBPACK_IMPORTED_MODULE_2__["default"].allocate(oldValue, numInstances + 1, {
            size: this.size,
            type: this.settings.defaultType,
            copy
        });
        this.value = value;
        const { byteOffset } = this;
        let { buffer } = this;
        if (!buffer || buffer.byteLength < value.byteLength + byteOffset) {
            buffer = this._createBuffer(value.byteLength + byteOffset);
            if (copy && oldValue) {
                // Upload the full existing attribute value to the GPU, so that updateBuffer
                // can choose to only update a partial range.
                // TODO - copy old buffer to new buffer on the GPU
                buffer.write(oldValue instanceof Float64Array ? (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_4__.toDoublePrecisionArray)(oldValue, this) : oldValue, byteOffset);
            }
        }
        state.allocatedValue = value;
        state.constant = false;
        state.externalBuffer = null;
        this.setAccessor(this.settings);
        return true;
    }
    // PRIVATE HELPER METHODS
    _checkExternalBuffer(opts) {
        const { value } = opts;
        if (!ArrayBuffer.isView(value)) {
            throw new Error(`Attribute ${this.id} value is not TypedArray`);
        }
        const ArrayType = this.settings.defaultType;
        let illegalArrayType = false;
        if (this.doublePrecision) {
            // not 32bit or 64bit
            illegalArrayType = value.BYTES_PER_ELEMENT < 4;
        }
        if (illegalArrayType) {
            throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);
        }
        if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Attribute ${this.id} is normalized`)();
        }
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer
    normalizeConstant(value) {
        /* eslint-disable complexity */
        switch (this.settings.type) {
            case 'snorm8':
                // normalize [-128, 127] to [-1, 1]
                return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);
            case 'snorm16':
                // normalize [-32768, 32767] to [-1, 1]
                return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);
            case 'unorm8':
                // normalize [0, 255] to [0, 1]
                return new Float32Array(value).map(x => x / 255);
            case 'unorm16':
                // normalize [0, 65535] to [0, 1]
                return new Float32Array(value).map(x => x / 65535);
            default:
                // No normalization for gl.FLOAT and gl.HALF_FLOAT
                return value;
        }
    }
    /* check user supplied values and apply fallback */
    _normalizeValue(value, out, start) {
        const { defaultValue, size } = this.settings;
        if (Number.isFinite(value)) {
            out[start] = value;
            return out;
        }
        if (!value) {
            let i = size;
            while (--i >= 0) {
                out[start + i] = defaultValue[i];
            }
            return out;
        }
        // Important - switch cases are 5x more performant than a for loop!
        /* eslint-disable no-fallthrough, default-case */
        switch (size) {
            case 4:
                out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];
            case 3:
                out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];
            case 2:
                out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];
            case 1:
                out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];
                break;
            default:
                // In the rare case where the attribute size > 4, do it the slow way
                // This is used for e.g. transform matrices
                let i = size;
                while (--i >= 0) {
                    out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];
                }
        }
        return out;
    }
    _areValuesEqual(value1, value2) {
        if (!value1 || !value2) {
            return false;
        }
        const { size } = this;
        for (let i = 0; i < size; i++) {
            if (value1[i] !== value2[i]) {
                return false;
            }
        }
        return true;
    }
    _createBuffer(byteLength) {
        if (this._buffer) {
            this._buffer.destroy();
        }
        const { isIndexed, type } = this.settings;
        this._buffer = this.device.createBuffer({
            ...this._buffer?.props,
            id: this.id,
            usage: isIndexed ? _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Buffer.INDEX : _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Buffer.VERTEX,
            indexType: isIndexed ? type : undefined,
            byteLength
        });
        return this._buffer;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bufferLayoutEqual: () => (/* binding */ bufferLayoutEqual),
/* harmony export */   dataTypeFromTypedArray: () => (/* binding */ dataTypeFromTypedArray),
/* harmony export */   getBufferAttributeLayout: () => (/* binding */ getBufferAttributeLayout),
/* harmony export */   getStride: () => (/* binding */ getStride),
/* harmony export */   typedArrayFromDataType: () => (/* binding */ typedArrayFromDataType)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js");

function typedArrayFromDataType(type) {
    // Sorted in some order of likelihood to reduce amount of comparisons
    switch (type) {
        case 'float64':
            return Float64Array;
        case 'uint8':
        case 'unorm8':
            return Uint8ClampedArray;
        default:
            return (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayFromDataType)(type);
    }
}
const dataTypeFromTypedArray = _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.getDataTypeFromTypedArray;
function getBufferAttributeLayout(name, accessor) {
    return {
        attribute: name,
        // @ts-expect-error Not all combinations are valid vertex formats; it's up to DataColumn to ensure
        format: accessor.size > 1
            ? `${accessor.type}x${accessor.size}`
            : accessor.type,
        byteOffset: accessor.offset || 0
        // Note stride is set on the top level
    };
}
function getStride(accessor) {
    return accessor.stride || accessor.size * accessor.bytesPerElement;
}
function bufferLayoutEqual(accessor1, accessor2) {
    return (accessor1.type === accessor2.type &&
        accessor1.size === accessor2.size &&
        getStride(accessor1) === getStride(accessor2) &&
        (accessor1.offset || 0) === (accessor2.offset || 0));
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizeTransitionSettings: () => (/* binding */ normalizeTransitionSettings)
/* harmony export */ });
const DEFAULT_TRANSITION_SETTINGS = {
    interpolation: {
        duration: 0,
        easing: t => t
    },
    spring: {
        stiffness: 0.05,
        damping: 0.5
    }
};
function normalizeTransitionSettings(userSettings, layerSettings) {
    if (!userSettings) {
        return null;
    }
    if (Number.isFinite(userSettings)) {
        userSettings = { type: 'interpolation', duration: userSettings };
    }
    const type = userSettings.type || 'interpolation';
    return {
        ...DEFAULT_TRANSITION_SETTINGS[type],
        ...layerSettings,
        ...userSettings,
        type
    };
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/composite-layer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/composite-layer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CompositeLayer)
/* harmony export */ });
/* harmony import */ var _layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layer.js */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debug/index.js */ "./node_modules/@deck.gl/core/dist/debug/index.js");
/* harmony import */ var _utils_flatten_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/flatten.js */ "./node_modules/@deck.gl/core/dist/utils/flatten.js");
/* harmony import */ var _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle/constants.js */ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.




const TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';
class CompositeLayer extends _layer_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.layerName = 'CompositeLayer'; }
    /** `true` if this layer renders other layers */
    get isComposite() {
        return true;
    }
    /** Returns true if all async resources are loaded */
    get isLoaded() {
        return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);
    }
    /** Return last rendered sub layers */
    getSubLayers() {
        return (this.internalState && this.internalState.subLayers) || [];
    }
    // initializeState is usually not needed for composite layers
    // Provide empty definition to disable check for missing definition
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    initializeState(context) { }
    /** Updates selected state members and marks the composite layer to need rerender */
    setState(updateObject) {
        super.setState(updateObject);
        // Trigger a layer update
        // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,
        // they are executed during different lifecycles.
        // draw can be called without calling updateState (e.g. most viewport changes),
        // while renderLayers can only be called during a recursive layer update.
        this.setNeedsUpdate();
    }
    /** called to augment the info object that is bubbled up from a sublayer
        override Layer.getPickingInfo() because decoding / setting uniform do
        not apply to a composite layer. */
    getPickingInfo({ info }) {
        const { object } = info;
        const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;
        if (!isDataWrapped) {
            return info;
        }
        // override object with picked data
        info.object = object.__source.object;
        info.index = object.__source.index;
        return info;
    }
    /**
     * Filters sub layers at draw time. Return true if the sub layer should be drawn.
     */
    filterSubLayer(context) {
        return true;
    }
    /** Returns true if sub layer needs to be rendered */
    shouldRenderSubLayer(subLayerId, data) {
        return data && data.length;
    }
    /** Returns sub layer class for a specific sublayer */
    getSubLayerClass(subLayerId, DefaultLayerClass) {
        const { _subLayerProps: overridingProps } = this.props;
        return ((overridingProps &&
            overridingProps[subLayerId] &&
            overridingProps[subLayerId].type) ||
            DefaultLayerClass);
    }
    /** When casting user data into another format to pass to sublayers,
        add reference to the original object and object index */
    getSubLayerRow(row, sourceObject, sourceObjectIndex) {
        // @ts-ignore (TS2339) adding undefined property
        row.__source = {
            parent: this,
            object: sourceObject,
            index: sourceObjectIndex
        };
        return row;
    }
    /** Some composite layers cast user data into another format before passing to sublayers
      We need to unwrap them before calling the accessor so that they see the original data
      objects */
    getSubLayerAccessor(accessor) {
        if (typeof accessor === 'function') {
            const objectInfo = {
                index: -1,
                // @ts-ignore accessing resolved data
                data: this.props.data,
                target: []
            };
            return (x, i) => {
                if (x && x.__source) {
                    objectInfo.index = x.__source.index;
                    // @ts-ignore (TS2349) Out is never a function
                    return accessor(x.__source.object, objectInfo);
                }
                // @ts-ignore (TS2349) Out is never a function
                return accessor(x, i);
            };
        }
        return accessor;
    }
    /** Returns sub layer props for a specific sublayer */
    // eslint-disable-next-line complexity
    getSubLayerProps(sublayerProps = {}) {
        const { opacity, pickable, visible, parameters, getPolygonOffset, highlightedObjectIndex, autoHighlight, highlightColor, coordinateSystem, coordinateOrigin, wrapLongitude, positionFormat, modelMatrix, extensions, fetch, operation, _subLayerProps: overridingProps } = this.props;
        const newProps = {
            id: '',
            updateTriggers: {},
            opacity,
            pickable,
            visible,
            parameters,
            getPolygonOffset,
            highlightedObjectIndex,
            autoHighlight,
            highlightColor,
            coordinateSystem,
            coordinateOrigin,
            wrapLongitude,
            positionFormat,
            modelMatrix,
            extensions,
            fetch,
            operation
        };
        const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];
        const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;
        const sublayerId = sublayerProps.id || 'sublayer';
        if (overridingSublayerProps) {
            const propTypes = this.props[_lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_1__.PROP_TYPES_SYMBOL];
            const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};
            for (const key in overridingSublayerProps) {
                const propType = subLayerPropTypes[key] || propTypes[key];
                // eslint-disable-next-line
                if (propType && propType.type === 'accessor') {
                    overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);
                }
            }
        }
        Object.assign(newProps, sublayerProps, 
        // experimental feature that allows users to override sublayer props via parent layer prop
        overridingSublayerProps);
        newProps.id = `${this.props.id}-${sublayerId}`;
        newProps.updateTriggers = {
            all: this.props.updateTriggers?.all,
            ...sublayerProps.updateTriggers,
            ...overridingSublayerTriggers
        };
        // Pass through extension props
        // @ts-ignore (TS2532) extensions is always defined after merging with default props
        for (const extension of extensions) {
            const passThroughProps = extension.getSubLayerProps.call(this, extension);
            if (passThroughProps) {
                Object.assign(newProps, passThroughProps, {
                    updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)
                });
            }
        }
        return newProps;
    }
    /** Update sub layers to highlight the hovered object */
    _updateAutoHighlight(info) {
        for (const layer of this.getSubLayers()) {
            layer.updateAutoHighlight(info);
        }
    }
    /** Override base Layer method */
    _getAttributeManager() {
        return null;
    }
    /** (Internal) Called after an update to rerender sub layers */
    _postUpdate(updateParams, forceUpdate) {
        // @ts-ignore (TS2531) this method is only called internally when internalState is defined
        let subLayers = this.internalState.subLayers;
        const shouldUpdate = !subLayers || this.needsUpdate();
        if (shouldUpdate) {
            const subLayersList = this.renderLayers();
            // Flatten the returned array, removing any null, undefined or false
            // this allows layers to render sublayers conditionally
            // (see CompositeLayer.renderLayers docs)
            subLayers = (0,_utils_flatten_js__WEBPACK_IMPORTED_MODULE_2__.flatten)(subLayersList, Boolean);
            // @ts-ignore (TS2531) this method is only called internally when internalState is defined
            this.internalState.subLayers = subLayers;
        }
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);
        // populate reference to parent layer (this layer)
        // NOTE: needs to be done even when reusing layers as the parent may have changed
        for (const layer of subLayers) {
            layer.parent = this;
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   COORDINATE_SYSTEM: () => (/* binding */ COORDINATE_SYSTEM),
/* harmony export */   EVENTS: () => (/* binding */ EVENTS),
/* harmony export */   OPERATION: () => (/* binding */ OPERATION),
/* harmony export */   PROJECTION_MODE: () => (/* binding */ PROJECTION_MODE),
/* harmony export */   UNIT: () => (/* binding */ UNIT)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Note: The numeric values here are matched by shader code in the
// "project" and "project64" shader modules. Both places need to be
// updated.

/**
 * The coordinate system that positions/dimensions are defined in.
 */
const COORDINATE_SYSTEM = {
    /**
     * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise
     */
    DEFAULT: -1,
    /**
     * Positions are interpreted as [longitude, latitude, elevation]
     * longitude/latitude are in degrees, elevation is in meters.
     * Dimensions are in meters.
     */
    LNGLAT: 1,
    /**
     * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.
     * Dimensions are in meters.
     */
    METER_OFFSETS: 2,
    /**
     * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.
     * deltaLng/deltaLat are in degrees, elevation is in meters.
     * Dimensions are in meters.
     */
    LNGLAT_OFFSETS: 3,
    /**
     * Positions and dimensions are in the common units of the viewport.
     */
    CARTESIAN: 0
};
// Deprecated
/* eslint-disable accessor-pairs */
Object.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {
    get: () => {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();
        return 0;
    }
});
/* eslint-enable accessor-pairs */
/**
 * How coordinates are transformed from the world space into the common space.
 */
const PROJECTION_MODE = {
    /**
     * Render geospatial data in Web Mercator projection
     */
    WEB_MERCATOR: 1,
    /**
     * Render geospatial data as a 3D globe
     */
    GLOBE: 2,
    /**
     * (Internal use only) Web Mercator projection at high zoom
     */
    WEB_MERCATOR_AUTO_OFFSET: 4,
    /**
     * No transformation
     */
    IDENTITY: 0
};
const UNIT = {
    common: 0,
    meters: 1,
    pixels: 2
};
const EVENTS = {
    click: { handler: 'onClick' },
    panstart: { handler: 'onDragStart' },
    panmove: { handler: 'onDrag' },
    panend: { handler: 'onDragEnd' }
};
/**
 * @deprecated Use string constants directly
 */
const OPERATION = {
    DRAW: 'draw',
    MASK: 'mask',
    TERRAIN: 'terrain'
};


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/deck-picker.js":
/*!************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/deck-picker.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DeckPicker)
/* harmony export */ });
/* harmony import */ var _passes_pick_layers_pass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../passes/pick-layers-pass.js */ "./node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js");
/* harmony import */ var _picking_query_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./picking/query-object.js */ "./node_modules/@deck.gl/core/dist/lib/picking/query-object.js");
/* harmony import */ var _picking_pick_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./picking/pick-info.js */ "./node_modules/@deck.gl/core/dist/lib/picking/pick-info.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



/** Manages picking in a Deck context */
class DeckPicker {
    constructor(device) {
        this._pickable = true;
        this.device = device;
        this.pickLayersPass = new _passes_pick_layers_pass_js__WEBPACK_IMPORTED_MODULE_0__["default"](device);
        this.lastPickedInfo = {
            index: -1,
            layerId: null,
            info: null
        };
    }
    setProps(props) {
        if ('layerFilter' in props) {
            this.layerFilter = props.layerFilter;
        }
        if ('_pickable' in props) {
            this._pickable = props._pickable;
        }
    }
    finalize() {
        if (this.pickingFBO) {
            this.pickingFBO.destroy();
        }
        if (this.depthFBO) {
            this.depthFBO.destroy();
        }
    }
    /** Pick the closest info at given coordinate */
    pickObject(opts) {
        return this._pickClosestObject(opts);
    }
    /** Get all unique infos within a bounding box */
    pickObjects(opts) {
        return this._pickVisibleObjects(opts);
    }
    // Returns a new picking info object by assuming the last picked object is still picked
    getLastPickedObject({ x, y, layers, viewports }, lastPickedInfo = this.lastPickedInfo.info) {
        const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;
        const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;
        const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;
        const viewport = (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];
        const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);
        const info = {
            x,
            y,
            viewport,
            coordinate,
            layer
        };
        return { ...lastPickedInfo, ...info };
    }
    // Private
    /** Ensures that picking framebuffer exists and matches the canvas size */
    _resizeBuffer() {
        // Create a frame buffer if not already available
        if (!this.pickingFBO) {
            this.pickingFBO = this.device.createFramebuffer({
                colorAttachments: ['rgba8unorm'],
                depthStencilAttachment: 'depth16unorm'
            });
            if (this.device.isTextureFormatRenderable('rgba32float')) {
                const depthFBO = this.device.createFramebuffer({
                    colorAttachments: ['rgba32float'],
                    depthStencilAttachment: 'depth16unorm'
                });
                this.depthFBO = depthFBO;
            }
        }
        // Resize it to current canvas size (this is a noop if size hasn't changed)
        const { canvas } = this.device.getCanvasContext();
        this.pickingFBO?.resize({ width: canvas.width, height: canvas.height });
        this.depthFBO?.resize({ width: canvas.width, height: canvas.height });
    }
    /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */
    _getPickable(layers) {
        if (this._pickable === false) {
            return null;
        }
        const pickableLayers = layers.filter(layer => this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite);
        return pickableLayers.length ? pickableLayers : null;
    }
    /** Pick the closest object at the given coordinate */
    // eslint-disable-next-line max-statements,complexity
    _pickClosestObject({ layers, views, viewports, x, y, radius = 0, depth = 1, mode = 'query', unproject3D, onViewportActive, effects }) {
        // @ts-expect-error TODO - assuming WebGL context
        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
        const pickableLayers = this._getPickable(layers);
        if (!pickableLayers || viewports.length === 0) {
            return {
                result: [],
                emptyInfo: (0,_picking_pick_info_js__WEBPACK_IMPORTED_MODULE_1__.getEmptyPickingInfo)({ viewports, x, y, pixelRatio })
            };
        }
        this._resizeBuffer();
        // Convert from canvas top-left to WebGL bottom-left coordinates
        // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]
        // And compensate for pixelRatio
        // @ts-expect-error TODO - assuming WebGL context
        const devicePixelRange = this.device.canvasContext.cssToDevicePixels([x, y], true);
        const devicePixel = [
            devicePixelRange.x + Math.floor(devicePixelRange.width / 2),
            devicePixelRange.y + Math.floor(devicePixelRange.height / 2)
        ];
        const deviceRadius = Math.round(radius * pixelRatio);
        const { width, height } = this.pickingFBO;
        const deviceRect = this._getPickingRect({
            deviceX: devicePixel[0],
            deviceY: devicePixel[1],
            deviceRadius,
            deviceWidth: width,
            deviceHeight: height
        });
        const cullRect = {
            x: x - radius,
            y: y - radius,
            width: radius * 2 + 1,
            height: radius * 2 + 1
        };
        let infos;
        const result = [];
        const affectedLayers = new Set();
        for (let i = 0; i < depth; i++) {
            let pickInfo;
            if (deviceRect) {
                const pickedResult = this._drawAndSample({
                    layers: pickableLayers,
                    views,
                    viewports,
                    onViewportActive,
                    deviceRect,
                    cullRect,
                    effects,
                    pass: `picking:${mode}`
                });
                pickInfo = (0,_picking_query_object_js__WEBPACK_IMPORTED_MODULE_2__.getClosestObject)({
                    ...pickedResult,
                    deviceX: devicePixel[0],
                    deviceY: devicePixel[1],
                    deviceRadius,
                    deviceRect
                });
            }
            else {
                pickInfo = {
                    pickedColor: null,
                    pickedObjectIndex: -1
                };
            }
            let z;
            if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {
                const { pickedColors: pickedColors2 } = this._drawAndSample({
                    layers: [pickInfo.pickedLayer],
                    views,
                    viewports,
                    onViewportActive,
                    deviceRect: {
                        x: pickInfo.pickedX,
                        y: pickInfo.pickedY,
                        width: 1,
                        height: 1
                    },
                    cullRect,
                    effects,
                    pass: `picking:${mode}:z`
                }, true);
                // picked value is in common space (pixels) from the camera target (viewport.position)
                // convert it to meters from the ground
                if (pickedColors2[3]) {
                    z = pickedColors2[0];
                }
            }
            // Only exclude if we need to run picking again.
            // We need to run picking again if an object is detected AND
            // we have not exhausted the requested depth.
            if (pickInfo.pickedLayer && i + 1 < depth) {
                affectedLayers.add(pickInfo.pickedLayer);
                pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);
            }
            // This logic needs to run even if no object is picked.
            infos = (0,_picking_pick_info_js__WEBPACK_IMPORTED_MODULE_1__.processPickInfo)({
                pickInfo,
                lastPickedInfo: this.lastPickedInfo,
                mode,
                layers: pickableLayers,
                viewports,
                x,
                y,
                z,
                pixelRatio
            });
            for (const info of infos.values()) {
                if (info.layer) {
                    result.push(info);
                }
            }
            // If no object is picked stop.
            if (!pickInfo.pickedColor) {
                break;
            }
        }
        // reset only affected buffers
        for (const layer of affectedLayers) {
            layer.restorePickingColors();
        }
        return { result, emptyInfo: infos.get(null) };
    }
    /** Pick all objects within the given bounding box */
    _pickVisibleObjects({ layers, views, viewports, x, y, width = 1, height = 1, mode = 'query', maxObjects = null, onViewportActive, effects }) {
        const pickableLayers = this._getPickable(layers);
        if (!pickableLayers || viewports.length === 0) {
            return [];
        }
        this._resizeBuffer();
        // Convert from canvas top-left to WebGL bottom-left coordinates
        // And compensate for pixelRatio
        // @ts-expect-error TODO - assuming WebGL context
        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
        // @ts-expect-error TODO - assuming WebGL context
        const leftTop = this.device.canvasContext.cssToDevicePixels([x, y], true);
        // take left and top (y inverted in device pixels) from start location
        const deviceLeft = leftTop.x;
        const deviceTop = leftTop.y + leftTop.height;
        // take right and bottom (y inverted in device pixels) from end location
        // @ts-expect-error TODO - assuming WebGL context
        const rightBottom = this.device.canvasContext.cssToDevicePixels([x + width, y + height], true);
        const deviceRight = rightBottom.x + rightBottom.width;
        const deviceBottom = rightBottom.y;
        const deviceRect = {
            x: deviceLeft,
            y: deviceBottom,
            // deviceTop and deviceRight represent the first pixel outside the desired rect
            width: deviceRight - deviceLeft,
            height: deviceTop - deviceBottom
        };
        const pickedResult = this._drawAndSample({
            layers: pickableLayers,
            views,
            viewports,
            onViewportActive,
            deviceRect,
            cullRect: { x, y, width, height },
            effects,
            pass: `picking:${mode}`
        });
        const pickInfos = (0,_picking_query_object_js__WEBPACK_IMPORTED_MODULE_2__.getUniqueObjects)(pickedResult);
        // `getUniqueObjects` dedup by picked color
        // However different picked color may be linked to the same picked object, e.g. stroke and fill of the same polygon
        // picked from different sub layers of a GeoJsonLayer
        // Here after resolving the picked index with `layer.getPickingInfo`, we need to dedup again by unique picked objects
        const uniquePickedObjects = new Map();
        const uniqueInfos = [];
        const limitMaxObjects = Number.isFinite(maxObjects);
        for (let i = 0; i < pickInfos.length; i++) {
            if (limitMaxObjects && uniqueInfos.length >= maxObjects) {
                break;
            }
            const pickInfo = pickInfos[i];
            let info = {
                color: pickInfo.pickedColor,
                layer: null,
                index: pickInfo.pickedObjectIndex,
                picked: true,
                x,
                y,
                pixelRatio
            };
            info = (0,_picking_pick_info_js__WEBPACK_IMPORTED_MODULE_1__.getLayerPickingInfo)({ layer: pickInfo.pickedLayer, info, mode });
            // info.layer is always populated because it's a picked pixel
            const pickedLayerId = info.layer.id;
            if (!uniquePickedObjects.has(pickedLayerId)) {
                uniquePickedObjects.set(pickedLayerId, new Set());
            }
            const uniqueObjectsInLayer = uniquePickedObjects.get(pickedLayerId);
            // info.object may be null if the layer is using non-iterable data.
            // Fall back to using index as identifier.
            const pickedObjectKey = info.object ?? info.index;
            if (!uniqueObjectsInLayer.has(pickedObjectKey)) {
                uniqueObjectsInLayer.add(pickedObjectKey);
                uniqueInfos.push(info);
            }
        }
        return uniqueInfos;
    }
    _drawAndSample({ layers, views, viewports, onViewportActive, deviceRect, cullRect, effects, pass }, pickZ = false) {
        const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;
        const opts = {
            layers,
            layerFilter: this.layerFilter,
            views,
            viewports,
            onViewportActive,
            pickingFBO,
            deviceRect,
            cullRect,
            effects,
            pass,
            pickZ,
            preRenderStats: {}
        };
        for (const effect of effects) {
            if (effect.useInPicking) {
                opts.preRenderStats[effect.id] = effect.preRender(opts);
            }
        }
        const { decodePickingColor } = this.pickLayersPass.render(opts);
        // Read from an already rendered picking buffer
        // Returns an Uint8ClampedArray of picked pixels
        const { x, y, width, height } = deviceRect;
        const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);
        this.device.readPixelsToArrayWebGL(pickingFBO, {
            sourceX: x,
            sourceY: y,
            sourceWidth: width,
            sourceHeight: height,
            target: pickedColors
        });
        return { pickedColors, decodePickingColor };
    }
    // Calculate a picking rect centered on deviceX and deviceY and clipped to device
    // Returns null if pixel is outside of device
    _getPickingRect({ deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight }) {
        // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]
        const x = Math.max(0, deviceX - deviceRadius);
        const y = Math.max(0, deviceY - deviceRadius);
        const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;
        const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;
        // x, y out of bounds.
        if (width <= 0 || height <= 0) {
            return null;
        }
        return { x, y, width, height };
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/deck-renderer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/deck-renderer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DeckRenderer)
/* harmony export */ });
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug/index.js */ "./node_modules/@deck.gl/core/dist/debug/index.js");
/* harmony import */ var _passes_draw_layers_pass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../passes/draw-layers-pass.js */ "./node_modules/@deck.gl/core/dist/passes/draw-layers-pass.js");
/* harmony import */ var _passes_pick_layers_pass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../passes/pick-layers-pass.js */ "./node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js");



const TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';
class DeckRenderer {
    constructor(device) {
        this.device = device;
        this.layerFilter = null;
        this.drawPickingColors = false;
        this.drawLayersPass = new _passes_draw_layers_pass_js__WEBPACK_IMPORTED_MODULE_0__["default"](device);
        this.pickLayersPass = new _passes_pick_layers_pass_js__WEBPACK_IMPORTED_MODULE_1__["default"](device);
        this.renderCount = 0;
        this._needsRedraw = 'Initial render';
        this.renderBuffers = [];
        this.lastPostProcessEffect = null;
    }
    setProps(props) {
        if (this.layerFilter !== props.layerFilter) {
            this.layerFilter = props.layerFilter;
            this._needsRedraw = 'layerFilter changed';
        }
        if (this.drawPickingColors !== props.drawPickingColors) {
            this.drawPickingColors = props.drawPickingColors;
            this._needsRedraw = 'drawPickingColors changed';
        }
    }
    renderLayers(opts) {
        if (!opts.viewports.length) {
            return;
        }
        const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;
        const renderOpts = {
            layerFilter: this.layerFilter,
            isPicking: this.drawPickingColors,
            ...opts
        };
        if (renderOpts.effects) {
            this._preRender(renderOpts.effects, renderOpts);
        }
        const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;
        if (this.lastPostProcessEffect) {
            renderOpts.clearColor = [0, 0, 0, 0];
            renderOpts.clearCanvas = true;
        }
        const renderStats = layerPass.render({ ...renderOpts, target: outputBuffer });
        if (renderOpts.effects) {
            this._postRender(renderOpts.effects, renderOpts);
        }
        this.renderCount++;
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(TRACE_RENDER_LAYERS, this, renderStats, opts);
    }
    needsRedraw(opts = { clearRedrawFlags: false }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        return redraw;
    }
    finalize() {
        const { renderBuffers } = this;
        for (const buffer of renderBuffers) {
            buffer.delete();
        }
        renderBuffers.length = 0;
    }
    _preRender(effects, opts) {
        this.lastPostProcessEffect = null;
        opts.preRenderStats = opts.preRenderStats || {};
        for (const effect of effects) {
            opts.preRenderStats[effect.id] = effect.preRender(opts);
            if (effect.postRender) {
                this.lastPostProcessEffect = effect.id;
            }
        }
        if (this.lastPostProcessEffect) {
            this._resizeRenderBuffers();
        }
    }
    _resizeRenderBuffers() {
        const { renderBuffers } = this;
        const size = this.device.canvasContext.getDrawingBufferSize();
        if (renderBuffers.length === 0) {
            [0, 1].map(i => {
                const texture = this.device.createTexture({
                    sampler: { minFilter: 'linear', magFilter: 'linear' }
                });
                renderBuffers.push(this.device.createFramebuffer({
                    id: `deck-renderbuffer-${i}`,
                    colorAttachments: [texture]
                }));
            });
        }
        for (const buffer of renderBuffers) {
            buffer.resize(size);
        }
    }
    _postRender(effects, opts) {
        const { renderBuffers } = this;
        const params = {
            ...opts,
            inputBuffer: renderBuffers[0],
            swapBuffer: renderBuffers[1]
        };
        for (const effect of effects) {
            if (effect.postRender) {
                // If not the last post processing effect, unset the target so that
                // it only renders between the swap buffers
                params.target = effect.id === this.lastPostProcessEffect ? opts.target : undefined;
                const buffer = effect.postRender(params);
                // Buffer cannot be null if target is unset
                params.inputBuffer = buffer;
                params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/deck.js":
/*!*****************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/deck.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Deck)
/* harmony export */ });
/* harmony import */ var _layer_manager_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./layer-manager.js */ "./node_modules/@deck.gl/core/dist/lib/layer-manager.js");
/* harmony import */ var _view_manager_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./view-manager.js */ "./node_modules/@deck.gl/core/dist/lib/view-manager.js");
/* harmony import */ var _views_map_view_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../views/map-view.js */ "./node_modules/@deck.gl/core/dist/views/map-view.js");
/* harmony import */ var _effect_manager_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./effect-manager.js */ "./node_modules/@deck.gl/core/dist/lib/effect-manager.js");
/* harmony import */ var _deck_renderer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./deck-renderer.js */ "./node_modules/@deck.gl/core/dist/lib/deck-renderer.js");
/* harmony import */ var _deck_picker_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./deck-picker.js */ "./node_modules/@deck.gl/core/dist/lib/deck-picker.js");
/* harmony import */ var _widget_manager_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./widget-manager.js */ "./node_modules/@deck.gl/core/dist/lib/widget-manager.js");
/* harmony import */ var _tooltip_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tooltip.js */ "./node_modules/@deck.gl/core/dist/lib/tooltip.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/deep-equal.js */ "./node_modules/@deck.gl/core/dist/utils/deep-equal.js");
/* harmony import */ var _utils_typed_array_manager_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/typed-array-manager.js */ "./node_modules/@deck.gl/core/dist/utils/typed-array-manager.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./init.js */ "./node_modules/@deck.gl/core/dist/lib/init.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/lib/luma.js");
/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @luma.gl/webgl */ "./node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/animation/timeline.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js");
/* harmony import */ var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/stats */ "./node_modules/@probe.gl/stats/dist/index.js");
/* harmony import */ var mjolnir_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mjolnir.js */ "./node_modules/mjolnir.js/dist/esm/index.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@deck.gl/core/dist/utils/assert.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





















/* global document */
// eslint-disable-next-line @typescript-eslint/no-empty-function
function noop() { }
const getCursor = ({ isDragging }) => (isDragging ? 'grabbing' : 'grab');
const defaultProps = {
    id: '',
    width: '100%',
    height: '100%',
    style: null,
    viewState: null,
    initialViewState: null,
    pickingRadius: 0,
    layerFilter: null,
    parameters: {},
    parent: null,
    device: null,
    deviceProps: { type: 'webgl' },
    gl: null,
    glOptions: {},
    canvas: null,
    layers: [],
    effects: [],
    views: null,
    controller: null, // Rely on external controller, e.g. react-map-gl
    useDevicePixels: true,
    touchAction: 'none',
    eventRecognizerOptions: {},
    _framebuffer: null,
    _animate: false,
    _pickable: true,
    _typedArrayManagerProps: {},
    _customRender: null,
    widgets: [],
    onDeviceInitialized: noop,
    onWebGLInitialized: noop,
    onResize: noop,
    onViewStateChange: noop,
    onInteractionStateChange: noop,
    onBeforeRender: noop,
    onAfterRender: noop,
    onLoad: noop,
    onError: (error) => _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(error.message, error.cause)(),
    onHover: null,
    onClick: null,
    onDragStart: null,
    onDrag: null,
    onDragEnd: null,
    _onMetrics: null,
    getCursor,
    getTooltip: null,
    debug: false,
    drawPickingColors: false
};
/* eslint-disable max-statements */
class Deck {
    static { this.defaultProps = defaultProps; }
    // This is used to defeat tree shaking of init.js
    // https://github.com/visgl/deck.gl/issues/3213
    static { this.VERSION = _init_js__WEBPACK_IMPORTED_MODULE_3__.VERSION; }
    constructor(props) {
        this.width = 0;
        this.height = 0;
        // Allows attaching arbitrary data to the instance
        this.userData = {};
        this.device = null;
        this.canvas = null;
        this.viewManager = null;
        this.layerManager = null;
        this.effectManager = null;
        this.deckRenderer = null;
        this.deckPicker = null;
        this.eventManager = null;
        this.widgetManager = null;
        this.tooltip = null;
        this.animationLoop = null;
        this.cursorState = {
            isHovering: false,
            isDragging: false
        };
        this.stats = new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__.Stats({ id: 'deck.gl' });
        this.metrics = {
            fps: 0,
            setPropsTime: 0,
            updateAttributesTime: 0,
            framesRedrawn: 0,
            pickTime: 0,
            pickCount: 0,
            gpuTime: 0,
            gpuTimePerFrame: 0,
            cpuTime: 0,
            cpuTimePerFrame: 0,
            bufferMemory: 0,
            textureMemory: 0,
            renderbufferMemory: 0,
            gpuMemory: 0
        };
        this._metricsCounter = 0;
        this._needsRedraw = 'Initial render';
        this._pickRequest = {
            mode: 'hover',
            x: -1,
            y: -1,
            radius: 0,
            event: null
        };
        /**
         * Pick and store the object under the pointer on `pointerdown`.
         * This object is reused for subsequent `onClick` and `onDrag*` callbacks.
         */
        this._lastPointerDownInfo = null;
        // The `pointermove` event may fire multiple times in between two animation frames,
        // it's a waste of time to run picking without rerender. Instead we save the last pick
        // request and only do it once on the next animation frame.
        /** Internal use only: event handler for pointerdown */
        this._onPointerMove = (event) => {
            const { _pickRequest } = this;
            if (event.type === 'pointerleave') {
                _pickRequest.x = -1;
                _pickRequest.y = -1;
                _pickRequest.radius = 0;
            }
            else if (event.leftButton || event.rightButton) {
                // Do not trigger onHover callbacks if mouse button is down.
                return;
            }
            else {
                const pos = event.offsetCenter;
                // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a
                // assertion error when attempting to unproject the position.
                if (!pos) {
                    return;
                }
                _pickRequest.x = pos.x;
                _pickRequest.y = pos.y;
                _pickRequest.radius = this.props.pickingRadius;
            }
            if (this.layerManager) {
                this.layerManager.context.mousePosition = { x: _pickRequest.x, y: _pickRequest.y };
            }
            _pickRequest.event = event;
        };
        /** Internal use only: event handler for click & drag */
        this._onEvent = (event) => {
            const eventOptions = _constants_js__WEBPACK_IMPORTED_MODULE_4__.EVENTS[event.type];
            const pos = event.offsetCenter;
            if (!eventOptions || !pos || !this.layerManager) {
                return;
            }
            // Reuse last picked object
            const layers = this.layerManager.getLayers();
            const info = this.deckPicker.getLastPickedObject({
                x: pos.x,
                y: pos.y,
                layers,
                viewports: this.getViewports(pos)
            }, this._lastPointerDownInfo);
            const { layer } = info;
            const layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);
            const rootHandler = this.props[eventOptions.handler];
            let handled = false;
            if (layerHandler) {
                handled = layerHandler.call(layer, info, event);
            }
            if (!handled) {
                rootHandler?.(info, event);
                this.widgetManager.onEvent(info, event);
            }
        };
        /** Internal use only: evnet handler for pointerdown */
        this._onPointerDown = (event) => {
            const pos = event.offsetCenter;
            const pickedInfo = this._pick('pickObject', 'pickObject Time', {
                x: pos.x,
                y: pos.y,
                radius: this.props.pickingRadius
            });
            this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;
        };
        // @ts-ignore views
        this.props = { ...defaultProps, ...props };
        props = this.props;
        if (props.viewState && props.initialViewState) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();
        }
        this.viewState = this.props.initialViewState;
        // See if we already have a device
        if (props.device) {
            this.device = props.device;
        }
        else if (props.gl) {
            if (props.gl instanceof WebGLRenderingContext) {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error('WebGL1 context not supported.')();
            }
            this.device = _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_5__.WebGLDevice.attach(props.gl);
        }
        let deviceOrPromise = this.device;
        if (!deviceOrPromise) {
            // TODO v9 should we install WebGL backend as default for now?
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_6__.luma.registerDevices([_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_5__.WebGLDevice]);
            deviceOrPromise = _luma_gl_core__WEBPACK_IMPORTED_MODULE_6__.luma.createDevice({
                ...props.deviceProps,
                canvas: this._createCanvas(props)
            });
        }
        this.animationLoop = this._createAnimationLoop(deviceOrPromise, props);
        this.setProps(props);
        // UNSAFE/experimental prop: only set at initialization to avoid performance hit
        if (props._typedArrayManagerProps) {
            _utils_typed_array_manager_js__WEBPACK_IMPORTED_MODULE_7__["default"].setOptions(props._typedArrayManagerProps);
        }
        this.animationLoop.start();
    }
    /** Stop rendering and dispose all resources */
    finalize() {
        this.animationLoop?.stop();
        this.animationLoop?.destroy();
        this.animationLoop = null;
        this._lastPointerDownInfo = null;
        this.layerManager?.finalize();
        this.layerManager = null;
        this.viewManager?.finalize();
        this.viewManager = null;
        this.effectManager?.finalize();
        this.effectManager = null;
        this.deckRenderer?.finalize();
        this.deckRenderer = null;
        this.deckPicker?.finalize();
        this.deckPicker = null;
        this.eventManager?.destroy();
        this.eventManager = null;
        this.widgetManager?.finalize();
        this.widgetManager = null;
        if (!this.props.canvas && !this.props.device && !this.props.gl && this.canvas) {
            // remove internally created canvas
            this.canvas.parentElement?.removeChild(this.canvas);
            this.canvas = null;
        }
    }
    /** Partially update props */
    setProps(props) {
        this.stats.get('setProps Time').timeStart();
        if ('onLayerHover' in props) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].removed('onLayerHover', 'onHover')();
        }
        if ('onLayerClick' in props) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].removed('onLayerClick', 'onClick')();
        }
        if (props.initialViewState &&
            // depth = 3 when comparing viewStates: viewId.position.0
            !(0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_8__.deepEqual)(this.props.initialViewState, props.initialViewState, 3)) {
            // Overwrite internal view state
            this.viewState = props.initialViewState;
        }
        // Merge with existing props
        Object.assign(this.props, props);
        // Update CSS size of canvas
        this._setCanvasSize(this.props);
        // We need to overwrite CSS style width and height with actual, numeric values
        const resolvedProps = Object.create(this.props);
        Object.assign(resolvedProps, {
            views: this._getViews(),
            width: this.width,
            height: this.height,
            viewState: this._getViewState()
        });
        // Update the animation loop
        this.animationLoop?.setProps(resolvedProps);
        // If initialized, update sub manager props
        if (this.layerManager) {
            this.viewManager.setProps(resolvedProps);
            // Make sure that any new layer gets initialized with the current viewport
            this.layerManager.activateViewport(this.getViewports()[0]);
            this.layerManager.setProps(resolvedProps);
            this.effectManager.setProps(resolvedProps);
            this.deckRenderer.setProps(resolvedProps);
            this.deckPicker.setProps(resolvedProps);
            this.widgetManager.setProps(resolvedProps);
        }
        this.stats.get('setProps Time').timeEnd();
    }
    // Public API
    /**
     * Check if a redraw is needed
     * @returns `false` or a string summarizing the redraw reason
     */
    needsRedraw(opts = { clearRedrawFlags: false }) {
        if (!this.layerManager) {
            // Not initialized or already finalized
            return false;
        }
        if (this.props._animate) {
            return 'Deck._animate';
        }
        let redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);
        const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);
        const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);
        const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);
        redraw =
            redraw ||
                viewManagerNeedsRedraw ||
                layerManagerNeedsRedraw ||
                effectManagerNeedsRedraw ||
                deckRendererNeedsRedraw;
        return redraw;
    }
    /**
     * Redraw the GL context
     * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.
     * @returns
     */
    redraw(reason) {
        if (!this.layerManager) {
            // Not yet initialized
            return;
        }
        // Check if we need to redraw
        let redrawReason = this.needsRedraw({ clearRedrawFlags: true });
        // User-supplied should take precedent, however the redraw flags get cleared regardless
        redrawReason = reason || redrawReason;
        if (!redrawReason) {
            return;
        }
        this.stats.get('Redraw Count').incrementCount();
        if (this.props._customRender) {
            this.props._customRender(redrawReason);
        }
        else {
            this._drawLayers(redrawReason);
        }
    }
    /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */
    get isInitialized() {
        return this.viewManager !== null;
    }
    /** Get a list of views that are currently rendered */
    getViews() {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_9__["default"])(this.viewManager);
        return this.viewManager.views;
    }
    /** Get a list of viewports that are currently rendered.
     * @param rect If provided, only returns viewports within the given bounding box.
     */
    getViewports(rect) {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_9__["default"])(this.viewManager);
        return this.viewManager.getViewports(rect);
    }
    /** Get the current canvas element. */
    getCanvas() {
        return this.canvas;
    }
    /** Query the object rendered on top at a given point */
    pickObject(opts) {
        const infos = this._pick('pickObject', 'pickObject Time', opts).result;
        return infos.length ? infos[0] : null;
    }
    /* Query all rendered objects at a given point */
    pickMultipleObjects(opts) {
        opts.depth = opts.depth || 10;
        return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;
    }
    /* Query all objects rendered on top within a bounding box */
    pickObjects(opts) {
        return this._pick('pickObjects', 'pickObjects Time', opts);
    }
    /** Experimental
     * Add a global resource for sharing among layers
     */
    _addResources(resources, forceUpdate = false) {
        for (const id in resources) {
            this.layerManager.resourceManager.add({ resourceId: id, data: resources[id], forceUpdate });
        }
    }
    /** Experimental
     * Remove a global resource
     */
    _removeResources(resourceIds) {
        for (const id of resourceIds) {
            this.layerManager.resourceManager.remove(id);
        }
    }
    /** Experimental
     * Register a default effect. Effects will be sorted by order, those with a low order will be rendered first
     */
    _addDefaultEffect(effect) {
        this.effectManager.addDefaultEffect(effect);
    }
    _addDefaultShaderModule(module) {
        this.layerManager.addDefaultShaderModule(module);
    }
    _removeDefaultShaderModule(module) {
        this.layerManager?.removeDefaultShaderModule(module);
    }
    _pick(method, statKey, opts) {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_9__["default"])(this.deckPicker);
        const { stats } = this;
        stats.get('Pick Count').incrementCount();
        stats.get(statKey).timeStart();
        const infos = this.deckPicker[method]({
            // layerManager, viewManager and effectManager are always defined if deckPicker is
            layers: this.layerManager.getLayers(opts),
            views: this.viewManager.getViews(),
            viewports: this.getViewports(opts),
            onViewportActive: this.layerManager.activateViewport,
            effects: this.effectManager.getEffects(),
            ...opts
        });
        stats.get(statKey).timeEnd();
        return infos;
    }
    /** Resolve props.canvas to element */
    _createCanvas(props) {
        let canvas = props.canvas;
        // TODO EventManager should accept element id
        if (typeof canvas === 'string') {
            canvas = document.getElementById(canvas);
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_9__["default"])(canvas);
        }
        if (!canvas) {
            canvas = document.createElement('canvas');
            canvas.id = props.id || 'deckgl-overlay';
            const parent = props.parent || document.body;
            parent.appendChild(canvas);
        }
        Object.assign(canvas.style, props.style);
        return canvas;
    }
    /** Updates canvas width and/or height, if provided as props */
    _setCanvasSize(props) {
        if (!this.canvas) {
            return;
        }
        const { width, height } = props;
        // Set size ONLY if props are being provided, otherwise let canvas be layouted freely
        if (width || width === 0) {
            const cssWidth = Number.isFinite(width) ? `${width}px` : width;
            this.canvas.style.width = cssWidth;
        }
        if (height || height === 0) {
            const cssHeight = Number.isFinite(height) ? `${height}px` : height;
            // Note: position==='absolute' required for height 100% to work
            this.canvas.style.position = props.style?.position || 'absolute';
            this.canvas.style.height = cssHeight;
        }
    }
    /** If canvas size has changed, reads out the new size and update */
    _updateCanvasSize() {
        const { canvas } = this;
        if (!canvas) {
            return;
        }
        // Fallback to width/height when clientWidth/clientHeight are undefined (OffscreenCanvas).
        const newWidth = canvas.clientWidth ?? canvas.width;
        const newHeight = canvas.clientHeight ?? canvas.height;
        if (newWidth !== this.width || newHeight !== this.height) {
            // @ts-expect-error private assign to read-only property
            this.width = newWidth;
            // @ts-expect-error private assign to read-only property
            this.height = newHeight;
            this.viewManager?.setProps({ width: newWidth, height: newHeight });
            // Make sure that any new layer gets initialized with the current viewport
            this.layerManager?.activateViewport(this.getViewports()[0]);
            this.props.onResize({ width: newWidth, height: newHeight });
        }
    }
    _createAnimationLoop(deviceOrPromise, props) {
        const { 
        // width,
        // height,
        gl, 
        // deviceProps,
        // glOptions,
        // debug,
        onError, 
        // onBeforeRender,
        // onAfterRender,
        useDevicePixels } = props;
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_10__.AnimationLoop({
            device: deviceOrPromise,
            useDevicePixels,
            // TODO v9
            autoResizeDrawingBuffer: !gl, // do not auto resize external context
            autoResizeViewport: false,
            // @ts-expect-error luma.gl needs to accept Promise<void> return value
            onInitialize: context => this._setDevice(context.device),
            onRender: this._onRenderFrame.bind(this),
            // @ts-expect-error typing mismatch: AnimationLoop does not accept onError:null
            onError
            // onBeforeRender,
            // onAfterRender,
        });
    }
    // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState
    // TODO: For backwards compatibility ensure numeric width and height is added to the viewState
    _getViewState() {
        return this.props.viewState || this.viewState;
    }
    // Get the view descriptor list
    _getViews() {
        const { views } = this.props;
        const normalizedViews = Array.isArray(views)
            ? views
            : // If null, default to a full screen map view port
                views
                    ? [views]
                    : [new _views_map_view_js__WEBPACK_IMPORTED_MODULE_11__["default"]({ id: 'default-view' })];
        if (normalizedViews.length && this.props.controller) {
            // Backward compatibility: support controller prop
            normalizedViews[0].props.controller = this.props.controller;
        }
        return normalizedViews;
    }
    _onContextLost() {
        const { onError } = this.props;
        if (this.animationLoop && onError) {
            onError(new Error('WebGL context is lost'));
        }
    }
    /** Actually run picking */
    _pickAndCallback() {
        const { _pickRequest } = this;
        if (_pickRequest.event) {
            // Perform picking
            const { result, emptyInfo } = this._pick('pickObject', 'pickObject Time', _pickRequest);
            this.cursorState.isHovering = result.length > 0;
            // There are 4 possible scenarios:
            // result is [outInfo, pickedInfo] (moved from one pickable layer to another)
            // result is [outInfo] (moved outside of a pickable layer)
            // result is [pickedInfo] (moved into or over a pickable layer)
            // result is [] (nothing is or was picked)
            //
            // `layer.props.onHover` should be called on all affected layers (out/over)
            // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise
            // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise
            // Execute callbacks
            let pickedInfo = emptyInfo;
            let handled = false;
            for (const info of result) {
                pickedInfo = info;
                handled = info.layer?.onHover(info, _pickRequest.event) || handled;
            }
            if (!handled) {
                this.props.onHover?.(pickedInfo, _pickRequest.event);
                this.widgetManager.onHover(pickedInfo, _pickRequest.event);
            }
            // Clear pending pickRequest
            _pickRequest.event = null;
        }
    }
    _updateCursor() {
        const container = this.props.parent || this.canvas;
        if (container) {
            container.style.cursor = this.props.getCursor(this.cursorState);
        }
    }
    _setDevice(device) {
        this.device = device;
        if (!this.animationLoop) {
            // finalize() has been called
            return;
        }
        // if external context...
        if (!this.canvas) {
            this.canvas = this.device.canvasContext?.canvas;
            // TODO v9
            // ts-expect-error - Currently luma.gl v9 does not expose these options
            // All WebGLDevice contexts are instrumented, but it seems the device
            // should have a method to start state tracking even if not enabled?
            // instrumentGLContext(this.device.gl, {enable: true, copyState: true});
        }
        this.device.setParametersWebGL({
            blend: true,
            blendFunc: [770, 771, 1, 771],
            polygonOffsetFill: true,
            depthTest: true,
            depthFunc: 515
        });
        this.props.onDeviceInitialized(this.device);
        if (this.device instanceof _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_5__.WebGLDevice) {
            // Legacy callback - warn?
            this.props.onWebGLInitialized(this.device.gl);
        }
        // timeline for transitions
        const timeline = new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_12__.Timeline();
        timeline.play();
        this.animationLoop.attachTimeline(timeline);
        this.eventManager = new mjolnir_js__WEBPACK_IMPORTED_MODULE_1__.EventManager(this.props.parent || this.canvas, {
            touchAction: this.props.touchAction,
            recognizerOptions: this.props.eventRecognizerOptions,
            events: {
                pointerdown: this._onPointerDown,
                pointermove: this._onPointerMove,
                pointerleave: this._onPointerMove
            }
        });
        for (const eventType in _constants_js__WEBPACK_IMPORTED_MODULE_4__.EVENTS) {
            this.eventManager.on(eventType, this._onEvent);
        }
        this.viewManager = new _view_manager_js__WEBPACK_IMPORTED_MODULE_13__["default"]({
            timeline,
            eventManager: this.eventManager,
            onViewStateChange: this._onViewStateChange.bind(this),
            onInteractionStateChange: this._onInteractionStateChange.bind(this),
            views: this._getViews(),
            viewState: this._getViewState(),
            width: this.width,
            height: this.height
        });
        // viewManager must be initialized before layerManager
        // layerManager depends on viewport created by viewManager.
        const viewport = this.viewManager.getViewports()[0];
        // Note: avoid React setState due GL animation loop / setState timing issue
        this.layerManager = new _layer_manager_js__WEBPACK_IMPORTED_MODULE_14__["default"](this.device, {
            deck: this,
            stats: this.stats,
            viewport,
            timeline
        });
        this.effectManager = new _effect_manager_js__WEBPACK_IMPORTED_MODULE_15__["default"]({
            deck: this,
            device: this.device
        });
        this.deckRenderer = new _deck_renderer_js__WEBPACK_IMPORTED_MODULE_16__["default"](this.device);
        this.deckPicker = new _deck_picker_js__WEBPACK_IMPORTED_MODULE_17__["default"](this.device);
        this.widgetManager = new _widget_manager_js__WEBPACK_IMPORTED_MODULE_18__.WidgetManager({
            deck: this,
            parentElement: this.canvas?.parentElement
        });
        this.widgetManager.addDefault(new _tooltip_js__WEBPACK_IMPORTED_MODULE_19__["default"]());
        this.setProps(this.props);
        this._updateCanvasSize();
        this.props.onLoad();
    }
    /** Internal only: default render function (redraw all layers and views) */
    _drawLayers(redrawReason, renderOptions) {
        const { device, gl } = this.layerManager.context;
        this.props.onBeforeRender({ device, gl });
        const opts = {
            target: this.props._framebuffer,
            layers: this.layerManager.getLayers(),
            viewports: this.viewManager.getViewports(),
            onViewportActive: this.layerManager.activateViewport,
            views: this.viewManager.getViews(),
            pass: 'screen',
            effects: this.effectManager.getEffects(),
            ...renderOptions
        };
        this.deckRenderer?.renderLayers(opts);
        if (opts.pass === 'screen') {
            // This method could be called when drawing to picking buffer, texture etc.
            // Only when drawing to screen, update all widgets (UI components)
            this.widgetManager.onRedraw({
                viewports: opts.viewports,
                layers: opts.layers
            });
        }
        this.props.onAfterRender({ device, gl });
    }
    // Callbacks
    _onRenderFrame() {
        this._getFrameStats();
        // Log perf stats every second
        if (this._metricsCounter++ % 60 === 0) {
            this._getMetrics();
            this.stats.reset();
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].table(4, this.metrics)();
            // Experimental: report metrics
            if (this.props._onMetrics) {
                this.props._onMetrics(this.metrics);
            }
        }
        this._updateCanvasSize();
        this._updateCursor();
        // Update layers if needed (e.g. some async prop has loaded)
        // Note: This can trigger a redraw
        this.layerManager.updateLayers();
        // Perform picking request if any
        this._pickAndCallback();
        // Redraw if necessary
        this.redraw();
        // Update viewport transition if needed
        // Note: this can trigger `onViewStateChange`, and affect layers
        // We want to defer these changes to the next frame
        if (this.viewManager) {
            this.viewManager.updateViewStates();
        }
    }
    // Callbacks
    _onViewStateChange(params) {
        // Let app know that view state is changing, and give it a chance to change it
        const viewState = this.props.onViewStateChange(params) || params.viewState;
        // If initialViewState was set on creation, auto track position
        if (this.viewState) {
            this.viewState = { ...this.viewState, [params.viewId]: viewState };
            if (!this.props.viewState) {
                // Apply internal view state
                if (this.viewManager) {
                    this.viewManager.setProps({ viewState: this.viewState });
                }
            }
        }
    }
    _onInteractionStateChange(interactionState) {
        this.cursorState.isDragging = interactionState.isDragging || false;
        this.props.onInteractionStateChange(interactionState);
    }
    _getFrameStats() {
        const { stats } = this;
        stats.get('frameRate').timeEnd();
        stats.get('frameRate').timeStart();
        // Get individual stats from luma.gl so reset works
        const animationLoopStats = this.animationLoop.stats;
        stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);
        stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);
    }
    _getMetrics() {
        const { metrics, stats } = this;
        metrics.fps = stats.get('frameRate').getHz();
        metrics.setPropsTime = stats.get('setProps Time').time;
        metrics.updateAttributesTime = stats.get('Update Attributes').time;
        metrics.framesRedrawn = stats.get('Redraw Count').count;
        metrics.pickTime =
            stats.get('pickObject Time').time +
                stats.get('pickMultipleObjects Time').time +
                stats.get('pickObjects Time').time;
        metrics.pickCount = stats.get('Pick Count').count;
        // Luma stats
        metrics.gpuTime = stats.get('GPU Time').time;
        metrics.cpuTime = stats.get('CPU Time').time;
        metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();
        metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();
        const memoryStats = _luma_gl_core__WEBPACK_IMPORTED_MODULE_6__.luma.stats.get('Memory Usage');
        metrics.bufferMemory = memoryStats.get('Buffer Memory').count;
        metrics.textureMemory = memoryStats.get('Texture Memory').count;
        metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;
        metrics.gpuMemory = memoryStats.get('GPU Memory').count;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/effect-manager.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/effect-manager.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EffectManager)
/* harmony export */ });
/* harmony import */ var _utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/deep-equal.js */ "./node_modules/@deck.gl/core/dist/utils/deep-equal.js");
/* harmony import */ var _effects_lighting_lighting_effect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../effects/lighting/lighting-effect.js */ "./node_modules/@deck.gl/core/dist/effects/lighting/lighting-effect.js");


const DEFAULT_LIGHTING_EFFECT = new _effects_lighting_lighting_effect_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
/** Sort two effects. Returns 0 if equal, negative if e1 < e2, positive if e1 > e2 */
function compareEffects(e1, e2) {
    const o1 = e1.order ?? Infinity;
    const o2 = e2.order ?? Infinity;
    return o1 - o2;
}
class EffectManager {
    constructor(context) {
        this._resolvedEffects = [];
        /** Effect instances and order preference pairs, sorted by order */
        this._defaultEffects = [];
        this.effects = [];
        this._context = context;
        this._needsRedraw = 'Initial render';
        this._setEffects([]);
    }
    /**
     * Register a new default effect, i.e. an effect presents regardless of user supplied props.effects
     */
    addDefaultEffect(effect) {
        const defaultEffects = this._defaultEffects;
        if (!defaultEffects.find(e => e.id === effect.id)) {
            const index = defaultEffects.findIndex(e => compareEffects(e, effect) > 0);
            if (index < 0) {
                defaultEffects.push(effect);
            }
            else {
                defaultEffects.splice(index, 0, effect);
            }
            effect.setup(this._context);
            this._setEffects(this.effects);
        }
    }
    setProps(props) {
        if ('effects' in props) {
            // Compare effects against each other shallowly
            if (!(0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(props.effects, this.effects, 1)) {
                this._setEffects(props.effects);
            }
        }
    }
    needsRedraw(opts = { clearRedrawFlags: false }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        return redraw;
    }
    getEffects() {
        return this._resolvedEffects;
    }
    _setEffects(effects) {
        const oldEffectsMap = {};
        for (const effect of this.effects) {
            oldEffectsMap[effect.id] = effect;
        }
        const nextEffects = [];
        for (const effect of effects) {
            const oldEffect = oldEffectsMap[effect.id];
            let effectToAdd = effect;
            if (oldEffect && oldEffect !== effect) {
                if (oldEffect.setProps) {
                    oldEffect.setProps(effect.props);
                    effectToAdd = oldEffect;
                }
                else {
                    oldEffect.cleanup(this._context);
                }
            }
            else if (!oldEffect) {
                effect.setup(this._context);
            }
            nextEffects.push(effectToAdd);
            delete oldEffectsMap[effect.id];
        }
        for (const removedEffectId in oldEffectsMap) {
            oldEffectsMap[removedEffectId].cleanup(this._context);
        }
        this.effects = nextEffects;
        this._resolvedEffects = nextEffects.concat(this._defaultEffects);
        // Special case for lighting: only add default instance if no LightingEffect is specified
        if (!effects.some(effect => effect instanceof _effects_lighting_lighting_effect_js__WEBPACK_IMPORTED_MODULE_0__["default"])) {
            this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);
        }
        this._needsRedraw = 'effects changed';
    }
    finalize() {
        for (const effect of this._resolvedEffects) {
            effect.cleanup(this._context);
        }
        this.effects.length = 0;
        this._resolvedEffects.length = 0;
        this._defaultEffects.length = 0;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/init.js":
/*!*****************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/init.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
/* harmony import */ var _loaders_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @loaders.gl/core */ "./node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js");
/* harmony import */ var _loaders_gl_images__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @loaders.gl/images */ "./node_modules/@loaders.gl/images/dist/image-loader.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug/index.js */ "./node_modules/@deck.gl/core/dist/debug/index.js");
/* harmony import */ var _utils_json_loader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/json-loader.js */ "./node_modules/@deck.gl/core/dist/utils/json-loader.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





function checkVersion() {
    // Version detection using typescript plugin.
    // Fallback for tests and SSR since global variable is defined by esbuild.
    const version =  true
        ? "9.0.24" : 0;
    // Note: a `deck` object not created by deck.gl may exist in the global scope
    const existingVersion = globalThis.deck && globalThis.deck.VERSION;
    if (existingVersion && existingVersion !== version) {
        throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);
    }
    if (!existingVersion) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].log(1, `deck.gl ${version}`)();
        globalThis.deck = {
            ...globalThis.deck,
            VERSION: version,
            version,
            log: _utils_log_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            // experimental
            _registerLoggers: _debug_index_js__WEBPACK_IMPORTED_MODULE_1__.register
        };
        (0,_loaders_gl_core__WEBPACK_IMPORTED_MODULE_2__.registerLoaders)([
            _utils_json_loader_js__WEBPACK_IMPORTED_MODULE_3__["default"],
            // @ts-expect-error non-standard Loader format
            [_loaders_gl_images__WEBPACK_IMPORTED_MODULE_4__.ImageLoader, { imagebitmap: { premultiplyAlpha: 'none' } }]
        ]);
    }
    return version;
}
const VERSION = checkVersion();


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/layer-manager.js":
/*!**************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/layer-manager.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayerManager)
/* harmony export */ });
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/animation/timeline.js");
/* harmony import */ var _shaderlib_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shaderlib/index.js */ "./node_modules/@deck.gl/core/dist/shaderlib/index.js");
/* harmony import */ var _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../lifecycle/constants.js */ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug/index.js */ "./node_modules/@deck.gl/core/dist/debug/index.js");
/* harmony import */ var _utils_flatten_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/flatten.js */ "./node_modules/@deck.gl/core/dist/utils/flatten.js");
/* harmony import */ var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/stats */ "./node_modules/@probe.gl/stats/dist/index.js");
/* harmony import */ var _resource_resource_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resource/resource-manager.js */ "./node_modules/@deck.gl/core/dist/lib/resource/resource-manager.js");
/* harmony import */ var _viewports_viewport_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../viewports/viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/viewport.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.









const TRACE_SET_LAYERS = 'layerManager.setLayers';
const TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';
class LayerManager {
    /**
     * @param device
     * @param param1
     */
    // eslint-disable-next-line
    constructor(device, props) {
        this._lastRenderedLayers = [];
        this._needsRedraw = false;
        this._needsUpdate = false;
        this._nextLayers = null;
        this._debug = false;
        // This flag is separate from _needsUpdate because it can be set during an update and should trigger another full update
        this._defaultShaderModulesChanged = false;
        //
        // INTERNAL METHODS
        //
        /** Make a viewport "current" in layer context, updating viewportChanged flags */
        this.activateViewport = (viewport) => {
            (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(TRACE_ACTIVATE_VIEWPORT, this, viewport);
            if (viewport) {
                this.context.viewport = viewport;
            }
        };
        const { deck, stats, viewport, timeline } = props || {};
        // Currently deck.gl expects the DeckGL.layers array to be different
        // whenever React rerenders. If the same layers array is used, the
        // LayerManager's diffing algorithm will generate a fatal error and
        // break the rendering.
        // `this._lastRenderedLayers` stores the UNFILTERED layers sent
        // down to LayerManager, so that `layers` reference can be compared.
        // If it's the same across two React render calls, the diffing logic
        // will be skipped.
        this.layers = [];
        this.resourceManager = new _resource_resource_manager_js__WEBPACK_IMPORTED_MODULE_2__["default"]({ device, protocol: 'deck://' });
        this.context = {
            mousePosition: null,
            userData: {},
            layerManager: this,
            device,
            // @ts-expect-error
            gl: device?.gl,
            deck,
            shaderAssembler: (0,_shaderlib_index_js__WEBPACK_IMPORTED_MODULE_3__.getShaderAssembler)(),
            defaultShaderModules: [],
            renderPass: undefined,
            stats: stats || new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__.Stats({ id: 'deck.gl' }),
            // Make sure context.viewport is not empty on the first layer initialization
            viewport: viewport || new _viewports_viewport_js__WEBPACK_IMPORTED_MODULE_4__["default"]({ id: 'DEFAULT-INITIAL-VIEWPORT' }), // Current viewport, exposed to layers for project* function
            timeline: timeline || new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_5__.Timeline(),
            resourceManager: this.resourceManager,
            onError: undefined
        };
        Object.seal(this);
    }
    /** Method to call when the layer manager is not needed anymore. */
    finalize() {
        this.resourceManager.finalize();
        // Finalize all layers
        for (const layer of this.layers) {
            this._finalizeLayer(layer);
        }
    }
    /** Check if a redraw is needed */
    needsRedraw(opts = { clearRedrawFlags: false }) {
        let redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        // This layers list doesn't include sublayers, relying on composite layers
        for (const layer of this.layers) {
            // Call every layer to clear their flags
            const layerNeedsRedraw = layer.getNeedsRedraw(opts);
            redraw = redraw || layerNeedsRedraw;
        }
        return redraw;
    }
    /** Check if a deep update of all layers is needed */
    needsUpdate() {
        if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {
            // New layers array may be the same as the old one if `setProps` is called by React
            return 'layers changed';
        }
        if (this._defaultShaderModulesChanged) {
            return 'shader modules changed';
        }
        return this._needsUpdate;
    }
    /** Layers will be redrawn (in next animation frame) */
    setNeedsRedraw(reason) {
        this._needsRedraw = this._needsRedraw || reason;
    }
    /** Layers will be updated deeply (in next animation frame)
      Potentially regenerating attributes and sub layers */
    setNeedsUpdate(reason) {
        this._needsUpdate = this._needsUpdate || reason;
    }
    /** Gets a list of currently rendered layers. Optionally filter by id. */
    getLayers({ layerIds } = {}) {
        // Filtering by layerId compares beginning of strings, so that sublayers will be included
        // Dependes on the convention of adding suffixes to the parent's layer name
        return layerIds
            ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))
            : this.layers;
    }
    /** Set props needed for layer rendering and picking. */
    setProps(props) {
        if ('debug' in props) {
            this._debug = props.debug;
        }
        // A way for apps to add data to context that can be accessed in layers
        if ('userData' in props) {
            this.context.userData = props.userData;
        }
        // New layers will be processed in `updateLayers` in the next update cycle
        if ('layers' in props) {
            this._nextLayers = props.layers;
        }
        if ('onError' in props) {
            this.context.onError = props.onError;
        }
    }
    /** Supply a new layer list, initiating sublayer generation and layer matching */
    setLayers(newLayers, reason) {
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(TRACE_SET_LAYERS, this, reason, newLayers);
        this._lastRenderedLayers = newLayers;
        const flatLayers = (0,_utils_flatten_js__WEBPACK_IMPORTED_MODULE_6__.flatten)(newLayers, Boolean);
        for (const layer of flatLayers) {
            layer.context = this.context;
        }
        this._updateLayers(this.layers, flatLayers);
    }
    /** Update layers from last cycle if `setNeedsUpdate()` has been called */
    updateLayers() {
        // NOTE: For now, even if only some layer has changed, we update all layers
        // to ensure that layer id maps etc remain consistent even if different
        // sublayers are rendered
        const reason = this.needsUpdate();
        if (reason) {
            this.setNeedsRedraw(`updating layers: ${reason}`);
            // Force a full update
            this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);
        }
        // Updated, clear the backlog
        this._nextLayers = null;
    }
    /** Register a default shader module */
    addDefaultShaderModule(module) {
        const { defaultShaderModules } = this.context;
        if (!defaultShaderModules.find(m => m.name === module.name)) {
            defaultShaderModules.push(module);
            this._defaultShaderModulesChanged = true;
        }
    }
    /** Deregister a default shader module */
    removeDefaultShaderModule(module) {
        const { defaultShaderModules } = this.context;
        const i = defaultShaderModules.findIndex(m => m.name === module.name);
        if (i >= 0) {
            defaultShaderModules.splice(i, 1);
            this._defaultShaderModulesChanged = true;
        }
    }
    _handleError(stage, error, layer) {
        layer.raiseError(error, `${stage} of ${layer}`);
    }
    // TODO - mark layers with exceptions as bad and remove from rendering cycle?
    /** Match all layers, checking for caught errors
      to avoid having an exception in one layer disrupt other layers */
    _updateLayers(oldLayers, newLayers) {
        // Create old layer map
        const oldLayerMap = {};
        for (const oldLayer of oldLayers) {
            if (oldLayerMap[oldLayer.id]) {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_7__["default"].warn(`Multiple old layers with same id ${oldLayer.id}`)();
            }
            else {
                oldLayerMap[oldLayer.id] = oldLayer;
            }
        }
        if (this._defaultShaderModulesChanged) {
            for (const layer of oldLayers) {
                layer.setNeedsUpdate();
                layer.setChangeFlags({ extensionsChanged: true });
            }
            this._defaultShaderModulesChanged = false;
        }
        // Allocate array for generated layers
        const generatedLayers = [];
        // Match sublayers
        this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);
        // Finalize unmatched layers
        this._finalizeOldLayers(oldLayerMap);
        let needsUpdate = false;
        for (const layer of generatedLayers) {
            if (layer.hasUniformTransition()) {
                needsUpdate = `Uniform transition in ${layer}`;
                break;
            }
        }
        this._needsUpdate = needsUpdate;
        this.layers = generatedLayers;
    }
    /* eslint-disable complexity,max-statements */
    // Note: adds generated layers to `generatedLayers` array parameter
    _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {
        for (const newLayer of newLayers) {
            newLayer.context = this.context;
            // Given a new coming layer, find its matching old layer (if any)
            const oldLayer = oldLayerMap[newLayer.id];
            if (oldLayer === null) {
                // null, rather than undefined, means this id was originally there
                _utils_log_js__WEBPACK_IMPORTED_MODULE_7__["default"].warn(`Multiple new layers with same id ${newLayer.id}`)();
            }
            // Remove the old layer from candidates, as it has been matched with this layer
            oldLayerMap[newLayer.id] = null;
            let sublayers = null;
            // We must not generate exceptions until after layer matching is complete
            try {
                if (this._debug && oldLayer !== newLayer) {
                    newLayer.validateProps();
                }
                if (!oldLayer) {
                    this._initializeLayer(newLayer);
                }
                else {
                    this._transferLayerState(oldLayer, newLayer);
                    this._updateLayer(newLayer);
                }
                generatedLayers.push(newLayer);
                // Call layer lifecycle method: render sublayers
                sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;
                // End layer lifecycle method: render sublayers
            }
            catch (err) {
                this._handleError('matching', err, newLayer); // Record first exception
            }
            if (sublayers) {
                this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);
            }
        }
    }
    /* eslint-enable complexity,max-statements */
    // Finalize any old layers that were not matched
    _finalizeOldLayers(oldLayerMap) {
        for (const layerId in oldLayerMap) {
            const layer = oldLayerMap[layerId];
            if (layer) {
                this._finalizeLayer(layer);
            }
        }
    }
    // / EXCEPTION SAFE LAYER ACCESS
    /** Safely initializes a single layer, calling layer methods */
    _initializeLayer(layer) {
        try {
            layer._initialize();
            layer.lifecycle = _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_8__.LIFECYCLE.INITIALIZED;
        }
        catch (err) {
            this._handleError('initialization', err, layer);
            // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?
        }
    }
    /** Transfer state from one layer to a newer version */
    _transferLayerState(oldLayer, newLayer) {
        newLayer._transferState(oldLayer);
        newLayer.lifecycle = _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_8__.LIFECYCLE.MATCHED;
        if (newLayer !== oldLayer) {
            oldLayer.lifecycle = _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_8__.LIFECYCLE.AWAITING_GC;
        }
    }
    /** Safely updates a single layer, cleaning all flags */
    _updateLayer(layer) {
        try {
            layer._update();
        }
        catch (err) {
            this._handleError('update', err, layer);
        }
    }
    /** Safely finalizes a single layer, removing all resources */
    _finalizeLayer(layer) {
        this._needsRedraw = this._needsRedraw || `finalized ${layer}`;
        layer.lifecycle = _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_8__.LIFECYCLE.AWAITING_FINALIZATION;
        try {
            layer._finalize();
            layer.lifecycle = _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_8__.LIFECYCLE.FINALIZED;
        }
        catch (err) {
            this._handleError('finalization', err, layer);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/layer-state.js":
/*!************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/layer-state.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayerState)
/* harmony export */ });
/* harmony import */ var _lifecycle_component_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle/component-state.js */ "./node_modules/@deck.gl/core/dist/lifecycle/component-state.js");
// deck.gl, MIT license

class LayerState extends _lifecycle_component_state_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor({ attributeManager, layer }) {
        super(layer);
        this.attributeManager = attributeManager;
        this.needsRedraw = true;
        this.needsUpdate = true;
        this.subLayers = null;
        this.usesPickingColorCache = false;
    }
    get layer() {
        return this.component;
    }
    /* Override base Component methods with Layer-specific handling */
    _fetch(propName, url) {
        const layer = this.layer;
        const fetch = layer?.props.fetch;
        if (fetch) {
            return fetch(url, { propName, layer });
        }
        return super._fetch(propName, url);
    }
    _onResolve(propName, value) {
        const layer = this.layer;
        if (layer) {
            const onDataLoad = layer.props.onDataLoad;
            if (propName === 'data' && onDataLoad) {
                onDataLoad(value, { propName, layer });
            }
        }
    }
    _onError(propName, error) {
        const layer = this.layer;
        if (layer) {
            layer.raiseError(error, `loading ${propName} of ${this.layer}`);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/layer.js":
/*!******************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/layer.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Layer)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _attribute_attribute_manager_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./attribute/attribute-manager.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js");
/* harmony import */ var _uniform_transition_manager_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./uniform-transition-manager.js */ "./node_modules/@deck.gl/core/dist/lib/uniform-transition-manager.js");
/* harmony import */ var _lifecycle_props_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../lifecycle/props.js */ "./node_modules/@deck.gl/core/dist/lifecycle/props.js");
/* harmony import */ var _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lifecycle/constants.js */ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js");
/* harmony import */ var _utils_count_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/count.js */ "./node_modules/@deck.gl/core/dist/utils/count.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../debug/index.js */ "./node_modules/@deck.gl/core/dist/debug/index.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@deck.gl/core/dist/utils/assert.js");
/* harmony import */ var _utils_memoize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/memoize.js */ "./node_modules/@deck.gl/core/dist/utils/memoize.js");
/* harmony import */ var _utils_shader_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/shader.js */ "./node_modules/@deck.gl/core/dist/utils/shader.js");
/* harmony import */ var _shaderlib_project_project_functions_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shaderlib/project/project-functions.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project/project-functions.js");
/* harmony import */ var _utils_typed_array_manager_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/typed-array-manager.js */ "./node_modules/@deck.gl/core/dist/utils/typed-array-manager.js");
/* harmony import */ var _lifecycle_component_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lifecycle/component.js */ "./node_modules/@deck.gl/core/dist/lifecycle/component.js");
/* harmony import */ var _layer_state_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./layer-state.js */ "./node_modules/@deck.gl/core/dist/lib/layer-state.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/* harmony import */ var _loaders_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @loaders.gl/core */ "./node_modules/@loaders.gl/core/dist/lib/api/load.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable react/no-direct-mutation-state */


















const TRACE_CHANGE_FLAG = 'layer.changeFlag';
const TRACE_INITIALIZE = 'layer.initialize';
const TRACE_UPDATE = 'layer.update';
const TRACE_FINALIZE = 'layer.finalize';
const TRACE_MATCHED = 'layer.matched';
const MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;
const EMPTY_ARRAY = Object.freeze([]);
// Only compare the same two viewports once
const areViewportsEqual = (0,_utils_memoize_js__WEBPACK_IMPORTED_MODULE_1__["default"])(({ oldViewport, viewport }) => {
    return oldViewport.equals(viewport);
});
let pickingColorCache = new Uint8ClampedArray(0);
const defaultProps = {
    // data: Special handling for null, see below
    data: { type: 'data', value: EMPTY_ARRAY, async: true },
    dataComparator: { type: 'function', value: null, optional: true },
    _dataDiff: {
        type: 'function',
        // @ts-ignore __diff is not defined on data
        value: data => data && data.__diff,
        optional: true
    },
    dataTransform: { type: 'function', value: null, optional: true },
    onDataLoad: { type: 'function', value: null, optional: true },
    onError: { type: 'function', value: null, optional: true },
    fetch: {
        type: 'function',
        value: (url, { propName, layer, loaders, loadOptions, signal }) => {
            const { resourceManager } = layer.context;
            loadOptions = loadOptions || layer.getLoadOptions();
            loaders = loaders || layer.props.loaders;
            if (signal) {
                loadOptions = {
                    ...loadOptions,
                    fetch: {
                        ...loadOptions?.fetch,
                        signal
                    }
                };
            }
            let inResourceManager = resourceManager.contains(url);
            if (!inResourceManager && !loadOptions) {
                // If there is no layer-specific load options, then attempt to cache this resource in the data manager
                resourceManager.add({ resourceId: url, data: (0,_loaders_gl_core__WEBPACK_IMPORTED_MODULE_2__.load)(url, loaders), persistent: false });
                inResourceManager = true;
            }
            if (inResourceManager) {
                return resourceManager.subscribe({
                    resourceId: url,
                    onChange: data => layer.internalState?.reloadAsyncProp(propName, data),
                    consumerId: layer.id,
                    requestId: propName
                });
            }
            return (0,_loaders_gl_core__WEBPACK_IMPORTED_MODULE_2__.load)(url, loaders, loadOptions);
        }
    },
    updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl
    visible: true,
    pickable: false,
    opacity: { type: 'number', min: 0, max: 1, value: 1 },
    operation: 'draw',
    onHover: { type: 'function', value: null, optional: true },
    onClick: { type: 'function', value: null, optional: true },
    onDragStart: { type: 'function', value: null, optional: true },
    onDrag: { type: 'function', value: null, optional: true },
    onDragEnd: { type: 'function', value: null, optional: true },
    coordinateSystem: _constants_js__WEBPACK_IMPORTED_MODULE_3__.COORDINATE_SYSTEM.DEFAULT,
    coordinateOrigin: { type: 'array', value: [0, 0, 0], compare: true },
    modelMatrix: { type: 'array', value: null, compare: true, optional: true },
    wrapLongitude: false,
    positionFormat: 'XYZ',
    colorFormat: 'RGBA',
    parameters: { type: 'object', value: {}, optional: true, compare: 2 },
    loadOptions: { type: 'object', value: null, optional: true, ignore: true },
    transitions: null,
    extensions: [],
    loaders: { type: 'array', value: [], optional: true, ignore: true },
    // Offset depth based on layer index to avoid z-fighting.
    // Negative values pull layer towards the camera
    // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm
    getPolygonOffset: {
        type: 'function',
        value: ({ layerIndex }) => [0, -layerIndex * 100]
    },
    // Selection/Highlighting
    highlightedObjectIndex: null,
    autoHighlight: false,
    highlightColor: { type: 'accessor', value: [0, 0, 128, 128] }
};
class Layer extends _lifecycle_component_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
    constructor() {
        super(...arguments);
        this.internalState = null;
        this.lifecycle = _lifecycle_constants_js__WEBPACK_IMPORTED_MODULE_5__.LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers
        this.parent = null;
    }
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'Layer'; }
    static get componentName() {
        return Object.prototype.hasOwnProperty.call(this, 'layerName') ? this.layerName : '';
    }
    get root() {
        // eslint-disable-next-line
        let layer = this;
        while (layer.parent) {
            layer = layer.parent;
        }
        return layer;
    }
    toString() {
        const className = this.constructor.layerName || this.constructor.name;
        return `${className}({id: '${this.props.id}'})`;
    }
    // Public API for users
    /** Projects a point with current view state from the current layer's coordinate system to screen */
    project(xyz) {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        const worldPosition = (0,_shaderlib_project_project_functions_js__WEBPACK_IMPORTED_MODULE_7__.getWorldPosition)(xyz, {
            viewport,
            modelMatrix: this.props.modelMatrix,
            coordinateOrigin: this.props.coordinateOrigin,
            coordinateSystem: this.props.coordinateSystem
        });
        const [x, y, z] = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.worldToPixels)(worldPosition, viewport.pixelProjectionMatrix);
        return xyz.length === 2 ? [x, y] : [x, y, z];
    }
    /** Unprojects a screen pixel to the current view's default coordinate system
        Note: this does not reverse `project`. */
    unproject(xy) {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        return viewport.unproject(xy);
    }
    /** Projects a point with current view state from the current layer's coordinate system to the world space */
    projectPosition(xyz, params) {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        return (0,_shaderlib_project_project_functions_js__WEBPACK_IMPORTED_MODULE_7__.projectPosition)(xyz, {
            viewport,
            modelMatrix: this.props.modelMatrix,
            coordinateOrigin: this.props.coordinateOrigin,
            coordinateSystem: this.props.coordinateSystem,
            ...params
        });
    }
    // Public API for custom layer implementation
    /** `true` if this layer renders other layers */
    get isComposite() {
        return false;
    }
    /** Updates selected state members and marks the layer for redraw */
    setState(partialState) {
        this.setChangeFlags({ stateChanged: true });
        Object.assign(this.state, partialState);
        this.setNeedsRedraw();
    }
    /** Sets the redraw flag for this layer, will trigger a redraw next animation frame */
    setNeedsRedraw() {
        if (this.internalState) {
            this.internalState.needsRedraw = true;
        }
    }
    /** Mark this layer as needs a deep update */
    setNeedsUpdate() {
        if (this.internalState) {
            this.context.layerManager.setNeedsUpdate(String(this));
            this.internalState.needsUpdate = true;
        }
    }
    /** Returns true if all async resources are loaded */
    get isLoaded() {
        return this.internalState ? !this.internalState.isAsyncPropLoading() : false;
    }
    /** Returns true if using shader-based WGS84 longitude wrapping */
    get wrapLongitude() {
        return this.props.wrapLongitude;
    }
    /** @deprecated Returns true if the layer is visible in the picking pass */
    isPickable() {
        return this.props.pickable && this.props.visible;
    }
    /** Returns an array of models used by this layer, can be overriden by layer subclass */
    getModels() {
        const state = this.state;
        return (state && (state.models || (state.model && [state.model]))) || [];
    }
    // TODO deprecate in favour of setShaderModuleProps
    /** Update shader module parameters */
    setModuleParameters(moduleParameters) {
        for (const model of this.getModels()) {
            model.updateModuleSettings(moduleParameters);
        }
    }
    /** Update shader input parameters */
    setShaderModuleProps(...props) {
        for (const model of this.getModels()) {
            model.shaderInputs.setProps(...props);
        }
    }
    /** Returns the attribute manager of this layer */
    getAttributeManager() {
        return this.internalState && this.internalState.attributeManager;
    }
    /** Returns the most recent layer that matched to this state
      (When reacting to an async event, this layer may no longer be the latest) */
    getCurrentLayer() {
        return this.internalState && this.internalState.layer;
    }
    /** Returns the default parse options for async props */
    getLoadOptions() {
        return this.props.loadOptions;
    }
    use64bitPositions() {
        const { coordinateSystem } = this.props;
        return (coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_3__.COORDINATE_SYSTEM.DEFAULT ||
            coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_3__.COORDINATE_SYSTEM.LNGLAT ||
            coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_3__.COORDINATE_SYSTEM.CARTESIAN);
    }
    // Event handling
    onHover(info, pickingEvent) {
        if (this.props.onHover) {
            return this.props.onHover(info, pickingEvent) || false;
        }
        return false;
    }
    onClick(info, pickingEvent) {
        if (this.props.onClick) {
            return this.props.onClick(info, pickingEvent) || false;
        }
        return false;
    }
    // Returns the picking color that doesn't match any subfeature
    // Use if some graphics do not belong to any pickable subfeature
    // @return {Array} - a black color
    nullPickingColor() {
        return [0, 0, 0];
    }
    // Returns the picking color that doesn't match any subfeature
    // Use if some graphics do not belong to any pickable subfeature
    encodePickingColor(i, target = []) {
        target[0] = (i + 1) & 255;
        target[1] = ((i + 1) >> 8) & 255;
        target[2] = (((i + 1) >> 8) >> 8) & 255;
        return target;
    }
    // Returns the index corresponding to a picking color that doesn't match any subfeature
    // @param {Uint8Array} color - color array to be decoded
    // @return {Array} - the decoded picking color
    decodePickingColor(color) {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_6__["default"])(color instanceof Uint8Array);
        const [i1, i2, i3] = color;
        // 1 was added to seperate from no selection
        const index = i1 + i2 * 256 + i3 * 65536 - 1;
        return index;
    }
    /** Deduces number of instances. Intention is to support:
      - Explicit setting of numInstances
      - Auto-deduction for ES6 containers that define a size member
      - Auto-deduction for Classic Arrays via the built-in length attribute
      - Auto-deduction via arrays */
    getNumInstances() {
        // First Check if app has provided an explicit value
        if (Number.isFinite(this.props.numInstances)) {
            return this.props.numInstances;
        }
        // Second check if the layer has set its own value
        if (this.state && this.state.numInstances !== undefined) {
            return this.state.numInstances;
        }
        // Use container library to get a count for any ES6 container or object
        return (0,_utils_count_js__WEBPACK_IMPORTED_MODULE_8__.count)(this.props.data);
    }
    /** Buffer layout describes how many attribute values are packed for each data object
        The default (null) is one value each object.
        Some data formats (e.g. paths, polygons) have various length. Their buffer layout
        is in the form of [L0, L1, L2, ...] */
    getStartIndices() {
        // First Check if startIndices is provided as an explicit value
        if (this.props.startIndices) {
            return this.props.startIndices;
        }
        // Second check if the layer has set its own value
        if (this.state && this.state.startIndices) {
            return this.state.startIndices;
        }
        return null;
    }
    // Default implementation
    getBounds() {
        return this.getAttributeManager()?.getBounds(['positions', 'instancePositions']);
    }
    getShaders(shaders) {
        shaders = (0,_utils_shader_js__WEBPACK_IMPORTED_MODULE_9__.mergeShaders)(shaders, {
            disableWarnings: true,
            modules: this.context.defaultShaderModules
        });
        for (const extension of this.props.extensions) {
            shaders = (0,_utils_shader_js__WEBPACK_IMPORTED_MODULE_9__.mergeShaders)(shaders, extension.getShaders.call(this, extension));
        }
        return shaders;
    }
    /** Controls if updateState should be called. By default returns true if any prop has changed */
    shouldUpdateState(params) {
        return params.changeFlags.propsOrDataChanged;
    }
    /** Default implementation, all attributes will be invalidated and updated when data changes */
    // eslint-disable-next-line complexity
    updateState(params) {
        const attributeManager = this.getAttributeManager();
        const { dataChanged } = params.changeFlags;
        if (dataChanged && attributeManager) {
            if (Array.isArray(dataChanged)) {
                // is partial update
                for (const dataRange of dataChanged) {
                    attributeManager.invalidateAll(dataRange);
                }
            }
            else {
                attributeManager.invalidateAll();
            }
        }
        // Enable/disable picking buffer
        if (attributeManager) {
            const { props } = params;
            const hasPickingBuffer = this.internalState.hasPickingBuffer;
            const needsPickingBuffer = Number.isInteger(props.highlightedObjectIndex) ||
                props.pickable ||
                props.extensions.some(extension => extension.getNeedsPickingBuffer.call(this, extension));
            // Only generate picking buffer if needed
            if (hasPickingBuffer !== needsPickingBuffer) {
                this.internalState.hasPickingBuffer = needsPickingBuffer;
                const { pickingColors, instancePickingColors } = attributeManager.attributes;
                const pickingColorsAttribute = pickingColors || instancePickingColors;
                if (pickingColorsAttribute) {
                    if (needsPickingBuffer && pickingColorsAttribute.constant) {
                        pickingColorsAttribute.constant = false;
                        attributeManager.invalidate(pickingColorsAttribute.id);
                    }
                    if (!pickingColorsAttribute.value && !needsPickingBuffer) {
                        pickingColorsAttribute.constant = true;
                        pickingColorsAttribute.value = [0, 0, 0];
                    }
                }
            }
        }
    }
    /** Called once when layer is no longer matched and state will be discarded. Layers can destroy WebGL resources here. */
    finalizeState(context) {
        for (const model of this.getModels()) {
            model.destroy();
        }
        const attributeManager = this.getAttributeManager();
        if (attributeManager) {
            attributeManager.finalize();
        }
        if (this.context) {
            this.context.resourceManager.unsubscribe({ consumerId: this.id });
        }
        if (this.internalState) {
            this.internalState.uniformTransitions.clear();
            this.internalState.finalize();
        }
    }
    // If state has a model, draw it with supplied uniforms
    draw(opts) {
        for (const model of this.getModels()) {
            model.draw(opts);
        }
    }
    // called to populate the info object that is passed to the event handler
    // @return null to cancel event
    getPickingInfo({ info, mode, sourceLayer }) {
        const { index } = info;
        if (index >= 0) {
            // If props.data is an indexable array, get the object
            if (Array.isArray(this.props.data)) {
                info.object = this.props.data[index];
            }
        }
        return info;
    }
    // END LIFECYCLE METHODS
    // / INTERNAL METHODS - called by LayerManager, DeckRenderer and DeckPicker
    /** (Internal) Propagate an error event through the system */
    raiseError(error, message) {
        if (message) {
            // Duplicating error message for backward compatibility, see #7986
            // TODO - revisit in v9
            error = new Error(`${message}: ${error.message}`, { cause: error });
        }
        if (!this.props.onError?.(error)) {
            this.context?.onError?.(error, this);
        }
    }
    /** (Internal) Checks if this layer needs redraw */
    getNeedsRedraw(opts = { clearRedrawFlags: false }) {
        return this._getNeedsRedraw(opts);
    }
    /** (Internal) Checks if this layer needs a deep update */
    needsUpdate() {
        if (!this.internalState) {
            return false;
        }
        // Call subclass lifecycle method
        return (this.internalState.needsUpdate ||
            this.hasUniformTransition() ||
            this.shouldUpdateState(this._getUpdateParams()));
        // End lifecycle method
    }
    /** Checks if this layer has ongoing uniform transition */
    hasUniformTransition() {
        return this.internalState?.uniformTransitions.active || false;
    }
    /** Called when this layer is rendered into the given viewport */
    activateViewport(viewport) {
        if (!this.internalState) {
            return;
        }
        const oldViewport = this.internalState.viewport;
        this.internalState.viewport = viewport;
        if (!oldViewport || !areViewportsEqual({ oldViewport, viewport })) {
            this.setChangeFlags({ viewportChanged: true });
            if (this.isComposite) {
                if (this.needsUpdate()) {
                    // Composite layers may add/remove sublayers on viewport change
                    // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away
                    // This will not call update immediately, but mark the layerManager as needs update on the next frame
                    this.setNeedsUpdate();
                }
            }
            else {
                this._update();
            }
        }
    }
    /** Default implementation of attribute invalidation, can be redefined */
    invalidateAttribute(name = 'all') {
        const attributeManager = this.getAttributeManager();
        if (!attributeManager) {
            return;
        }
        if (name === 'all') {
            attributeManager.invalidateAll();
        }
        else {
            attributeManager.invalidate(name);
        }
    }
    /** Send updated attributes to the WebGL model */
    updateAttributes(changedAttributes) {
        // If some buffer layout changed
        let bufferLayoutChanged = false;
        for (const id in changedAttributes) {
            if (changedAttributes[id].layoutChanged()) {
                bufferLayoutChanged = true;
            }
        }
        for (const model of this.getModels()) {
            this._setModelAttributes(model, changedAttributes, bufferLayoutChanged);
        }
    }
    /** Recalculate any attributes if needed */
    _updateAttributes() {
        const attributeManager = this.getAttributeManager();
        if (!attributeManager) {
            return;
        }
        const props = this.props;
        // Figure out data length
        const numInstances = this.getNumInstances();
        const startIndices = this.getStartIndices();
        attributeManager.update({
            data: props.data,
            numInstances,
            startIndices,
            props,
            transitions: props.transitions,
            // @ts-ignore (TS2339) property attribute is not present on some acceptable data types
            buffers: props.data.attributes,
            context: this
        });
        const changedAttributes = attributeManager.getChangedAttributes({ clearChangedFlags: true });
        this.updateAttributes(changedAttributes);
    }
    /** Update attribute transitions. This is called in drawLayer, no model updates required. */
    _updateAttributeTransition() {
        const attributeManager = this.getAttributeManager();
        if (attributeManager) {
            attributeManager.updateTransition();
        }
    }
    /** Update uniform (prop) transitions. This is called in updateState, may result in model updates. */
    _updateUniformTransition() {
        // @ts-ignore (TS2339) internalState is alwasy defined when this method is called
        const { uniformTransitions } = this.internalState;
        if (uniformTransitions.active) {
            // clone props
            const propsInTransition = uniformTransitions.update();
            const props = Object.create(this.props);
            for (const key in propsInTransition) {
                Object.defineProperty(props, key, { value: propsInTransition[key] });
            }
            return props;
        }
        return this.props;
    }
    /** Updater for the automatically populated instancePickingColors attribute */
    calculateInstancePickingColors(attribute, { numInstances }) {
        if (attribute.constant) {
            return;
        }
        // calculateInstancePickingColors always generates the same sequence.
        // pickingColorCache saves the largest generated sequence for reuse
        const cacheSize = Math.floor(pickingColorCache.length / 4);
        // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache
        // @ts-ignore (TS2531) internalState is always defined when this method is called
        this.internalState.usesPickingColorCache = true;
        if (cacheSize < numInstances) {
            if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_10__["default"].warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();
            }
            pickingColorCache = _utils_typed_array_manager_js__WEBPACK_IMPORTED_MODULE_11__["default"].allocate(pickingColorCache, numInstances, {
                size: 4,
                copy: true,
                maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)
            });
            // If the attribute is larger than the cache, resize the cache and populate the missing chunk
            const newCacheSize = Math.floor(pickingColorCache.length / 4);
            const pickingColor = [];
            for (let i = cacheSize; i < newCacheSize; i++) {
                this.encodePickingColor(i, pickingColor);
                pickingColorCache[i * 4 + 0] = pickingColor[0];
                pickingColorCache[i * 4 + 1] = pickingColor[1];
                pickingColorCache[i * 4 + 2] = pickingColor[2];
            }
        }
        attribute.value = pickingColorCache.subarray(0, numInstances * 4);
    }
    /** Apply changed attributes to model */
    _setModelAttributes(model, changedAttributes, bufferLayoutChanged = false) {
        if (!Object.keys(changedAttributes).length) {
            return;
        }
        if (bufferLayoutChanged) {
            // AttributeManager is always defined when this method is called
            const attributeManager = this.getAttributeManager();
            model.setBufferLayout(attributeManager.getBufferLayouts(model));
            // All attributes must be reset after buffer layout change
            changedAttributes = attributeManager.getAttributes();
        }
        // @ts-ignore luma.gl type issue
        const excludeAttributes = model.userData?.excludeAttributes || {};
        const attributeBuffers = {};
        const constantAttributes = {};
        for (const name in changedAttributes) {
            if (excludeAttributes[name]) {
                continue;
            }
            const values = changedAttributes[name].getValue();
            for (const attributeName in values) {
                const value = values[attributeName];
                if (value instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_12__.Buffer) {
                    if (changedAttributes[name].settings.isIndexed) {
                        model.setIndexBuffer(value);
                    }
                    else {
                        attributeBuffers[attributeName] = value;
                    }
                }
                else if (value) {
                    constantAttributes[attributeName] = value;
                }
            }
        }
        // TODO - update buffer map?
        model.setAttributes(attributeBuffers);
        model.setConstantAttributes(constantAttributes);
    }
    /** (Internal) Sets the picking color at the specified index to null picking color. Used for multi-depth picking.
       This method may be overriden by layer implementations */
    disablePickingIndex(objectIndex) {
        const data = this.props.data;
        if (!('attributes' in data)) {
            this._disablePickingIndex(objectIndex);
            return;
        }
        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        const externalColorAttribute = colors && data.attributes && data.attributes[colors.id];
        if (externalColorAttribute && externalColorAttribute.value) {
            const values = externalColorAttribute.value;
            const objectColor = this.encodePickingColor(objectIndex);
            for (let index = 0; index < data.length; index++) {
                const i = colors.getVertexOffset(index);
                if (values[i] === objectColor[0] &&
                    values[i + 1] === objectColor[1] &&
                    values[i + 2] === objectColor[2]) {
                    this._disablePickingIndex(index);
                }
            }
        }
        else {
            this._disablePickingIndex(objectIndex);
        }
    }
    // TODO - simplify subclassing interface
    _disablePickingIndex(objectIndex) {
        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        if (!colors) {
            return;
        }
        const start = colors.getVertexOffset(objectIndex);
        const end = colors.getVertexOffset(objectIndex + 1);
        // Fill the sub buffer with 0s, 1 byte per element
        colors.buffer.write(new Uint8Array(end - start), start);
    }
    /** (Internal) Re-enable all picking indices after multi-depth picking */
    restorePickingColors() {
        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        if (!colors) {
            return;
        }
        // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.
        if (
        // @ts-ignore (TS2531) this method is only called internally with internalState defined
        this.internalState.usesPickingColorCache &&
            colors.value.buffer !== pickingColorCache.buffer) {
            colors.value = pickingColorCache.subarray(0, colors.value.length);
        }
        colors.updateSubBuffer({ startOffset: 0 });
    }
    /* eslint-disable max-statements */
    /* (Internal) Called by layer manager when a new layer is found */
    _initialize() {
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_6__["default"])(!this.internalState); // finalized layer cannot be reused
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_6__["default"])(Number.isFinite(this.props.coordinateSystem)); // invalid coordinateSystem
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_13__["default"])(TRACE_INITIALIZE, this);
        const attributeManager = this._getAttributeManager();
        if (attributeManager) {
            // All instanced layers get instancePickingColors attribute by default
            // Their shaders can use it to render a picking scene
            // TODO - this slightly slows down non instanced layers
            attributeManager.addInstanced({
                instancePickingColors: {
                    type: 'uint8',
                    size: 4,
                    noAlloc: true,
                    // Updaters are always called with `this` pointing to the layer
                    // eslint-disable-next-line @typescript-eslint/unbound-method
                    update: this.calculateInstancePickingColors
                }
            });
        }
        this.internalState = new _layer_state_js__WEBPACK_IMPORTED_MODULE_14__["default"]({
            attributeManager,
            layer: this
        });
        this._clearChangeFlags(); // populate this.internalState.changeFlags
        this.state = {};
        // for backwards compatibility with older layers
        // TODO - remove in next release
        /* eslint-disable accessor-pairs */
        Object.defineProperty(this.state, 'attributeManager', {
            get: () => {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_10__["default"].deprecated('layer.state.attributeManager', 'layer.getAttributeManager()')();
                return attributeManager;
            }
        });
        /* eslint-enable accessor-pairs */
        this.internalState.uniformTransitions = new _uniform_transition_manager_js__WEBPACK_IMPORTED_MODULE_15__["default"](this.context.timeline);
        this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);
        // Ensure any async props are updated
        this.internalState.setAsyncProps(this.props);
        // Call subclass lifecycle methods
        this.initializeState(this.context);
        // Initialize extensions
        for (const extension of this.props.extensions) {
            extension.initializeState.call(this, this.context, extension);
        }
        // End subclass lifecycle methods
        // initializeState callback tends to clear state
        this.setChangeFlags({
            dataChanged: 'init',
            propsChanged: 'init',
            viewportChanged: true,
            extensionsChanged: true
        });
        this._update();
    }
    /** (Internal) Called by layer manager to transfer state from an old layer */
    _transferState(oldLayer) {
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_13__["default"])(TRACE_MATCHED, this, this === oldLayer);
        const { state, internalState } = oldLayer;
        if (this === oldLayer) {
            return;
        }
        // Move internalState
        this.internalState = internalState;
        // Move state
        this.state = state;
        // We keep the state ref on old layers to support async actions
        // oldLayer.state = null;
        // Ensure any async props are updated
        this.internalState.setAsyncProps(this.props);
        this._diffProps(this.props, this.internalState.getOldProps());
    }
    /** (Internal) Called by layer manager when a new layer is added or an existing layer is matched with a new instance */
    _update() {
        // Call subclass lifecycle method
        const stateNeedsUpdate = this.needsUpdate();
        // End lifecycle method
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_13__["default"])(TRACE_UPDATE, this, stateNeedsUpdate);
        if (!stateNeedsUpdate) {
            return;
        }
        const currentProps = this.props;
        const context = this.context;
        const internalState = this.internalState;
        const currentViewport = context.viewport;
        const propsInTransition = this._updateUniformTransition();
        internalState.propsInTransition = propsInTransition;
        // Overwrite this.context.viewport during update to use the last activated viewport on this layer
        // In multi-view applications, a layer may only be drawn in one of the views
        // Which would make the "active" viewport different from the shared context
        context.viewport = internalState.viewport || currentViewport;
        // Overwrite this.props during update to use in-transition prop values
        this.props = propsInTransition;
        try {
            const updateParams = this._getUpdateParams();
            const oldModels = this.getModels();
            // Safely call subclass lifecycle methods
            if (context.device) {
                this.updateState(updateParams);
            }
            else {
                try {
                    this.updateState(updateParams);
                }
                catch (error) {
                    // ignore error if gl context is missing
                }
            }
            // Execute extension updates
            for (const extension of this.props.extensions) {
                extension.updateState.call(this, updateParams, extension);
            }
            const modelChanged = this.getModels()[0] !== oldModels[0];
            this._postUpdate(updateParams, modelChanged);
            // End subclass lifecycle methods
        }
        finally {
            // Restore shared context
            context.viewport = currentViewport;
            this.props = currentProps;
            this._clearChangeFlags();
            internalState.needsUpdate = false;
            internalState.resetOldProps();
        }
    }
    /* eslint-enable max-statements */
    /** (Internal) Called by manager when layer is about to be disposed
        Note: not guaranteed to be called on application shutdown */
    _finalize() {
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_13__["default"])(TRACE_FINALIZE, this);
        // Call subclass lifecycle method
        this.finalizeState(this.context);
        // Finalize extensions
        for (const extension of this.props.extensions) {
            extension.finalizeState.call(this, this.context, extension);
        }
    }
    // Calculates uniforms
    _drawLayer({ renderPass, moduleParameters = null, uniforms = {}, parameters = {} }) {
        this._updateAttributeTransition();
        const currentProps = this.props;
        const context = this.context;
        // Overwrite this.props during redraw to use in-transition prop values
        // `internalState.propsInTransition` could be missing if `updateState` failed
        // @ts-ignore (TS2339) internalState is alwasy defined when this method is called
        this.props = this.internalState.propsInTransition || currentProps;
        const opacity = this.props.opacity;
        // apply gamma to opacity to make it visually "linear"
        uniforms.opacity = Math.pow(opacity, 1 / 2.2);
        try {
            // TODO/ib - hack move to luma Model.draw
            if (moduleParameters) {
                const { isActive, isAttribute } = moduleParameters.picking;
                this.setModuleParameters(moduleParameters);
                this.setShaderModuleProps({ picking: { isActive, isAttribute } });
            }
            // Apply polygon offset to avoid z-fighting
            // TODO - move to draw-layers
            const { getPolygonOffset } = this.props;
            const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];
            context.device.setParametersWebGL({ polygonOffset: offsets });
            for (const model of this.getModels()) {
                model.setParameters(parameters);
            }
            // Call subclass lifecycle method
            context.device.withParametersWebGL(parameters, () => {
                const opts = { renderPass, moduleParameters, uniforms, parameters, context };
                // extensions
                for (const extension of this.props.extensions) {
                    extension.draw.call(this, opts, extension);
                }
                this.draw(opts);
            });
        }
        finally {
            this.props = currentProps;
        }
        // End lifecycle method
    }
    // Helper methods
    /** Returns the current change flags */
    getChangeFlags() {
        return this.internalState?.changeFlags;
    }
    /* eslint-disable complexity */
    /** Dirty some change flags, will be handled by updateLayer */
    setChangeFlags(flags) {
        if (!this.internalState) {
            return;
        }
        const { changeFlags } = this.internalState;
        /* eslint-disable no-fallthrough, max-depth */
        for (const key in flags) {
            if (flags[key]) {
                let flagChanged = false;
                switch (key) {
                    case 'dataChanged':
                        // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges
                        const dataChangedReason = flags[key];
                        const prevDataChangedReason = changeFlags[key];
                        if (dataChangedReason && Array.isArray(prevDataChangedReason)) {
                            // Merge partial updates
                            changeFlags.dataChanged = Array.isArray(dataChangedReason)
                                ? prevDataChangedReason.concat(dataChangedReason)
                                : dataChangedReason;
                            flagChanged = true;
                        }
                    default:
                        if (!changeFlags[key]) {
                            changeFlags[key] = flags[key];
                            flagChanged = true;
                        }
                }
                if (flagChanged) {
                    (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_13__["default"])(TRACE_CHANGE_FLAG, this, key, flags);
                }
            }
        }
        /* eslint-enable no-fallthrough, max-depth */
        // Update composite flags
        const propsOrDataChanged = Boolean(changeFlags.dataChanged ||
            changeFlags.updateTriggersChanged ||
            changeFlags.propsChanged ||
            changeFlags.extensionsChanged);
        changeFlags.propsOrDataChanged = propsOrDataChanged;
        changeFlags.somethingChanged =
            propsOrDataChanged || changeFlags.viewportChanged || changeFlags.stateChanged;
    }
    /* eslint-enable complexity */
    /** Clear all changeFlags, typically after an update */
    _clearChangeFlags() {
        // @ts-ignore TS2531 this method can only be called internally with internalState assigned
        this.internalState.changeFlags = {
            dataChanged: false,
            propsChanged: false,
            updateTriggersChanged: false,
            viewportChanged: false,
            stateChanged: false,
            extensionsChanged: false,
            propsOrDataChanged: false,
            somethingChanged: false
        };
    }
    /** Compares the layers props with old props from a matched older layer
        and extracts change flags that describe what has change so that state
        can be update correctly with minimal effort */
    _diffProps(newProps, oldProps) {
        const changeFlags = (0,_lifecycle_props_js__WEBPACK_IMPORTED_MODULE_16__.diffProps)(newProps, oldProps);
        // iterate over changedTriggers
        if (changeFlags.updateTriggersChanged) {
            for (const key in changeFlags.updateTriggersChanged) {
                if (changeFlags.updateTriggersChanged[key]) {
                    this.invalidateAttribute(key);
                }
            }
        }
        // trigger uniform transitions
        if (changeFlags.transitionsChanged) {
            for (const key in changeFlags.transitionsChanged) {
                // prop changed and transition is enabled
                // @ts-ignore (TS2531) internalState is always defined when this method is called
                this.internalState.uniformTransitions.add(key, oldProps[key], newProps[key], newProps.transitions?.[key]);
            }
        }
        return this.setChangeFlags(changeFlags);
    }
    /** (Internal) called by layer manager to perform extra props validation (in development only) */
    validateProps() {
        (0,_lifecycle_props_js__WEBPACK_IMPORTED_MODULE_16__.validateProps)(this.props);
    }
    /** (Internal) Called by deck picker when the hovered object changes to update the auto highlight */
    updateAutoHighlight(info) {
        if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {
            this._updateAutoHighlight(info);
        }
    }
    // May be overriden by subclasses
    // TODO - simplify subclassing interface
    /** Update picking module parameters to highlight the hovered object */
    _updateAutoHighlight(info) {
        const picking = {
            highlightedObjectColor: info.picked ? info.color : null
        };
        const { highlightColor } = this.props;
        if (info.picked && typeof highlightColor === 'function') {
            picking.highlightColor = highlightColor(info);
        }
        this.setShaderModuleProps({ picking });
        // setShaderModuleProps does not trigger redraw
        this.setNeedsRedraw();
    }
    /** Create new attribute manager */
    _getAttributeManager() {
        const context = this.context;
        return new _attribute_attribute_manager_js__WEBPACK_IMPORTED_MODULE_17__["default"](context.device, {
            id: this.props.id,
            stats: context.stats,
            timeline: context.timeline
        });
    }
    // Private methods
    /** Called after updateState to perform common tasks */
    _postUpdate(updateParams, forceUpdate) {
        const { props, oldProps } = updateParams;
        this.setNeedsRedraw();
        // Check if attributes need recalculation
        this._updateAttributes();
        // Note: Automatic instance count update only works for single layers
        const model = this.state.model;
        if (model?.isInstanced) {
            model.setInstanceCount(this.getNumInstances());
        }
        // Set picking module parameters to match props
        const { autoHighlight, highlightedObjectIndex, highlightColor } = props;
        if (forceUpdate ||
            oldProps.autoHighlight !== autoHighlight ||
            oldProps.highlightedObjectIndex !== highlightedObjectIndex ||
            oldProps.highlightColor !== highlightColor) {
            const picking = {};
            if (Array.isArray(highlightColor)) {
                picking.highlightColor = highlightColor;
            }
            // highlightedObjectIndex will overwrite any settings from auto highlighting.
            // Do not reset unless the value has changed.
            if (forceUpdate ||
                oldProps.autoHighlight !== autoHighlight ||
                highlightedObjectIndex !== oldProps.highlightedObjectIndex) {
                picking.highlightedObjectColor =
                    Number.isFinite(highlightedObjectIndex) && highlightedObjectIndex >= 0
                        ? this.encodePickingColor(highlightedObjectIndex)
                        : null;
            }
            this.setShaderModuleProps({ picking });
        }
    }
    _getUpdateParams() {
        return {
            props: this.props,
            // @ts-ignore TS2531 this method can only be called internally with internalState assigned
            oldProps: this.internalState.getOldProps(),
            context: this.context,
            // @ts-ignore TS2531 this method can only be called internally with internalState assigned
            changeFlags: this.internalState.changeFlags
        };
    }
    /** Checks state of attributes and model */
    _getNeedsRedraw(opts) {
        // this method may be called by the render loop as soon a the layer
        // has been created, so guard against uninitialized state
        if (!this.internalState) {
            return false;
        }
        let redraw = false;
        redraw = redraw || (this.internalState.needsRedraw && this.id);
        // TODO - is attribute manager needed? - Model should be enough.
        const attributeManager = this.getAttributeManager();
        const attributeManagerNeedsRedraw = attributeManager
            ? attributeManager.getNeedsRedraw(opts)
            : false;
        redraw = redraw || attributeManagerNeedsRedraw;
        if (redraw) {
            for (const extension of this.props.extensions) {
                extension.onNeedsRedraw.call(this, extension);
            }
        }
        this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;
        return redraw;
    }
    /** Callback when asyn prop is loaded */
    _onAsyncPropUpdated() {
        // @ts-ignore TS2531 this method can only be called internally with internalState assigned
        this._diffProps(this.props, this.internalState.getOldProps());
        this.setNeedsUpdate();
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/picking/pick-info.js":
/*!******************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/picking/pick-info.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getEmptyPickingInfo: () => (/* binding */ getEmptyPickingInfo),
/* harmony export */   getLayerPickingInfo: () => (/* binding */ getLayerPickingInfo),
/* harmony export */   processPickInfo: () => (/* binding */ processPickInfo)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/** Generates some basic information of the picking action: x, y, coordinates etc.
 * Regardless if anything is picked
 */
function getEmptyPickingInfo({ pickInfo, viewports, pixelRatio, x, y, z }) {
    // If more than one viewports are used in the picking pass, locate the viewport that
    // drew the picked pixel
    let pickedViewport = viewports[0];
    if (viewports.length > 1) {
        // Find the viewport that contain the picked pixel
        pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, { x, y });
    }
    let coordinate;
    if (pickedViewport) {
        const point = [x - pickedViewport.x, y - pickedViewport.y];
        if (z !== undefined) {
            point[2] = z;
        }
        coordinate = pickedViewport.unproject(point);
    }
    return {
        color: null,
        layer: null,
        viewport: pickedViewport,
        index: -1,
        picked: false,
        x,
        y,
        pixel: [x, y],
        coordinate,
        devicePixel: pickInfo && 'pickedX' in pickInfo
            ? [pickInfo.pickedX, pickInfo.pickedY]
            : undefined,
        pixelRatio
    };
}
/* eslint-disable max-depth */
/** Generates the picking info of a picking operation */
function processPickInfo(opts) {
    const { pickInfo, lastPickedInfo, mode, layers } = opts;
    const { pickedColor, pickedLayer, pickedObjectIndex } = pickInfo;
    const affectedLayers = pickedLayer ? [pickedLayer] : [];
    if (mode === 'hover') {
        // only invoke onHover events if picked object has changed
        const lastPickedPixelIndex = lastPickedInfo.index;
        const lastPickedLayerId = lastPickedInfo.layerId;
        const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;
        // proceed only if picked object changed
        if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {
            if (pickedLayerId !== lastPickedLayerId) {
                // We cannot store a ref to lastPickedLayer in the context because
                // the state of an outdated layer is no longer valid
                // and the props may have changed
                const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);
                if (lastPickedLayer) {
                    // Let leave event fire before enter event
                    affectedLayers.unshift(lastPickedLayer);
                }
            }
            // Update layer manager context
            lastPickedInfo.layerId = pickedLayerId;
            lastPickedInfo.index = pickedObjectIndex;
            lastPickedInfo.info = null;
        }
    }
    const baseInfo = getEmptyPickingInfo(opts);
    // Use a Map to store all picking infos.
    // The following two forEach loops are the result of
    // https://github.com/visgl/deck.gl/issues/443
    // Please be very careful when changing this pattern
    const infos = new Map();
    // Make sure infos always contain something even if no layer is affected
    infos.set(null, baseInfo);
    affectedLayers.forEach(layer => {
        let info = { ...baseInfo };
        if (layer === pickedLayer) {
            info.color = pickedColor;
            info.index = pickedObjectIndex;
            info.picked = true;
        }
        info = getLayerPickingInfo({ layer, info, mode });
        const rootLayer = info.layer;
        if (layer === pickedLayer && mode === 'hover') {
            lastPickedInfo.info = info;
        }
        // This guarantees that there will be only one copy of info for
        // one composite layer
        infos.set(rootLayer.id, info);
        if (mode === 'hover') {
            rootLayer.updateAutoHighlight(info);
        }
    });
    return infos;
}
/** Walk up the layer composite chain to populate the info object */
function getLayerPickingInfo({ layer, info, mode }) {
    while (layer && info) {
        // For a composite layer, sourceLayer will point to the sublayer
        // where the event originates from.
        // It provides additional context for the composite layer's
        // getPickingInfo() method to populate the info object
        const sourceLayer = info.layer || null;
        info.sourceLayer = sourceLayer;
        info.layer = layer;
        // layer.pickLayer() function requires a non-null ```layer.state```
        // object to function properly. So the layer referenced here
        // must be the "current" layer, not an "out-dated" / "invalidated" layer
        info = layer.getPickingInfo({ info, mode, sourceLayer });
        layer = layer.parent;
    }
    return info;
}
/** Indentifies which viewport, if any corresponds to x and y
   If multiple viewports contain the target pixel, last viewport drawn is returend
   Returns first viewport if no match */
function getViewportFromCoordinates(viewports, pixel) {
    // find the last viewport that contains the pixel
    for (let i = viewports.length - 1; i >= 0; i--) {
        const viewport = viewports[i];
        if (viewport.containsPixel(pixel)) {
            return viewport;
        }
    }
    return viewports[0];
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/picking/query-object.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/picking/query-object.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getClosestObject: () => (/* binding */ getClosestObject),
/* harmony export */   getUniqueObjects: () => (/* binding */ getUniqueObjects)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

const NO_PICKED_OBJECT = {
    pickedColor: null,
    pickedObjectIndex: -1
};
/* eslint-disable max-depth, max-statements */
/**
 * Pick at a specified pixel with a tolerance radius
 * Returns the closest object to the pixel in shape `{pickedColor, pickedLayer, pickedObjectIndex}`
 */
function getClosestObject({ pickedColors, decodePickingColor, deviceX, deviceY, deviceRadius, deviceRect }) {
    // Traverse all pixels in picking results and find the one closest to the supplied
    // [deviceX, deviceY]
    const { x, y, width, height } = deviceRect;
    let minSquareDistanceToCenter = deviceRadius * deviceRadius;
    let closestPixelIndex = -1;
    let i = 0;
    for (let row = 0; row < height; row++) {
        const dy = row + y - deviceY;
        const dy2 = dy * dy;
        if (dy2 > minSquareDistanceToCenter) {
            // skip this row
            i += 4 * width;
        }
        else {
            for (let col = 0; col < width; col++) {
                // Decode picked layer from color
                const pickedLayerIndex = pickedColors[i + 3] - 1;
                if (pickedLayerIndex >= 0) {
                    const dx = col + x - deviceX;
                    const d2 = dx * dx + dy2;
                    if (d2 <= minSquareDistanceToCenter) {
                        minSquareDistanceToCenter = d2;
                        closestPixelIndex = i;
                    }
                }
                i += 4;
            }
        }
    }
    if (closestPixelIndex >= 0) {
        // Decode picked object index from color
        const pickedColor = pickedColors.slice(closestPixelIndex, closestPixelIndex + 4);
        const pickedObject = decodePickingColor(pickedColor);
        if (pickedObject) {
            const dy = Math.floor(closestPixelIndex / 4 / width);
            const dx = closestPixelIndex / 4 - dy * width;
            return {
                ...pickedObject,
                pickedColor,
                pickedX: x + dx,
                pickedY: y + dy
            };
        }
        _utils_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error('Picked non-existent layer. Is picking buffer corrupt?')();
    }
    return NO_PICKED_OBJECT;
}
/**
 * Examines a picking buffer for unique colors
 * Returns array of unique objects in shape `{x, y, pickedColor, pickedLayer, pickedObjectIndex}`
 */
function getUniqueObjects({ pickedColors, decodePickingColor }) {
    const uniqueColors = new Map();
    // Traverse all pixels in picking results and get unique colors
    if (pickedColors) {
        for (let i = 0; i < pickedColors.length; i += 4) {
            // Decode picked layer from color
            const pickedLayerIndex = pickedColors[i + 3] - 1;
            if (pickedLayerIndex >= 0) {
                const pickedColor = pickedColors.slice(i, i + 4);
                const colorKey = pickedColor.join(',');
                // eslint-disable-next-line
                if (!uniqueColors.has(colorKey)) {
                    const pickedObject = decodePickingColor(pickedColor);
                    // eslint-disable-next-line
                    if (pickedObject) {
                        uniqueColors.set(colorKey, {
                            ...pickedObject,
                            color: pickedColor
                        });
                    }
                    else {
                        _utils_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error('Picked non-existent layer. Is picking buffer corrupt?')();
                    }
                }
            }
        }
    }
    return Array.from(uniqueColors.values());
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/resource/resource-manager.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/resource/resource-manager.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ResourceManager)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@deck.gl/core/dist/lib/resource/resource.js");

class ResourceManager {
    constructor(props) {
        this.protocol = props.protocol || 'resource://';
        this._context = {
            device: props.device,
            // @ts-expect-error
            gl: props.device?.gl,
            resourceManager: this
        };
        this._resources = {};
        this._consumers = {};
        this._pruneRequest = null;
    }
    contains(resourceId) {
        if (resourceId.startsWith(this.protocol)) {
            return true;
        }
        return resourceId in this._resources;
    }
    add({ resourceId, data, forceUpdate = false, persistent = true }) {
        let res = this._resources[resourceId];
        if (res) {
            res.setData(data, forceUpdate);
        }
        else {
            res = new _resource_js__WEBPACK_IMPORTED_MODULE_0__["default"](resourceId, data, this._context);
            this._resources[resourceId] = res;
        }
        // persistent resources can only be removed by calling `remove`
        // non-persistent resources may be released when there are no more consumers
        res.persistent = persistent;
    }
    remove(resourceId) {
        const res = this._resources[resourceId];
        if (res) {
            res.delete();
            delete this._resources[resourceId];
        }
    }
    unsubscribe({ consumerId }) {
        const consumer = this._consumers[consumerId];
        if (consumer) {
            for (const requestId in consumer) {
                const request = consumer[requestId];
                const resource = this._resources[request.resourceId];
                if (resource) {
                    resource.unsubscribe(request);
                }
            }
            delete this._consumers[consumerId];
            this.prune();
        }
    }
    subscribe({ resourceId, onChange, consumerId, requestId = 'default' }) {
        const { _resources: resources, protocol } = this;
        if (resourceId.startsWith(protocol)) {
            resourceId = resourceId.replace(protocol, '');
            if (!resources[resourceId]) {
                // Add placeholder. When this resource becomes available, the consumer will be notified.
                this.add({ resourceId, data: null, persistent: false });
            }
        }
        const res = resources[resourceId];
        this._track(consumerId, requestId, res, onChange);
        if (res) {
            return res.getData();
        }
        return undefined;
    }
    prune() {
        if (!this._pruneRequest) {
            // prune() may be called multiple times in the same animation frame.
            // Batch multiple requests together
            // @ts-ignore setTimeout returns NodeJS.Timeout in node
            this._pruneRequest = setTimeout(() => this._prune(), 0);
        }
    }
    finalize() {
        for (const key in this._resources) {
            this._resources[key].delete();
        }
    }
    _track(consumerId, requestId, resource, onChange) {
        const consumers = this._consumers;
        const consumer = (consumers[consumerId] = consumers[consumerId] || {});
        let request = consumer[requestId];
        const oldResource = request && request.resourceId && this._resources[request.resourceId];
        if (oldResource) {
            oldResource.unsubscribe(request);
            this.prune();
        }
        if (resource) {
            if (request) {
                request.onChange = onChange;
                request.resourceId = resource.id;
            }
            else {
                request = {
                    onChange,
                    resourceId: resource.id
                };
            }
            consumer[requestId] = request;
            resource.subscribe(request);
        }
    }
    _prune() {
        this._pruneRequest = null;
        for (const key of Object.keys(this._resources)) {
            const res = this._resources[key];
            if (!res.persistent && !res.inUse()) {
                res.delete();
                delete this._resources[key];
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/resource/resource.js":
/*!******************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/resource/resource.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Resource)
/* harmony export */ });
/* harmony import */ var _loaders_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @loaders.gl/core */ "./node_modules/@loaders.gl/core/dist/lib/api/load.js");

class Resource {
    constructor(id, data, context) {
        this._loadCount = 0;
        this._subscribers = new Set();
        this.id = id;
        this.context = context;
        this.setData(data);
    }
    // consumer: {onChange: Function}
    subscribe(consumer) {
        this._subscribers.add(consumer);
    }
    unsubscribe(consumer) {
        this._subscribers.delete(consumer);
    }
    inUse() {
        return this._subscribers.size > 0;
    }
    delete() {
        // Remove any resources created
    }
    getData() {
        return this.isLoaded
            ? this._error
                ? Promise.reject(this._error)
                : this._content
            : this._loader.then(() => this.getData());
    }
    setData(data, forceUpdate) {
        if (data === this._data && !forceUpdate) {
            return;
        }
        this._data = data;
        const loadCount = ++this._loadCount;
        let loader = data;
        if (typeof data === 'string') {
            loader = (0,_loaders_gl_core__WEBPACK_IMPORTED_MODULE_0__.load)(data);
        }
        if (loader instanceof Promise) {
            this.isLoaded = false;
            this._loader = loader
                .then(result => {
                // check if source has changed
                if (this._loadCount === loadCount) {
                    this.isLoaded = true;
                    this._error = undefined;
                    this._content = result;
                }
            })
                .catch(error => {
                if (this._loadCount === loadCount) {
                    this.isLoaded = true;
                    this._error = error || true;
                }
            });
        }
        else {
            this.isLoaded = true;
            this._error = undefined;
            this._content = data;
        }
        for (const subscriber of this._subscribers) {
            subscriber.onChange(this.getData());
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/tooltip.js":
/*!********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/tooltip.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tooltip)
/* harmony export */ });
/* global document */
const defaultStyle = {
    zIndex: '1',
    position: 'absolute',
    pointerEvents: 'none',
    color: '#a0a7b4',
    backgroundColor: '#29323c',
    padding: '10px',
    top: '0',
    left: '0',
    display: 'none'
};
class Tooltip {
    constructor() {
        this.id = 'default-tooltip';
        this.placement = 'fill';
        this.props = {};
        this.isVisible = false;
    }
    onAdd({ deck }) {
        const el = document.createElement('div');
        el.className = 'deck-tooltip';
        Object.assign(el.style, defaultStyle);
        this.deck = deck;
        this.element = el;
        return el;
    }
    onRemove() {
        this.deck = undefined;
        this.element = undefined;
    }
    setProps() { }
    onViewportChange(viewport) {
        if (this.isVisible && viewport.id === this.lastViewport?.id && viewport !== this.lastViewport) {
            // Camera has moved, clear tooltip
            this.setTooltip(null);
        }
    }
    onHover(info) {
        const { deck } = this;
        const getTooltip = deck && deck.props.getTooltip;
        if (!getTooltip) {
            return;
        }
        const displayInfo = getTooltip(info);
        this.lastViewport = info.viewport;
        this.setTooltip(displayInfo, info.x, info.y);
    }
    setTooltip(displayInfo, x, y) {
        const el = this.element;
        if (!el) {
            return;
        }
        if (typeof displayInfo === 'string') {
            el.innerText = displayInfo;
        }
        else if (!displayInfo) {
            this.isVisible = false;
            el.style.display = 'none';
            return;
        }
        else {
            if (displayInfo.text) {
                el.innerText = displayInfo.text;
            }
            if (displayInfo.html) {
                el.innerHTML = displayInfo.html;
            }
            if (displayInfo.className) {
                el.className = displayInfo.className;
            }
        }
        this.isVisible = true;
        el.style.display = 'block';
        el.style.transform = `translate(${x}px, ${y}px)`;
        if (displayInfo && typeof displayInfo === 'object' && 'style' in displayInfo) {
            Object.assign(el.style, displayInfo.style);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/uniform-transition-manager.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/uniform-transition-manager.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UniformTransitionManager)
/* harmony export */ });
/* harmony import */ var _attribute_transition_settings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./attribute/transition-settings.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js");
/* harmony import */ var _transitions_cpu_interpolation_transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transitions/cpu-interpolation-transition.js */ "./node_modules/@deck.gl/core/dist/transitions/cpu-interpolation-transition.js");
/* harmony import */ var _transitions_cpu_spring_transition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transitions/cpu-spring-transition.js */ "./node_modules/@deck.gl/core/dist/transitions/cpu-spring-transition.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");




const TRANSITION_TYPES = {
    interpolation: _transitions_cpu_interpolation_transition_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    spring: _transitions_cpu_spring_transition_js__WEBPACK_IMPORTED_MODULE_1__["default"]
};
class UniformTransitionManager {
    constructor(timeline) {
        this.transitions = new Map();
        this.timeline = timeline;
    }
    get active() {
        return this.transitions.size > 0;
    }
    add(key, fromValue, toValue, settings) {
        const { transitions } = this;
        if (transitions.has(key)) {
            const transition = transitions.get(key);
            // value may not be available if `update()` has not been called. Fallback to `fromValue`
            const { value = transition.settings.fromValue } = transition;
            // start from interrupted position
            fromValue = value;
            this.remove(key);
        }
        settings = (0,_attribute_transition_settings_js__WEBPACK_IMPORTED_MODULE_2__.normalizeTransitionSettings)(settings);
        if (!settings) {
            return;
        }
        const TransitionType = TRANSITION_TYPES[settings.type];
        if (!TransitionType) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].error(`unsupported transition type '${settings.type}'`)();
            return;
        }
        const transition = new TransitionType(this.timeline);
        transition.start({
            ...settings,
            fromValue,
            toValue
        });
        transitions.set(key, transition);
    }
    remove(key) {
        const { transitions } = this;
        if (transitions.has(key)) {
            transitions.get(key).cancel();
            transitions.delete(key);
        }
    }
    update() {
        const propsInTransition = {};
        for (const [key, transition] of this.transitions) {
            transition.update();
            propsInTransition[key] = transition.value;
            if (!transition.inProgress) {
                // transition ended
                this.remove(key);
            }
        }
        return propsInTransition;
    }
    clear() {
        for (const key of this.transitions.keys()) {
            this.remove(key);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/view-manager.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/view-manager.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ViewManager)
/* harmony export */ });
/* harmony import */ var _utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/deep-equal.js */ "./node_modules/@deck.gl/core/dist/utils/deep-equal.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_flatten_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/flatten.js */ "./node_modules/@deck.gl/core/dist/utils/flatten.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



class ViewManager {
    constructor(props) {
        // List of view descriptors, gets re-evaluated when width/height changes
        this.views = [];
        this.width = 100;
        this.height = 100;
        this.viewState = {};
        this.controllers = {};
        this.timeline = props.timeline;
        this._viewports = []; // Generated viewports
        this._viewportMap = {};
        this._isUpdating = false;
        this._needsRedraw = 'First render';
        this._needsUpdate = 'Initialize';
        this._eventManager = props.eventManager;
        this._eventCallbacks = {
            onViewStateChange: props.onViewStateChange,
            onInteractionStateChange: props.onInteractionStateChange
        };
        Object.seal(this);
        // Init with default map viewport
        this.setProps(props);
    }
    /** Remove all resources and event listeners */
    finalize() {
        for (const key in this.controllers) {
            const controller = this.controllers[key];
            if (controller) {
                controller.finalize();
            }
        }
        this.controllers = {};
    }
    /** Check if a redraw is needed */
    needsRedraw(opts = { clearRedrawFlags: false }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        return redraw;
    }
    /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */
    setNeedsUpdate(reason) {
        this._needsUpdate = this._needsUpdate || reason;
        this._needsRedraw = this._needsRedraw || reason;
    }
    /** Checks each viewport for transition updates */
    updateViewStates() {
        for (const viewId in this.controllers) {
            const controller = this.controllers[viewId];
            if (controller) {
                controller.updateTransition();
            }
        }
    }
    /** Get a set of viewports for a given width and height
     * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props
     * @param rect (object, optional) - filter the viewports
     *   + not provided - return all viewports
     *   + {x, y} - only return viewports that contain this pixel
     *   + {x, y, width, height} - only return viewports that overlap with this rectangle
     */
    getViewports(rect) {
        if (rect) {
            return this._viewports.filter(viewport => viewport.containsPixel(rect));
        }
        return this._viewports;
    }
    /** Get a map of all views */
    getViews() {
        const viewMap = {};
        this.views.forEach(view => {
            viewMap[view.id] = view;
        });
        return viewMap;
    }
    /** Resolves a viewId string to a View */
    getView(viewId) {
        return this.views.find(view => view.id === viewId);
    }
    /** Returns the viewState for a specific viewId. Matches the viewState by
      1. view.viewStateId
      2. view.id
      3. root viewState
      then applies the view's filter if any */
    getViewState(viewOrViewId) {
        const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;
        // Backward compatibility: view state for single view
        const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;
        return view ? view.filterViewState(viewState) : viewState;
    }
    getViewport(viewId) {
        return this._viewportMap[viewId];
    }
    /**
     * Unproject pixel coordinates on screen onto world coordinates,
     * (possibly [lon, lat]) on map.
     * - [x, y] => [lng, lat]
     * - [x, y, z] => [lng, lat, Z]
     * @param {Array} xyz -
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether origin is top left
     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
     */
    unproject(xyz, opts) {
        const viewports = this.getViewports();
        const pixel = { x: xyz[0], y: xyz[1] };
        for (let i = viewports.length - 1; i >= 0; --i) {
            const viewport = viewports[i];
            if (viewport.containsPixel(pixel)) {
                const p = xyz.slice();
                p[0] -= viewport.x;
                p[1] -= viewport.y;
                return viewport.unproject(p, opts);
            }
        }
        return null;
    }
    /** Update the manager with new Deck props */
    setProps(props) {
        if (props.views) {
            this._setViews(props.views);
        }
        if (props.viewState) {
            this._setViewState(props.viewState);
        }
        if ('width' in props || 'height' in props) {
            this._setSize(props.width, props.height);
        }
        // Important: avoid invoking _update() inside itself
        // Nested updates result in unexpected side effects inside _rebuildViewports()
        // when using auto control in pure-js
        if (!this._isUpdating) {
            this._update();
        }
    }
    //
    // PRIVATE METHODS
    //
    _update() {
        this._isUpdating = true;
        // Only rebuild viewports if the update flag is set
        if (this._needsUpdate) {
            this._needsUpdate = false;
            this._rebuildViewports();
        }
        // If viewport transition(s) are triggered during viewports update, controller(s)
        // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.
        if (this._needsUpdate) {
            this._needsUpdate = false;
            this._rebuildViewports();
        }
        this._isUpdating = false;
    }
    _setSize(width, height) {
        if (width !== this.width || height !== this.height) {
            this.width = width;
            this.height = height;
            this.setNeedsUpdate('Size changed');
        }
    }
    // Update the view descriptor list and set change flag if needed
    // Does not actually rebuild the `Viewport`s until `getViewports` is called
    _setViews(views) {
        views = (0,_utils_flatten_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(views, Boolean);
        const viewsChanged = this._diffViews(views, this.views);
        if (viewsChanged) {
            this.setNeedsUpdate('views changed');
        }
        this.views = views;
    }
    _setViewState(viewState) {
        if (viewState) {
            // depth = 3 when comparing viewStates: viewId.position.0
            const viewStateChanged = !(0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(viewState, this.viewState, 3);
            if (viewStateChanged) {
                this.setNeedsUpdate('viewState changed');
            }
            this.viewState = viewState;
        }
        else {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].warn('missing `viewState` or `initialViewState`')();
        }
    }
    _createController(view, props) {
        const Controller = props.type;
        const controller = new Controller({
            timeline: this.timeline,
            eventManager: this._eventManager,
            // Set an internal callback that calls the prop callback if provided
            onViewStateChange: this._eventCallbacks.onViewStateChange,
            onStateChange: this._eventCallbacks.onInteractionStateChange,
            makeViewport: viewState => this.getView(view.id)?.makeViewport({
                viewState,
                width: this.width,
                height: this.height
            })
        });
        return controller;
    }
    _updateController(view, viewState, viewport, controller) {
        const controllerProps = view.controller;
        if (controllerProps && viewport) {
            const resolvedProps = {
                ...viewState,
                ...controllerProps,
                id: view.id,
                x: viewport.x,
                y: viewport.y,
                width: viewport.width,
                height: viewport.height
            };
            // Create controller if not already existing or if the type of the
            // controller has changed.
            if (!controller || controller.constructor !== controllerProps.type) {
                controller = this._createController(view, resolvedProps);
            }
            if (controller) {
                controller.setProps(resolvedProps);
            }
            return controller;
        }
        return null;
    }
    // Rebuilds viewports from descriptors towards a certain window size
    _rebuildViewports() {
        const { views } = this;
        const oldControllers = this.controllers;
        this._viewports = [];
        this.controllers = {};
        let invalidateControllers = false;
        // Create controllers in reverse order, so that views on top receive events first
        for (let i = views.length; i--;) {
            const view = views[i];
            const viewState = this.getViewState(view);
            const viewport = view.makeViewport({ viewState, width: this.width, height: this.height });
            let oldController = oldControllers[view.id];
            const hasController = Boolean(view.controller);
            if (hasController && !oldController) {
                // When a new controller is added, invalidate all controllers below it so that
                // events are registered in the correct order
                invalidateControllers = true;
            }
            if ((invalidateControllers || !hasController) && oldController) {
                // Remove and reattach invalidated controller
                oldController.finalize();
                oldController = null;
            }
            // Update the controller
            this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);
            if (viewport) {
                this._viewports.unshift(viewport);
            }
        }
        // Remove unused controllers
        for (const id in oldControllers) {
            const oldController = oldControllers[id];
            if (oldController && !this.controllers[id]) {
                oldController.finalize();
            }
        }
        this._buildViewportMap();
    }
    _buildViewportMap() {
        // Build a view id to view index
        this._viewportMap = {};
        this._viewports.forEach(viewport => {
            if (viewport.id) {
                // TODO - issue warning if multiple viewports use same id
                this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;
            }
        });
    }
    // Check if viewport array has changed, returns true if any change
    // Note that descriptors can be the same
    _diffViews(newViews, oldViews) {
        if (newViews.length !== oldViews.length) {
            return true;
        }
        return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lib/widget-manager.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lib/widget-manager.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WidgetManager: () => (/* binding */ WidgetManager)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/deep-equal.js */ "./node_modules/@deck.gl/core/dist/utils/deep-equal.js");


const PLACEMENTS = {
    'top-left': { top: 0, left: 0 },
    'top-right': { top: 0, right: 0 },
    'bottom-left': { bottom: 0, left: 0 },
    'bottom-right': { bottom: 0, right: 0 },
    fill: { top: 0, left: 0, bottom: 0, right: 0 }
};
const DEFAULT_PLACEMENT = 'top-left';
const ROOT_CONTAINER_ID = '__root';
class WidgetManager {
    constructor({ deck, parentElement }) {
        /** Widgets added via the imperative API */
        this.defaultWidgets = [];
        /** Widgets received from the declarative API */
        this.widgets = [];
        /** Resolved widgets from both imperative and declarative APIs */
        this.resolvedWidgets = [];
        /** Mounted HTML containers */
        this.containers = {};
        /** Viewport provided to widget on redraw */
        this.lastViewports = {};
        this.deck = deck;
        this.parentElement = parentElement;
    }
    getWidgets() {
        return this.resolvedWidgets;
    }
    /** Declarative API to configure widgets */
    setProps(props) {
        if (props.widgets && !(0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_0__.deepEqual)(props.widgets, this.widgets, 1)) {
            this._setWidgets(props.widgets);
        }
    }
    finalize() {
        for (const widget of this.getWidgets()) {
            this._remove(widget);
        }
        this.defaultWidgets.length = 0;
        this.resolvedWidgets.length = 0;
        for (const id in this.containers) {
            this.containers[id].remove();
        }
    }
    /** Imperative API. Widgets added this way are not affected by the declarative prop. */
    addDefault(widget) {
        if (!this.defaultWidgets.find(w => w.id === widget.id)) {
            this._add(widget);
            this.defaultWidgets.push(widget);
            // Update widget list
            this._setWidgets(this.widgets);
        }
    }
    /** Resolve widgets from the declarative prop */
    _setWidgets(nextWidgets) {
        const oldWidgetMap = {};
        for (const widget of this.resolvedWidgets) {
            oldWidgetMap[widget.id] = widget;
        }
        // Clear and rebuild the list
        this.resolvedWidgets.length = 0;
        // Add all default widgets
        for (const widget of this.defaultWidgets) {
            oldWidgetMap[widget.id] = null;
            this.resolvedWidgets.push(widget);
        }
        for (let widget of nextWidgets) {
            const oldWidget = oldWidgetMap[widget.id];
            if (!oldWidget) {
                // Widget is new
                this._add(widget);
            }
            else if (
            // Widget placement changed
            oldWidget.viewId !== widget.viewId ||
                oldWidget.placement !== widget.placement) {
                this._remove(oldWidget);
                this._add(widget);
            }
            else if (widget !== oldWidget) {
                // Widget props changed
                oldWidget.setProps(widget.props);
                widget = oldWidget;
            }
            // mark as matched
            oldWidgetMap[widget.id] = null;
            this.resolvedWidgets.push(widget);
        }
        for (const id in oldWidgetMap) {
            const oldWidget = oldWidgetMap[id];
            if (oldWidget) {
                // No longer exists
                this._remove(oldWidget);
            }
        }
        this.widgets = nextWidgets;
    }
    _add(widget) {
        const { viewId = null, placement = DEFAULT_PLACEMENT } = widget;
        const element = widget.onAdd({ deck: this.deck, viewId });
        if (element) {
            this._getContainer(viewId, placement).append(element);
        }
        widget._element = element;
    }
    _remove(widget) {
        widget.onRemove();
        if (widget._element) {
            widget._element.remove();
        }
        widget._element = undefined;
    }
    /* global document */
    _getContainer(viewId, placement) {
        const containerId = viewId || ROOT_CONTAINER_ID;
        let viewContainer = this.containers[containerId];
        if (!viewContainer) {
            viewContainer = document.createElement('div');
            viewContainer.style.pointerEvents = 'none';
            viewContainer.style.position = 'absolute';
            viewContainer.style.overflow = 'hidden';
            this.parentElement?.append(viewContainer);
            this.containers[containerId] = viewContainer;
        }
        let container = viewContainer.querySelector(`.${placement}`);
        if (!container) {
            container = document.createElement('div');
            container.className = placement;
            container.style.position = 'absolute';
            container.style.zIndex = '2';
            Object.assign(container.style, PLACEMENTS[placement]);
            viewContainer.append(container);
        }
        return container;
    }
    _updateContainers() {
        const canvasWidth = this.deck.width;
        const canvasHeight = this.deck.height;
        for (const id in this.containers) {
            const viewport = this.lastViewports[id] || null;
            const visible = id === ROOT_CONTAINER_ID || viewport;
            const container = this.containers[id];
            if (visible) {
                container.style.display = 'block';
                // Align the container with the view
                container.style.left = `${viewport ? viewport.x : 0}px`;
                container.style.top = `${viewport ? viewport.y : 0}px`;
                container.style.width = `${viewport ? viewport.width : canvasWidth}px`;
                container.style.height = `${viewport ? viewport.height : canvasHeight}px`;
            }
            else {
                container.style.display = 'none';
            }
        }
    }
    onRedraw({ viewports, layers }) {
        const viewportsById = viewports.reduce((acc, v) => {
            acc[v.id] = v;
            return acc;
        }, {});
        const { lastViewports } = this;
        for (const widget of this.getWidgets()) {
            const { viewId } = widget;
            if (viewId) {
                // Attached to a specific view
                const viewport = viewportsById[viewId];
                if (viewport) {
                    if (widget.onViewportChange && !viewport.equals(lastViewports[viewId])) {
                        widget.onViewportChange(viewport);
                    }
                    widget.onRedraw?.({ viewports: [viewport], layers });
                }
            }
            else {
                // Not attached to a specific view
                if (widget.onViewportChange) {
                    for (const viewport of viewports) {
                        // eslint-disable-next-line max-depth
                        if (!viewport.equals(lastViewports[viewport.id])) {
                            widget.onViewportChange(viewport);
                        }
                    }
                }
                widget.onRedraw?.({ viewports, layers });
            }
        }
        this.lastViewports = viewportsById;
        this._updateContainers();
    }
    onHover(info, event) {
        for (const widget of this.getWidgets()) {
            const { viewId } = widget;
            if (!viewId || viewId === info.viewport?.id) {
                widget.onHover?.(info, event);
            }
        }
    }
    onEvent(info, event) {
        const eventOptions = _constants_js__WEBPACK_IMPORTED_MODULE_1__.EVENTS[event.type];
        if (!eventOptions) {
            return;
        }
        for (const widget of this.getWidgets()) {
            const { viewId } = widget;
            if (!viewId || viewId === info.viewport?.id) {
                widget[eventOptions.handler]?.(info, event);
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lifecycle/component-state.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lifecycle/component-state.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ComponentState)
/* harmony export */ });
/* harmony import */ var _utils_iterable_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/iterable-utils.js */ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


const EMPTY_PROPS = Object.freeze({});
class ComponentState {
    constructor(component) {
        this.component = component;
        this.asyncProps = {}; // Prop values that the layer sees
        this.onAsyncPropUpdated = () => { };
        this.oldProps = null; // Last props before update
        this.oldAsyncProps = null; // Last props before update, with async values copied.
    }
    finalize() {
        for (const propName in this.asyncProps) {
            const asyncProp = this.asyncProps[propName];
            if (asyncProp && asyncProp.type && asyncProp.type.release) {
                // Release any resources created by transforms
                asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);
            }
        }
        this.asyncProps = {};
        this.component = null;
        this.resetOldProps();
    }
    /* Layer-facing props API */
    getOldProps() {
        return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;
    }
    resetOldProps() {
        this.oldAsyncProps = null;
        this.oldProps = this.component ? this.component.props : null;
    }
    // Checks if a prop is overridden
    hasAsyncProp(propName) {
        return propName in this.asyncProps;
    }
    // Returns value of an overriden prop
    getAsyncProp(propName) {
        const asyncProp = this.asyncProps[propName];
        return asyncProp && asyncProp.resolvedValue;
    }
    isAsyncPropLoading(propName) {
        if (propName) {
            const asyncProp = this.asyncProps[propName];
            return Boolean(asyncProp &&
                asyncProp.pendingLoadCount > 0 &&
                asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);
        }
        for (const key in this.asyncProps) {
            if (this.isAsyncPropLoading(key)) {
                return true;
            }
        }
        return false;
    }
    // Without changing the original prop value, swap out the data resolution under the hood
    reloadAsyncProp(propName, value) {
        this._watchPromise(propName, Promise.resolve(value));
    }
    // Updates all async/overridden props (when new props come in)
    // Checks if urls have changed, starts loading, or removes override
    setAsyncProps(props) {
        this.component = props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMPONENT_SYMBOL] || this.component;
        // NOTE: prop param and default values are only support for testing
        const resolvedValues = props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_RESOLVED_SYMBOL] || {};
        const originalValues = props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_ORIGINAL_SYMBOL] || props;
        const defaultValues = props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_DEFAULTS_SYMBOL] || {};
        // TODO - use async props from the layer's prop types
        for (const propName in resolvedValues) {
            const value = resolvedValues[propName];
            this._createAsyncPropData(propName, defaultValues[propName]);
            this._updateAsyncProp(propName, value);
            // Use transformed value
            resolvedValues[propName] = this.getAsyncProp(propName);
        }
        for (const propName in originalValues) {
            const value = originalValues[propName];
            // Makes sure a record exists for this prop
            this._createAsyncPropData(propName, defaultValues[propName]);
            this._updateAsyncProp(propName, value);
        }
    }
    /* Placeholder methods for subclassing */
    _fetch(propName, url) {
        return null;
    }
    _onResolve(propName, value) { } // eslint-disable-line @typescript-eslint/no-empty-function
    _onError(propName, error) { } // eslint-disable-line @typescript-eslint/no-empty-function
    // Intercept strings (URLs) and Promises and activates loading and prop rewriting
    _updateAsyncProp(propName, value) {
        if (!this._didAsyncInputValueChange(propName, value)) {
            return;
        }
        // interpret value string as url and start a new load tracked by a promise
        if (typeof value === 'string') {
            value = this._fetch(propName, value);
        }
        // interprets promise and track the "loading"
        if (value instanceof Promise) {
            this._watchPromise(propName, value);
            return;
        }
        if ((0,_utils_iterable_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAsyncIterable)(value)) {
            this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises
            return;
        }
        // else, normal, non-async value. Just store value for now
        this._setPropValue(propName, value);
    }
    // Whenever async props are changing, we need to make a copy of oldProps
    // otherwise the prop rewriting will affect the value both in props and oldProps.
    // While the copy is relatively expensive, this only happens on load completion.
    _freezeAsyncOldProps() {
        if (!this.oldAsyncProps && this.oldProps) {
            // 1. inherit all synchronous props from oldProps
            // 2. reconfigure the async prop descriptors to fixed values
            this.oldAsyncProps = Object.create(this.oldProps);
            for (const propName in this.asyncProps) {
                Object.defineProperty(this.oldAsyncProps, propName, {
                    enumerable: true,
                    value: this.oldProps[propName]
                });
            }
        }
    }
    // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)
    _didAsyncInputValueChange(propName, value) {
        // @ts-ignore
        const asyncProp = this.asyncProps[propName];
        if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {
            return false;
        }
        asyncProp.lastValue = value;
        return true;
    }
    // Set normal, non-async value
    _setPropValue(propName, value) {
        // Save the current value before overwriting so that diffProps can access both
        this._freezeAsyncOldProps();
        const asyncProp = this.asyncProps[propName];
        if (asyncProp) {
            value = this._postProcessValue(asyncProp, value);
            asyncProp.resolvedValue = value;
            asyncProp.pendingLoadCount++;
            asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;
        }
    }
    // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously
    _setAsyncPropValue(propName, value, loadCount) {
        // Only update if loadCount is larger or equal to resolvedLoadCount
        // otherwise a more recent load has already completed
        const asyncProp = this.asyncProps[propName];
        if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {
            // Save the current value before overwriting so that diffProps can access both
            this._freezeAsyncOldProps();
            asyncProp.resolvedValue = value;
            asyncProp.resolvedLoadCount = loadCount;
            // Call callback to inform listener
            this.onAsyncPropUpdated(propName, value);
        }
    }
    // Tracks a promise, sets the prop when loaded, handles load count
    _watchPromise(propName, promise) {
        const asyncProp = this.asyncProps[propName];
        if (asyncProp) {
            asyncProp.pendingLoadCount++;
            const loadCount = asyncProp.pendingLoadCount;
            promise
                .then(data => {
                if (!this.component) {
                    // This component state has been finalized
                    return;
                }
                data = this._postProcessValue(asyncProp, data);
                this._setAsyncPropValue(propName, data, loadCount);
                this._onResolve(propName, data);
            })
                .catch(error => {
                this._onError(propName, error);
            });
        }
    }
    async _resolveAsyncIterable(propName, iterable) {
        if (propName !== 'data') {
            // we only support data as async iterable
            this._setPropValue(propName, iterable);
            return;
        }
        const asyncProp = this.asyncProps[propName];
        if (!asyncProp) {
            return;
        }
        asyncProp.pendingLoadCount++;
        const loadCount = asyncProp.pendingLoadCount;
        let data = [];
        let count = 0;
        for await (const chunk of iterable) {
            if (!this.component) {
                // This component state has been finalized
                return;
            }
            // @ts-expect-error (2339) dataTransform is not decared in base component props
            const { dataTransform } = this.component.props;
            if (dataTransform) {
                data = dataTransform(chunk, data);
            }
            else {
                data = data.concat(chunk);
            }
            // Used by the default _dataDiff function
            Object.defineProperty(data, '__diff', {
                enumerable: false,
                value: [{ startRow: count, endRow: data.length }]
            });
            count = data.length;
            this._setAsyncPropValue(propName, data, loadCount);
        }
        this._onResolve(propName, data);
    }
    // Give the app a chance to post process the loaded data
    _postProcessValue(asyncProp, value) {
        const propType = asyncProp.type;
        if (propType && this.component) {
            if (propType.release) {
                propType.release(asyncProp.resolvedValue, propType, this.component);
            }
            if (propType.transform) {
                return propType.transform(value, propType, this.component);
            }
        }
        return value;
    }
    // Creating an asyncProp record if needed
    _createAsyncPropData(propName, defaultValue) {
        const asyncProp = this.asyncProps[propName];
        if (!asyncProp) {
            const propTypes = this.component && this.component.props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROP_TYPES_SYMBOL];
            // assert(defaultValue !== undefined);
            this.asyncProps[propName] = {
                type: propTypes && propTypes[propName],
                lastValue: null,
                resolvedValue: defaultValue,
                pendingLoadCount: 0,
                resolvedLoadCount: 0
            };
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lifecycle/component.js":
/*!****************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lifecycle/component.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Component)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js");
/* harmony import */ var _create_props_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-props.js */ "./node_modules/@deck.gl/core/dist/lifecycle/create-props.js");


let counter = 0;
class Component {
    static { this.componentName = 'Component'; }
    static { this.defaultProps = {}; }
    constructor(...propObjects) {
        // Merge supplied props with default props and freeze them.
        /* eslint-disable prefer-spread */
        this.props = (0,_create_props_js__WEBPACK_IMPORTED_MODULE_0__.createProps)(this, propObjects);
        /* eslint-enable prefer-spread */
        this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle
        this.count = counter++; // Keep track of how many layer instances you are generating
    }
    // clone this layer with modified props
    clone(newProps) {
        const { props } = this;
        // Async props cannot be copied with Object.assign, copy them separately
        const asyncProps = {};
        // See async props definition in create-props.js
        for (const key in props[_constants_js__WEBPACK_IMPORTED_MODULE_1__.ASYNC_DEFAULTS_SYMBOL]) {
            if (key in props[_constants_js__WEBPACK_IMPORTED_MODULE_1__.ASYNC_RESOLVED_SYMBOL]) {
                asyncProps[key] = props[_constants_js__WEBPACK_IMPORTED_MODULE_1__.ASYNC_RESOLVED_SYMBOL][key];
            }
            else if (key in props[_constants_js__WEBPACK_IMPORTED_MODULE_1__.ASYNC_ORIGINAL_SYMBOL]) {
                asyncProps[key] = props[_constants_js__WEBPACK_IMPORTED_MODULE_1__.ASYNC_ORIGINAL_SYMBOL][key];
            }
        }
        // Some custom layer implementation may not support multiple arguments in the constructor
        // @ts-ignore
        return new this.constructor({ ...props, ...asyncProps, ...newProps });
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lifecycle/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ASYNC_DEFAULTS_SYMBOL: () => (/* binding */ ASYNC_DEFAULTS_SYMBOL),
/* harmony export */   ASYNC_ORIGINAL_SYMBOL: () => (/* binding */ ASYNC_ORIGINAL_SYMBOL),
/* harmony export */   ASYNC_RESOLVED_SYMBOL: () => (/* binding */ ASYNC_RESOLVED_SYMBOL),
/* harmony export */   COMPONENT_SYMBOL: () => (/* binding */ COMPONENT_SYMBOL),
/* harmony export */   DEPRECATED_PROPS_SYMBOL: () => (/* binding */ DEPRECATED_PROPS_SYMBOL),
/* harmony export */   LIFECYCLE: () => (/* binding */ LIFECYCLE),
/* harmony export */   PROP_TYPES_SYMBOL: () => (/* binding */ PROP_TYPES_SYMBOL)
/* harmony export */ });
const LIFECYCLE = {
    NO_STATE: 'Awaiting state',
    MATCHED: 'Matched. State transferred from previous layer',
    INITIALIZED: 'Initialized',
    AWAITING_GC: 'Discarded. Awaiting garbage collection',
    AWAITING_FINALIZATION: 'No longer matched. Awaiting garbage collection',
    FINALIZED: 'Finalized! Awaiting garbage collection'
};
/* Secret props keys */
// Symbols are non-enumerable by default, does not show in for...in or Object.keys
// but are copied with Object.assign ¯\_(ツ)_/¯
// Supported everywhere except IE11, can be polyfilled with core-js
const COMPONENT_SYMBOL = Symbol.for('component');
const PROP_TYPES_SYMBOL = Symbol.for('propTypes');
const DEPRECATED_PROPS_SYMBOL = Symbol.for('deprecatedProps');
const ASYNC_DEFAULTS_SYMBOL = Symbol.for('asyncPropDefaults');
const ASYNC_ORIGINAL_SYMBOL = Symbol.for('asyncPropOriginal');
const ASYNC_RESOLVED_SYMBOL = Symbol.for('asyncPropResolved');


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lifecycle/create-props.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lifecycle/create-props.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createProps: () => (/* binding */ createProps)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_iterable_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterable-utils.js */ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js");
/* harmony import */ var _prop_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prop-types.js */ "./node_modules/@deck.gl/core/dist/lifecycle/prop-types.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js");




// Create a property object
function createProps(component, propObjects) {
    // Resolve extension value
    let extensions;
    for (let i = propObjects.length - 1; i >= 0; i--) {
        const props = propObjects[i];
        if ('extensions' in props) {
            // @ts-expect-error TS(2339) extensions not defined
            extensions = props.extensions;
        }
    }
    // Create a new prop object with empty default props object
    const propsPrototype = getPropsPrototype(component.constructor, extensions);
    // The true default props object will be found later
    const propsInstance = Object.create(propsPrototype);
    // Props need a back pointer to the owning component
    propsInstance[_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMPONENT_SYMBOL] = component;
    // The supplied (original) values for those async props that are set to url strings or Promises.
    // In this case, the actual (i.e. resolved) values are looked up from component.internalState
    propsInstance[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_ORIGINAL_SYMBOL] = {};
    // Note: the actual (resolved) values for props that are NOT set to urls or Promises.
    // in this case the values are served directly from this map
    propsInstance[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_RESOLVED_SYMBOL] = {};
    // "Copy" all sync props
    for (let i = 0; i < propObjects.length; ++i) {
        const props = propObjects[i];
        // Do not use Object.assign here to avoid Symbols in props overwriting our private fields
        // This might happen if one of the arguments is another props instance
        for (const key in props) {
            propsInstance[key] = props[key];
        }
    }
    // Props must be immutable
    Object.freeze(propsInstance);
    return propsInstance;
}
const MergedDefaultPropsCacheKey = '_mergedDefaultProps';
// Return precalculated defaultProps and propType objects if available
// build them if needed
function getPropsPrototype(componentClass, extensions) {
    // A string that uniquely identifies the extensions involved
    let cacheKey = MergedDefaultPropsCacheKey;
    if (extensions) {
        for (const extension of extensions) {
            const ExtensionClass = extension.constructor;
            if (ExtensionClass) {
                cacheKey += `:${ExtensionClass.extensionName || ExtensionClass.name}`;
            }
        }
    }
    const defaultProps = getOwnProperty(componentClass, cacheKey);
    if (!defaultProps) {
        return (componentClass[cacheKey] = createPropsPrototypeAndTypes(componentClass, extensions || []));
    }
    return defaultProps;
}
// Build defaultProps and propType objects by walking component prototype chain
function createPropsPrototypeAndTypes(componentClass, extensions) {
    const parent = componentClass.prototype;
    if (!parent) {
        return null;
    }
    const parentClass = Object.getPrototypeOf(componentClass);
    const parentDefaultProps = getPropsPrototype(parentClass);
    // Parse propTypes from Component.defaultProps
    const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};
    const componentPropDefs = (0,_prop_types_js__WEBPACK_IMPORTED_MODULE_1__.parsePropTypes)(componentDefaultProps);
    // Merged default props object. Order: parent, self, extensions
    const defaultProps = Object.assign(Object.create(null), parentDefaultProps, componentPropDefs.defaultProps);
    // Merged prop type definitions. Order: parent, self, extensions
    const propTypes = Object.assign(Object.create(null), parentDefaultProps?.[_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROP_TYPES_SYMBOL], componentPropDefs.propTypes);
    // Merged deprecation list. Order: parent, self, extensions
    const deprecatedProps = Object.assign(Object.create(null), parentDefaultProps?.[_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEPRECATED_PROPS_SYMBOL], componentPropDefs.deprecatedProps);
    for (const extension of extensions) {
        const extensionDefaultProps = getPropsPrototype(extension.constructor);
        if (extensionDefaultProps) {
            Object.assign(defaultProps, extensionDefaultProps);
            Object.assign(propTypes, extensionDefaultProps[_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROP_TYPES_SYMBOL]);
            Object.assign(deprecatedProps, extensionDefaultProps[_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEPRECATED_PROPS_SYMBOL]);
        }
    }
    // Create any necessary property descriptors and create the default prop object
    // Assign merged default props
    createPropsPrototype(defaultProps, componentClass);
    // Add getters/setters for async props
    addAsyncPropsToPropPrototype(defaultProps, propTypes);
    // Add setters for deprecated props
    addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);
    // Store the precalculated props
    defaultProps[_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROP_TYPES_SYMBOL] = propTypes;
    defaultProps[_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEPRECATED_PROPS_SYMBOL] = deprecatedProps;
    // Backwards compatibility
    // TODO: remove access of hidden property from the rest of the code base
    if (extensions.length === 0 && !hasOwnProperty(componentClass, '_propTypes')) {
        componentClass._propTypes = propTypes;
    }
    return defaultProps;
}
// Builds a pre-merged default props object that component props can inherit from
function createPropsPrototype(defaultProps, componentClass) {
    // Avoid freezing `id` prop
    const id = getComponentName(componentClass);
    Object.defineProperties(defaultProps, {
        // `id` is treated specially because layer might need to override it
        id: {
            writable: true,
            value: id
        }
    });
}
function addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {
    for (const propName in deprecatedProps) {
        /* eslint-disable accessor-pairs */
        Object.defineProperty(defaultProps, propName, {
            enumerable: false,
            set(newValue) {
                const nameStr = `${this.id}: ${propName}`;
                for (const newPropName of deprecatedProps[propName]) {
                    if (!hasOwnProperty(this, newPropName)) {
                        this[newPropName] = newValue;
                    }
                }
                _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].deprecated(nameStr, deprecatedProps[propName].join('/'))();
            }
        });
        /* eslint-enable accessor-pairs */
    }
}
// Create descriptors for overridable props
function addAsyncPropsToPropPrototype(defaultProps, propTypes) {
    const defaultValues = {};
    const descriptors = {};
    // Move async props into shadow values
    for (const propName in propTypes) {
        const propType = propTypes[propName];
        const { name, value } = propType;
        // Note: async is ES7 keyword, can't destructure
        if (propType.async) {
            defaultValues[name] = value;
            descriptors[name] = getDescriptorForAsyncProp(name);
        }
    }
    // Default "resolved" values for async props, returned if value not yet resolved/set.
    defaultProps[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_DEFAULTS_SYMBOL] = defaultValues;
    // Shadowed object, just to make sure "early indexing" into the instance does not fail
    defaultProps[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_ORIGINAL_SYMBOL] = {};
    Object.defineProperties(defaultProps, descriptors);
}
// Helper: Configures getter and setter for one async prop
function getDescriptorForAsyncProp(name) {
    return {
        enumerable: true,
        // Save the provided value for async props in a special map
        set(newValue) {
            if (typeof newValue === 'string' ||
                newValue instanceof Promise ||
                (0,_utils_iterable_utils_js__WEBPACK_IMPORTED_MODULE_3__.isAsyncIterable)(newValue)) {
                this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_ORIGINAL_SYMBOL][name] = newValue;
            }
            else {
                this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_RESOLVED_SYMBOL][name] = newValue;
            }
        },
        // Only the component's state knows the true value of async prop
        get() {
            if (this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_RESOLVED_SYMBOL]) {
                // Prop value isn't async, so just return it
                if (name in this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_RESOLVED_SYMBOL]) {
                    const value = this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_RESOLVED_SYMBOL][name];
                    return value || this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_DEFAULTS_SYMBOL][name];
                }
                if (name in this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_ORIGINAL_SYMBOL]) {
                    // It's an async prop value: look into component state
                    const state = this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMPONENT_SYMBOL] && this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMPONENT_SYMBOL].internalState;
                    if (state && state.hasAsyncProp(name)) {
                        return state.getAsyncProp(name) || this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_DEFAULTS_SYMBOL][name];
                    }
                }
            }
            // the prop is not supplied, or
            // component not yet initialized/matched, return the component's default value for the prop
            return this[_constants_js__WEBPACK_IMPORTED_MODULE_0__.ASYNC_DEFAULTS_SYMBOL][name];
        }
    };
}
// HELPER METHODS
function hasOwnProperty(object, prop) {
    return Object.prototype.hasOwnProperty.call(object, prop);
}
// Constructors have their super class constructors as prototypes
function getOwnProperty(object, prop) {
    return hasOwnProperty(object, prop) && object[prop];
}
function getComponentName(componentClass) {
    const componentName = componentClass.componentName;
    if (!componentName) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].warn(`${componentClass.name}.componentName not specified`)();
    }
    return componentName || componentClass.name;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lifecycle/prop-types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lifecycle/prop-types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parsePropTypes: () => (/* binding */ parsePropTypes)
/* harmony export */ });
/* harmony import */ var _utils_texture_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/texture.js */ "./node_modules/@deck.gl/core/dist/utils/texture.js");
/* harmony import */ var _utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/deep-equal.js */ "./node_modules/@deck.gl/core/dist/utils/deep-equal.js");


const TYPE_DEFINITIONS = {
    boolean: {
        validate(value, propType) {
            return true;
        },
        equal(value1, value2, propType) {
            return Boolean(value1) === Boolean(value2);
        }
    },
    number: {
        validate(value, propType) {
            return (Number.isFinite(value) &&
                (!('max' in propType) || value <= propType.max) &&
                (!('min' in propType) || value >= propType.min));
        }
    },
    color: {
        validate(value, propType) {
            return ((propType.optional && !value) ||
                (isArray(value) && (value.length === 3 || value.length === 4)));
        },
        equal(value1, value2, propType) {
            return (0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_0__.deepEqual)(value1, value2, 1);
        }
    },
    accessor: {
        validate(value, propType) {
            const valueType = getTypeOf(value);
            return valueType === 'function' || valueType === getTypeOf(propType.value);
        },
        equal(value1, value2, propType) {
            if (typeof value2 === 'function') {
                return true;
            }
            return (0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_0__.deepEqual)(value1, value2, 1);
        }
    },
    array: {
        validate(value, propType) {
            return (propType.optional && !value) || isArray(value);
        },
        equal(value1, value2, propType) {
            const { compare } = propType;
            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
            return compare ? (0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_0__.deepEqual)(value1, value2, depth) : value1 === value2;
        }
    },
    object: {
        equal(value1, value2, propType) {
            if (propType.ignore) {
                return true;
            }
            const { compare } = propType;
            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
            return compare ? (0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_0__.deepEqual)(value1, value2, depth) : value1 === value2;
        }
    },
    function: {
        validate(value, propType) {
            return (propType.optional && !value) || typeof value === 'function';
        },
        equal(value1, value2, propType) {
            // Backward compatibility - {compare: true} and {ignore: false} are equivalent
            const shouldIgnore = !propType.compare && propType.ignore !== false;
            return shouldIgnore || value1 === value2;
        }
    },
    data: {
        transform: (value, propType, component) => {
            if (!value) {
                return value;
            }
            const { dataTransform } = component.props;
            if (dataTransform) {
                return dataTransform(value);
            }
            // Detect loaders.gl v4 table format
            if (typeof value.shape === 'string' &&
                value.shape.endsWith('-table') &&
                Array.isArray(value.data)) {
                return value.data;
            }
            return value;
        }
    },
    image: {
        transform: (value, propType, component) => {
            const context = component.context;
            if (!context || !context.device) {
                return null;
            }
            return (0,_utils_texture_js__WEBPACK_IMPORTED_MODULE_1__.createTexture)(component.id, context.device, value, {
                ...propType.parameters,
                ...component.props.textureParameters
            });
        },
        release: (value, propType, component) => {
            (0,_utils_texture_js__WEBPACK_IMPORTED_MODULE_1__.destroyTexture)(component.id, value);
        }
    }
};
function parsePropTypes(propDefs) {
    const propTypes = {};
    const defaultProps = {};
    const deprecatedProps = {};
    for (const [propName, propDef] of Object.entries(propDefs)) {
        const deprecated = propDef?.deprecatedFor;
        if (deprecated) {
            deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];
        }
        else {
            const propType = parsePropType(propName, propDef);
            propTypes[propName] = propType;
            defaultProps[propName] = propType.value;
        }
    }
    return { propTypes, defaultProps, deprecatedProps };
}
// Parses one property definition entry. Either contains:
// * a valid prop type object ({type, ...})
// * or just a default value, in which case type and name inference is used
function parsePropType(name, propDef) {
    switch (getTypeOf(propDef)) {
        case 'object':
            return normalizePropDefinition(name, propDef);
        case 'array':
            return normalizePropDefinition(name, { type: 'array', value: propDef, compare: false });
        case 'boolean':
            return normalizePropDefinition(name, { type: 'boolean', value: propDef });
        case 'number':
            return normalizePropDefinition(name, { type: 'number', value: propDef });
        case 'function':
            // return guessFunctionType(name, propDef);
            return normalizePropDefinition(name, { type: 'function', value: propDef, compare: true });
        default:
            return { name, type: 'unknown', value: propDef };
    }
}
function normalizePropDefinition(name, propDef) {
    if (!('type' in propDef)) {
        if (!('value' in propDef)) {
            // If no type and value this object is likely the value
            return { name, type: 'object', value: propDef };
        }
        return { name, type: getTypeOf(propDef.value), ...propDef };
    }
    return { name, ...TYPE_DEFINITIONS[propDef.type], ...propDef };
}
function isArray(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value);
}
// improved version of javascript typeof that can distinguish arrays and null values
function getTypeOf(value) {
    if (isArray(value)) {
        return 'array';
    }
    if (value === null) {
        return 'null';
    }
    return typeof value;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/lifecycle/props.js":
/*!************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/lifecycle/props.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareProps: () => (/* binding */ compareProps),
/* harmony export */   diffProps: () => (/* binding */ diffProps),
/* harmony export */   validateProps: () => (/* binding */ validateProps)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@deck.gl/core/dist/lifecycle/constants.js");

function validateProps(props) {
    const propTypes = props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROP_TYPES_SYMBOL];
    for (const propName in propTypes) {
        const propType = propTypes[propName];
        const { validate } = propType;
        if (validate && !validate(props[propName], propType)) {
            throw new Error(`Invalid prop ${propName}: ${props[propName]}`);
        }
    }
}
// Returns an object with "change flags", either false or strings indicating reason for change
function diffProps(props, oldProps) {
    // First check if any props have changed (ignore props that will be examined separately)
    const propsChangedReason = compareProps({
        newProps: props,
        oldProps,
        propTypes: props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROP_TYPES_SYMBOL],
        ignoreProps: { data: null, updateTriggers: null, extensions: null, transitions: null }
    });
    // Now check if any data related props have changed
    const dataChangedReason = diffDataProps(props, oldProps);
    // Check update triggers to determine if any attributes need regeneration
    // Note - if data has changed, all attributes will need regeneration, so skip this step
    let updateTriggersChangedReason = false;
    if (!dataChangedReason) {
        updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);
    }
    return {
        dataChanged: dataChangedReason,
        propsChanged: propsChangedReason,
        updateTriggersChanged: updateTriggersChangedReason,
        extensionsChanged: diffExtensions(props, oldProps),
        transitionsChanged: diffTransitions(props, oldProps)
    };
}
function diffTransitions(props, oldProps) {
    if (!props.transitions) {
        return false;
    }
    const result = {};
    const propTypes = props[_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROP_TYPES_SYMBOL];
    let changed = false;
    for (const key in props.transitions) {
        const propType = propTypes[key];
        const type = propType && propType.type;
        const isTransitionable = type === 'number' || type === 'color' || type === 'array';
        if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {
            result[key] = true;
            changed = true;
        }
    }
    return changed ? result : false;
}
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * @param {Object} opt.oldProps - object with old key/value pairs
 * @param {Object} opt.newProps - object with new key/value pairs
 * @param {Object} opt.ignoreProps={} - object, keys that should not be compared
 * @returns {null|String} - null when values of all keys are strictly equal.
 *   if unequal, returns a string explaining what changed.
 */
/* eslint-disable max-statements, max-depth, complexity */
/*
 * Note: for better performance, this function assumes that both oldProps and newProps
   inherit the same prototype (defaultProps). That is, if neither object contains own
   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.
 */
function compareProps({ newProps, oldProps, ignoreProps = {}, propTypes = {}, triggerName = 'props' }) {
    // shallow equality => deep equality
    if (oldProps === newProps) {
        return false;
    }
    // TODO - do we need these checks? Should never happen...
    if (typeof newProps !== 'object' || newProps === null) {
        return `${triggerName} changed shallowly`;
    }
    if (typeof oldProps !== 'object' || oldProps === null) {
        return `${triggerName} changed shallowly`;
    }
    // Compare explicitly defined new props against old/default values
    for (const key of Object.keys(newProps)) {
        if (!(key in ignoreProps)) {
            if (!(key in oldProps)) {
                return `${triggerName}.${key} added`;
            }
            const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
            if (changed) {
                return `${triggerName}.${key} ${changed}`;
            }
        }
    }
    // Test if any old props have been dropped
    for (const key of Object.keys(oldProps)) {
        if (!(key in ignoreProps)) {
            if (!(key in newProps)) {
                return `${triggerName}.${key} dropped`;
            }
            if (!Object.hasOwnProperty.call(newProps, key)) {
                // Compare dropped old prop against default value
                const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
                if (changed) {
                    return `${triggerName}.${key} ${changed}`;
                }
            }
        }
    }
    return false;
}
/* eslint-enable max-statements, max-depth, complexity */
// HELPERS
function comparePropValues(newProp, oldProp, propType) {
    // If prop type has an equal function, invoke it
    let equal = propType && propType.equal;
    if (equal && !equal(newProp, oldProp, propType)) {
        return 'changed deeply';
    }
    if (!equal) {
        // If object has an equals function, invoke it
        equal = newProp && oldProp && newProp.equals;
        if (equal && !equal.call(newProp, oldProp)) {
            return 'changed deeply';
        }
    }
    if (!equal && oldProp !== newProp) {
        return 'changed shallowly';
    }
    return null;
}
// The comparison of the data prop requires special handling
// the dataComparator should be used if supplied
function diffDataProps(props, oldProps) {
    if (oldProps === null) {
        return 'oldProps is null, initial diff';
    }
    let dataChanged = false;
    // Support optional app defined comparison of data
    const { dataComparator, _dataDiff } = props;
    if (dataComparator) {
        if (!dataComparator(props.data, oldProps.data)) {
            dataChanged = 'Data comparator detected a change';
        }
        // Otherwise, do a shallow equal on props
    }
    else if (props.data !== oldProps.data) {
        dataChanged = 'A new data container was supplied';
    }
    if (dataChanged && _dataDiff) {
        dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;
    }
    return dataChanged;
}
// Checks if any update triggers have changed
// also calls callback to invalidate attributes accordingly.
function diffUpdateTriggers(props, oldProps) {
    if (oldProps === null) {
        return { all: true };
    }
    // If the 'all' updateTrigger fires, ignore testing others
    if ('all' in props.updateTriggers) {
        const diffReason = diffUpdateTrigger(props, oldProps, 'all');
        if (diffReason) {
            return { all: true };
        }
    }
    const reason = {};
    let changed = false;
    // If the 'all' updateTrigger didn't fire, need to check all others
    for (const triggerName in props.updateTriggers) {
        if (triggerName !== 'all') {
            const diffReason = diffUpdateTrigger(props, oldProps, triggerName);
            if (diffReason) {
                reason[triggerName] = true;
                changed = true;
            }
        }
    }
    return changed ? reason : false;
}
// Returns true if any extensions have changed
function diffExtensions(props, oldProps) {
    if (oldProps === null) {
        return true;
    }
    const oldExtensions = oldProps.extensions;
    const { extensions } = props;
    if (extensions === oldExtensions) {
        return false;
    }
    if (!oldExtensions || !extensions) {
        return true;
    }
    if (extensions.length !== oldExtensions.length) {
        return true;
    }
    for (let i = 0; i < extensions.length; i++) {
        if (!extensions[i].equals(oldExtensions[i])) {
            return true;
        }
    }
    return false;
}
function diffUpdateTrigger(props, oldProps, triggerName) {
    let newTriggers = props.updateTriggers[triggerName];
    newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;
    let oldTriggers = oldProps.updateTriggers[triggerName];
    oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;
    const diffReason = compareProps({
        oldProps: oldTriggers,
        newProps: newTriggers,
        triggerName
    });
    return diffReason;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/passes/draw-layers-pass.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/passes/draw-layers-pass.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DrawLayersPass)
/* harmony export */ });
/* harmony import */ var _layers_pass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layers-pass.js */ "./node_modules/@deck.gl/core/dist/passes/layers-pass.js");

class DrawLayersPass extends _layers_pass_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    shouldDrawLayer(layer) {
        const { operation } = layer.props;
        return operation.includes('draw') || operation.includes('terrain');
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/passes/layers-pass.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/passes/layers-pass.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayersPass),
/* harmony export */   layerIndexResolver: () => (/* binding */ layerIndexResolver)
/* harmony export */ });
/* harmony import */ var _pass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pass.js */ "./node_modules/@deck.gl/core/dist/passes/pass.js");

/** A Pass that renders all layers */
class LayersPass extends _pass_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this._lastRenderIndex = -1;
    }
    render(options) {
        // @ts-expect-error TODO - assuming WebGL context
        const [width, height] = this.device.canvasContext.getDrawingBufferSize();
        // Explicitly specify clearColor and clearDepth, overriding render pass defaults.
        const clearCanvas = options.clearCanvas ?? true;
        const clearColor = options.clearColor ?? (clearCanvas ? [0, 0, 0, 0] : false);
        const clearDepth = clearCanvas ? 1 : false;
        const clearStencil = clearCanvas ? 0 : false;
        const colorMask = options.colorMask ?? 0xf;
        const parameters = { viewport: [0, 0, width, height] };
        if (options.colorMask) {
            parameters.colorMask = colorMask;
        }
        if (options.scissorRect) {
            parameters.scissorRect = options.scissorRect;
        }
        const renderPass = this.device.beginRenderPass({
            framebuffer: options.target,
            parameters,
            clearColor,
            clearDepth,
            clearStencil
        });
        try {
            return this._drawLayers(renderPass, options);
        }
        finally {
            renderPass.end();
        }
    }
    /** Draw a list of layers in a list of viewports */
    _drawLayers(renderPass, options) {
        const { target, moduleParameters, viewports, views, onViewportActive, clearStack = true } = options;
        options.pass = options.pass || 'unknown';
        if (clearStack) {
            this._lastRenderIndex = -1;
        }
        const renderStats = [];
        for (const viewport of viewports) {
            const view = views && views[viewport.id];
            // Update context to point to this viewport
            onViewportActive?.(viewport);
            const drawLayerParams = this._getDrawLayerParams(viewport, options);
            // render this viewport
            const subViewports = viewport.subViewports || [viewport];
            for (const subViewport of subViewports) {
                const stats = this._drawLayersInViewport(renderPass, {
                    target,
                    moduleParameters,
                    viewport: subViewport,
                    view,
                    pass: options.pass,
                    layers: options.layers
                }, drawLayerParams);
                renderStats.push(stats);
            }
        }
        return renderStats;
    }
    // When a viewport contains multiple subviewports (e.g. repeated web mercator map),
    // this is only done once for the parent viewport
    /* Resolve the parameters needed to draw each layer */
    _getDrawLayerParams(viewport, { layers, pass, isPicking = false, layerFilter, cullRect, effects, moduleParameters }, 
    /** Internal flag, true if only used to determine whether each layer should be drawn */
    evaluateShouldDrawOnly = false) {
        const drawLayerParams = [];
        const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);
        const drawContext = {
            layer: layers[0],
            viewport,
            isPicking,
            renderPass: pass,
            cullRect
        };
        const layerFilterCache = {};
        for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {
            const layer = layers[layerIndex];
            // Check if we should draw layer
            const shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);
            const layerParam = {
                shouldDrawLayer
            };
            if (shouldDrawLayer && !evaluateShouldDrawOnly) {
                // This is the "logical" index for ordering this layer in the stack
                // used to calculate polygon offsets
                // It can be the same as another layer
                layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);
                layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);
                layerParam.layerParameters = {
                    ...layer.context.deck?.props.parameters,
                    ...this.getLayerParameters(layer, layerIndex, viewport)
                };
            }
            drawLayerParams[layerIndex] = layerParam;
        }
        return drawLayerParams;
    }
    // Draws a list of layers in one viewport
    // TODO - when picking we could completely skip rendering viewports that dont
    // intersect with the picking rect
    /* eslint-disable max-depth, max-statements */
    _drawLayersInViewport(renderPass, { layers, moduleParameters: globalModuleParameters, pass, target, viewport, view }, drawLayerParams) {
        const glViewport = getGLViewport(this.device, {
            moduleParameters: globalModuleParameters,
            target,
            viewport
        });
        // TODO v9 - remove WebGL specific logic
        if (view && view.props.clear) {
            const clearOpts = view.props.clear === true ? { color: true, depth: true } : view.props.clear;
            this.device.withParametersWebGL({
                scissorTest: true,
                scissor: glViewport
            }, () => this.device.clearWebGL(clearOpts));
        }
        // render layers in normal colors
        const renderStatus = {
            totalCount: layers.length,
            visibleCount: 0,
            compositeCount: 0,
            pickableCount: 0
        };
        renderPass.setParameters({ viewport: glViewport });
        // render layers in normal colors
        for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {
            const layer = layers[layerIndex];
            const { shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters } = drawLayerParams[layerIndex];
            // Calculate stats
            if (shouldDrawLayer && layer.props.pickable) {
                renderStatus.pickableCount++;
            }
            if (layer.isComposite) {
                renderStatus.compositeCount++;
            }
            else if (shouldDrawLayer) {
                // Draw the layer
                renderStatus.visibleCount++;
                this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);
                // overwrite layer.context.viewport with the sub viewport
                moduleParameters.viewport = viewport;
                // TODO v9 - we are sending renderPass both as a parameter and through the context.
                // Long-term, it is likely better not to have user defined layer methods have to access
                // the "global" layer context.
                layer.context.renderPass = renderPass;
                try {
                    layer._drawLayer({
                        renderPass,
                        moduleParameters,
                        uniforms: { layerIndex: layerRenderIndex },
                        parameters: layerParameters
                    });
                }
                catch (err) {
                    layer.raiseError(err, `drawing ${layer} to ${pass}`);
                }
            }
        }
        return renderStatus;
    }
    /* eslint-enable max-depth, max-statements */
    /* Methods for subclass overrides */
    shouldDrawLayer(layer) {
        return true;
    }
    getModuleParameters(layer, effects) {
        return null;
    }
    getLayerParameters(layer, layerIndex, viewport) {
        return layer.props.parameters;
    }
    /* Private */
    _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {
        const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);
        if (!shouldDrawLayer) {
            return false;
        }
        drawContext.layer = layer;
        let parent = layer.parent;
        while (parent) {
            // @ts-ignore
            if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {
                return false;
            }
            drawContext.layer = parent;
            parent = parent.parent;
        }
        if (layerFilter) {
            const rootLayerId = drawContext.layer.id;
            if (!(rootLayerId in layerFilterCache)) {
                layerFilterCache[rootLayerId] = layerFilter(drawContext);
            }
            if (!layerFilterCache[rootLayerId]) {
                return false;
            }
        }
        // If a layer is drawn, update its viewportChanged flag
        layer.activateViewport(drawContext.viewport);
        return true;
    }
    _getModuleParameters(layer, effects, pass, overrides) {
        // @ts-expect-error TODO - assuming WebGL context
        const devicePixelRatio = this.device.canvasContext.cssToDeviceRatio();
        const moduleParameters = Object.assign(Object.create(layer.internalState?.propsInTransition || layer.props), {
            autoWrapLongitude: layer.wrapLongitude,
            viewport: layer.context.viewport,
            mousePosition: layer.context.mousePosition,
            picking: {
                isActive: 0
            },
            devicePixelRatio
        });
        if (effects) {
            for (const effect of effects) {
                Object.assign(moduleParameters, effect.getModuleParameters?.(layer));
            }
        }
        return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);
    }
}
// If the _index prop is defined, return a layer index that's relative to its parent
// Otherwise return the index of the layer among all rendered layers
// This is done recursively, i.e. if the user overrides a layer's default index,
// all its descendants will be resolved relative to that index.
// This implementation assumes that parent layers always appear before its children
// which is true if the layer array comes from the LayerManager
function layerIndexResolver(startIndex = 0, layerIndices = {}) {
    const resolvers = {};
    const resolveLayerIndex = (layer, isDrawn) => {
        const indexOverride = layer.props._offset;
        const layerId = layer.id;
        const parentId = layer.parent && layer.parent.id;
        let index;
        if (parentId && !(parentId in layerIndices)) {
            // Populate layerIndices with the parent layer's index
            resolveLayerIndex(layer.parent, false);
        }
        if (parentId in resolvers) {
            const resolver = (resolvers[parentId] =
                resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));
            index = resolver(layer, isDrawn);
            resolvers[layerId] = resolver;
        }
        else if (Number.isFinite(indexOverride)) {
            index = indexOverride + (layerIndices[parentId] || 0);
            // Mark layer as needing its own resolver
            // We don't actually create it until it's used for the first time
            resolvers[layerId] = null;
        }
        else {
            index = startIndex;
        }
        if (isDrawn && index >= startIndex) {
            startIndex = index + 1;
        }
        layerIndices[layerId] = index;
        return index;
    };
    return resolveLayerIndex;
}
// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates
function getGLViewport(device, { moduleParameters, target, viewport }) {
    const pixelRatio = (moduleParameters && moduleParameters.devicePixelRatio) ||
        // @ts-expect-error TODO - assuming WebGL context
        device.canvasContext.cssToDeviceRatio();
    // Default framebuffer is used when writing to canvas
    // @ts-expect-error TODO - assuming WebGL context
    const [, drawingBufferHeight] = device.canvasContext.getDrawingBufferSize();
    const height = target ? target.height : drawingBufferHeight;
    // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates
    const dimensions = viewport;
    return [
        dimensions.x * pixelRatio,
        height - (dimensions.y + dimensions.height) * pixelRatio,
        dimensions.width * pixelRatio,
        dimensions.height * pixelRatio
    ];
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/passes/pass.js":
/*!********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/passes/pass.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pass)
/* harmony export */ });
/**
 * Base class for passes
 * @todo v9 - should the luma.gl RenderPass be owned by this class?
 * Currently owned by subclasses
 */
class Pass {
    /** Create a new Pass instance */
    constructor(device, props = { id: 'pass' }) {
        const { id } = props;
        this.id = id; // id of this pass
        this.device = device;
        this.props = { ...props };
    }
    setProps(props) {
        Object.assign(this.props, props);
    }
    render(params) { } // eslint-disable-line @typescript-eslint/no-empty-function
    cleanup() { } // eslint-disable-line @typescript-eslint/no-empty-function
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PickLayersPass)
/* harmony export */ });
/* harmony import */ var _layers_pass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layers-pass.js */ "./node_modules/@deck.gl/core/dist/passes/layers-pass.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");


const PICKING_BLENDING = {
    blendColorOperation: 'add',
    blendColorSrcFactor: 'one',
    blendColorDstFactor: 'zero',
    blendAlphaOperation: 'add',
    blendAlphaSrcFactor: 'constant-alpha',
    blendAlphaDstFactor: 'zero'
};
class PickLayersPass extends _layers_pass_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(...arguments);
        this._colorEncoderState = null;
    }
    render(props) {
        if ('pickingFBO' in props) {
            // When drawing into an off-screen buffer, use the alpha channel to encode layer index
            return this._drawPickingBuffer(props);
        }
        // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible
        return super.render(props);
    }
    // Private
    // Draws list of layers and viewports into the picking buffer
    // Note: does not sample the buffer, that has to be done by the caller
    _drawPickingBuffer({ layers, layerFilter, views, viewports, onViewportActive, pickingFBO, deviceRect: { x, y, width, height }, cullRect, effects, pass = 'picking', pickZ, moduleParameters }) {
        this.pickZ = pickZ;
        const colorEncoderState = this._resetColorEncoder(pickZ);
        const scissorRect = [x, y, width, height];
        // Make sure we clear scissor test and fbo bindings in case of exceptions
        // We are only interested in one pixel, no need to render anything else
        // Note that the callback here is called synchronously.
        // Set blend mode for picking
        // always overwrite existing pixel with [r,g,b,layerIndex]
        const renderStatus = super.render({
            target: pickingFBO,
            layers,
            layerFilter,
            views,
            viewports,
            onViewportActive,
            cullRect,
            effects: effects?.filter(e => e.useInPicking),
            pass,
            isPicking: true,
            moduleParameters,
            clearColor: [0, 0, 0, 0],
            colorMask: 0xf,
            scissorRect
        });
        // Clear the temp field
        this._colorEncoderState = null;
        const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);
        return { decodePickingColor, stats: renderStatus };
    }
    shouldDrawLayer(layer) {
        const { pickable, operation } = layer.props;
        return ((pickable && operation.includes('draw')) ||
            operation.includes('terrain') ||
            operation.includes('mask'));
    }
    getModuleParameters() {
        return {
            picking: {
                isActive: 1,
                isAttribute: this.pickZ
            },
            // turn off lighting by adding empty light source object
            // lights shader module relies on the `lightSources` to turn on/off lighting
            lightSources: {}
        };
    }
    getLayerParameters(layer, layerIndex, viewport) {
        const pickParameters = {
            // TODO - When used as a custom layer in older Mapbox versions, context
            // state was dirty. Mapbox fixed that; we should test and remove the workaround.
            // https://github.com/mapbox/mapbox-gl-js/issues/7801
            depthMask: true,
            depthTest: true,
            depthRange: [0, 1],
            ...layer.props.parameters
        };
        const { pickable, operation } = layer.props;
        if (!this._colorEncoderState || operation.includes('terrain')) {
            pickParameters.blend = false;
        }
        else if (pickable && operation.includes('draw')) {
            Object.assign(pickParameters, PICKING_BLENDING);
            pickParameters.blend = true;
            pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);
        }
        return pickParameters;
    }
    _resetColorEncoder(pickZ) {
        // Track encoded layer indices
        this._colorEncoderState = pickZ
            ? null
            : {
                byLayer: new Map(),
                byAlpha: []
            };
        // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters
        return this._colorEncoderState;
    }
}
// Assign an unique alpha value for each pickable layer and track the encoding in the cache object
// Returns normalized blend color
function encodeColor(encoded, layer, viewport) {
    const { byLayer, byAlpha } = encoded;
    let a;
    // Encode layerIndex in the alpha channel
    // TODO - combine small layers to better utilize the picking color space
    let entry = byLayer.get(layer);
    if (entry) {
        entry.viewports.push(viewport);
        a = entry.a;
    }
    else {
        a = byLayer.size + 1;
        if (a <= 255) {
            entry = { a, layer, viewports: [viewport] };
            byLayer.set(layer, entry);
            byAlpha[a] = entry;
        }
        else {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_1__["default"].warn('Too many pickable layers, only picking the first 255')();
            a = 0;
        }
    }
    return [0, 0, 0, a / 255];
}
// Given a picked color, retrieve the corresponding layer and viewports from cache
function decodeColor(encoded, pickedColor) {
    const entry = encoded.byAlpha[pickedColor[3]];
    return (entry && {
        pickedLayer: entry.layer,
        pickedViewports: entry.viewports,
        pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)
    });
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/passes/shadow-pass.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/passes/shadow-pass.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ShadowPass)
/* harmony export */ });
/* harmony import */ var _layers_pass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layers-pass.js */ "./node_modules/@deck.gl/core/dist/passes/layers-pass.js");

class ShadowPass extends _layers_pass_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(device, props) {
        super(device, props);
        // The shadowMap texture
        this.shadowMap = device.createTexture({
            width: 1,
            height: 1,
            sampler: {
                minFilter: 'linear',
                magFilter: 'linear',
                addressModeU: 'clamp-to-edge',
                addressModeV: 'clamp-to-edge'
            }
        });
        // @ts-ignore
        this.depthBuffer = device.createTexture({
            format: 'depth16unorm',
            width: 1,
            height: 1,
            mipmaps: false,
            // TODO fix getWebGLTextureParameters() in luma to avoid passing deprecated parameters
            dataFormat: 6402, // gl.DEPTH_COMPONENT
            type: 5125 // gl.UNSIGNED_INT
        });
        this.fbo = device.createFramebuffer({
            id: 'shadowmap',
            width: 1,
            height: 1,
            colorAttachments: [this.shadowMap],
            // Depth attachment has to be specified for depth test to work
            depthStencilAttachment: this.depthBuffer
        });
    }
    render(params) {
        const target = this.fbo;
        // @ts-expect-error TODO - assuming WebGL context
        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
        const viewport = params.viewports[0];
        const width = viewport.width * pixelRatio;
        const height = viewport.height * pixelRatio;
        const clearColor = [1, 1, 1, 1];
        if (width !== target.width || height !== target.height) {
            target.resize({ width, height });
        }
        super.render({ ...params, clearColor, target, pass: 'shadow' });
    }
    getLayerParameters(layer, layerIndex, viewport) {
        return { ...layer.props.parameters, blend: false, depthRange: [0, 1], depthTest: true };
    }
    shouldDrawLayer(layer) {
        return layer.props.shadowEnabled !== false;
    }
    getModuleParameters() {
        return {
            drawToShadowMap: true
        };
    }
    delete() {
        if (this.fbo) {
            this.fbo.destroy();
            this.fbo = null;
        }
        if (this.shadowMap) {
            this.shadowMap.destroy();
            this.shadowMap = null;
        }
        if (this.depthBuffer) {
            this.depthBuffer.destroy();
            this.depthBuffer = null;
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShaderAssembler: () => (/* binding */ getShaderAssembler),
/* harmony export */   gouraudLighting: () => (/* reexport safe */ _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_4__.gouraudLighting),
/* harmony export */   phongLighting: () => (/* reexport safe */ _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_4__.phongLighting),
/* harmony export */   picking: () => (/* reexport safe */ _picking_picking_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   project: () => (/* reexport safe */ _project_project_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   project32: () => (/* reexport safe */ _project32_project32_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   shadow: () => (/* reexport safe */ _shadow_shadow_js__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js");
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting.js");
/* harmony import */ var _project_project_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./project/project.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project/project.js");
/* harmony import */ var _project32_project32_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./project32/project32.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _shadow_shadow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shadow/shadow.js */ "./node_modules/@deck.gl/core/dist/shaderlib/shadow/shadow.js");
/* harmony import */ var _picking_picking_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./picking/picking.js */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.






const DEFAULT_MODULES = [_project_project_js__WEBPACK_IMPORTED_MODULE_0__["default"]];
const SHADER_HOOKS = [
    'vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)',
    'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)',
    'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)',
    'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'
];
function getShaderAssembler() {
    const shaderAssembler = _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__.ShaderAssembler.getDefaultShaderAssembler();
    for (const shaderModule of DEFAULT_MODULES) {
        shaderAssembler.addDefaultModule(shaderModule);
    }
    for (const shaderHook of SHADER_HOOKS) {
        shaderAssembler.addShaderHook(shaderHook);
    }
    return shaderAssembler;
}



/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/misc/geometry.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/misc/geometry.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const defines = '#define SMOOTH_EDGE_RADIUS 0.5';
const vs = `
${defines}

struct VertexGeometry {
  vec4 position;
  vec3 worldPosition;
  vec3 worldPositionAlt;
  vec3 normal;
  vec2 uv;
  vec3 pickingColor;
} geometry = VertexGeometry(
  vec4(0.0, 0.0, 1.0, 0.0),
  vec3(0.0),
  vec3(0.0),
  vec3(0.0),
  vec2(0.0),
  vec3(0.0)
);
`;
const fs = `
${defines}

struct FragmentGeometry {
  vec2 uv;
} geometry;

float smoothedge(float edge, float x) {
  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);
}
`;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ name: 'geometry', vs, fs });


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/modules/engine/picking/picking.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    ..._luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_0__.picking,
    defaultUniforms: { ..._luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_0__.picking.defaultUniforms, useFloatColors: false },
    inject: {
        'vs:DECKGL_FILTER_GL_POSITION': `
    // for picking depth values
    picking_setPickingAttribute(position.z / position.w);
  `,
        'vs:DECKGL_FILTER_COLOR': `
  picking_setPickingColor(geometry.pickingColor);
  `,
        'fs:DECKGL_FILTER_COLOR': {
            order: 99,
            injection: `
  // use highlight color if this fragment belongs to the selected object.
  color = picking_filterHighlightColor(color);

  // use picking color if rendering to picking FBO.
  color = picking_filterPickingColor(color);
    `
        }
    }
});


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/project/project-functions.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/project/project-functions.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWorldPosition: () => (/* binding */ getWorldPosition),
/* harmony export */   projectPosition: () => (/* binding */ projectPosition)
/* harmony export */ });
/* harmony import */ var _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _viewport_uniforms_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./viewport-uniforms.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js");
/* harmony import */ var _viewports_web_mercator_viewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../viewports/web-mercator-viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/**
 * Projection utils
 * TODO: move to Viewport class?
 */





const DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];
// In project.glsl, offset modes calculate z differently from LNG_LAT mode.
// offset modes apply the y adjustment (unitsPerMeter2) when projecting z
// LNG_LAT mode only use the linear scale.
function lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {
    const p = viewport.projectPosition(lngLatZ);
    // TODO - avoid using instanceof
    if (offsetMode && viewport instanceof _viewports_web_mercator_viewport_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        const [longitude, latitude, z = 0] = lngLatZ;
        const distanceScales = viewport.getDistanceScales([longitude, latitude]);
        p[2] = z * distanceScales.unitsPerMeter[2];
    }
    return p;
}
function normalizeParameters(opts) {
    const { viewport, modelMatrix, coordinateOrigin } = opts;
    let { coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin } = opts;
    if (coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.COORDINATE_SYSTEM.DEFAULT) {
        coordinateSystem = viewport.isGeospatial
            ? _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.COORDINATE_SYSTEM.LNGLAT
            : _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.COORDINATE_SYSTEM.CARTESIAN;
    }
    if (fromCoordinateSystem === undefined) {
        fromCoordinateSystem = coordinateSystem;
    }
    if (fromCoordinateOrigin === undefined) {
        fromCoordinateOrigin = coordinateOrigin;
    }
    return {
        viewport,
        coordinateSystem,
        coordinateOrigin,
        modelMatrix,
        fromCoordinateSystem,
        fromCoordinateOrigin
    };
}
/** Get the common space position from world coordinates in the given coordinate system */
function getWorldPosition(position, { viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode }) {
    let [x, y, z = 0] = position;
    if (modelMatrix) {
        [x, y, z] = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.transformMat4([], [x, y, z, 1.0], modelMatrix);
    }
    switch (coordinateSystem) {
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.COORDINATE_SYSTEM.LNGLAT:
            return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.COORDINATE_SYSTEM.LNGLAT_OFFSETS:
            return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.COORDINATE_SYSTEM.METER_OFFSETS:
            return lngLatZToWorldPosition((0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.addMetersToLngLat)(coordinateOrigin, [x, y, z]), viewport, offsetMode);
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.COORDINATE_SYSTEM.CARTESIAN:
        default:
            return viewport.isGeospatial
                ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]
                : viewport.projectPosition([x, y, z]);
    }
}
/**
 * Equivalent to project_position in project.glsl
 * projects a user supplied position to world position directly with or without
 * a reference coordinate system
 */
function projectPosition(position, params) {
    const { viewport, coordinateSystem, coordinateOrigin, modelMatrix, fromCoordinateSystem, fromCoordinateOrigin } = normalizeParameters(params);
    const { autoOffset = true } = params;
    const { geospatialOrigin = DEFAULT_COORDINATE_ORIGIN, shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN, offsetMode = false } = autoOffset ? (0,_viewport_uniforms_js__WEBPACK_IMPORTED_MODULE_4__.getOffsetOrigin)(viewport, coordinateSystem, coordinateOrigin) : {};
    const worldPosition = getWorldPosition(position, {
        viewport,
        modelMatrix,
        coordinateSystem: fromCoordinateSystem,
        coordinateOrigin: fromCoordinateOrigin,
        offsetMode
    });
    if (offsetMode) {
        const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
        _math_gl_core__WEBPACK_IMPORTED_MODULE_5__.sub(worldPosition, worldPosition, positionCommonSpace);
    }
    return worldPosition;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/project/project.glsl.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/project/project.glsl.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// We are generating these from the js code in constants.js
const COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(_lib_constants_js__WEBPACK_IMPORTED_MODULE_0__.COORDINATE_SYSTEM)
    .map(key => `const int COORDINATE_SYSTEM_${key} = ${_lib_constants_js__WEBPACK_IMPORTED_MODULE_0__.COORDINATE_SYSTEM[key]};`)
    .join('');
const PROJECTION_MODE_GLSL_CONSTANTS = Object.keys(_lib_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROJECTION_MODE)
    .map(key => `const int PROJECTION_MODE_${key} = ${_lib_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROJECTION_MODE[key]};`)
    .join('');
const UNIT_GLSL_CONSTANTS = Object.keys(_lib_constants_js__WEBPACK_IMPORTED_MODULE_0__.UNIT)
    .map(key => `const int UNIT_${key.toUpperCase()} = ${_lib_constants_js__WEBPACK_IMPORTED_MODULE_0__.UNIT[key]};`)
    .join('');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
${COORDINATE_SYSTEM_GLSL_CONSTANTS}
${PROJECTION_MODE_GLSL_CONSTANTS}
${UNIT_GLSL_CONSTANTS}
uniform int project_uCoordinateSystem;
uniform int project_uProjectionMode;
uniform float project_uScale;
uniform bool project_uWrapLongitude;
uniform vec3 project_uCommonUnitsPerMeter;
uniform vec3 project_uCommonUnitsPerWorldUnit;
uniform vec3 project_uCommonUnitsPerWorldUnit2;
uniform vec4 project_uCenter;
uniform mat4 project_uModelMatrix;
uniform mat4 project_uViewProjectionMatrix;
uniform vec2 project_uViewportSize;
uniform float project_uDevicePixelRatio;
uniform float project_uFocalDistance;
uniform vec3 project_uCameraPosition;
uniform vec3 project_uCoordinateOrigin;
uniform vec3 project_uCommonOrigin;
uniform bool project_uPseudoMeters;
const float TILE_SIZE = 512.0;
const float PI = 3.1415926536;
const float WORLD_SCALE = TILE_SIZE / (PI * 2.0);
const vec3 ZERO_64_LOW = vec3(0.0);
const float EARTH_RADIUS = 6370972.0;
const float GLOBE_RADIUS = 256.0;
float project_size_at_latitude(float lat) {
float y = clamp(lat, -89.9, 89.9);
return 1.0 / cos(radians(y));
}
float project_size() {
if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR &&
project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT &&
project_uPseudoMeters == false) {
if (geometry.position.w == 0.0) {
return project_size_at_latitude(geometry.worldPosition.y);
}
float y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;
float y2 = y * y;
float y4 = y2 * y2;
float y6 = y4 * y2;
return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;
}
return 1.0;
}
float project_size_at_latitude(float meters, float lat) {
return meters * project_uCommonUnitsPerMeter.z * project_size_at_latitude(lat);
}
float project_size(float meters) {
return meters * project_uCommonUnitsPerMeter.z * project_size();
}
vec2 project_size(vec2 meters) {
return meters * project_uCommonUnitsPerMeter.xy * project_size();
}
vec3 project_size(vec3 meters) {
return meters * project_uCommonUnitsPerMeter * project_size();
}
vec4 project_size(vec4 meters) {
return vec4(meters.xyz * project_uCommonUnitsPerMeter, meters.w);
}
mat3 project_get_orientation_matrix(vec3 up) {
vec3 uz = normalize(up);
vec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));
vec3 uy = cross(uz, ux);
return mat3(ux, uy, uz);
}
bool project_needs_rotation(vec3 commonPosition, out mat3 transform) {
if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {
transform = project_get_orientation_matrix(commonPosition);
return true;
}
return false;
}
vec3 project_normal(vec3 vector) {
vec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);
vec3 n = normalize(normal_modelspace.xyz * project_uCommonUnitsPerMeter);
mat3 rotation;
if (project_needs_rotation(geometry.position.xyz, rotation)) {
n = rotation * n;
}
return n;
}
vec4 project_offset_(vec4 offset) {
float dy = offset.y;
vec3 commonUnitsPerWorldUnit = project_uCommonUnitsPerWorldUnit + project_uCommonUnitsPerWorldUnit2 * dy;
return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);
}
vec2 project_mercator_(vec2 lnglat) {
float x = lnglat.x;
if (project_uWrapLongitude) {
x = mod(x + 180., 360.0) - 180.;
}
float y = clamp(lnglat.y, -89.9, 89.9);
return vec2(
radians(x) + PI,
PI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))
) * WORLD_SCALE;
}
vec3 project_globe_(vec3 lnglatz) {
float lambda = radians(lnglatz.x);
float phi = radians(lnglatz.y);
float cosPhi = cos(phi);
float D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;
return vec3(
sin(lambda) * cosPhi,
-cos(lambda) * cosPhi,
sin(phi)
) * D;
}
vec4 project_position(vec4 position, vec3 position64Low) {
vec4 position_world = project_uModelMatrix * position;
if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR) {
if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
return vec4(
project_mercator_(position_world.xy),
project_size_at_latitude(position_world.z, position_world.y),
position_world.w
);
}
if (project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {
position_world.xyz += project_uCoordinateOrigin;
}
}
if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {
if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
return vec4(
project_globe_(position_world.xyz),
position_world.w
);
}
}
if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
if (abs(position_world.y - project_uCoordinateOrigin.y) > 0.25) {
return vec4(
project_mercator_(position_world.xy) - project_uCommonOrigin.xy,
project_size(position_world.z),
position_world.w
);
}
}
}
if (project_uProjectionMode == PROJECTION_MODE_IDENTITY ||
(project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&
(project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {
position_world.xyz -= project_uCoordinateOrigin;
}
return project_offset_(position_world) + project_offset_(project_uModelMatrix * vec4(position64Low, 0.0));
}
vec4 project_position(vec4 position) {
return project_position(position, ZERO_64_LOW);
}
vec3 project_position(vec3 position, vec3 position64Low) {
vec4 projected_position = project_position(vec4(position, 1.0), position64Low);
return projected_position.xyz;
}
vec3 project_position(vec3 position) {
vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);
return projected_position.xyz;
}
vec2 project_position(vec2 position) {
vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);
return projected_position.xy;
}
vec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {
return viewProjectionMatrix * position + center;
}
vec4 project_common_position_to_clipspace(vec4 position) {
return project_common_position_to_clipspace(position, project_uViewProjectionMatrix, project_uCenter);
}
vec2 project_pixel_size_to_clipspace(vec2 pixels) {
vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;
return offset * project_uFocalDistance;
}
float project_size_to_pixel(float meters) {
return project_size(meters) * project_uScale;
}
float project_size_to_pixel(float size, int unit) {
if (unit == UNIT_METERS) return project_size_to_pixel(size);
if (unit == UNIT_COMMON) return size * project_uScale;
return size;
}
float project_pixel_size(float pixels) {
return pixels / project_uScale;
}
vec2 project_pixel_size(vec2 pixels) {
return pixels / project_uScale;
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/project/project.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/project/project.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/modules/math/fp32/fp32.js");
/* harmony import */ var _misc_geometry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc/geometry.js */ "./node_modules/@deck.gl/core/dist/shaderlib/misc/geometry.js");
/* harmony import */ var _project_glsl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./project.glsl.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project/project.glsl.js");
/* harmony import */ var _viewport_uniforms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./viewport-uniforms.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.




const INITIAL_MODULE_OPTIONS = {};
function getUniforms(opts = INITIAL_MODULE_OPTIONS) {
    if ('viewport' in opts) {
        return (0,_viewport_uniforms_js__WEBPACK_IMPORTED_MODULE_0__.getUniformsFromViewport)(opts);
    }
    return {};
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'project',
    dependencies: [_luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__.fp32, _misc_geometry_js__WEBPACK_IMPORTED_MODULE_2__["default"]],
    vs: _project_glsl_js__WEBPACK_IMPORTED_MODULE_3__["default"],
    getUniforms
});


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOffsetOrigin: () => (/* binding */ getOffsetOrigin),
/* harmony export */   getUniformsFromViewport: () => (/* binding */ getUniformsFromViewport)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/mat4.js");
/* harmony import */ var _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _utils_memoize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/memoize.js */ "./node_modules/@deck.gl/core/dist/utils/memoize.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable complexity, camelcase */



// To quickly set a vector to zero
const ZERO_VECTOR = [0, 0, 0, 0];
// 4x4 matrix that drops 4th component of vector
const VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
const IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
const DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];
const DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];
const getMemoizedViewportUniforms = (0,_utils_memoize_js__WEBPACK_IMPORTED_MODULE_0__["default"])(calculateViewportUniforms);
function getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN) {
    if (coordinateOrigin.length < 3) {
        coordinateOrigin = [coordinateOrigin[0], coordinateOrigin[1], 0];
    }
    let shaderCoordinateOrigin = coordinateOrigin;
    let geospatialOrigin;
    let offsetMode = true;
    if (coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.LNGLAT_OFFSETS ||
        coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.METER_OFFSETS) {
        geospatialOrigin = coordinateOrigin;
    }
    else {
        geospatialOrigin = viewport.isGeospatial
            ? // @ts-expect-error longitude and latitude are not defined on the base Viewport, but is expected on geospatial viewports
                [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0]
            : null;
    }
    switch (viewport.projectionMode) {
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.PROJECTION_MODE.WEB_MERCATOR:
            if (coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.LNGLAT ||
                coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.CARTESIAN) {
                geospatialOrigin = [0, 0, 0];
                offsetMode = false;
            }
            break;
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:
            if (coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.LNGLAT) {
                // viewport center in world space
                // @ts-expect-error when using LNGLAT coordinates, we expect the viewport to be geospatial, in which case geospatialOrigin is defined
                shaderCoordinateOrigin = geospatialOrigin;
            }
            else if (coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.CARTESIAN) {
                // viewport center in common space
                shaderCoordinateOrigin = [
                    Math.fround(viewport.center[0]),
                    Math.fround(viewport.center[1]),
                    0
                ];
                // Geospatial origin (wgs84) must match shaderCoordinateOrigin (common)
                geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);
                shaderCoordinateOrigin[0] -= coordinateOrigin[0];
                shaderCoordinateOrigin[1] -= coordinateOrigin[1];
                shaderCoordinateOrigin[2] -= coordinateOrigin[2];
            }
            break;
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.PROJECTION_MODE.IDENTITY:
            shaderCoordinateOrigin = viewport.position.map(Math.fround);
            shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;
            break;
        case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.PROJECTION_MODE.GLOBE:
            offsetMode = false;
            geospatialOrigin = null;
            break;
        default:
            // Unknown projection mode
            offsetMode = false;
    }
    return { geospatialOrigin, shaderCoordinateOrigin, offsetMode };
}
// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,
// has lower performance but provides error checking.
function calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {
    const { viewMatrixUncentered, projectionMatrix } = viewport;
    let { viewMatrix, viewProjectionMatrix } = viewport;
    let projectionCenter = ZERO_VECTOR;
    let originCommon = ZERO_VECTOR;
    let cameraPosCommon = viewport.cameraPosition;
    const { geospatialOrigin, shaderCoordinateOrigin, offsetMode } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);
    if (offsetMode) {
        // Calculate transformed projectionCenter (using 64 bit precision JS)
        // This is the key to offset mode precision
        // (avoids doing this addition in 32 bit precision in GLSL)
        // @ts-expect-error the 4th component is assigned below
        originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
        cameraPosCommon = [
            cameraPosCommon[0] - originCommon[0],
            cameraPosCommon[1] - originCommon[1],
            cameraPosCommon[2] - originCommon[2]
        ];
        originCommon[3] = 1;
        // projectionCenter = new Matrix4(viewProjectionMatrix)
        //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);
        projectionCenter = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.transformMat4([], originCommon, viewProjectionMatrix);
        // Always apply uncentered projection matrix if available (shader adds center)
        viewMatrix = viewMatrixUncentered || viewMatrix;
        // Zero out 4th coordinate ("after" model matrix) - avoids further translations
        // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)
        //   .multiplyRight(VECTOR_TO_POINT_MATRIX);
        viewProjectionMatrix = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.multiply([], projectionMatrix, viewMatrix);
        viewProjectionMatrix = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);
    }
    return {
        viewMatrix,
        viewProjectionMatrix,
        projectionCenter,
        originCommon,
        cameraPosCommon,
        shaderCoordinateOrigin,
        geospatialOrigin
    };
}
/**
 * Returns uniforms for shaders based on current projection
 * includes: projection matrix suitable for shaders
 *
 * TODO - Ensure this works with any viewport, not just WebMercatorViewports
 *
 * @param {WebMercatorViewport} viewport -
 * @return {Float32Array} - 4x4 projection matrix that can be used in shaders
 */
function getUniformsFromViewport({ viewport, devicePixelRatio = 1, modelMatrix = null, 
// Match Layer.defaultProps
coordinateSystem = _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.DEFAULT, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN, autoWrapLongitude = false }) {
    if (coordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.DEFAULT) {
        coordinateSystem = viewport.isGeospatial
            ? _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.LNGLAT
            : _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.CARTESIAN;
    }
    const uniforms = getMemoizedViewportUniforms({
        viewport,
        devicePixelRatio,
        coordinateSystem,
        coordinateOrigin
    });
    uniforms.project_uWrapLongitude = autoWrapLongitude;
    uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;
    return uniforms;
}
function calculateViewportUniforms({ viewport, devicePixelRatio, coordinateSystem, coordinateOrigin }) {
    const { projectionCenter, viewProjectionMatrix, originCommon, cameraPosCommon, shaderCoordinateOrigin, geospatialOrigin } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);
    // Calculate projection pixels per unit
    const distanceScales = viewport.getDistanceScales();
    const viewportSize = [
        viewport.width * devicePixelRatio,
        viewport.height * devicePixelRatio
    ];
    // Distance at which screen pixels are projected.
    // Used to scale sizes in clipspace to match screen pixels.
    // When using Viewport class's default projection matrix, this yields 1 for orthographic
    // and `viewport.focalDistance` for perspective views
    const focalDistance = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.transformMat4([], [0, 0, -viewport.focalDistance, 1], viewport.projectionMatrix)[3] || 1;
    const uniforms = {
        // Projection mode values
        project_uCoordinateSystem: coordinateSystem,
        project_uProjectionMode: viewport.projectionMode,
        project_uCoordinateOrigin: shaderCoordinateOrigin,
        project_uCommonOrigin: originCommon.slice(0, 3),
        project_uCenter: projectionCenter,
        // Backward compatibility
        // TODO: remove in v9
        // @ts-expect-error _pseudoMeters is only defined on WebMercator viewport
        project_uPseudoMeters: Boolean(viewport._pseudoMeters),
        // Screen size
        project_uViewportSize: viewportSize,
        project_uDevicePixelRatio: devicePixelRatio,
        project_uFocalDistance: focalDistance,
        project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,
        project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,
        project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,
        project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)
        project_uWrapLongitude: false,
        project_uViewProjectionMatrix: viewProjectionMatrix,
        project_uModelMatrix: IDENTITY_MATRIX,
        // This is for lighting calculations
        project_uCameraPosition: cameraPosCommon
    };
    if (geospatialOrigin) {
        // Get high-precision DistanceScales from geospatial viewport
        // TODO: stricter types in Viewport classes
        const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);
        switch (coordinateSystem) {
            case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.METER_OFFSETS:
                uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;
                uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;
                break;
            case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.LNGLAT:
            case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.LNGLAT_OFFSETS:
                // @ts-expect-error _pseudoMeters only exists on WebMercatorView
                if (!viewport._pseudoMeters) {
                    uniforms.project_uCommonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;
                }
                uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;
                uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;
                break;
            // a.k.a "preprojected" positions
            case _lib_constants_js__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.CARTESIAN:
                uniforms.project_uCommonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];
                uniforms.project_uCommonUnitsPerWorldUnit2 = [
                    0,
                    0,
                    distanceScalesAtOrigin.unitsPerMeter2[2]
                ];
                break;
            default:
                break;
        }
    }
    return uniforms;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _project_project_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../project/project.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project/project.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

const vs = `
vec4 project_position_to_clipspace(
  vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition
) {
  vec3 projectedPosition = project_position(position, position64Low);
  mat3 rotation;
  if (project_needs_rotation(projectedPosition, rotation)) {
    // offset is specified as ENU
    // when in globe projection, rotate offset so that the ground alighs with the surface of the globe
    offset = rotation * offset;
  }
  commonPosition = vec4(projectedPosition + offset, 1.0);
  return project_common_position_to_clipspace(commonPosition);
}

vec4 project_position_to_clipspace(
  vec3 position, vec3 position64Low, vec3 offset
) {
  vec4 commonPosition;
  return project_position_to_clipspace(position, position64Low, offset, commonPosition);
}
`;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'project32',
    dependencies: [_project_project_js__WEBPACK_IMPORTED_MODULE_0__["default"]],
    vs
});


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/shaderlib/shadow/shadow.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/shaderlib/shadow/shadow.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _project_project_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../project/project.js */ "./node_modules/@deck.gl/core/dist/shaderlib/project/project.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _utils_memoize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/memoize.js */ "./node_modules/@deck.gl/core/dist/utils/memoize.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
// Copyright (c) 2015-2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





const vs = `
const int max_lights = 2;
uniform mat4 shadow_uViewProjectionMatrices[max_lights];
uniform vec4 shadow_uProjectCenters[max_lights];
uniform bool shadow_uDrawShadowMap;
uniform bool shadow_uUseShadowMap;
uniform int shadow_uLightId;
uniform float shadow_uLightCount;

out vec3 shadow_vPosition[max_lights];

vec4 shadow_setVertexPosition(vec4 position_commonspace) {
  if (shadow_uDrawShadowMap) {
    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);
  }
  if (shadow_uUseShadowMap) {
    for (int i = 0; i < max_lights; i++) {
      if(i < int(shadow_uLightCount)) {
        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);
        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;
      }
    }
  }
  return gl_Position;
}
`;
const fs = `
const int max_lights = 2;
uniform bool shadow_uDrawShadowMap;
uniform bool shadow_uUseShadowMap;
uniform sampler2D shadow_uShadowMap0;
uniform sampler2D shadow_uShadowMap1;
uniform vec4 shadow_uColor;
uniform float shadow_uLightCount;

in vec3 shadow_vPosition[max_lights];

const vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);
const vec4 bitUnpackShift = 1.0 / bitPackShift;
const vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);

float shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {
  vec4 rgbaDepth = texture(shadowMap, position.xy);

  float z = dot(rgbaDepth, bitUnpackShift);
  return smoothstep(0.001, 0.01, position.z - z);
}

vec4 shadow_filterShadowColor(vec4 color) {
  if (shadow_uDrawShadowMap) {
    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);
    rgbaDepth -= rgbaDepth.gbaa * bitMask;
    return rgbaDepth;
  }
  if (shadow_uUseShadowMap) {
    float shadowAlpha = 0.0;
    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);
    if(shadow_uLightCount > 1.0) {
      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);
    }
    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;
    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);

    return vec4(
      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),
      blendedAlpha
    );
  }
  return color;
}
`;
const getMemoizedViewportCenterPosition = (0,_utils_memoize_js__WEBPACK_IMPORTED_MODULE_1__["default"])(getViewportCenterPosition);
const getMemoizedViewProjectionMatrices = (0,_utils_memoize_js__WEBPACK_IMPORTED_MODULE_1__["default"])(getViewProjectionMatrices);
const DEFAULT_SHADOW_COLOR = [0, 0, 0, 1.0];
const VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
function screenToCommonSpace(xyz, pixelUnprojectionMatrix) {
    const [x, y, z] = xyz;
    const coord = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.pixelsToWorld)([x, y, z], pixelUnprojectionMatrix);
    if (Number.isFinite(z)) {
        return coord;
    }
    return [coord[0], coord[1], 0];
}
function getViewportCenterPosition({ viewport, center }) {
    return new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Matrix4(viewport.viewProjectionMatrix).invert().transform(center);
}
function getViewProjectionMatrices({ viewport, shadowMatrices }) {
    const projectionMatrices = [];
    const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;
    const farZ = viewport.isGeospatial ? undefined : 1;
    const corners = [
        [0, 0, farZ], // top left ground
        [viewport.width, 0, farZ], // top right ground
        [0, viewport.height, farZ], // bottom left ground
        [viewport.width, viewport.height, farZ], // bottom right ground
        [0, 0, -1], // top left near
        [viewport.width, 0, -1], // top right near
        [0, viewport.height, -1], // bottom left near
        [viewport.width, viewport.height, -1] // bottom right near
    ].map(pixel => 
    // @ts-expect-error z may be undefined
    screenToCommonSpace(pixel, pixelUnprojectionMatrix));
    for (const shadowMatrix of shadowMatrices) {
        const viewMatrix = shadowMatrix.clone().translate(new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3(viewport.center).negate());
        const positions = corners.map(corner => viewMatrix.transform(corner));
        const projectionMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Matrix4().ortho({
            left: Math.min(...positions.map(position => position[0])),
            right: Math.max(...positions.map(position => position[0])),
            bottom: Math.min(...positions.map(position => position[1])),
            top: Math.max(...positions.map(position => position[1])),
            near: Math.min(...positions.map(position => -position[2])),
            far: Math.max(...positions.map(position => -position[2]))
        });
        projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));
    }
    return projectionMatrices;
}
/* eslint-disable camelcase */
// eslint-disable-next-line complexity
function createShadowUniforms(opts, context) {
    const { shadowEnabled = true } = opts;
    if (!shadowEnabled || !opts.shadowMatrices || !opts.shadowMatrices.length) {
        return {
            shadow_uDrawShadowMap: false,
            shadow_uUseShadowMap: false,
            shadow_uShadowMap0: opts.dummyShadowMap,
            shadow_uShadowMap1: opts.dummyShadowMap
        };
    }
    const uniforms = {
        shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),
        shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,
        shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,
        shadow_uLightId: opts.shadowLightId || 0,
        shadow_uLightCount: opts.shadowMatrices.length
    };
    const center = getMemoizedViewportCenterPosition({
        viewport: opts.viewport,
        center: context.project_uCenter
    });
    const projectCenters = [];
    const viewProjectionMatrices = getMemoizedViewProjectionMatrices({
        shadowMatrices: opts.shadowMatrices,
        viewport: opts.viewport
    }).slice();
    for (let i = 0; i < opts.shadowMatrices.length; i++) {
        const viewProjectionMatrix = viewProjectionMatrices[i];
        const viewProjectionMatrixCentered = viewProjectionMatrix
            .clone()
            .translate(new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3(opts.viewport.center).negate());
        if (context.project_uCoordinateSystem === _lib_constants_js__WEBPACK_IMPORTED_MODULE_4__.COORDINATE_SYSTEM.LNGLAT &&
            context.project_uProjectionMode === _lib_constants_js__WEBPACK_IMPORTED_MODULE_4__.PROJECTION_MODE.WEB_MERCATOR) {
            viewProjectionMatrices[i] = viewProjectionMatrixCentered;
            projectCenters[i] = center;
        }
        else {
            viewProjectionMatrices[i] = viewProjectionMatrix
                .clone()
                .multiplyRight(VECTOR_TO_POINT_MATRIX);
            projectCenters[i] = viewProjectionMatrixCentered.transform(center);
        }
    }
    for (let i = 0; i < viewProjectionMatrices.length; i++) {
        uniforms[`shadow_uViewProjectionMatrices[${i}]`] = viewProjectionMatrices[i];
        uniforms[`shadow_uProjectCenters[${i}]`] = projectCenters[i];
    }
    for (let i = 0; i < 2; i++) {
        uniforms[`shadow_uShadowMap${i}`] =
            (opts.shadowMaps && opts.shadowMaps[i]) || opts.dummyShadowMap;
    }
    return uniforms;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'shadow',
    dependencies: [_project_project_js__WEBPACK_IMPORTED_MODULE_5__["default"]],
    vs,
    fs,
    inject: {
        'vs:DECKGL_FILTER_GL_POSITION': `
    position = shadow_setVertexPosition(geometry.position);
    `,
        'fs:DECKGL_FILTER_COLOR': `
    color = shadow_filterShadowColor(color);
    `
    },
    getUniforms: (opts = {}, context = {}) => {
        if ('viewport' in opts &&
            (opts.drawToShadowMap || (opts.shadowMaps && opts.shadowMaps.length > 0))) {
            // @ts-expect-error if opts.viewport is defined, context should contain the project module's uniforms
            return createShadowUniforms(opts, context);
        }
        return {};
    }
});


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/cpu-interpolation-transition.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/cpu-interpolation-transition.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CPUInterpolationTransition)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transition.js */ "./node_modules/@deck.gl/core/dist/transitions/transition.js");


class CPUInterpolationTransition extends _transition_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    get value() {
        return this._value;
    }
    _onUpdate() {
        const { time, settings: { fromValue, toValue, duration, easing } } = this;
        const t = easing(time / duration);
        this._value = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.lerp)(fromValue, toValue, t);
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/cpu-spring-transition.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/cpu-spring-transition.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CPUSpringTransition)
/* harmony export */ });
/* harmony import */ var _transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transition.js */ "./node_modules/@deck.gl/core/dist/transitions/transition.js");

const EPSILON = 1e-5;
/*
 * Calculate the next value in the spring transition
 * @param prev {Number} - previous value
 * @param cur {Number} - current value
 * @param dest {Number} - destination value
 * @param damping {Number}
 * @param stiffness {Number}
 */
function updateSpringElement(prev, cur, dest, damping, stiffness) {
    const velocity = cur - prev;
    const delta = dest - cur;
    const spring = delta * stiffness;
    const damper = -velocity * damping;
    return spring + damper + velocity + cur;
}
function updateSpring(prev, cur, dest, damping, stiffness) {
    if (Array.isArray(dest)) {
        const next = [];
        for (let i = 0; i < dest.length; i++) {
            next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);
        }
        return next;
    }
    return updateSpringElement(prev, cur, dest, damping, stiffness);
}
/*
 * Calculate the distance between two numbers or two vectors
 */
function distance(value1, value2) {
    if (Array.isArray(value1)) {
        let distanceSquare = 0;
        for (let i = 0; i < value1.length; i++) {
            const d = value1[i] - value2[i];
            distanceSquare += d * d;
        }
        return Math.sqrt(distanceSquare);
    }
    return Math.abs(value1 - value2);
}
class CPUSpringTransition extends _transition_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    get value() {
        return this._currValue;
    }
    _onUpdate() {
        // TODO - use timeline
        // const {time} = this;
        const { fromValue, toValue, damping, stiffness } = this.settings;
        const { _prevValue = fromValue, _currValue = fromValue } = this;
        let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);
        const delta = distance(nextValue, toValue);
        const velocity = distance(nextValue, _currValue);
        if (delta < EPSILON && velocity < EPSILON) {
            nextValue = toValue;
            this.end();
        }
        this._prevValue = _currValue;
        this._currValue = nextValue;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/gpu-interpolation-transition.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/gpu-interpolation-transition.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GPUInterpolationTransition)
/* harmony export */ });
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/transform/buffer-transform.js");
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64.js");
/* harmony import */ var _gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpu-transition-utils.js */ "./node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js");
/* harmony import */ var _gpu_transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpu-transition.js */ "./node_modules/@deck.gl/core/dist/transitions/gpu-transition.js");





class GPUInterpolationTransition extends _gpu_transition_js__WEBPACK_IMPORTED_MODULE_0__.GPUTransitionBase {
    constructor({ device, attribute, timeline }) {
        super({ device, attribute, timeline });
        this.type = 'interpolation';
        this.transform = getTransform(device, attribute);
    }
    start(transitionSettings, numInstances) {
        const prevLength = this.currentLength;
        const prevStartIndices = this.currentStartIndices;
        super.start(transitionSettings, numInstances, transitionSettings.duration);
        if (transitionSettings.duration <= 0) {
            this.transition.cancel();
            return;
        }
        const { buffers, attribute } = this;
        // Alternate between two buffers when new transitions start.
        // Last destination buffer is used as an attribute (from state),
        // And the other buffer is now the current buffer.
        (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.cycleBuffers)(buffers);
        buffers[0] = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.padBuffer)({
            device: this.device,
            buffer: buffers[0],
            attribute,
            fromLength: prevLength,
            toLength: this.currentLength,
            fromStartIndices: prevStartIndices,
            getData: transitionSettings.enter
        });
        buffers[1] = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchBuffer)({
            device: this.device,
            source: buffers[0],
            target: buffers[1]
        });
        this.setBuffer(buffers[1]);
        const { transform } = this;
        const model = transform.model;
        let vertexCount = Math.floor(this.currentLength / attribute.size);
        if (useFp64(attribute)) {
            vertexCount /= 2;
        }
        model.setVertexCount(vertexCount);
        if (attribute.isConstant) {
            model.setAttributes({ aFrom: buffers[0] });
            model.setConstantAttributes({ aTo: attribute.value });
        }
        else {
            model.setAttributes({
                aFrom: buffers[0],
                aTo: attribute.getBuffer()
            });
        }
        transform.transformFeedback.setBuffers({ vCurrent: buffers[1] });
    }
    onUpdate() {
        const { duration, easing } = this.settings;
        const { time } = this.transition;
        let t = time / duration;
        if (easing) {
            t = easing(t);
        }
        const { model } = this.transform;
        model.setUniforms({ time: t });
        this.transform.run({ discard: true });
    }
    delete() {
        super.delete();
        this.transform.destroy();
    }
}
const vs = `\
#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

uniform float time;
in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vCurrent;

void main(void) {
  vCurrent = mix(aFrom, aTo, time);
  gl_Position = vec4(0.0);
}
`;
const vs64 = `\
#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

uniform float time;
in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aFrom64Low;
in ATTRIBUTE_TYPE aTo;
in ATTRIBUTE_TYPE aTo64Low;
out ATTRIBUTE_TYPE vCurrent;
out ATTRIBUTE_TYPE vCurrent64Low;

vec2 mix_fp64(vec2 a, vec2 b, float x) {
  vec2 range = sub_fp64(b, a);
  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}

void main(void) {
  for (int i=0; i<ATTRIBUTE_SIZE; i++) {
    vec2 value = mix_fp64(vec2(aFrom[i], aFrom64Low[i]), vec2(aTo[i], aTo64Low[i]), time);
    vCurrent[i] = value.x;
    vCurrent64Low[i] = value.y;
  }
  gl_Position = vec4(0.0);
}
`;
function useFp64(attribute) {
    return attribute.doublePrecision && attribute.value instanceof Float64Array;
}
function getTransform(device, attribute) {
    const attributeSize = attribute.size;
    const attributeType = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAttributeTypeFromSize)(attributeSize);
    const inputFormat = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.getFloat32VertexFormat)(attributeSize);
    const bufferLayout = attribute.getBufferLayout();
    if (useFp64(attribute)) {
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_2__.BufferTransform(device, {
            vs: vs64,
            bufferLayout: [
                {
                    name: 'aFrom',
                    byteStride: 8 * attributeSize,
                    attributes: [
                        { attribute: 'aFrom', format: inputFormat, byteOffset: 0 },
                        { attribute: 'aFrom64Low', format: inputFormat, byteOffset: 4 * attributeSize }
                    ]
                },
                {
                    name: 'aTo',
                    byteStride: 8 * attributeSize,
                    attributes: [
                        { attribute: 'aTo', format: inputFormat, byteOffset: 0 },
                        { attribute: 'aTo64Low', format: inputFormat, byteOffset: 4 * attributeSize }
                    ]
                }
            ],
            modules: [_luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_3__.fp64arithmetic],
            defines: {
                ATTRIBUTE_TYPE: attributeType,
                ATTRIBUTE_SIZE: attributeSize
            },
            // Default uniforms are not set without this
            moduleSettings: {},
            varyings: ['vCurrent', 'vCurrent64Low'],
            // @ts-expect-error WebGLRenderPipeline only prop TODO - support in RenderPipeline?
            bufferMode: 35980,
            disableWarnings: true
        });
    }
    return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_2__.BufferTransform(device, {
        vs,
        bufferLayout: [
            { name: 'aFrom', format: inputFormat },
            { name: 'aTo', format: bufferLayout.attributes[0].format }
        ],
        defines: {
            ATTRIBUTE_TYPE: attributeType
        },
        varyings: ['vCurrent'],
        disableWarnings: true
    });
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/gpu-spring-transition.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/gpu-spring-transition.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GPUSpringTransition)
/* harmony export */ });
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/transform/buffer-transform.js");
/* harmony import */ var _gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpu-transition-utils.js */ "./node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js");
/* harmony import */ var _gpu_transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpu-transition.js */ "./node_modules/@deck.gl/core/dist/transitions/gpu-transition.js");



class GPUSpringTransition extends _gpu_transition_js__WEBPACK_IMPORTED_MODULE_0__.GPUTransitionBase {
    constructor({ device, attribute, timeline }) {
        super({ device, attribute, timeline });
        this.type = 'spring';
        this.texture = getTexture(device);
        this.framebuffer = getFramebuffer(device, this.texture);
        this.transform = getTransform(device, attribute);
    }
    start(transitionSettings, numInstances) {
        const prevLength = this.currentLength;
        const prevStartIndices = this.currentStartIndices;
        super.start(transitionSettings, numInstances);
        const { buffers, attribute } = this;
        for (let i = 0; i < 2; i++) {
            buffers[i] = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.padBuffer)({
                device: this.device,
                buffer: buffers[i],
                attribute,
                fromLength: prevLength,
                toLength: this.currentLength,
                fromStartIndices: prevStartIndices,
                getData: transitionSettings.enter
            });
        }
        buffers[2] = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchBuffer)({
            device: this.device,
            source: buffers[0],
            target: buffers[2]
        });
        this.setBuffer(buffers[1]);
        const { model } = this.transform;
        model.setVertexCount(Math.floor(this.currentLength / attribute.size));
        if (attribute.isConstant) {
            model.setConstantAttributes({ aTo: attribute.value });
        }
        else {
            model.setAttributes({ aTo: attribute.getBuffer() });
        }
    }
    onUpdate() {
        const { buffers, transform, framebuffer, transition } = this;
        const settings = this.settings;
        transform.model.setAttributes({
            aPrev: buffers[0],
            aCur: buffers[1]
        });
        transform.transformFeedback.setBuffers({ vNext: buffers[2] });
        transform.model.setUniforms({
            stiffness: settings.stiffness,
            damping: settings.damping
        });
        transform.run({
            framebuffer,
            discard: false,
            parameters: { viewport: [0, 0, 1, 1] },
            clearColor: [0, 0, 0, 0]
        });
        (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.cycleBuffers)(buffers);
        this.setBuffer(buffers[1]);
        const isTransitioning = this.device.readPixelsToArrayWebGL(framebuffer)[0] > 0;
        if (!isTransitioning) {
            transition.end();
        }
    }
    delete() {
        super.delete();
        this.transform.destroy();
        this.texture.destroy();
        this.framebuffer.destroy();
    }
}
const vs = `\
#version 300 es
#define SHADER_NAME spring-transition-vertex-shader

#define EPSILON 0.00001

uniform float stiffness;
uniform float damping;
in ATTRIBUTE_TYPE aPrev;
in ATTRIBUTE_TYPE aCur;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vNext;
out float vIsTransitioningFlag;

ATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {
  ATTRIBUTE_TYPE velocity = cur - prev;
  ATTRIBUTE_TYPE delta = dest - cur;
  ATTRIBUTE_TYPE spring = delta * stiffness;
  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;
  return spring + damper + velocity + cur;
}

void main(void) {
  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;
  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;

  vNext = getNextValue(aCur, aPrev, aTo);
  gl_Position = vec4(0, 0, 0, 1);
  gl_PointSize = 100.0;
}
`;
const fs = `\
#version 300 es
#define SHADER_NAME spring-transition-is-transitioning-fragment-shader

in float vIsTransitioningFlag;

out vec4 fragColor;

void main(void) {
  if (vIsTransitioningFlag == 0.0) {
    discard;
  }
  fragColor = vec4(1.0);
}`;
function getTransform(device, attribute) {
    const attributeType = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAttributeTypeFromSize)(attribute.size);
    const format = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.getFloat32VertexFormat)(attribute.size);
    return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_2__.BufferTransform(device, {
        vs,
        fs,
        bufferLayout: [
            { name: 'aPrev', format },
            { name: 'aCur', format },
            { name: 'aTo', format: attribute.getBufferLayout().attributes[0].format }
        ],
        varyings: ['vNext'],
        defines: { ATTRIBUTE_TYPE: attributeType },
        parameters: {
            depthCompare: 'always',
            blendColorOperation: 'max',
            blendColorSrcFactor: 'one',
            blendColorDstFactor: 'one',
            blendAlphaOperation: 'max',
            blendAlphaSrcFactor: 'one',
            blendAlphaDstFactor: 'one'
        }
    });
}
function getTexture(device) {
    return device.createTexture({
        data: new Uint8Array(4),
        format: 'rgba8unorm',
        mipmaps: false,
        // dataFormat: GL.RGBA,
        width: 1,
        height: 1
    });
}
function getFramebuffer(device, texture) {
    return device.createFramebuffer({
        id: 'spring-transition-is-transitioning-framebuffer',
        width: 1,
        height: 1,
        colorAttachments: [texture]
    });
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cloneAttribute: () => (/* binding */ cloneAttribute),
/* harmony export */   cycleBuffers: () => (/* binding */ cycleBuffers),
/* harmony export */   getAttributeBufferLength: () => (/* binding */ getAttributeBufferLength),
/* harmony export */   getAttributeTypeFromSize: () => (/* binding */ getAttributeTypeFromSize),
/* harmony export */   getFloat32VertexFormat: () => (/* binding */ getFloat32VertexFormat),
/* harmony export */   matchBuffer: () => (/* binding */ matchBuffer),
/* harmony export */   padBuffer: () => (/* binding */ padBuffer)
/* harmony export */ });
/* harmony import */ var _utils_array_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/array-utils.js */ "./node_modules/@deck.gl/core/dist/utils/array-utils.js");
/* harmony import */ var _lib_attribute_attribute_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/attribute/attribute.js */ "./node_modules/@deck.gl/core/dist/lib/attribute/attribute.js");



/** Create a new empty attribute with the same settings: type, shader layout etc. */
function cloneAttribute(attribute) {
    // `attribute.settings` is the original options passed when constructing the attribute.
    // This ensures that we set the proper `doublePrecision` flag and shader attributes.
    const { device, settings, value } = attribute;
    const newAttribute = new _lib_attribute_attribute_js__WEBPACK_IMPORTED_MODULE_0__["default"](device, settings);
    // Placeholder value - necessary for generating the correct buffer layout
    newAttribute.setData({
        value: value instanceof Float64Array ? new Float64Array(0) : new Float32Array(0),
        normalized: settings.normalized
    });
    return newAttribute;
}
/** Returns the GLSL attribute type for the given number of float32 components. */
function getAttributeTypeFromSize(size) {
    switch (size) {
        case 1:
            return 'float';
        case 2:
            return 'vec2';
        case 3:
            return 'vec3';
        case 4:
            return 'vec4';
        default:
            throw new Error(`No defined attribute type for size "${size}"`);
    }
}
/** Returns the {@link VertexFormat} for the given number of float32 components. */
function getFloat32VertexFormat(size) {
    switch (size) {
        case 1:
            return 'float32';
        case 2:
            return 'float32x2';
        case 3:
            return 'float32x3';
        case 4:
            return 'float32x4';
        default:
            throw new Error('invalid type size');
    }
}
function cycleBuffers(buffers) {
    buffers.push(buffers.shift());
}
function getAttributeBufferLength(attribute, numInstances) {
    const { doublePrecision, settings, value, size } = attribute;
    const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;
    let maxVertexOffset = 0;
    const { shaderAttributes } = attribute.settings;
    if (shaderAttributes) {
        for (const shaderAttribute of Object.values(shaderAttributes)) {
            maxVertexOffset = Math.max(maxVertexOffset, shaderAttribute.vertexOffset ?? 0);
        }
    }
    return ((settings.noAlloc ? value.length : (numInstances + maxVertexOffset) * size) *
        multiplier);
}
function matchBuffer({ device, source, target }) {
    if (!target || target.byteLength < source.byteLength) {
        target?.destroy();
        target = device.createBuffer({
            byteLength: source.byteLength,
            usage: source.usage
        });
    }
    return target;
}
/* eslint-disable complexity */
// This helper is used when transitioning attributes from a set of values in one buffer layout
// to a set of values in a different buffer layout. (Buffer layouts are used when attribute values
// within a buffer should be grouped for drawElements, like the Polygon layer.) For example, a
// buffer layout of [3, 4] might have data [A1, A2, A3, B1, B2, B3, B4]. If it needs to transition
// to a buffer layout of [4, 2], it should produce a buffer, using the transition setting's `enter`
// function, that looks like this: [A1, A2, A3, A4 (user `enter` fn), B1, B2, 0]. Note: the final
// 0 in this buffer is because we never shrink buffers, only grow them, for performance reasons.
//
// padBuffer may return either the original buffer, or a new buffer if the size of the original
// was insufficient. Callers are responsible for disposing of the original buffer if needed.
function padBuffer({ device, buffer, attribute, fromLength, toLength, fromStartIndices, getData = x => x }) {
    // TODO: move the precisionMultiplier logic to the attribute when retrieving
    // its `size` and `elementOffset`?
    const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;
    const size = attribute.size * precisionMultiplier;
    const byteOffset = attribute.byteOffset;
    // Transform feedback can only write to float varyings
    // Attributes of format unorm8/uint8 (1 byte per element) etc will be padded to float32 (4 bytes per element)
    const targetByteOffset = attribute.settings.bytesPerElement < 4
        ? (byteOffset / attribute.settings.bytesPerElement) * 4
        : byteOffset;
    const toStartIndices = attribute.startIndices;
    const hasStartIndices = fromStartIndices && toStartIndices;
    const isConstant = attribute.isConstant;
    // check if buffer needs to be padded
    if (!hasStartIndices && buffer && fromLength >= toLength) {
        return buffer;
    }
    const ArrayType = attribute.value instanceof Float64Array
        ? Float32Array
        : attribute.value.constructor;
    const toData = isConstant
        ? attribute.value
        : // TODO(v9.1): Avoid non-portable synchronous reads.
            new ArrayType(attribute
                .getBuffer()
                .readSyncWebGL(byteOffset, toLength * ArrayType.BYTES_PER_ELEMENT).buffer);
    if (attribute.settings.normalized && !isConstant) {
        const getter = getData;
        getData = (value, chunk) => attribute.normalizeConstant(getter(value, chunk));
    }
    const getMissingData = isConstant
        ? (i, chunk) => getData(toData, chunk)
        : (i, chunk) => getData(toData.subarray(i + byteOffset, i + byteOffset + size), chunk);
    // TODO(v9.1): Avoid non-portable synchronous reads.
    const source = buffer
        ? new Float32Array(buffer.readSyncWebGL(targetByteOffset, fromLength * 4).buffer)
        : new Float32Array(0);
    const target = new Float32Array(toLength);
    (0,_utils_array_utils_js__WEBPACK_IMPORTED_MODULE_1__.padArray)({
        source,
        target,
        sourceStartIndices: fromStartIndices,
        targetStartIndices: toStartIndices,
        size,
        getData: getMissingData
    });
    if (!buffer || buffer.byteLength < target.byteLength + targetByteOffset) {
        buffer?.destroy();
        buffer = device.createBuffer({
            byteLength: target.byteLength + targetByteOffset,
            usage: 35050
        });
    }
    buffer.write(target, targetByteOffset);
    return buffer;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/gpu-transition.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/gpu-transition.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GPUTransitionBase: () => (/* binding */ GPUTransitionBase)
/* harmony export */ });
/* harmony import */ var _transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transition.js */ "./node_modules/@deck.gl/core/dist/transitions/transition.js");
/* harmony import */ var _gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpu-transition-utils.js */ "./node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js");


class GPUTransitionBase {
    constructor({ device, attribute, timeline }) {
        this.buffers = [];
        /** The vertex count of the last buffer.
         * Buffer may be larger than the actual length we want to use
         * because we only reallocate buffers when they grow, not when they shrink,
         * due to performance costs */
        this.currentLength = 0;
        this.device = device;
        this.transition = new _transition_js__WEBPACK_IMPORTED_MODULE_0__["default"](timeline);
        this.attribute = attribute;
        this.attributeInTransition = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.cloneAttribute)(attribute);
        this.currentStartIndices = attribute.startIndices;
    }
    get inProgress() {
        return this.transition.inProgress;
    }
    start(transitionSettings, numInstances, duration = Infinity) {
        this.settings = transitionSettings;
        this.currentStartIndices = this.attribute.startIndices;
        this.currentLength = (0,_gpu_transition_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAttributeBufferLength)(this.attribute, numInstances);
        this.transition.start({ ...transitionSettings, duration });
    }
    update() {
        const updated = this.transition.update();
        if (updated) {
            this.onUpdate();
        }
        return updated;
    }
    setBuffer(buffer) {
        this.attributeInTransition.setData({
            buffer,
            normalized: this.attribute.settings.normalized,
            // Retain placeholder value to generate correct shader layout
            value: this.attributeInTransition.value
        });
    }
    cancel() {
        this.transition.cancel();
    }
    delete() {
        this.cancel();
        for (const buffer of this.buffers) {
            buffer.destroy();
        }
        this.buffers.length = 0;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LinearInterpolator)
/* harmony export */ });
/* harmony import */ var _transition_interpolator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transition-interpolator.js */ "./node_modules/@deck.gl/core/dist/transitions/transition-interpolator.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");


const DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];
const DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];
/**
 * Performs linear interpolation of two view states.
 */
class LinearInterpolator extends _transition_interpolator_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * @param {Object} opts
     * @param {Array} opts.transitionProps - list of props to apply linear transition to.
     * @param {Array} opts.around - a screen point to zoom/rotate around.
     * @param {Function} opts.makeViewport - construct a viewport instance with given props.
     */
    constructor(opts = {}) {
        // Backward compatibility
        const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;
        const normalizedOpts = Array.isArray(opts) ? {} : opts;
        normalizedOpts.transitionProps = Array.isArray(transitionProps)
            ? {
                compare: transitionProps,
                required: transitionProps
            }
            : transitionProps || {
                compare: DEFAULT_PROPS,
                required: DEFAULT_REQUIRED_PROPS
            };
        super(normalizedOpts.transitionProps);
        this.opts = normalizedOpts;
    }
    initializeProps(startProps, endProps) {
        const result = super.initializeProps(startProps, endProps);
        const { makeViewport, around } = this.opts;
        if (makeViewport && around) {
            const startViewport = makeViewport(startProps);
            const endViewport = makeViewport(endProps);
            const aroundPosition = startViewport.unproject(around);
            result.start.around = around;
            Object.assign(result.end, {
                around: endViewport.project(aroundPosition),
                aroundPosition,
                width: endProps.width,
                height: endProps.height
            });
        }
        return result;
    }
    interpolateProps(startProps, endProps, t) {
        const propsInTransition = {};
        for (const key of this._propsToExtract) {
            propsInTransition[key] = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.lerp)(startProps[key] || 0, endProps[key] || 0, t);
        }
        if (endProps.aroundPosition && this.opts.makeViewport) {
            // Linear transition should be performed in common space
            const viewport = this.opts.makeViewport({ ...endProps, ...propsInTransition });
            Object.assign(propsInTransition, viewport.panByPosition(endProps.aroundPosition, 
            // anchor point in current screen coordinates
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.lerp)(startProps.around, endProps.around, t)));
        }
        return propsInTransition;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/transition-interpolator.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/transition-interpolator.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TransitionInterpolator)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@deck.gl/core/dist/utils/assert.js");


class TransitionInterpolator {
    /**
     * @param opts {array|object}
     * @param opts.compare {array} - prop names used in equality check
     * @param opts.extract {array} - prop names needed for interpolation
     * @param opts.required {array} - prop names that must be supplied
     * alternatively, supply one list of prop names as `opts` if all of the above are the same.
     */
    constructor(opts) {
        const { compare, extract, required } = opts;
        this._propsToCompare = compare;
        this._propsToExtract = extract || compare;
        this._requiredProps = required;
    }
    /**
     * Checks if two sets of props need transition in between
     * @param currentProps {object} - a list of viewport props
     * @param nextProps {object} - a list of viewport props
     * @returns {bool} - true if two props are equivalent
     */
    arePropsEqual(currentProps, nextProps) {
        for (const key of this._propsToCompare) {
            if (!(key in currentProps) ||
                !(key in nextProps) ||
                !(0,_math_gl_core__WEBPACK_IMPORTED_MODULE_0__.equals)(currentProps[key], nextProps[key])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Called before transition starts to validate/pre-process start and end props
     * @param startProps {object} - a list of starting viewport props
     * @param endProps {object} - a list of target viewport props
     * @returns {Object} {start, end} - start and end props to be passed
     *   to `interpolateProps`
     */
    initializeProps(startProps, endProps) {
        const startViewStateProps = {};
        const endViewStateProps = {};
        for (const key of this._propsToExtract) {
            if (key in startProps || key in endProps) {
                startViewStateProps[key] = startProps[key];
                endViewStateProps[key] = endProps[key];
            }
        }
        this._checkRequiredProps(startViewStateProps);
        this._checkRequiredProps(endViewStateProps);
        return { start: startViewStateProps, end: endViewStateProps };
    }
    /**
     * Returns transition duration
     * @param startProps {object} - a list of starting viewport props
     * @param endProps {object} - a list of target viewport props
     * @returns {Number} - transition duration in milliseconds
     */
    getDuration(startProps, endProps) {
        return endProps.transitionDuration;
    }
    _checkRequiredProps(props) {
        if (!this._requiredProps) {
            return;
        }
        this._requiredProps.forEach(propName => {
            const value = props[propName];
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_1__["default"])(Number.isFinite(value) || Array.isArray(value), `${propName} is required for transition`);
        });
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/transitions/transition.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/transitions/transition.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Transition)
/* harmony export */ });
class Transition {
    /**
     * @params timeline {Timeline}
     */
    constructor(timeline) {
        this._inProgress = false;
        this._handle = null;
        this.time = 0;
        // @ts-expect-error
        this.settings = {
            duration: 0
        };
        this._timeline = timeline;
    }
    /* Public API */
    get inProgress() {
        return this._inProgress;
    }
    /**
     * (re)start this transition.
     * @params props {object} - optional overriding props. see constructor
     */
    start(settings) {
        this.cancel();
        // @ts-expect-error
        this.settings = settings;
        this._inProgress = true;
        this.settings.onStart?.(this);
    }
    /**
     * end this transition if it is in progress.
     */
    end() {
        if (this._inProgress) {
            this._timeline.removeChannel(this._handle);
            this._handle = null;
            this._inProgress = false;
            this.settings.onEnd?.(this);
        }
    }
    /**
     * cancel this transition if it is in progress.
     */
    cancel() {
        if (this._inProgress) {
            this.settings.onInterrupt?.(this);
            this._timeline.removeChannel(this._handle);
            this._handle = null;
            this._inProgress = false;
        }
    }
    /**
     * update this transition. Returns `true` if updated.
     */
    update() {
        if (!this._inProgress) {
            return false;
        }
        // It is important to initialize the handle during `update` instead of `start`.
        // The CPU time that the `start` frame takes should not be counted towards the duration.
        // On the other hand, `update` always happens during a render cycle. The clock starts when the
        // transition is rendered for the first time.
        if (this._handle === null) {
            const { _timeline: timeline, settings } = this;
            this._handle = timeline.addChannel({
                delay: timeline.getTime(),
                duration: settings.duration
            });
        }
        this.time = this._timeline.getTime(this._handle);
        // Call subclass method
        this._onUpdate();
        // Call user callback
        this.settings.onUpdate?.(this);
        // This only works if `settings.duration` is set
        // Spring transition must call `end` manually
        if (this._timeline.isFinished(this._handle)) {
            this.end();
        }
        return true;
    }
    /* Private API */
    _onUpdate() {
        // for subclass override
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/array-utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/array-utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   padArray: () => (/* binding */ padArray)
/* harmony export */ });
/*
 * Helper function for padArray
 */
function padArrayChunk(options) {
    const { source, target, start = 0, size, getData } = options;
    const end = options.end || target.length;
    const sourceLength = source.length;
    const targetLength = end - start;
    if (sourceLength > targetLength) {
        target.set(source.subarray(0, targetLength), start);
        return;
    }
    target.set(source, start);
    if (!getData) {
        return;
    }
    // source is not large enough to fill target space, call `getData` to get filler data
    let i = sourceLength;
    while (i < targetLength) {
        const datum = getData(i, source);
        for (let j = 0; j < size; j++) {
            target[start + i] = datum[j] || 0;
            i++;
        }
    }
}
/*
 * The padArray function stretches a source array to the size of a target array.
   The arrays can have internal structures (like the attributes of PathLayer and
   SolidPolygonLayer), defined by the optional sourceStartIndices and targetStartIndices parameters.
   If the target array is larger, the getData callback is used to fill in the blanks.
 */
function padArray({ source, target, size, getData, sourceStartIndices, targetStartIndices }) {
    if (!sourceStartIndices || !targetStartIndices) {
        // Flat arrays
        padArrayChunk({
            source,
            target,
            size,
            getData
        });
        return target;
    }
    // Arrays have internal structure
    let sourceIndex = 0;
    let targetIndex = 0;
    const getChunkData = getData && ((i, chunk) => getData(i + targetIndex, chunk));
    const n = Math.min(sourceStartIndices.length, targetStartIndices.length);
    for (let i = 1; i < n; i++) {
        const nextSourceIndex = sourceStartIndices[i] * size;
        const nextTargetIndex = targetStartIndices[i] * size;
        padArrayChunk({
            source: source.subarray(sourceIndex, nextSourceIndex),
            target,
            start: targetIndex,
            end: nextTargetIndex,
            size,
            getData: getChunkData
        });
        sourceIndex = nextSourceIndex;
        targetIndex = nextTargetIndex;
    }
    if (targetIndex < target.length) {
        padArrayChunk({
            // @ts-ignore
            source: [],
            target,
            start: targetIndex,
            size,
            getData: getChunkData
        });
    }
    return target;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/assert.js":
/*!*********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/assert.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ assert)
/* harmony export */ });
// Replacement for the external assert method to reduce bundle size
// Note: We don't use the second "message" argument in calling code,
// so no need to support it here
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'deck.gl: assertion failed.');
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/count.js":
/*!********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/count.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   count: () => (/* binding */ count)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
const ERR_NOT_OBJECT = 'count(): argument not an object';
const ERR_NOT_CONTAINER = 'count(): argument not a container';
/**
 * Deduces numer of elements in a JavaScript container.
 * - Auto-deduction for ES6 containers that define a count() method
 * - Auto-deduction for ES6 containers that define a size member
 * - Auto-deduction for Classic Arrays via the built-in length attribute
 * - Also handles objects, although note that this an O(N) operation
 */
function count(container) {
    if (!isObject(container)) {
        throw new Error(ERR_NOT_OBJECT);
    }
    // Check if ES6 collection "count" function is available
    if (typeof container.count === 'function') {
        return container.count();
    }
    // Check if ES6 collection "size" attribute is set
    if (Number.isFinite(container.size)) {
        return container.size;
    }
    // Check if array length attribute is set
    // Note: checking this last since some ES6 collections (Immutable.js)
    // emit profuse warnings when trying to access `length` attribute
    if (Number.isFinite(container.length)) {
        return container.length;
    }
    // Note that getting the count of an object is O(N)
    if (isPlainObject(container)) {
        return Object.keys(container).length;
    }
    throw new Error(ERR_NOT_CONTAINER);
}
/**
 * Checks if argument is a plain object (not a class or array etc)
 * @param {*} value - JavaScript value to be tested
 * @return {Boolean} - true if argument is a plain JavaScript object
 */
function isPlainObject(value) {
    return value !== null && typeof value === 'object' && value.constructor === Object;
}
/**
 * Checks if argument is an indexable object (not a primitive value, nor null)
 * @param {*} value - JavaScript value to be tested
 * @return {Boolean} - true if argument is a JavaScript object
 */
function isObject(value) {
    return value !== null && typeof value === 'object';
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/deep-equal.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/deep-equal.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepEqual: () => (/* binding */ deepEqual)
/* harmony export */ });
/**
 * Fast partial deep equal for prop.
 *
 * @param a Prop
 * @param b Prop to compare against `a`
 * @param depth Depth to which to recurse in nested Objects/Arrays. Use 0 (default) for shallow comparison, -1 for infinite depth
 */
/* eslint-disable complexity */
function deepEqual(a, b, depth) {
    if (a === b) {
        return true;
    }
    if (!depth || !a || !b) {
        return false;
    }
    if (Array.isArray(a)) {
        if (!Array.isArray(b) || a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!deepEqual(a[i], b[i], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    if (Array.isArray(b)) {
        return false;
    }
    if (typeof a === 'object' && typeof b === 'object') {
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
            return false;
        }
        for (const key of aKeys) {
            if (!b.hasOwnProperty(key)) {
                return false;
            }
            if (!deepEqual(a[key], b[key], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/flatten.js":
/*!**********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/flatten.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fillArray: () => (/* binding */ fillArray),
/* harmony export */   flatten: () => (/* binding */ flatten)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/**
 * Flattens a nested array into a single level array,
 * or a single value into an array with one value
 * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]
 * @example flatten(1) => [1]
 * @param array The array to flatten.
 * @param filter= - Optional predicate called on each `value` to
 *   determine if it should be included (pushed onto) the resulting array.
 * @return Returns the new flattened array (new array or `result` if provided)
 */
function flatten(array, filter = () => true) {
    // Wrap single object in array
    if (!Array.isArray(array)) {
        return filter(array) ? [array] : [];
    }
    // Deep flatten and filter the array
    return flattenArray(array, filter, []);
}
/** Deep flattens an array. Helper to `flatten`, see its parameters */
function flattenArray(array, filter, result) {
    let index = -1;
    while (++index < array.length) {
        const value = array[index];
        if (Array.isArray(value)) {
            flattenArray(value, filter, result);
        }
        else if (filter(value)) {
            result.push(value);
        }
    }
    return result;
}
/** Uses copyWithin to significantly speed up typed array value filling */
function fillArray({ target, source, start = 0, count = 1 }) {
    const length = source.length;
    const total = count * length;
    let copied = 0;
    for (let i = start; copied < length; copied++) {
        target[i++] = source[copied];
    }
    while (copied < total) {
        // If we have copied less than half, copy everything we got
        // else copy remaining in one operation
        if (copied < total - copied) {
            target.copyWithin(start + copied, start, start + copied);
            copied *= 2;
        }
        else {
            target.copyWithin(start + copied, start, start + total - copied);
            copied = total;
        }
    }
    return target;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/iterable-utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIterable: () => (/* binding */ createIterable),
/* harmony export */   getAccessorFromBuffer: () => (/* binding */ getAccessorFromBuffer),
/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable)
/* harmony export */ });
const EMPTY_ARRAY = [];
const placeholderArray = [];
/*
 * Create an Iterable
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols
 * and a "context" tracker from the given data
 */
function createIterable(data, startRow = 0, endRow = Infinity) {
    let iterable = EMPTY_ARRAY;
    const objectInfo = {
        index: -1,
        data,
        // visitor can optionally utilize this to avoid constructing a new array for every object
        target: []
    };
    if (!data) {
        iterable = EMPTY_ARRAY;
    }
    else if (typeof data[Symbol.iterator] === 'function') {
        // data is already an iterable
        iterable = data;
    }
    else if (data.length > 0) {
        placeholderArray.length = data.length;
        iterable = placeholderArray;
    }
    if (startRow > 0 || Number.isFinite(endRow)) {
        iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);
        objectInfo.index = startRow - 1;
    }
    return { iterable, objectInfo };
}
/*
 * Returns true if data is an async iterable object
 */
function isAsyncIterable(data) {
    return data && data[Symbol.asyncIterator];
}
/*
 * Create an accessor function from a flat buffer that yields the value at each object index
 */
function getAccessorFromBuffer(typedArray, options) {
    const { size, stride, offset, startIndices, nested } = options;
    const bytesPerElement = typedArray.BYTES_PER_ELEMENT;
    const elementStride = stride ? stride / bytesPerElement : size;
    const elementOffset = offset ? offset / bytesPerElement : 0;
    const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);
    return (_, { index, target }) => {
        if (!startIndices) {
            const sourceIndex = index * elementStride + elementOffset;
            for (let j = 0; j < size; j++) {
                target[j] = typedArray[sourceIndex + j];
            }
            return target;
        }
        const startIndex = startIndices[index];
        const endIndex = startIndices[index + 1] || vertexCount;
        let result;
        if (nested) {
            result = new Array(endIndex - startIndex);
            for (let i = startIndex; i < endIndex; i++) {
                const sourceIndex = i * elementStride + elementOffset;
                target = new Array(size);
                for (let j = 0; j < size; j++) {
                    target[j] = typedArray[sourceIndex + j];
                }
                result[i - startIndex] = target;
            }
        }
        else if (elementStride === size) {
            result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);
        }
        else {
            result = new typedArray.constructor((endIndex - startIndex) * size);
            let targetIndex = 0;
            for (let i = startIndex; i < endIndex; i++) {
                const sourceIndex = i * elementStride + elementOffset;
                for (let j = 0; j < size; j++) {
                    result[targetIndex++] = typedArray[sourceIndex + j];
                }
            }
        }
        return result;
    };
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/json-loader.js":
/*!**************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/json-loader.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function isJSON(text) {
    const firstChar = text[0];
    const lastChar = text[text.length - 1];
    return (firstChar === '{' && lastChar === '}') || (firstChar === '[' && lastChar === ']');
}
// A light weight version instead of @loaders.gl/json (stream processing etc.)
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    dataType: null,
    batchType: null,
    id: 'JSON',
    name: 'JSON',
    module: '',
    version: '',
    options: {},
    extensions: ['json', 'geojson'],
    mimeTypes: ['application/json', 'application/geo+json'],
    testText: isJSON,
    parseTextSync: JSON.parse
});


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/log.js":
/*!******************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/log.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/log */ "./node_modules/@probe.gl/log/dist/log.js");

const defaultLogger = new _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__.Log({ id: 'deck' });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defaultLogger);


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/math-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/math-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMat4: () => (/* binding */ createMat4),
/* harmony export */   fp64LowPart: () => (/* binding */ fp64LowPart),
/* harmony export */   getCameraPosition: () => (/* binding */ getCameraPosition),
/* harmony export */   getFrustumPlanes: () => (/* binding */ getFrustumPlanes),
/* harmony export */   mergeBounds: () => (/* binding */ mergeBounds),
/* harmony export */   mod: () => (/* binding */ mod),
/* harmony export */   toDoublePrecisionArray: () => (/* binding */ toDoublePrecisionArray)
/* harmony export */ });
/* harmony import */ var _typed_array_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typed-array-manager.js */ "./node_modules/@deck.gl/core/dist/utils/typed-array-manager.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
// Extensions to math.gl library. Intended to be folded back.


// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()
function createMat4() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}
function mod(value, divisor) {
    const modulus = value % divisor;
    return modulus < 0 ? divisor + modulus : modulus;
}
// Extract camera vectors (move to math library?)
function getCameraPosition(viewMatrixInverse) {
    // Read the translation from the inverse view matrix
    return [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]];
}
// https://www.gamedevs.org/uploads/fast-extraction-viewing-frustum-planes-from-world-view-projection-matrix.pdf
function getFrustumPlanes(viewProjectionMatrix) {
    return {
        left: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[0], viewProjectionMatrix[7] + viewProjectionMatrix[4], viewProjectionMatrix[11] + viewProjectionMatrix[8], viewProjectionMatrix[15] + viewProjectionMatrix[12]),
        right: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[0], viewProjectionMatrix[7] - viewProjectionMatrix[4], viewProjectionMatrix[11] - viewProjectionMatrix[8], viewProjectionMatrix[15] - viewProjectionMatrix[12]),
        bottom: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[1], viewProjectionMatrix[7] + viewProjectionMatrix[5], viewProjectionMatrix[11] + viewProjectionMatrix[9], viewProjectionMatrix[15] + viewProjectionMatrix[13]),
        top: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[1], viewProjectionMatrix[7] - viewProjectionMatrix[5], viewProjectionMatrix[11] - viewProjectionMatrix[9], viewProjectionMatrix[15] - viewProjectionMatrix[13]),
        near: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[2], viewProjectionMatrix[7] + viewProjectionMatrix[6], viewProjectionMatrix[11] + viewProjectionMatrix[10], viewProjectionMatrix[15] + viewProjectionMatrix[14]),
        far: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[2], viewProjectionMatrix[7] - viewProjectionMatrix[6], viewProjectionMatrix[11] - viewProjectionMatrix[10], viewProjectionMatrix[15] - viewProjectionMatrix[14])
    };
}
const scratchVector = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Vector3();
function getFrustumPlane(a, b, c, d) {
    scratchVector.set(a, b, c);
    const L = scratchVector.len();
    return { distance: d / L, normal: new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Vector3(-a / L, -b / L, -c / L) };
}
/**
 * Calculate the low part of a WebGL 64 bit float
 * @param x {number} - the input float number
 * @returns {number} - the lower 32 bit of the number
 */
function fp64LowPart(x) {
    return x - Math.fround(x);
}
let scratchArray;
/**
 * Split a Float64Array into a double-length Float32Array
 * @param typedArray
 * @param options
 * @param options.size  - per attribute size
 * @param options.startIndex - start index in the source array
 * @param options.endIndex  - end index in the source array
 * @returns {} - high part, low part for each attribute:
    [1xHi, 1yHi, 1zHi, 1xLow, 1yLow, 1zLow, 2xHi, ...]
 */
function toDoublePrecisionArray(typedArray, options) {
    const { size = 1, startIndex = 0 } = options;
    const endIndex = options.endIndex !== undefined ? options.endIndex : typedArray.length;
    const count = (endIndex - startIndex) / size;
    scratchArray = _typed_array_manager_js__WEBPACK_IMPORTED_MODULE_1__["default"].allocate(scratchArray, count, {
        type: Float32Array,
        size: size * 2
    });
    let sourceIndex = startIndex;
    let targetIndex = 0;
    while (sourceIndex < endIndex) {
        for (let j = 0; j < size; j++) {
            const value = typedArray[sourceIndex++];
            scratchArray[targetIndex + j] = value;
            scratchArray[targetIndex + j + size] = fp64LowPart(value);
        }
        targetIndex += size * 2;
    }
    return scratchArray.subarray(0, count * size * 2);
}
function mergeBounds(boundsList) {
    let mergedBounds = null;
    let isMerged = false;
    for (const bounds of boundsList) {
        /* eslint-disable-next-line no-continue */
        if (!bounds)
            continue;
        if (!mergedBounds) {
            mergedBounds = bounds;
        }
        else {
            if (!isMerged) {
                // Copy to avoid mutating input bounds
                mergedBounds = [
                    [mergedBounds[0][0], mergedBounds[0][1]],
                    [mergedBounds[1][0], mergedBounds[1][1]]
                ];
                isMerged = true;
            }
            mergedBounds[0][0] = Math.min(mergedBounds[0][0], bounds[0][0]);
            mergedBounds[0][1] = Math.min(mergedBounds[0][1], bounds[0][1]);
            mergedBounds[1][0] = Math.max(mergedBounds[1][0], bounds[1][0]);
            mergedBounds[1][1] = Math.max(mergedBounds[1][1], bounds[1][1]);
        }
    }
    return mergedBounds;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/memoize.js":
/*!**********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/memoize.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ memoize)
/* harmony export */ });
function isEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (Array.isArray(a)) {
        // Special treatment for arrays: compare 1-level deep
        // This is to support equality of matrix/coordinate props
        const len = a.length;
        if (!b || b.length !== len) {
            return false;
        }
        for (let i = 0; i < len; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}
/**
 * Speed up consecutive function calls by caching the result of calls with identical input
 * https://en.wikipedia.org/wiki/Memoization
 * @param {function} compute - the function to be memoized
 */
function memoize(compute) {
    let cachedArgs = {};
    let cachedResult;
    return (args) => {
        for (const key in args) {
            if (!isEqual(args[key], cachedArgs[key])) {
                cachedResult = compute(args);
                cachedArgs = args;
                break;
            }
        }
        return cachedResult;
    };
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/positions.js":
/*!************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/positions.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getPosition: () => (/* binding */ getPosition),
/* harmony export */   parsePosition: () => (/* binding */ parsePosition)
/* harmony export */ });
const PERCENT_OR_PIXELS_REGEX = /([0-9]+\.?[0-9]*)(%|px)/;
// Takes a number or a string of formats `50%`, `33.3%` or `200px`
function parsePosition(value) {
    switch (typeof value) {
        case 'number':
            return {
                position: value,
                relative: false
            };
        case 'string':
            const match = PERCENT_OR_PIXELS_REGEX.exec(value);
            if (match && match.length >= 3) {
                const relative = match[2] === '%';
                const position = parseFloat(match[1]);
                return {
                    position: relative ? position / 100 : position,
                    relative
                };
            }
        // fallthrough
        default:
            // eslint-disable-line
            throw new Error(`Could not parse position string ${value}`);
    }
}
function getPosition(position, extent) {
    return position.relative ? Math.round(position.position * extent) : position.position;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/range.js":
/*!********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/range.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EMPTY: () => (/* binding */ EMPTY),
/* harmony export */   FULL: () => (/* binding */ FULL),
/* harmony export */   add: () => (/* binding */ add)
/* harmony export */ });
/*
 * range (Array)
 *   + start (Number) - the start index (incl.)
 *   + end (Number) - the end index (excl.)
 * rangeList (Array) - array of sorted, combined ranges
 */
const EMPTY = [];
const FULL = [[0, Infinity]];
// Insert a range into a range collection
function add(rangeList, range) {
    // Noop if range collection already covers all
    if (rangeList === FULL) {
        return rangeList;
    }
    // Validate the input range
    if (range[0] < 0) {
        range[0] = 0;
    }
    if (range[0] >= range[1]) {
        return rangeList;
    }
    // TODO - split off to tree-shakable Range class
    const newRangeList = [];
    const len = rangeList.length;
    let insertPosition = 0;
    for (let i = 0; i < len; i++) {
        const range0 = rangeList[i];
        if (range0[1] < range[0]) {
            // the current range is to the left of the new range
            newRangeList.push(range0);
            insertPosition = i + 1;
        }
        else if (range0[0] > range[1]) {
            // the current range is to the right of the new range
            newRangeList.push(range0);
        }
        else {
            range = [Math.min(range0[0], range[0]), Math.max(range0[1], range[1])];
        }
    }
    newRangeList.splice(insertPosition, 0, range);
    return newRangeList;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/shader.js":
/*!*********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/shader.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeShaders: () => (/* binding */ mergeShaders)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Merge two luma.gl shader descriptors
function mergeShaders(target, source) {
    if (!source) {
        return target;
    }
    const result = { ...target, ...source };
    if ('defines' in source) {
        result.defines = { ...target.defines, ...source.defines };
    }
    if ('modules' in source) {
        result.modules = (target.modules || []).concat(source.modules);
        // Hack: prject32 and project64 cannot co-exist
        if (source.modules.some(module => module.name === 'project64')) {
            const index = result.modules.findIndex(module => module.name === 'project32');
            if (index >= 0) {
                result.modules.splice(index, 1);
            }
        }
    }
    if ('inject' in source) {
        if (!target.inject) {
            result.inject = source.inject;
        }
        else {
            const mergedInjection = { ...target.inject };
            for (const key in source.inject) {
                mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];
            }
            result.inject = mergedInjection;
        }
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/tesselator.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/tesselator.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tesselator)
/* harmony export */ });
/* harmony import */ var _iterable_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterable-utils.js */ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js");
/* harmony import */ var _typed_array_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typed-array-manager.js */ "./node_modules/@deck.gl/core/dist/utils/typed-array-manager.js");
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ "./node_modules/@deck.gl/core/dist/utils/assert.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.




class Tesselator {
    constructor(opts) {
        this.indexStarts = [0];
        this.vertexStarts = [0];
        this.vertexCount = 0;
        this.instanceCount = 0;
        const { attributes = {} } = opts;
        this.typedArrayManager = _typed_array_manager_js__WEBPACK_IMPORTED_MODULE_0__["default"];
        this.attributes = {};
        this._attributeDefs = attributes;
        this.opts = opts;
        this.updateGeometry(opts);
    }
    /* Public methods */
    updateGeometry(opts) {
        Object.assign(this.opts, opts);
        const { data, buffers = {}, getGeometry, geometryBuffer, positionFormat, dataChanged, normalize = true } = this.opts;
        this.data = data;
        this.getGeometry = getGeometry;
        this.positionSize =
            // @ts-ignore (2339) when geometryBuffer is a luma Buffer, size falls back to positionFormat
            (geometryBuffer && geometryBuffer.size) || (positionFormat === 'XY' ? 2 : 3);
        this.buffers = buffers;
        this.normalize = normalize;
        // Handle external logical value
        if (geometryBuffer) {
            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__["default"])(data.startIndices); // binary data missing startIndices
            this.getGeometry = this.getGeometryFromBuffer(geometryBuffer);
            if (!normalize) {
                // skip packing and set attribute value directly
                // TODO - avoid mutating user-provided object
                buffers.vertexPositions = geometryBuffer;
            }
        }
        this.geometryBuffer = buffers.vertexPositions;
        if (Array.isArray(dataChanged)) {
            // is partial update
            for (const dataRange of dataChanged) {
                this._rebuildGeometry(dataRange);
            }
        }
        else {
            this._rebuildGeometry();
        }
    }
    updatePartialGeometry({ startRow, endRow }) {
        this._rebuildGeometry({ startRow, endRow });
    }
    getGeometryFromBuffer(geometryBuffer) {
        const value = geometryBuffer.value || geometryBuffer;
        if (!ArrayBuffer.isView(value)) {
            // Cannot read binary geometries
            return null;
        }
        // @ts-ignore (2322) NumericArray not assignable to GeometryT
        return (0,_iterable_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAccessorFromBuffer)(value, {
            size: this.positionSize,
            offset: geometryBuffer.offset,
            stride: geometryBuffer.stride,
            startIndices: this.data.startIndices
        });
    }
    /* Private utility methods */
    _allocate(instanceCount, copy) {
        // allocate attributes
        const { attributes, buffers, _attributeDefs, typedArrayManager } = this;
        for (const name in _attributeDefs) {
            if (name in buffers) {
                // Use external buffer
                typedArrayManager.release(attributes[name]);
                attributes[name] = null;
            }
            else {
                const def = _attributeDefs[name];
                // If dataRange is supplied, this is a partial update.
                // In case we need to reallocate the typed array, it will need the old values copied
                // before performing partial update.
                def.copy = copy;
                attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);
            }
        }
    }
    /**
     * Visit all objects
     * `data` is expected to be an iterable consistent with the base Layer expectation
     */
    _forEachGeometry(visitor, startRow, endRow) {
        const { data, getGeometry } = this;
        const { iterable, objectInfo } = (0,_iterable_utils_js__WEBPACK_IMPORTED_MODULE_2__.createIterable)(data, startRow, endRow);
        for (const object of iterable) {
            objectInfo.index++;
            const geometry = getGeometry ? getGeometry(object, objectInfo) : null;
            visitor(geometry, objectInfo.index);
        }
    }
    /* eslint-disable complexity,max-statements */
    _rebuildGeometry(dataRange) {
        if (!this.data) {
            return;
        }
        let { indexStarts, vertexStarts, instanceCount } = this;
        const { data, geometryBuffer } = this;
        const { startRow = 0, endRow = Infinity } = dataRange || {};
        const normalizedData = {};
        if (!dataRange) {
            // Full update - regenerate buffer layout from scratch
            indexStarts = [0];
            vertexStarts = [0];
        }
        if (this.normalize || !geometryBuffer) {
            this._forEachGeometry((geometry, dataIndex) => {
                const normalizedGeometry = geometry && this.normalizeGeometry(geometry);
                normalizedData[dataIndex] = normalizedGeometry;
                vertexStarts[dataIndex + 1] =
                    vertexStarts[dataIndex] +
                        (normalizedGeometry ? this.getGeometrySize(normalizedGeometry) : 0);
            }, startRow, endRow);
            // count instances
            instanceCount = vertexStarts[vertexStarts.length - 1];
        }
        else {
            // assume user provided data is already normalized
            vertexStarts = data.startIndices;
            instanceCount = vertexStarts[data.length] || 0;
            if (ArrayBuffer.isView(geometryBuffer)) {
                instanceCount = instanceCount || geometryBuffer.length / this.positionSize;
            }
            else if (geometryBuffer instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Buffer) {
                const byteStride = this.positionSize * 4;
                instanceCount = instanceCount || geometryBuffer.byteLength / byteStride;
            }
            else if (geometryBuffer.buffer) {
                const byteStride = geometryBuffer.stride || this.positionSize * 4;
                instanceCount = instanceCount || geometryBuffer.buffer.byteLength / byteStride;
            }
            else if (geometryBuffer.value) {
                const bufferValue = geometryBuffer.value;
                const elementStride = 
                // @ts-ignore (2339) if stride is not specified, will fall through to positionSize
                geometryBuffer.stride / bufferValue.BYTES_PER_ELEMENT || this.positionSize;
                instanceCount = instanceCount || bufferValue.length / elementStride;
            }
        }
        // allocate attributes
        this._allocate(instanceCount, Boolean(dataRange));
        this.indexStarts = indexStarts;
        this.vertexStarts = vertexStarts;
        this.instanceCount = instanceCount;
        // @ts-ignore (2739) context will be populated in the loop
        const context = {};
        this._forEachGeometry((geometry, dataIndex) => {
            const normalizedGeometry = normalizedData[dataIndex] || geometry;
            context.vertexStart = vertexStarts[dataIndex];
            context.indexStart = indexStarts[dataIndex];
            const vertexEnd = dataIndex < vertexStarts.length - 1 ? vertexStarts[dataIndex + 1] : instanceCount;
            context.geometrySize = vertexEnd - vertexStarts[dataIndex];
            context.geometryIndex = dataIndex;
            this.updateGeometryAttributes(normalizedGeometry, context);
        }, startRow, endRow);
        this.vertexCount = indexStarts[indexStarts.length - 1];
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/texture.js":
/*!**********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/texture.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTexture: () => (/* binding */ createTexture),
/* harmony export */   destroyTexture: () => (/* binding */ destroyTexture)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");

const DEFAULT_TEXTURE_PARAMETERS = {
    minFilter: 'linear',
    mipmapFilter: 'linear',
    magFilter: 'linear',
    addressModeU: 'clamp-to-edge',
    addressModeV: 'clamp-to-edge'
};
// Track the textures that are created by us. They need to be released when they are no longer used.
const internalTextures = {};
/**
 *
 * @param owner
 * @param device
 * @param image could be one of:
 *   - Texture
 *   - Browser object: Image, ImageData, ImageData, HTMLCanvasElement, HTMLVideoElement, ImageBitmap
 *   - Plain object: {width: <number>, height: <number>, data: <Uint8Array>}
 * @param parameters
 * @returns
 */
function createTexture(owner, device, image, sampler) {
    if (image instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Texture) {
        // @ts-expect-error This type error seems like it shouldn't happen...
        return image;
    }
    else if (image.constructor && image.constructor.name !== 'Object') {
        // Browser object
        image = { data: image };
    }
    let samplerParameters = null;
    if (image.compressed) {
        samplerParameters = {
            minFilter: 'linear',
            mipmapFilter: image.data.length > 1 ? 'nearest' : 'linear'
        };
    }
    const texture = device.createTexture({
        ...image,
        sampler: {
            ...DEFAULT_TEXTURE_PARAMETERS,
            ...samplerParameters,
            ...sampler
        }
    });
    // Track this texture
    internalTextures[texture.id] = owner;
    return texture;
}
function destroyTexture(owner, texture) {
    if (!texture || !(texture instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Texture)) {
        return;
    }
    // Only delete the texture if requested by the same layer that created it
    if (internalTextures[texture.id] === owner) {
        texture.delete();
        delete internalTextures[texture.id];
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/utils/typed-array-manager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/utils/typed-array-manager.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TypedArrayManager: () => (/* binding */ TypedArrayManager),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class TypedArrayManager {
    constructor(options = {}) {
        this._pool = [];
        this.opts = { overAlloc: 2, poolSize: 100 };
        this.setOptions(options);
    }
    setOptions(options) {
        Object.assign(this.opts, options);
    }
    allocate(typedArray, count, { size = 1, type, padding = 0, copy = false, initialize = false, maxCount }) {
        const Type = type || (typedArray && typedArray.constructor) || Float32Array;
        const newSize = count * size + padding;
        if (ArrayBuffer.isView(typedArray)) {
            if (newSize <= typedArray.length) {
                return typedArray;
            }
            if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {
                return new Type(typedArray.buffer, 0, newSize);
            }
        }
        let maxSize = Infinity;
        if (maxCount) {
            maxSize = maxCount * size + padding;
        }
        const newArray = this._allocate(Type, newSize, initialize, maxSize);
        if (typedArray && copy) {
            newArray.set(typedArray);
        }
        else if (!initialize) {
            // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation
            newArray.fill(0, 0, 4);
        }
        this._release(typedArray);
        return newArray;
    }
    release(typedArray) {
        this._release(typedArray);
    }
    _allocate(Type, size, initialize, maxSize) {
        // Allocate at least one element to ensure a valid buffer
        let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);
        // Don't over allocate after certain specified number of elements
        if (sizeToAllocate > maxSize) {
            sizeToAllocate = maxSize;
        }
        // Check if available in pool
        const pool = this._pool;
        const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;
        const i = pool.findIndex(b => b.byteLength >= byteLength);
        if (i >= 0) {
            // Create a new array using an existing buffer
            const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);
            if (initialize) {
                // Viewing a buffer with a different type may create NaNs
                array.fill(0);
            }
            return array;
        }
        return new Type(sizeToAllocate);
    }
    _release(typedArray) {
        if (!ArrayBuffer.isView(typedArray)) {
            return;
        }
        const pool = this._pool;
        const { buffer } = typedArray;
        // Save the buffer of the released array into the pool
        // Sort buffers by size
        // TODO - implement binary search?
        const { byteLength } = buffer;
        const i = pool.findIndex(b => b.byteLength >= byteLength);
        if (i < 0) {
            pool.push(buffer);
        }
        else if (i > 0 || pool.length < this.opts.poolSize) {
            pool.splice(i, 0, buffer);
        }
        if (pool.length > this.opts.poolSize) {
            // Drop the smallest one
            pool.shift();
        }
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new TypedArrayManager());


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/viewports/first-person-viewport.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/viewports/first-person-viewport.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FirstPersonViewport)
/* harmony export */ });
/* harmony import */ var _viewports_viewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../viewports/viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/viewport.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/spherical-coordinates.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");



class FirstPersonViewport extends _viewports_viewport_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(props) {
        // TODO - push direction handling into Matrix4.lookAt
        const { longitude, latitude, modelMatrix, bearing = 0, pitch = 0, up = [0, 0, 1] } = props;
        // Always calculate direction from bearing and pitch
        const spherical = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.SphericalCoordinates({
            bearing,
            // Avoid "pixel project matrix not invertible" error
            pitch: pitch === -90 ? 0.0001 : 90 + pitch
        });
        const dir = spherical.toVector3().normalize();
        // Direction is relative to model coordinates, of course
        const center = modelMatrix ? new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4(modelMatrix).transformAsVector(dir) : dir;
        // Just the direction. All the positioning is done in viewport.js
        const zoom = Number.isFinite(latitude) ? (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.getMeterZoom)({ latitude: latitude }) : 0;
        const scale = Math.pow(2, zoom);
        const viewMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4().lookAt({ eye: [0, 0, 0], center, up }).scale(scale);
        super({
            ...props,
            zoom,
            viewMatrix
        });
        this.latitude = latitude;
        this.longitude = longitude;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/viewports/globe-viewport.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/viewports/globe-viewport.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlobeViewport)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");
/* harmony import */ var _viewport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/viewport.js");
/* harmony import */ var _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js");




const DEGREES_TO_RADIANS = Math.PI / 180;
const RADIANS_TO_DEGREES = 180 / Math.PI;
const EARTH_RADIUS = 6370972;
const GLOBE_RADIUS = 256;
function getDistanceScales() {
    const unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;
    const unitsPerDegree = (Math.PI / 180) * GLOBE_RADIUS;
    return {
        unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],
        unitsPerMeter2: [0, 0, 0],
        metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],
        unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],
        unitsPerDegree2: [0, 0, 0],
        degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]
    };
}
class GlobeViewport extends _viewport_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(opts = {}) {
        const { latitude = 0, longitude = 0, zoom = 0, nearZMultiplier = 0.1, farZMultiplier = 2, resolution = 10 } = opts;
        let { height, altitude = 1.5 } = opts;
        height = height || 1;
        altitude = Math.max(0.75, altitude);
        // Calculate view matrix
        const viewMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Matrix4().lookAt({ eye: [0, -altitude, 0], up: [0, 0, 1] });
        const scale = Math.pow(2, zoom);
        viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);
        viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);
        viewMatrix.scale(scale / height);
        const halfFov = Math.atan(0.5 / altitude);
        const relativeScale = (GLOBE_RADIUS * 2 * scale) / height;
        super({
            ...opts,
            // x, y, width,
            height,
            // view matrix
            viewMatrix,
            longitude,
            latitude,
            zoom,
            // projection matrix parameters
            distanceScales: getDistanceScales(),
            fovyRadians: halfFov * 2,
            focalDistance: altitude,
            near: nearZMultiplier,
            far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier
        });
        this.latitude = latitude;
        this.longitude = longitude;
        this.resolution = resolution;
    }
    get projectionMode() {
        return _lib_constants_js__WEBPACK_IMPORTED_MODULE_2__.PROJECTION_MODE.GLOBE;
    }
    getDistanceScales() {
        return this.distanceScales;
    }
    getBounds(options = {}) {
        const unprojectOption = { targetZ: options.z || 0 };
        const left = this.unproject([0, this.height / 2], unprojectOption);
        const top = this.unproject([this.width / 2, 0], unprojectOption);
        const right = this.unproject([this.width, this.height / 2], unprojectOption);
        const bottom = this.unproject([this.width / 2, this.height], unprojectOption);
        if (right[0] < this.longitude)
            right[0] += 360;
        if (left[0] > this.longitude)
            left[0] -= 360;
        return [
            Math.min(left[0], right[0], top[0], bottom[0]),
            Math.min(left[1], right[1], top[1], bottom[1]),
            Math.max(left[0], right[0], top[0], bottom[0]),
            Math.max(left[1], right[1], top[1], bottom[1])
        ];
    }
    unproject(xyz, { topLeft = true, targetZ } = {}) {
        const [x, y, z] = xyz;
        const y2 = topLeft ? y : this.height - y;
        const { pixelUnprojectionMatrix } = this;
        let coord;
        if (Number.isFinite(z)) {
            // Has depth component
            coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);
        }
        else {
            // since we don't know the correct projected z value for the point,
            // unproject two points to get a line and then find the point on that line that intersects with the sphere
            const coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);
            const coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);
            const lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;
            const lSqr = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.sqrLen(_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.sub([], coord0, coord1));
            const l0Sqr = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.sqrLen(coord0);
            const l1Sqr = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.sqrLen(coord1);
            const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;
            const dSqr = (4 * sSqr) / lSqr;
            const r0 = Math.sqrt(l0Sqr - dSqr);
            const dr = Math.sqrt(Math.max(0, lt * lt - dSqr));
            const t = (r0 - dr) / Math.sqrt(lSqr);
            coord = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.lerp([], coord0, coord1, t);
        }
        const [X, Y, Z] = this.unprojectPosition(coord);
        if (Number.isFinite(z)) {
            return [X, Y, Z];
        }
        return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];
    }
    projectPosition(xyz) {
        const [lng, lat, Z = 0] = xyz;
        const lambda = lng * DEGREES_TO_RADIANS;
        const phi = lat * DEGREES_TO_RADIANS;
        const cosPhi = Math.cos(phi);
        const D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;
        return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];
    }
    unprojectPosition(xyz) {
        const [x, y, z] = xyz;
        const D = _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.len(xyz);
        const phi = Math.asin(z / D);
        const lambda = Math.atan2(x, -y);
        const lng = lambda * RADIANS_TO_DEGREES;
        const lat = phi * RADIANS_TO_DEGREES;
        const Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;
        return [lng, lat, Z];
    }
    projectFlat(xyz) {
        return xyz;
    }
    unprojectFlat(xyz) {
        return xyz;
    }
    panByPosition(coords, pixel) {
        const fromPosition = this.unproject(pixel);
        return {
            longitude: coords[0] - fromPosition[0] + this.longitude,
            latitude: coords[1] - fromPosition[1] + this.latitude
        };
    }
}
function transformVector(matrix, vector) {
    const result = _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.transformMat4([], vector, matrix);
    _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.scale(result, result, 1 / result[3]);
    return result;
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/viewports/viewport.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/viewports/viewport.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Viewport)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/math-utils.js */ "./node_modules/@deck.gl/core/dist/utils/math-utils.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/mat4.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/* harmony import */ var _lib_constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/constants.js */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





const DEGREES_TO_RADIANS = Math.PI / 180;
const IDENTITY = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.createMat4)();
const ZERO_VECTOR = [0, 0, 0];
const DEFAULT_DISTANCE_SCALES = {
    unitsPerMeter: [1, 1, 1],
    metersPerUnit: [1, 1, 1]
};
// / Helpers
function createProjectionMatrix({ width, height, orthographic, fovyRadians, focalDistance, padding, near, far }) {
    const aspect = width / height;
    const matrix = orthographic
        ? new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Matrix4().orthographic({ fovy: fovyRadians, aspect, focalDistance, near, far })
        : new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Matrix4().perspective({ fovy: fovyRadians, aspect, near, far });
    if (padding) {
        const { left = 0, right = 0, top = 0, bottom = 0 } = padding;
        const offsetX = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)((left + width - right) / 2, 0, width) - width / 2;
        const offsetY = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)((top + height - bottom) / 2, 0, height) - height / 2;
        // pixels to clip space
        matrix[8] -= (offsetX * 2) / width;
        matrix[9] += (offsetY * 2) / height;
    }
    return matrix;
}
/**
 * Manages coordinate system transformations.
 *
 * Note: The Viewport is immutable in the sense that it only has accessors.
 * A new viewport instance should be created if any parameters have changed.
 */
class Viewport {
    static { this.displayName = 'Viewport'; }
    // eslint-disable-next-line complexity
    constructor(opts = {}) {
        this._frustumPlanes = {};
        // @ts-ignore
        this.id = opts.id || this.constructor.displayName || 'viewport';
        this.x = opts.x || 0;
        this.y = opts.y || 0;
        // Silently allow apps to send in w,h = 0,0
        this.width = opts.width || 1;
        this.height = opts.height || 1;
        this.zoom = opts.zoom || 0;
        this.padding = opts.padding;
        this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;
        this.focalDistance = opts.focalDistance || 1;
        this.position = opts.position || ZERO_VECTOR;
        this.modelMatrix = opts.modelMatrix || null;
        const { longitude, latitude } = opts;
        this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);
        this._initProps(opts);
        this._initMatrices(opts);
        // Bind methods for easy access
        this.equals = this.equals.bind(this);
        this.project = this.project.bind(this);
        this.unproject = this.unproject.bind(this);
        this.projectPosition = this.projectPosition.bind(this);
        this.unprojectPosition = this.unprojectPosition.bind(this);
        this.projectFlat = this.projectFlat.bind(this);
        this.unprojectFlat = this.unprojectFlat.bind(this);
    }
    get subViewports() {
        return null;
    }
    get metersPerPixel() {
        return this.distanceScales.metersPerUnit[2] / this.scale;
    }
    get projectionMode() {
        if (this.isGeospatial) {
            return this.zoom < 12
                ? _lib_constants_js__WEBPACK_IMPORTED_MODULE_4__.PROJECTION_MODE.WEB_MERCATOR
                : _lib_constants_js__WEBPACK_IMPORTED_MODULE_4__.PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;
        }
        return _lib_constants_js__WEBPACK_IMPORTED_MODULE_4__.PROJECTION_MODE.IDENTITY;
    }
    // Two viewports are equal if width and height are identical, and if
    // their view and projection matrices are (approximately) equal.
    equals(viewport) {
        if (!(viewport instanceof Viewport)) {
            return false;
        }
        if (this === viewport) {
            return true;
        }
        return (viewport.width === this.width &&
            viewport.height === this.height &&
            viewport.scale === this.scale &&
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.equals)(viewport.projectionMatrix, this.projectionMatrix) &&
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.equals)(viewport.viewMatrix, this.viewMatrix));
        // TODO - check distance scales?
    }
    /**
     * Projects xyz (possibly latitude and longitude) to pixel coordinates in window
     * using viewport projection parameters
     * - [longitude, latitude] to [x, y]
     * - [longitude, latitude, Z] => [x, y, z]
     * Note: By default, returns top-left coordinates for canvas/SVG type render
     *
     * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether projected coords are top left
     * @return {Array} - [x, y] or [x, y, z] in top left coords
     */
    project(xyz, { topLeft = true } = {}) {
        const worldPosition = this.projectPosition(xyz);
        const coord = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.worldToPixels)(worldPosition, this.pixelProjectionMatrix);
        const [x, y] = coord;
        const y2 = topLeft ? y : this.height - y;
        return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];
    }
    /**
     * Unproject pixel coordinates on screen onto world coordinates,
     * (possibly [lon, lat]) on map.
     * - [x, y] => [lng, lat]
     * - [x, y, z] => [lng, lat, Z]
     * @param {Array} xyz -
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether origin is top left
     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
     */
    unproject(xyz, { topLeft = true, targetZ } = {}) {
        const [x, y, z] = xyz;
        const y2 = topLeft ? y : this.height - y;
        const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];
        const coord = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.pixelsToWorld)([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);
        const [X, Y, Z] = this.unprojectPosition(coord);
        if (Number.isFinite(z)) {
            return [X, Y, Z];
        }
        return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];
    }
    // NON_LINEAR PROJECTION HOOKS
    // Used for web meractor projection
    projectPosition(xyz) {
        const [X, Y] = this.projectFlat(xyz);
        const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];
        return [X, Y, Z];
    }
    unprojectPosition(xyz) {
        const [X, Y] = this.unprojectFlat(xyz);
        const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];
        return [X, Y, Z];
    }
    /**
     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.
     * Performs the nonlinear part of the web mercator projection.
     * Remaining projection is done with 4x4 matrices which also handles
     * perspective.
     * @param {Array} lngLat - [lng, lat] coordinates
     *   Specifies a point on the sphere to project onto the map.
     * @return {Array} [x,y] coordinates.
     */
    projectFlat(xyz) {
        if (this.isGeospatial) {
            // Shader clamps latitude to +-89.9, see /shaderlib/project/project.glsl.js
            // lngLatToWorld([0, -89.9])[1] = -317.9934163758329
            // lngLatToWorld([0, 89.9])[1] = 829.9934163758271
            const result = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.lngLatToWorld)(xyz);
            result[1] = (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.clamp)(result[1], -318, 830);
            return result;
        }
        return xyz;
    }
    /**
     * Unproject world point [x,y] on map onto {lat, lon} on sphere
     * @param {object|Vector} xy - object with {x,y} members
     *  representing point on projected map plane
     * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.
     *   Has toArray method if you need a GeoJSON Array.
     *   Per cartographic tradition, lat and lon are specified as degrees.
     */
    unprojectFlat(xyz) {
        if (this.isGeospatial) {
            return (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.worldToLngLat)(xyz);
        }
        return xyz;
    }
    /**
     * Get bounds of the current viewport
     * @return {Array} - [minX, minY, maxX, maxY]
     */
    getBounds(options = {}) {
        const unprojectOption = { targetZ: options.z || 0 };
        const topLeft = this.unproject([0, 0], unprojectOption);
        const topRight = this.unproject([this.width, 0], unprojectOption);
        const bottomLeft = this.unproject([0, this.height], unprojectOption);
        const bottomRight = this.unproject([this.width, this.height], unprojectOption);
        return [
            Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),
            Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])
        ];
    }
    getDistanceScales(coordinateOrigin) {
        if (coordinateOrigin) {
            return (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.getDistanceScales)({
                longitude: coordinateOrigin[0],
                latitude: coordinateOrigin[1],
                highPrecision: true
            });
        }
        return this.distanceScales;
    }
    containsPixel({ x, y, width = 1, height = 1 }) {
        return (x < this.x + this.width &&
            this.x < x + width &&
            y < this.y + this.height &&
            this.y < y + height);
    }
    // Extract frustum planes in common space
    getFrustumPlanes() {
        if (this._frustumPlanes.near) {
            // @ts-ignore
            return this._frustumPlanes;
        }
        Object.assign(this._frustumPlanes, (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.getFrustumPlanes)(this.viewProjectionMatrix));
        // @ts-ignore
        return this._frustumPlanes;
    }
    // EXPERIMENTAL METHODS
    /**
     * Needed by panning and linear transition
     * Pan the viewport to place a given world coordinate at screen point [x, y]
     *
     * @param {Array} coords - world coordinates
     * @param {Array} pixel - [x,y] coordinates on screen
     * @return {Object} props of the new viewport
     */
    panByPosition(coords, pixel) {
        return null;
    }
    // INTERNAL METHODS
    /* eslint-disable complexity, max-statements */
    _initProps(opts) {
        const longitude = opts.longitude;
        const latitude = opts.latitude;
        if (this.isGeospatial) {
            if (!Number.isFinite(opts.zoom)) {
                this.zoom = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.getMeterZoom)({ latitude }) + Math.log2(this.focalDistance);
            }
            this.distanceScales = opts.distanceScales || (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.getDistanceScales)({ latitude, longitude });
        }
        const scale = Math.pow(2, this.zoom);
        this.scale = scale;
        const { position, modelMatrix } = opts;
        let meterOffset = ZERO_VECTOR;
        if (position) {
            meterOffset = modelMatrix
                ? new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Matrix4(modelMatrix).transformAsVector(position, [])
                : position;
        }
        if (this.isGeospatial) {
            // Determine camera center in common space
            const center = this.projectPosition([longitude, latitude, 0]);
            this.center = new _math_gl_core__WEBPACK_IMPORTED_MODULE_5__.Vector3(meterOffset)
                // Convert to pixels in current zoom
                .scale(this.distanceScales.unitsPerMeter)
                .add(center);
        }
        else {
            this.center = this.projectPosition(meterOffset);
        }
    }
    /* eslint-enable complexity, max-statements */
    _initMatrices(opts) {
        const { 
        // View matrix
        viewMatrix = IDENTITY, 
        // Projection matrix
        projectionMatrix = null, 
        // Projection matrix parameters, used if projectionMatrix not supplied
        orthographic = false, fovyRadians, fovy = 75, near = 0.1, // Distance of near clipping plane
        far = 1000, // Distance of far clipping plane
        padding = null, // Center offset in pixels
        focalDistance = 1 } = opts;
        this.viewMatrixUncentered = viewMatrix;
        // Make a centered version of the matrix for projection modes without an offset
        this.viewMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Matrix4()
            // Apply the uncentered view matrix
            .multiplyRight(viewMatrix)
            // And center it
            .translate(new _math_gl_core__WEBPACK_IMPORTED_MODULE_5__.Vector3(this.center).negate());
        this.projectionMatrix =
            projectionMatrix ||
                createProjectionMatrix({
                    width: this.width,
                    height: this.height,
                    orthographic,
                    fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,
                    focalDistance,
                    padding,
                    near,
                    far
                });
        // Note: As usual, matrix operations should be applied in "reverse" order
        // since vectors will be multiplied in from the right during transformation
        const vpm = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.createMat4)();
        _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.multiply(vpm, vpm, this.projectionMatrix);
        _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.multiply(vpm, vpm, this.viewMatrix);
        this.viewProjectionMatrix = vpm;
        // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);
        // Calculate inverse view matrix
        this.viewMatrixInverse = _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.invert([], this.viewMatrix) || this.viewMatrix;
        // Decompose camera parameters
        this.cameraPosition = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.getCameraPosition)(this.viewMatrixInverse);
        /*
         * Builds matrices that converts preprojected lngLats to screen pixels
         * and vice versa.
         * Note: Currently returns bottom-left coordinates!
         * Note: Starts with the GL projection matrix and adds steps to the
         *       scale and translate that matrix onto the window.
         * Note: WebGL controls clip space to screen projection with gl.viewport
         *       and does not need this step.
         */
        // matrix for conversion from world location to screen (pixel) coordinates
        const viewportMatrix = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.createMat4)(); // matrix from NDC to viewport.
        const pixelProjectionMatrix = (0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.createMat4)(); // matrix from world space to viewport.
        _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);
        _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);
        _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);
        this.pixelProjectionMatrix = pixelProjectionMatrix;
        this.pixelUnprojectionMatrix = _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.invert((0,_utils_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.createMat4)(), this.pixelProjectionMatrix);
        if (!this.pixelUnprojectionMatrix) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_7__["default"].warn('Pixel project matrix not invertible')();
            // throw new Error('Pixel project matrix not invertible');
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WebMercatorViewport)
/* harmony export */ });
/* harmony import */ var _viewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/viewport.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// View and Projection Matrix calculations for mapbox-js style
// map view properties



/**
 * Manages transformations to/from WGS84 coordinates using the Web Mercator Projection.
 */
class WebMercatorViewport extends _viewport_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
    static { this.displayName = 'WebMercatorViewport'; }
    /* eslint-disable complexity, max-statements */
    constructor(opts = {}) {
        const { latitude = 0, longitude = 0, zoom = 0, pitch = 0, bearing = 0, nearZMultiplier = 0.1, farZMultiplier = 1.01, nearZ, farZ, orthographic = false, projectionMatrix, repeat = false, worldOffset = 0, position, padding, 
        // backward compatibility
        // TODO: remove in v9
        legacyMeterSizes = false } = opts;
        let { width, height, altitude = 1.5 } = opts;
        const scale = Math.pow(2, zoom);
        // Silently allow apps to send in 0,0 to facilitate isomorphic render etc
        width = width || 1;
        height = height || 1;
        let fovy;
        let projectionParameters = null;
        if (projectionMatrix) {
            altitude = projectionMatrix[5] / 2;
            fovy = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.altitudeToFovy)(altitude);
        }
        else {
            if (opts.fovy) {
                fovy = opts.fovy;
                altitude = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.fovyToAltitude)(fovy);
            }
            else {
                fovy = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.altitudeToFovy)(altitude);
            }
            let offset;
            if (padding) {
                const { top = 0, bottom = 0 } = padding;
                offset = [0, (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.clamp)((top + height - bottom) / 2, 0, height) - height / 2];
            }
            projectionParameters = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.getProjectionParameters)({
                width,
                height,
                scale,
                center: position && [0, 0, position[2] * (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.unitsPerMeter)(latitude)],
                offset,
                pitch,
                fovy,
                nearZMultiplier,
                farZMultiplier
            });
            if (Number.isFinite(nearZ)) {
                projectionParameters.near = nearZ;
            }
            if (Number.isFinite(farZ)) {
                projectionParameters.far = farZ;
            }
        }
        // The uncentered matrix allows us two move the center addition to the
        // shader (cheap) which gives a coordinate system that has its center in
        // the layer's center position. This makes rotations and other modelMatrx
        // transforms much more useful.
        let viewMatrixUncentered = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.getViewMatrix)({
            height,
            pitch,
            bearing,
            scale,
            altitude
        });
        if (worldOffset) {
            const viewOffset = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4().translate([512 * worldOffset, 0, 0]);
            viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);
        }
        super({
            ...opts,
            // x, y,
            width,
            height,
            // view matrix
            viewMatrix: viewMatrixUncentered,
            longitude,
            latitude,
            zoom,
            // projection matrix parameters
            ...projectionParameters,
            fovy,
            focalDistance: altitude
        });
        // Save parameters
        this.latitude = latitude;
        this.longitude = longitude;
        this.zoom = zoom;
        this.pitch = pitch;
        this.bearing = bearing;
        this.altitude = altitude;
        this.fovy = fovy;
        this.orthographic = orthographic;
        this._subViewports = repeat ? [] : null;
        this._pseudoMeters = legacyMeterSizes;
        Object.freeze(this);
    }
    /* eslint-enable complexity, max-statements */
    get subViewports() {
        if (this._subViewports && !this._subViewports.length) {
            // Cache sub viewports so that we only calculate them once
            const bounds = this.getBounds();
            const minOffset = Math.floor((bounds[0] + 180) / 360);
            const maxOffset = Math.ceil((bounds[2] - 180) / 360);
            for (let x = minOffset; x <= maxOffset; x++) {
                const offsetViewport = x
                    ? new WebMercatorViewport({
                        ...this,
                        worldOffset: x
                    })
                    : this;
                this._subViewports.push(offsetViewport);
            }
        }
        return this._subViewports;
    }
    projectPosition(xyz) {
        if (this._pseudoMeters) {
            // Backward compatibility
            return super.projectPosition(xyz);
        }
        const [X, Y] = this.projectFlat(xyz);
        const Z = (xyz[2] || 0) * (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.unitsPerMeter)(xyz[1]);
        return [X, Y, Z];
    }
    unprojectPosition(xyz) {
        if (this._pseudoMeters) {
            // Backward compatibility
            return super.unprojectPosition(xyz);
        }
        const [X, Y] = this.unprojectFlat(xyz);
        const Z = (xyz[2] || 0) / (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.unitsPerMeter)(Y);
        return [X, Y, Z];
    }
    /**
     * Add a meter delta to a base lnglat coordinate, returning a new lnglat array
     *
     * Note: Uses simple linear approximation around the viewport center
     * Error increases with size of offset (roughly 1% per 100km)
     *
     * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate
     * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas
     * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas
     */
    addMetersToLngLat(lngLatZ, xyz) {
        return (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.addMetersToLngLat)(lngLatZ, xyz);
    }
    panByPosition(coords, pixel) {
        const fromLocation = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.pixelsToWorld)(pixel, this.pixelUnprojectionMatrix);
        const toLocation = this.projectFlat(coords);
        const translate = _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.add([], toLocation, _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.negate([], fromLocation));
        const newCenter = _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.add([], this.center, translate);
        const [longitude, latitude] = this.unprojectFlat(newCenter);
        return { longitude, latitude };
    }
    getBounds(options = {}) {
        // @ts-ignore
        const corners = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.getBounds)(this, options.z || 0);
        return [
            Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
            Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),
            Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
            Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])
        ];
    }
    /**
     * Returns a new viewport that fit around the given rectangle.
     * Only supports non-perspective mode.
     */
    fitBounds(
    /** [[lon, lat], [lon, lat]] */
    bounds, options = {}) {
        const { width, height } = this;
        const { longitude, latitude, zoom } = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.fitBounds)({ width, height, bounds, ...options });
        return new WebMercatorViewport({ width, height, longitude, latitude, zoom });
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/views/first-person-view.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/views/first-person-view.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FirstPersonView)
/* harmony export */ });
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view.js */ "./node_modules/@deck.gl/core/dist/views/view.js");
/* harmony import */ var _viewports_first_person_viewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../viewports/first-person-viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/first-person-viewport.js");
/* harmony import */ var _controllers_first_person_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controllers/first-person-controller.js */ "./node_modules/@deck.gl/core/dist/controllers/first-person-controller.js");



class FirstPersonView extends _view_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.displayName = 'FirstPersonView'; }
    constructor(props = {}) {
        super(props);
    }
    get ViewportType() {
        return _viewports_first_person_viewport_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    }
    get ControllerType() {
        return _controllers_first_person_controller_js__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/views/globe-view.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/views/globe-view.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlobeView)
/* harmony export */ });
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view.js */ "./node_modules/@deck.gl/core/dist/views/view.js");
/* harmony import */ var _viewports_globe_viewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../viewports/globe-viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/globe-viewport.js");
/* harmony import */ var _controllers_globe_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controllers/globe-controller.js */ "./node_modules/@deck.gl/core/dist/controllers/globe-controller.js");



class GlobeView extends _view_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.displayName = 'GlobeView'; }
    constructor(props = {}) {
        super(props);
    }
    get ViewportType() {
        return _viewports_globe_viewport_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    }
    get ControllerType() {
        return _controllers_globe_controller_js__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/views/map-view.js":
/*!***********************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/views/map-view.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MapView)
/* harmony export */ });
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view.js */ "./node_modules/@deck.gl/core/dist/views/view.js");
/* harmony import */ var _viewports_web_mercator_viewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../viewports/web-mercator-viewport.js */ "./node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js");
/* harmony import */ var _controllers_map_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controllers/map-controller.js */ "./node_modules/@deck.gl/core/dist/controllers/map-controller.js");



class MapView extends _view_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.displayName = 'MapView'; }
    constructor(props = {}) {
        super(props);
    }
    get ViewportType() {
        return _viewports_web_mercator_viewport_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    }
    get ControllerType() {
        return _controllers_map_controller_js__WEBPACK_IMPORTED_MODULE_2__["default"];
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/core/dist/views/view.js":
/*!*******************************************************!*\
  !*** ./node_modules/@deck.gl/core/dist/views/view.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ View)
/* harmony export */ });
/* harmony import */ var _utils_positions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/positions.js */ "./node_modules/@deck.gl/core/dist/utils/positions.js");
/* harmony import */ var _utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/deep-equal.js */ "./node_modules/@deck.gl/core/dist/utils/deep-equal.js");


class View {
    constructor(props) {
        const { id, x = 0, y = 0, width = '100%', height = '100%', padding = null } = props;
        // @ts-ignore
        this.id = id || this.constructor.displayName || 'view';
        this.props = { ...props, id: this.id };
        // Extents
        this._x = (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(x);
        this._y = (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(y);
        this._width = (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(width);
        this._height = (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(height);
        this._padding = padding && {
            left: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(padding.left || 0),
            right: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(padding.right || 0),
            top: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(padding.top || 0),
            bottom: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.parsePosition)(padding.bottom || 0)
        };
        // Bind methods for easy access
        this.equals = this.equals.bind(this);
        Object.seal(this);
    }
    equals(view) {
        if (this === view) {
            return true;
        }
        // To correctly compare padding use depth=2
        return this.ViewportType === view.ViewportType && (0,_utils_deep_equal_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(this.props, view.props, 2);
    }
    /** Make viewport from canvas dimensions and view state */
    makeViewport({ width, height, viewState }) {
        viewState = this.filterViewState(viewState);
        // Resolve relative viewport dimensions
        const viewportDimensions = this.getDimensions({ width, height });
        if (!viewportDimensions.height || !viewportDimensions.width) {
            return null;
        }
        return new this.ViewportType({ ...viewState, ...this.props, ...viewportDimensions });
    }
    getViewStateId() {
        const { viewState } = this.props;
        if (typeof viewState === 'string') {
            // if View.viewState is a string, return it
            return viewState;
        }
        return viewState?.id || this.id;
    }
    // Allows view to override (or completely define) viewState
    filterViewState(viewState) {
        if (this.props.viewState && typeof this.props.viewState === 'object') {
            // If we have specified an id, then intent is to override,
            // If not, completely specify the view state
            if (!this.props.viewState.id) {
                return this.props.viewState;
            }
            // Merge in all props from View's viewState, except id
            const newViewState = { ...viewState };
            for (const key in this.props.viewState) {
                if (key !== 'id') {
                    newViewState[key] = this.props.viewState[key];
                }
            }
            return newViewState;
        }
        return viewState;
    }
    /** Resolve the dimensions of the view from overall canvas dimensions */
    getDimensions({ width, height }) {
        const dimensions = {
            x: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._x, width),
            y: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._y, height),
            width: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._width, width),
            height: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._height, height)
        };
        if (this._padding) {
            dimensions.padding = {
                left: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._padding.left, width),
                top: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._padding.top, height),
                right: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._padding.right, width),
                bottom: (0,_utils_positions_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(this._padding.bottom, height)
            };
        }
        return dimensions;
    }
    // Used by sub classes to resolve controller props
    get controller() {
        const opts = this.props.controller;
        if (!opts) {
            return null;
        }
        if (opts === true) {
            return { type: this.ControllerType };
        }
        if (typeof opts === 'function') {
            return { type: opts };
        }
        return { type: this.ControllerType, ...opts };
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/geo-layers/dist/terrain-layer/terrain-layer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@deck.gl/geo-layers/dist/terrain-layer/terrain-layer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TerrainLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/composite-layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _deck_gl_mesh_layers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/mesh-layers */ "./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _loaders_gl_terrain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @loaders.gl/terrain */ "./node_modules/@loaders.gl/terrain/dist/terrain-loader.js");
/* harmony import */ var _tile_layer_tile_layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tile-layer/tile-layer.js */ "./node_modules/@deck.gl/geo-layers/dist/tile-layer/tile-layer.js");
/* harmony import */ var _tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tileset-2d/index.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/utils.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.






const DUMMY_DATA = [1];
const defaultProps = {
    ..._tile_layer_tile_layer_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultProps,
    // Image url that encodes height data
    elevationData: _tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__.urlType,
    // Image url to use as texture
    texture: { ..._tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__.urlType, optional: true },
    // Martini error tolerance in meters, smaller number -> more detailed mesh
    meshMaxError: { type: 'number', value: 4.0 },
    // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates
    bounds: { type: 'array', value: null, optional: true, compare: true },
    // Color to use if texture is unavailable
    color: { type: 'color', value: [255, 255, 255] },
    // Object to decode height data, from (r, g, b) to height in meters
    elevationDecoder: {
        type: 'object',
        value: {
            rScaler: 1,
            gScaler: 0,
            bScaler: 0,
            offset: 0
        }
    },
    // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.
    workerUrl: '',
    // Same as SimpleMeshLayer wireframe
    wireframe: false,
    material: true,
    loaders: [_loaders_gl_terrain__WEBPACK_IMPORTED_MODULE_2__.TerrainLoader]
};
// Turns array of templates into a single string to work around shallow change
function urlTemplateToUpdateTrigger(template) {
    if (Array.isArray(template)) {
        return template.join(';');
    }
    return template || '';
}
/** Render mesh surfaces from height map images. */
class TerrainLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'TerrainLayer'; }
    updateState({ props, oldProps }) {
        const elevationDataChanged = props.elevationData !== oldProps.elevationData;
        if (elevationDataChanged) {
            const { elevationData } = props;
            const isTiled = elevationData &&
                (Array.isArray(elevationData) ||
                    (elevationData.includes('{x}') && elevationData.includes('{y}')));
            this.setState({ isTiled });
        }
        // Reloading for single terrain mesh
        const shouldReload = elevationDataChanged ||
            props.meshMaxError !== oldProps.meshMaxError ||
            props.elevationDecoder !== oldProps.elevationDecoder ||
            props.bounds !== oldProps.bounds;
        if (!this.state.isTiled && shouldReload) {
            // When state.isTiled, elevationData cannot be an array
            const terrain = this.loadTerrain(props);
            this.setState({ terrain });
        }
        // TODO - remove in v9
        // @ts-ignore
        if (props.workerUrl) {
            _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"].removed('workerUrl', 'loadOptions.terrain.workerUrl')();
        }
    }
    loadTerrain({ elevationData, bounds, elevationDecoder, meshMaxError, signal }) {
        if (!elevationData) {
            return null;
        }
        let loadOptions = this.getLoadOptions();
        loadOptions = {
            ...loadOptions,
            terrain: {
                skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,
                ...loadOptions?.terrain,
                bounds,
                meshMaxError,
                elevationDecoder
            }
        };
        const { fetch } = this.props;
        return fetch(elevationData, { propName: 'elevationData', layer: this, loadOptions, signal });
    }
    getTiledTerrainData(tile) {
        const { elevationData, fetch, texture, elevationDecoder, meshMaxError } = this.props;
        const { viewport } = this.context;
        const dataUrl = (0,_tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__.getURLFromTemplate)(elevationData, tile);
        const textureUrl = texture && (0,_tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__.getURLFromTemplate)(texture, tile);
        const { signal } = tile;
        let bottomLeft = [0, 0];
        let topRight = [0, 0];
        if (viewport.isGeospatial) {
            const bbox = tile.bbox;
            bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);
            topRight = viewport.projectFlat([bbox.east, bbox.north]);
        }
        else {
            const bbox = tile.bbox;
            bottomLeft = [bbox.left, bbox.bottom];
            topRight = [bbox.right, bbox.top];
        }
        const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];
        const terrain = this.loadTerrain({
            elevationData: dataUrl,
            bounds,
            elevationDecoder,
            meshMaxError,
            signal
        });
        const surface = textureUrl
            ? // If surface image fails to load, the tile should still be displayed
                fetch(textureUrl, { propName: 'texture', layer: this, loaders: [], signal }).catch(_ => null)
            : Promise.resolve(null);
        return Promise.all([terrain, surface]);
    }
    renderSubLayers(props) {
        const SubLayerClass = this.getSubLayerClass('mesh', _deck_gl_mesh_layers__WEBPACK_IMPORTED_MODULE_5__["default"]);
        const { color, wireframe, material } = this.props;
        const { data } = props;
        if (!data) {
            return null;
        }
        const [mesh, texture] = data;
        return new SubLayerClass(props, {
            data: DUMMY_DATA,
            mesh,
            texture,
            _instanced: false,
            coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__.COORDINATE_SYSTEM.CARTESIAN,
            getPosition: d => [0, 0, 0],
            getColor: color,
            wireframe,
            material
        });
    }
    // Update zRange of viewport
    onViewportLoad(tiles) {
        if (!tiles) {
            return;
        }
        const { zRange } = this.state;
        const ranges = tiles
            .map(tile => tile.content)
            .filter(Boolean)
            .map(arr => {
            // @ts-ignore
            const bounds = arr[0].header.boundingBox;
            return bounds.map(bound => bound[2]);
        });
        if (ranges.length === 0) {
            return;
        }
        const minZ = Math.min(...ranges.map(x => x[0]));
        const maxZ = Math.max(...ranges.map(x => x[1]));
        if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {
            this.setState({ zRange: [minZ, maxZ] });
        }
    }
    renderLayers() {
        const { color, material, elevationData, texture, wireframe, meshMaxError, elevationDecoder, tileSize, maxZoom, minZoom, extent, maxRequests, onTileLoad, onTileUnload, onTileError, maxCacheSize, maxCacheByteSize, refinementStrategy } = this.props;
        if (this.state.isTiled) {
            return new _tile_layer_tile_layer_js__WEBPACK_IMPORTED_MODULE_0__["default"](this.getSubLayerProps({
                id: 'tiles'
            }), {
                getTileData: this.getTiledTerrainData.bind(this),
                renderSubLayers: this.renderSubLayers.bind(this),
                updateTriggers: {
                    getTileData: {
                        elevationData: urlTemplateToUpdateTrigger(elevationData),
                        texture: urlTemplateToUpdateTrigger(texture),
                        meshMaxError,
                        elevationDecoder
                    }
                },
                onViewportLoad: this.onViewportLoad.bind(this),
                zRange: this.state.zRange || null,
                tileSize,
                maxZoom,
                minZoom,
                extent,
                maxRequests,
                onTileLoad,
                onTileUnload,
                onTileError,
                maxCacheSize,
                maxCacheByteSize,
                refinementStrategy
            });
        }
        if (!elevationData) {
            return null;
        }
        const SubLayerClass = this.getSubLayerClass('mesh', _deck_gl_mesh_layers__WEBPACK_IMPORTED_MODULE_5__["default"]);
        return new SubLayerClass(this.getSubLayerProps({
            id: 'mesh'
        }), {
            data: DUMMY_DATA,
            mesh: this.state.terrain,
            texture,
            _instanced: false,
            getPosition: d => [0, 0, 0],
            getColor: color,
            material,
            wireframe
        });
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/geo-layers/dist/tile-layer/tile-layer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@deck.gl/geo-layers/dist/tile-layer/tile-layer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TileLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/composite-layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/flatten.js");
/* harmony import */ var _deck_gl_layers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deck.gl/layers */ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js");
/* harmony import */ var _tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tileset-2d/index.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tileset-2d.js");
/* harmony import */ var _tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tileset-2d/index.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/utils.js");




const defaultProps = {
    TilesetClass: _tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_0__.Tileset2D,
    data: { type: 'data', value: [] },
    dataComparator: _tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__.urlType.equal,
    renderSubLayers: { type: 'function', value: (props) => new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_2__["default"](props) },
    getTileData: { type: 'function', optional: true, value: null },
    // TODO - change to onViewportLoad to align with Tile3DLayer
    onViewportLoad: { type: 'function', optional: true, value: null },
    onTileLoad: { type: 'function', value: tile => { } },
    onTileUnload: { type: 'function', value: tile => { } },
    // eslint-disable-next-line
    onTileError: { type: 'function', value: err => console.error(err) },
    extent: { type: 'array', optional: true, value: null, compare: true },
    tileSize: 512,
    maxZoom: null,
    minZoom: 0,
    maxCacheSize: null,
    maxCacheByteSize: null,
    refinementStrategy: _tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_0__.STRATEGY_DEFAULT,
    zRange: null,
    maxRequests: 6,
    debounceTime: 0,
    zoomOffset: 0
};
/**
 * The TileLayer is a composite layer that makes it possible to visualize very large datasets.
 *
 * Instead of fetching the entire dataset, it only loads and renders what's visible in the current viewport.
 */
class TileLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'TileLayer'; }
    initializeState() {
        this.state = {
            tileset: null,
            isLoaded: false
        };
    }
    finalizeState() {
        this.state?.tileset?.finalize();
    }
    get isLoaded() {
        return Boolean(this.state?.tileset?.selectedTiles?.every(tile => tile.isLoaded && tile.layers && tile.layers.every(layer => layer.isLoaded)));
    }
    shouldUpdateState({ changeFlags }) {
        return changeFlags.somethingChanged;
    }
    updateState({ changeFlags }) {
        let { tileset } = this.state;
        const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;
        const dataChanged = changeFlags.dataChanged ||
            (changeFlags.updateTriggersChanged &&
                (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));
        if (!tileset) {
            tileset = new this.props.TilesetClass(this._getTilesetOptions());
            this.setState({ tileset });
        }
        else if (propsChanged) {
            tileset.setOptions(this._getTilesetOptions());
            if (dataChanged) {
                // reload all tiles
                // use cached layers until new content is loaded
                tileset.reloadAll();
            }
            else {
                // some render options changed, regenerate sub layers now
                tileset.tiles.forEach(tile => {
                    tile.layers = null;
                });
            }
        }
        this._updateTileset();
    }
    _getTilesetOptions() {
        const { tileSize, maxCacheSize, maxCacheByteSize, refinementStrategy, extent, maxZoom, minZoom, maxRequests, debounceTime, zoomOffset } = this.props;
        return {
            maxCacheSize,
            maxCacheByteSize,
            maxZoom,
            minZoom,
            tileSize,
            refinementStrategy,
            extent,
            maxRequests,
            debounceTime,
            zoomOffset,
            getTileData: this.getTileData.bind(this),
            onTileLoad: this._onTileLoad.bind(this),
            onTileError: this._onTileError.bind(this),
            onTileUnload: this._onTileUnload.bind(this)
        };
    }
    _updateTileset() {
        const tileset = this.state.tileset;
        const { zRange, modelMatrix } = this.props;
        const frameNumber = tileset.update(this.context.viewport, { zRange, modelMatrix });
        const { isLoaded } = tileset;
        const loadingStateChanged = this.state.isLoaded !== isLoaded;
        const tilesetChanged = this.state.frameNumber !== frameNumber;
        if (isLoaded && (loadingStateChanged || tilesetChanged)) {
            this._onViewportLoad();
        }
        if (tilesetChanged) {
            // Save the tileset frame number - trigger a rerender
            this.setState({ frameNumber });
        }
        // Save the loaded state - should not trigger a rerender
        this.state.isLoaded = isLoaded;
    }
    _onViewportLoad() {
        const { tileset } = this.state;
        const { onViewportLoad } = this.props;
        if (onViewportLoad) {
            // This method can only be called when tileset is defined and updated
            onViewportLoad(tileset.selectedTiles);
        }
    }
    _onTileLoad(tile) {
        this.props.onTileLoad(tile);
        tile.layers = null;
        this.setNeedsUpdate();
    }
    _onTileError(error, tile) {
        this.props.onTileError(error);
        tile.layers = null;
        this.setNeedsUpdate();
    }
    _onTileUnload(tile) {
        this.props.onTileUnload(tile);
    }
    // Methods for subclass to override
    getTileData(tile) {
        const { data, getTileData, fetch } = this.props;
        const { signal } = tile;
        tile.url =
            typeof data === 'string' || Array.isArray(data) ? (0,_tileset_2d_index_js__WEBPACK_IMPORTED_MODULE_1__.getURLFromTemplate)(data, tile) : null;
        if (getTileData) {
            return getTileData(tile);
        }
        if (fetch && tile.url) {
            return fetch(tile.url, { propName: 'data', layer: this, signal });
        }
        return null;
    }
    renderSubLayers(props) {
        return this.props.renderSubLayers(props);
    }
    getSubLayerPropsByTile(tile) {
        return null;
    }
    getPickingInfo(params) {
        // TileLayer does not directly render anything, sourceLayer cannot be null
        const sourceLayer = params.sourceLayer;
        const sourceTile = sourceLayer.props.tile;
        const info = params.info;
        if (info.picked) {
            info.tile = sourceTile;
        }
        info.sourceTile = sourceTile;
        info.sourceTileSubLayer = sourceLayer;
        return info;
    }
    _updateAutoHighlight(info) {
        info.sourceTileSubLayer.updateAutoHighlight(info);
    }
    renderLayers() {
        return this.state.tileset.tiles.map((tile) => {
            const subLayerProps = this.getSubLayerPropsByTile(tile);
            // cache the rendered layer in the tile
            if (!tile.isLoaded && !tile.content) {
                // nothing to show
            }
            else if (!tile.layers) {
                const layers = this.renderSubLayers({
                    ...this.props,
                    ...this.getSubLayerProps({
                        id: tile.id,
                        updateTriggers: this.props.updateTriggers
                    }),
                    data: tile.content,
                    _offset: 0,
                    tile
                });
                tile.layers = (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_4__.flatten)(layers, Boolean).map(layer => layer.clone({
                    tile,
                    ...subLayerProps
                }));
            }
            else if (subLayerProps &&
                tile.layers[0] &&
                Object.keys(subLayerProps).some(propName => tile.layers[0].props[propName] !== subLayerProps[propName])) {
                tile.layers = tile.layers.map(layer => layer.clone(subLayerProps));
            }
            return tile.layers;
        });
    }
    filterSubLayer({ layer, cullRect }) {
        const { tile } = layer.props;
        return this.state.tileset.isTileVisible(tile, cullRect);
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/memoize.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@deck.gl/geo-layers/dist/tileset-2d/memoize.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   memoize: () => (/* binding */ memoize)
/* harmony export */ });
// deck.gl, MIT license
// @note - this is a duplicate of the deck.gl core export (because Tileset2D should be deck.gl independent)
/**
 * Speed up consecutive function calls by caching the result of calls with identical input
 * https://en.wikipedia.org/wiki/Memoization
 * @param compute - the function to be memoized
 */
function memoize(compute) {
    let cachedArgs = {};
    let cachedResult;
    return (args) => {
        for (const key in args) {
            if (!isEqual(args[key], cachedArgs[key])) {
                cachedResult = compute(args);
                cachedArgs = args;
                break;
            }
        }
        return cachedResult;
    };
}
function isEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (Array.isArray(a)) {
        // Special treatment for arrays: compare 1-level deep
        // This is to support equality of matrix/coordinate props
        const len = a.length;
        if (!b || b.length !== len) {
            return false;
        }
        for (let i = 0; i < len; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tile-2d-header.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tile-2d-header.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tile2DHeader: () => (/* binding */ Tile2DHeader)
/* harmony export */ });
class Tile2DHeader {
    constructor(index) {
        this.index = index;
        this.isVisible = false;
        this.isSelected = false;
        this.parent = null;
        this.children = [];
        this.content = null;
        this._loader = undefined;
        this._abortController = null;
        this._loaderId = 0;
        this._isLoaded = false;
        this._isCancelled = false;
        this._needsReload = false;
    }
    /** @deprecated use `boundingBox` instead */
    get bbox() {
        return this._bbox;
    }
    // TODO - remove in v9
    set bbox(value) {
        // Only set once from `Tileset2D.getTileMetadata`
        if (this._bbox)
            return;
        this._bbox = value;
        if ('west' in value) {
            this.boundingBox = [
                [value.west, value.south],
                [value.east, value.north]
            ];
        }
        else {
            this.boundingBox = [
                [value.left, value.top],
                [value.right, value.bottom]
            ];
        }
    }
    get data() {
        return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;
    }
    get isLoaded() {
        return this._isLoaded && !this._needsReload;
    }
    get isLoading() {
        return Boolean(this._loader) && !this._isCancelled;
    }
    get needsReload() {
        return this._needsReload || this._isCancelled;
    }
    get byteLength() {
        const result = this.content ? this.content.byteLength : 0;
        if (!Number.isFinite(result)) {
            // eslint-disable-next-line no-console
            console.error('byteLength not defined in tile data');
        }
        return result;
    }
    /* eslint-disable max-statements */
    async _loadData({ getData, requestScheduler, onLoad, onError }) {
        const { index, id, bbox, userData, zoom } = this;
        const loaderId = this._loaderId;
        this._abortController = new AbortController();
        const { signal } = this._abortController;
        // @ts-expect-error (2345) Argument of type '(tile: any) => 1 | -1' is not assignable ...
        const requestToken = await requestScheduler.scheduleRequest(this, tile => {
            return tile.isSelected ? 1 : -1;
        });
        if (!requestToken) {
            this._isCancelled = true;
            return;
        }
        // A tile can be cancelled while being scheduled
        if (this._isCancelled) {
            requestToken.done();
            return;
        }
        let tileData = null;
        let error;
        try {
            tileData = await getData({ index, id, bbox, userData, zoom, signal });
        }
        catch (err) {
            error = err || true;
        }
        finally {
            requestToken.done();
        }
        // If loadData has been called with a newer version, discard the result from this operation
        if (loaderId !== this._loaderId) {
            return;
        }
        // Clear the `isLoading` flag
        this._loader = undefined;
        // Rewrite tile content with the result of getTileData if successful, or `null` in case of
        // error or cancellation
        this.content = tileData;
        // If cancelled, do not invoke the callbacks
        // Consider it loaded if we tried to cancel but `getTileData` still returned data
        if (this._isCancelled && !tileData) {
            this._isLoaded = false;
            return;
        }
        this._isLoaded = true;
        this._isCancelled = false;
        if (error) {
            onError(error, this);
        }
        else {
            onLoad(this);
        }
    }
    loadData(opts) {
        this._isLoaded = false;
        this._isCancelled = false;
        this._needsReload = false;
        this._loaderId++;
        this._loader = this._loadData(opts);
        return this._loader;
    }
    setNeedsReload() {
        if (this.isLoading) {
            this.abort();
            this._loader = undefined;
        }
        this._needsReload = true;
    }
    abort() {
        if (this.isLoaded) {
            return;
        }
        this._isCancelled = true;
        this._abortController?.abort();
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tile-2d-traversal.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tile-2d-traversal.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOSMTileIndices: () => (/* binding */ getOSMTileIndices)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/viewports/globe-viewport.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js");
/* harmony import */ var _math_gl_culling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/culling */ "./node_modules/@math.gl/culling/dist/index.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/utils.js");




const TILE_SIZE = 512;
// number of world copies to check
const MAX_MAPS = 3;
// for calculating bounding volume of a tile in a non-web-mercator viewport
const REF_POINTS_5 = [
    [0.5, 0.5],
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
]; // 4 corners and center
const REF_POINTS_9 = REF_POINTS_5.concat([
    [0, 0.5],
    [0.5, 0],
    [1, 0.5],
    [0.5, 1]
]); // 4 corners, center and 4 mid points
const REF_POINTS_11 = REF_POINTS_9.concat([
    [0.25, 0.5],
    [0.75, 0.5]
]); // 2 additional points on equator for top tile
class OSMNode {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    get children() {
        if (!this._children) {
            const x = this.x * 2;
            const y = this.y * 2;
            const z = this.z + 1;
            this._children = [
                new OSMNode(x, y, z),
                new OSMNode(x, y + 1, z),
                new OSMNode(x + 1, y, z),
                new OSMNode(x + 1, y + 1, z)
            ];
        }
        return this._children;
    }
    // eslint-disable-next-line complexity
    update(params) {
        const { viewport, cullingVolume, elevationBounds, minZ, maxZ, bounds, offset, project } = params;
        const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);
        // First, check if this tile is visible
        if (bounds && !this.insideBounds(bounds)) {
            return false;
        }
        const isInside = cullingVolume.computeVisibility(boundingVolume);
        if (isInside < 0) {
            return false;
        }
        // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester
        if (!this.childVisible) {
            let { z } = this;
            if (z < maxZ && z >= minZ) {
                // Adjust LOD
                // If the tile is far enough from the camera, accept a lower zoom level
                const distance = (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;
                z += Math.floor(Math.log2(distance));
            }
            if (z >= maxZ) {
                // LOD is acceptable
                this.selected = true;
                return true;
            }
        }
        // LOD is not enough, recursively test child tiles
        this.selected = false;
        this.childVisible = true;
        for (const child of this.children) {
            child.update(params);
        }
        return true;
    }
    getSelected(result = []) {
        if (this.selected) {
            result.push(this);
        }
        if (this._children) {
            for (const node of this._children) {
                node.getSelected(result);
            }
        }
        return result;
    }
    insideBounds([minX, minY, maxX, maxY]) {
        const scale = Math.pow(2, this.z);
        const extent = TILE_SIZE / scale;
        return (this.x * extent < maxX &&
            this.y * extent < maxY &&
            (this.x + 1) * extent > minX &&
            (this.y + 1) * extent > minY);
    }
    getBoundingVolume(zRange, worldOffset, project) {
        if (project) {
            // Custom projection
            // Estimate bounding box from sample points
            // At low zoom level we need more samples to calculate the bounding volume correctly
            const refPoints = this.z < 1 ? REF_POINTS_11 : this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;
            // Convert from tile-relative coordinates to common space
            const refPointPositions = [];
            for (const p of refPoints) {
                const lngLat = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.osmTile2lngLat)(this.x + p[0], this.y + p[1], this.z);
                lngLat[2] = zRange[0];
                refPointPositions.push(project(lngLat));
                if (zRange[0] !== zRange[1]) {
                    // Account for the elevation volume
                    lngLat[2] = zRange[1];
                    refPointPositions.push(project(lngLat));
                }
            }
            return (0,_math_gl_culling__WEBPACK_IMPORTED_MODULE_0__.makeOrientedBoundingBoxFromPoints)(refPointPositions);
        }
        // Use WebMercator projection
        const scale = Math.pow(2, this.z);
        const extent = TILE_SIZE / scale;
        const originX = this.x * extent + worldOffset * TILE_SIZE;
        // deck's common space is y-flipped
        const originY = TILE_SIZE - (this.y + 1) * extent;
        return new _math_gl_culling__WEBPACK_IMPORTED_MODULE_0__.AxisAlignedBoundingBox([originX, originY, zRange[0]], [originX + extent, originY + extent, zRange[1]]);
    }
}
// eslint-disable-next-line complexity
function getOSMTileIndices(viewport, maxZ, zRange, bounds) {
    const project = viewport instanceof _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"] && viewport.resolution
        ? // eslint-disable-next-line @typescript-eslint/unbound-method
            viewport.projectPosition
        : null;
    // Get the culling volume of the current camera
    const planes = Object.values(viewport.getFrustumPlanes()).map(({ normal, distance }) => new _math_gl_culling__WEBPACK_IMPORTED_MODULE_0__.Plane(normal.clone().negate(), distance));
    const cullingVolume = new _math_gl_culling__WEBPACK_IMPORTED_MODULE_0__.CullingVolume(planes);
    // Project zRange from meters to common space
    const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];
    const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;
    const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;
    // Always load at the current zoom level if pitch is small
    const minZ = viewport instanceof _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"] && viewport.pitch <= 60 ? maxZ : 0;
    // Map extent to OSM position
    if (bounds) {
        const [minLng, minLat, maxLng, maxLat] = bounds;
        const topLeft = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)([minLng, maxLat]);
        const bottomRight = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)([maxLng, minLat]);
        bounds = [topLeft[0], TILE_SIZE - topLeft[1], bottomRight[0], TILE_SIZE - bottomRight[1]];
    }
    const root = new OSMNode(0, 0, 0);
    const traversalParams = {
        viewport,
        project,
        cullingVolume,
        elevationBounds: [elevationMin, elevationMax],
        minZ,
        maxZ,
        bounds,
        // num. of worlds from the center. For repeated maps
        offset: 0
    };
    root.update(traversalParams);
    if (viewport instanceof _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"] &&
        viewport.subViewports &&
        viewport.subViewports.length > 1) {
        // Check worlds in repeated maps
        traversalParams.offset = -1;
        while (root.update(traversalParams)) {
            if (--traversalParams.offset < -MAX_MAPS) {
                break;
            }
        }
        traversalParams.offset = 1;
        while (root.update(traversalParams)) {
            if (++traversalParams.offset > MAX_MAPS) {
                break;
            }
        }
    }
    return root.getSelected();
}


/***/ }),

/***/ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tileset-2d.js":
/*!************************************************************************!*\
  !*** ./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tileset-2d.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_TILESET2D_PROPS: () => (/* binding */ DEFAULT_TILESET2D_PROPS),
/* harmony export */   STRATEGY_DEFAULT: () => (/* binding */ STRATEGY_DEFAULT),
/* harmony export */   STRATEGY_NEVER: () => (/* binding */ STRATEGY_NEVER),
/* harmony export */   STRATEGY_REPLACE: () => (/* binding */ STRATEGY_REPLACE),
/* harmony export */   Tileset2D: () => (/* binding */ Tileset2D)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/request-utils/request-scheduler.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _tile_2d_header_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tile-2d-header.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tile-2d-header.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/utils.js");
/* harmony import */ var _memoize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memoize.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/memoize.js");





// bit masks
const TILE_STATE_VISITED = 1;
const TILE_STATE_VISIBLE = 2;
/*
   show cached parent tile if children are loading
   +-----------+       +-----+            +-----+-----+
   |           |       |     |            |     |     |
   |           |       |     |            |     |     |
   |           |  -->  +-----+-----+  ->  +-----+-----+
   |           |             |     |      |     |     |
   |           |             |     |      |     |     |
   +-----------+             +-----+      +-----+-----+

   show cached children tiles when parent is loading
   +-------+----       +------------
   |       |           |
   |       |           |
   |       |           |
   +-------+----  -->  |
   |       |           |
 */
const STRATEGY_NEVER = 'never';
const STRATEGY_REPLACE = 'no-overlap';
const STRATEGY_DEFAULT = 'best-available';
const DEFAULT_CACHE_SCALE = 5;
const STRATEGIES = {
    [STRATEGY_DEFAULT]: updateTileStateDefault,
    [STRATEGY_REPLACE]: updateTileStateReplace,
    [STRATEGY_NEVER]: () => { }
};
const DEFAULT_TILESET2D_PROPS = {
    extent: null,
    tileSize: 512,
    maxZoom: null,
    minZoom: null,
    maxCacheSize: null,
    maxCacheByteSize: null,
    refinementStrategy: 'best-available',
    zRange: null,
    maxRequests: 6,
    debounceTime: 0,
    zoomOffset: 0,
    // onTileLoad: (tile: Tile2DHeader) => void,  // onTileUnload: (tile: Tile2DHeader) => void,  // onTileError: (error: any, tile: Tile2DHeader) => void,  /** Called when all tiles in the current viewport are loaded. */
    // onViewportLoad: ((tiles: Tile2DHeader<DataT>[]) => void) | null,
    onTileLoad: () => { },
    onTileUnload: () => { },
    onTileError: () => { }
};
/**
 * Manages loading and purging of tile data. This class caches recently visited tiles
 * and only creates new tiles if they are present.
 */
class Tileset2D {
    /**
     * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.
     * Cache size defaults to 5 * number of tiles in the current viewport
     */
    constructor(opts) {
        /* Private methods */
        this._getCullBounds = (0,_memoize_js__WEBPACK_IMPORTED_MODULE_0__.memoize)(_utils_js__WEBPACK_IMPORTED_MODULE_1__.getCullBounds);
        this.opts = { ...DEFAULT_TILESET2D_PROPS, ...opts };
        this.setOptions(this.opts);
        this.onTileLoad = tile => {
            this.opts.onTileLoad?.(tile);
            if (this.opts.maxCacheByteSize) {
                this._cacheByteSize += tile.byteLength;
                this._resizeCache();
            }
        };
        this._requestScheduler = new _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_2__["default"]({
            throttleRequests: this.opts.maxRequests > 0 || this.opts.debounceTime > 0,
            maxRequests: this.opts.maxRequests,
            debounceTime: this.opts.debounceTime
        });
        // Maps tile id in string {z}-{x}-{y} to a Tile object
        this._cache = new Map();
        this._tiles = [];
        this._dirty = false;
        this._cacheByteSize = 0;
        // Cache the last processed viewport
        this._viewport = null;
        this._zRange = null;
        this._selectedTiles = null;
        this._frameNumber = 0;
        this._modelMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4();
        this._modelMatrixInverse = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4();
    }
    /* Public API */
    get tiles() {
        return this._tiles;
    }
    get selectedTiles() {
        return this._selectedTiles;
    }
    get isLoaded() {
        return this._selectedTiles !== null && this._selectedTiles.every(tile => tile.isLoaded);
    }
    get needsReload() {
        return this._selectedTiles !== null && this._selectedTiles.some(tile => tile.needsReload);
    }
    setOptions(opts) {
        Object.assign(this.opts, opts);
        if (Number.isFinite(opts.maxZoom)) {
            this._maxZoom = Math.floor(opts.maxZoom);
        }
        if (Number.isFinite(opts.minZoom)) {
            this._minZoom = Math.ceil(opts.minZoom);
        }
    }
    // Clean up any outstanding tile requests.
    finalize() {
        for (const tile of this._cache.values()) {
            if (tile.isLoading) {
                tile.abort();
            }
        }
        this._cache.clear();
        this._tiles = [];
        this._selectedTiles = null;
    }
    reloadAll() {
        for (const id of this._cache.keys()) {
            const tile = this._cache.get(id);
            if (!this._selectedTiles || !this._selectedTiles.includes(tile)) {
                this._cache.delete(id);
            }
            else {
                tile.setNeedsReload();
            }
        }
    }
    /**
     * Update the cache with the given viewport and model matrix and triggers callback onUpdate.
     */
    update(viewport, { zRange, modelMatrix } = {
        zRange: null,
        modelMatrix: null
    }) {
        const modelMatrixAsMatrix4 = modelMatrix ? new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4(modelMatrix) : new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4();
        const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);
        if (!this._viewport ||
            !viewport.equals(this._viewport) ||
            !(0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.equals)(this._zRange, zRange) ||
            isModelMatrixNew) {
            if (isModelMatrixNew) {
                this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();
                this._modelMatrix = modelMatrixAsMatrix4;
            }
            this._viewport = viewport;
            this._zRange = zRange;
            const tileIndices = this.getTileIndices({
                viewport,
                maxZoom: this._maxZoom,
                minZoom: this._minZoom,
                zRange,
                modelMatrix: this._modelMatrix,
                modelMatrixInverse: this._modelMatrixInverse
            });
            this._selectedTiles = tileIndices.map(index => this._getTile(index, true));
            if (this._dirty) {
                // Some new tiles are added
                this._rebuildTree();
            }
            // Check for needed reloads explicitly even if the view/matrix has not changed.
        }
        else if (this.needsReload) {
            this._selectedTiles = this._selectedTiles.map(tile => this._getTile(tile.index, true));
        }
        // Update tile states
        const changed = this.updateTileStates();
        this._pruneRequests();
        if (this._dirty) {
            // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.
            this._resizeCache();
        }
        if (changed) {
            this._frameNumber++;
        }
        return this._frameNumber;
    }
    // eslint-disable-next-line complexity
    isTileVisible(tile, cullRect) {
        if (!tile.isVisible) {
            return false;
        }
        if (cullRect && this._viewport) {
            const boundsArr = this._getCullBounds({
                viewport: this._viewport,
                z: this._zRange,
                cullRect
            });
            const { bbox } = tile;
            for (const [minX, minY, maxX, maxY] of boundsArr) {
                let overlaps;
                if ('west' in bbox) {
                    overlaps = bbox.west < maxX && bbox.east > minX && bbox.south < maxY && bbox.north > minY;
                }
                else {
                    // top/bottom could be swapped depending on the indexing system
                    const y0 = Math.min(bbox.top, bbox.bottom);
                    const y1 = Math.max(bbox.top, bbox.bottom);
                    overlaps = bbox.left < maxX && bbox.right > minX && y0 < maxY && y1 > minY;
                }
                if (overlaps) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }
    /* Public interface for subclassing */
    /** Returns array of tile indices in the current viewport */
    getTileIndices({ viewport, maxZoom, minZoom, zRange, modelMatrix, modelMatrixInverse }) {
        const { tileSize, extent, zoomOffset } = this.opts;
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTileIndices)({
            viewport,
            maxZoom,
            minZoom,
            zRange,
            tileSize,
            extent: extent,
            modelMatrix,
            modelMatrixInverse,
            zoomOffset
        });
    }
    /** Returns unique string key for a tile index */
    getTileId(index) {
        return `${index.x}-${index.y}-${index.z}`;
    }
    /** Returns a zoom level for a tile index */
    getTileZoom(index) {
        return index.z;
    }
    /** Returns additional metadata to add to tile, bbox by default */
    getTileMetadata(index) {
        const { tileSize } = this.opts;
        return { bbox: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.tileToBoundingBox)(this._viewport, index.x, index.y, index.z, tileSize) };
    }
    /** Returns index of the parent tile */
    getParentIndex(index) {
        const x = Math.floor(index.x / 2);
        const y = Math.floor(index.y / 2);
        const z = index.z - 1;
        return { x, y, z };
    }
    // Returns true if any tile's visibility changed
    updateTileStates() {
        const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;
        const visibilities = new Array(this._cache.size);
        let i = 0;
        // Reset state
        for (const tile of this._cache.values()) {
            // save previous state
            visibilities[i++] = tile.isVisible;
            tile.isSelected = false;
            tile.isVisible = false;
        }
        // @ts-expect-error called only when _selectedTiles is already defined
        for (const tile of this._selectedTiles) {
            tile.isSelected = true;
            tile.isVisible = true;
        }
        // Strategy-specific state logic
        (typeof refinementStrategy === 'function'
            ? refinementStrategy
            : STRATEGIES[refinementStrategy])(Array.from(this._cache.values()));
        i = 0;
        // Check if any visibility has changed
        for (const tile of this._cache.values()) {
            if (visibilities[i++] !== tile.isVisible) {
                return true;
            }
        }
        return false;
    }
    _pruneRequests() {
        const { maxRequests = 0 } = this.opts;
        const abortCandidates = [];
        let ongoingRequestCount = 0;
        for (const tile of this._cache.values()) {
            // Keep track of all the ongoing requests
            if (tile.isLoading) {
                ongoingRequestCount++;
                if (!tile.isSelected && !tile.isVisible) {
                    abortCandidates.push(tile);
                }
            }
        }
        while (maxRequests > 0 && ongoingRequestCount > maxRequests && abortCandidates.length > 0) {
            // There are too many ongoing requests, so abort some that are unselected
            const tile = abortCandidates.shift();
            tile.abort();
            ongoingRequestCount--;
        }
    }
    // This needs to be called every time some tiles have been added/removed from cache
    _rebuildTree() {
        const { _cache } = this;
        // Reset states
        for (const tile of _cache.values()) {
            tile.parent = null;
            if (tile.children) {
                tile.children.length = 0;
            }
        }
        // Rebuild tree
        for (const tile of _cache.values()) {
            const parent = this._getNearestAncestor(tile);
            tile.parent = parent;
            if (parent?.children) {
                parent.children.push(tile);
            }
        }
    }
    /**
     * Clear tiles that are not visible when the cache is full
     */
    /* eslint-disable complexity */
    _resizeCache() {
        const { _cache, opts } = this;
        const maxCacheSize = opts.maxCacheSize ||
            // @ts-expect-error called only when selectedTiles is initialized
            (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);
        const maxCacheByteSize = opts.maxCacheByteSize || Infinity;
        const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;
        if (overflown) {
            for (const [id, tile] of _cache) {
                if (!tile.isVisible && !tile.isSelected) {
                    // delete tile
                    this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;
                    _cache.delete(id);
                    this.opts.onTileUnload?.(tile);
                }
                if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {
                    break;
                }
            }
            this._rebuildTree();
            this._dirty = true;
        }
        if (this._dirty) {
            // sort by zoom level so that smaller tiles are displayed on top
            this._tiles = Array.from(this._cache.values()).sort((t1, t2) => t1.zoom - t2.zoom);
            this._dirty = false;
        }
    }
    _getTile(index, create) {
        const id = this.getTileId(index);
        let tile = this._cache.get(id);
        let needsReload = false;
        if (!tile && create) {
            tile = new _tile_2d_header_js__WEBPACK_IMPORTED_MODULE_5__.Tile2DHeader(index);
            Object.assign(tile, this.getTileMetadata(tile.index));
            Object.assign(tile, { id, zoom: this.getTileZoom(tile.index) });
            needsReload = true;
            this._cache.set(id, tile);
            this._dirty = true;
        }
        else if (tile && tile.needsReload) {
            needsReload = true;
        }
        if (tile && needsReload) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            tile.loadData({
                getData: this.opts.getTileData,
                requestScheduler: this._requestScheduler,
                onLoad: this.onTileLoad,
                onError: this.opts.onTileError
            });
        }
        return tile;
    }
    _getNearestAncestor(tile) {
        const { _minZoom = 0 } = this;
        let index = tile.index;
        while (this.getTileZoom(index) > _minZoom) {
            index = this.getParentIndex(index);
            const parent = this._getTile(index);
            if (parent) {
                return parent;
            }
        }
        return null;
    }
}
/* -- Refinement strategies --*/
/* eslint-disable max-depth */
// For all the selected && pending tiles:
// - pick the closest ancestor as placeholder
// - if no ancestor is visible, pick the closest children as placeholder
function updateTileStateDefault(allTiles) {
    for (const tile of allTiles) {
        tile.state = 0;
    }
    for (const tile of allTiles) {
        if (tile.isSelected && !getPlaceholderInAncestors(tile)) {
            getPlaceholderInChildren(tile);
        }
    }
    for (const tile of allTiles) {
        tile.isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);
    }
}
// Until a selected tile and all its selected siblings are loaded, use the closest ancestor as placeholder
function updateTileStateReplace(allTiles) {
    for (const tile of allTiles) {
        tile.state = 0;
    }
    for (const tile of allTiles) {
        if (tile.isSelected) {
            getPlaceholderInAncestors(tile);
        }
    }
    // Always process parents first
    const sortedTiles = Array.from(allTiles).sort((t1, t2) => t1.zoom - t2.zoom);
    for (const tile of sortedTiles) {
        tile.isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);
        if (tile.children && (tile.isVisible || tile.state & TILE_STATE_VISITED)) {
            // If the tile is rendered, or if the tile has been explicitly hidden, hide all of its children
            for (const child of tile.children) {
                child.state = TILE_STATE_VISITED;
            }
        }
        else if (tile.isSelected) {
            getPlaceholderInChildren(tile);
        }
    }
}
// Walk up the tree until we find one ancestor that is loaded. Returns true if successful.
function getPlaceholderInAncestors(startTile) {
    let tile = startTile;
    while (tile) {
        if (tile.isLoaded || tile.content) {
            tile.state |= TILE_STATE_VISIBLE;
            return true;
        }
        tile = tile.parent;
    }
    return false;
}
// Recursively set children as placeholder
function getPlaceholderInChildren(tile) {
    for (const child of tile.children) {
        if (child.isLoaded || child.content) {
            child.state |= TILE_STATE_VISIBLE;
        }
        else {
            getPlaceholderInChildren(child);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@deck.gl/geo-layers/dist/tileset-2d/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCullBounds: () => (/* binding */ getCullBounds),
/* harmony export */   getTileIndices: () => (/* binding */ getTileIndices),
/* harmony export */   getURLFromTemplate: () => (/* binding */ getURLFromTemplate),
/* harmony export */   isGeoBoundingBox: () => (/* binding */ isGeoBoundingBox),
/* harmony export */   isURLTemplate: () => (/* binding */ isURLTemplate),
/* harmony export */   osmTile2lngLat: () => (/* binding */ osmTile2lngLat),
/* harmony export */   tileToBoundingBox: () => (/* binding */ tileToBoundingBox),
/* harmony export */   urlType: () => (/* binding */ urlType)
/* harmony export */ });
/* harmony import */ var _tile_2d_traversal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tile-2d-traversal.js */ "./node_modules/@deck.gl/geo-layers/dist/tileset-2d/tile-2d-traversal.js");

const TILE_SIZE = 512;
const DEFAULT_EXTENT = [-Infinity, -Infinity, Infinity, Infinity];
const urlType = {
    type: 'object',
    value: null,
    validate: (value, propType) => (propType.optional && value === null) ||
        typeof value === 'string' ||
        (Array.isArray(value) && value.every(url => typeof url === 'string')),
    equal: (value1, value2) => {
        if (value1 === value2) {
            return true;
        }
        if (!Array.isArray(value1) || !Array.isArray(value2)) {
            return false;
        }
        const len = value1.length;
        if (len !== value2.length) {
            return false;
        }
        for (let i = 0; i < len; i++) {
            if (value1[i] !== value2[i]) {
                return false;
            }
        }
        return true;
    }
};
function transformBox(bbox, modelMatrix) {
    const transformedCoords = [
        // top-left
        modelMatrix.transformAsPoint([bbox[0], bbox[1]]),
        // top-right
        modelMatrix.transformAsPoint([bbox[2], bbox[1]]),
        // bottom-left
        modelMatrix.transformAsPoint([bbox[0], bbox[3]]),
        // bottom-right
        modelMatrix.transformAsPoint([bbox[2], bbox[3]])
    ];
    const transformedBox = [
        // Minimum x coord
        Math.min(...transformedCoords.map(i => i[0])),
        // Minimum y coord
        Math.min(...transformedCoords.map(i => i[1])),
        // Max x coord
        Math.max(...transformedCoords.map(i => i[0])),
        // Max y coord
        Math.max(...transformedCoords.map(i => i[1]))
    ];
    return transformedBox;
}
function stringHash(s) {
    return Math.abs(s.split('').reduce((a, b) => ((a << 5) - a + b.charCodeAt(0)) | 0, 0));
}
function getURLFromTemplate(template, tile) {
    if (!template || !template.length) {
        return null;
    }
    const { index, id } = tile;
    if (Array.isArray(template)) {
        const i = stringHash(id) % template.length;
        template = template[i];
    }
    let url = template;
    for (const key of Object.keys(index)) {
        const regex = new RegExp(`{${key}}`, 'g');
        url = url.replace(regex, String(index[key]));
    }
    // Back-compatible support for {-y}
    if (Number.isInteger(index.y) && Number.isInteger(index.z)) {
        url = url.replace(/\{-y\}/g, String(Math.pow(2, index.z) - index.y - 1));
    }
    return url;
}
/**
 * gets the bounding box of a viewport
 */
function getBoundingBox(viewport, zRange, extent) {
    let bounds;
    if (zRange && zRange.length === 2) {
        const [minZ, maxZ] = zRange;
        const bounds0 = viewport.getBounds({ z: minZ });
        const bounds1 = viewport.getBounds({ z: maxZ });
        bounds = [
            Math.min(bounds0[0], bounds1[0]),
            Math.min(bounds0[1], bounds1[1]),
            Math.max(bounds0[2], bounds1[2]),
            Math.max(bounds0[3], bounds1[3])
        ];
    }
    else {
        bounds = viewport.getBounds();
    }
    if (!viewport.isGeospatial) {
        return [
            // Top corner should not be more then bottom corner in either direction
            Math.max(Math.min(bounds[0], extent[2]), extent[0]),
            Math.max(Math.min(bounds[1], extent[3]), extent[1]),
            // Bottom corner should not be less then top corner in either direction
            Math.min(Math.max(bounds[2], extent[0]), extent[2]),
            Math.min(Math.max(bounds[3], extent[1]), extent[3])
        ];
    }
    return [
        Math.max(bounds[0], extent[0]),
        Math.max(bounds[1], extent[1]),
        Math.min(bounds[2], extent[2]),
        Math.min(bounds[3], extent[3])
    ];
}
/** Get culling bounds in world space */
function getCullBounds({ viewport, z, cullRect }) {
    const subViewports = viewport.subViewports || [viewport];
    return subViewports.map(v => getCullBoundsInViewport(v, z || 0, cullRect));
}
function getCullBoundsInViewport(
/** Current viewport */
viewport, 
/** At altitude */
z, 
/** Culling rectangle in screen space */
cullRect) {
    if (!Array.isArray(z)) {
        const x = cullRect.x - viewport.x;
        const y = cullRect.y - viewport.y;
        const { width, height } = cullRect;
        const unprojectOption = { targetZ: z };
        const topLeft = viewport.unproject([x, y], unprojectOption);
        const topRight = viewport.unproject([x + width, y], unprojectOption);
        const bottomLeft = viewport.unproject([x, y + height], unprojectOption);
        const bottomRight = viewport.unproject([x + width, y + height], unprojectOption);
        return [
            Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),
            Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])
        ];
    }
    const bounds0 = getCullBoundsInViewport(viewport, z[0], cullRect);
    const bounds1 = getCullBoundsInViewport(viewport, z[1], cullRect);
    return [
        Math.min(bounds0[0], bounds1[0]),
        Math.min(bounds0[1], bounds1[1]),
        Math.max(bounds0[2], bounds1[2]),
        Math.max(bounds0[3], bounds1[3])
    ];
}
function getIndexingCoords(bbox, scale, modelMatrixInverse) {
    if (modelMatrixInverse) {
        const transformedTileIndex = transformBox(bbox, modelMatrixInverse).map(i => (i * scale) / TILE_SIZE);
        return transformedTileIndex;
    }
    return bbox.map(i => (i * scale) / TILE_SIZE);
}
function getScale(z, tileSize) {
    return (Math.pow(2, z) * TILE_SIZE) / tileSize;
}
// https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Lon..2Flat._to_tile_numbers_2
function osmTile2lngLat(x, y, z) {
    const scale = getScale(z, TILE_SIZE);
    const lng = (x / scale) * 360 - 180;
    const n = Math.PI - (2 * Math.PI * y) / scale;
    const lat = (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));
    return [lng, lat];
}
function tile2XY(x, y, z, tileSize) {
    const scale = getScale(z, tileSize);
    return [(x / scale) * TILE_SIZE, (y / scale) * TILE_SIZE];
}
function tileToBoundingBox(viewport, x, y, z, tileSize = TILE_SIZE) {
    if (viewport.isGeospatial) {
        const [west, north] = osmTile2lngLat(x, y, z);
        const [east, south] = osmTile2lngLat(x + 1, y + 1, z);
        return { west, north, east, south };
    }
    const [left, top] = tile2XY(x, y, z, tileSize);
    const [right, bottom] = tile2XY(x + 1, y + 1, z, tileSize);
    return { left, top, right, bottom };
}
function getIdentityTileIndices(viewport, z, tileSize, extent, modelMatrixInverse) {
    const bbox = getBoundingBox(viewport, null, extent);
    const scale = getScale(z, tileSize);
    const [minX, minY, maxX, maxY] = getIndexingCoords(bbox, scale, modelMatrixInverse);
    const indices = [];
    /*
        |  TILE  |  TILE  |  TILE  |
          |(minX)            |(maxX)
     */
    for (let x = Math.floor(minX); x < maxX; x++) {
        for (let y = Math.floor(minY); y < maxY; y++) {
            indices.push({ x, y, z });
        }
    }
    return indices;
}
/**
 * Returns all tile indices in the current viewport. If the current zoom level is smaller
 * than minZoom, return an empty array. If the current zoom level is greater than maxZoom,
 * return tiles that are on maxZoom.
 */
// eslint-disable-next-line complexity
function getTileIndices({ viewport, maxZoom, minZoom, zRange, extent, tileSize = TILE_SIZE, modelMatrix, modelMatrixInverse, zoomOffset = 0 }) {
    let z = viewport.isGeospatial
        ? Math.round(viewport.zoom + Math.log2(TILE_SIZE / tileSize)) + zoomOffset
        : Math.ceil(viewport.zoom) + zoomOffset;
    if (typeof minZoom === 'number' && Number.isFinite(minZoom) && z < minZoom) {
        if (!extent) {
            return [];
        }
        z = minZoom;
    }
    if (typeof maxZoom === 'number' && Number.isFinite(maxZoom) && z > maxZoom) {
        z = maxZoom;
    }
    let transformedExtent = extent;
    if (modelMatrix && modelMatrixInverse && extent && !viewport.isGeospatial) {
        transformedExtent = transformBox(extent, modelMatrix);
    }
    return viewport.isGeospatial
        ? (0,_tile_2d_traversal_js__WEBPACK_IMPORTED_MODULE_0__.getOSMTileIndices)(viewport, z, zRange, extent)
        : getIdentityTileIndices(viewport, z, tileSize, transformedExtent || DEFAULT_EXTENT, modelMatrixInverse);
}
/**
 * Returns true if s is a valid URL template
 */
function isURLTemplate(s) {
    return /(?=.*{z})(?=.*{x})(?=.*({y}|{-y}))/.test(s);
}
function isGeoBoundingBox(v) {
    return (Number.isFinite(v.west) &&
        Number.isFinite(v.north) &&
        Number.isFinite(v.east) &&
        Number.isFinite(v.south));
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer-fragment.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer-fragment.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Pack the top 12 bits of two normalized floats into 3 8-bit (rgb) values
 * This enables addressing 4096x4096 individual pixels
 *
 * returns vec3 encoded RGB colors
 *  result.r - top 8 bits of u
 *  result.g - top 8 bits of v
 *  result.b - next 4 bits of u and v: (u + v * 16)
 */
const packUVsIntoRGB = `
vec3 packUVsIntoRGB(vec2 uv) {
  // Extract the top 8 bits. We want values to be truncated down so we can add a fraction
  vec2 uv8bit = floor(uv * 256.);

  // Calculate the normalized remainders of u and v parts that do not fit into 8 bits
  // Scale and clamp to 0-1 range
  vec2 uvFraction = fract(uv * 256.);
  vec2 uvFraction4bit = floor(uvFraction * 16.);

  // Remainder can be encoded in blue channel, encode as 4 bits for pixel coordinates
  float fractions = uvFraction4bit.x + uvFraction4bit.y * 16.;

  return vec3(uv8bit, fractions) / 255.;
}
`;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME bitmap-layer-fragment-shader

#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D bitmapTexture;

in vec2 vTexCoord;
in vec2 vTexPos;

out vec4 fragColor;

uniform float desaturate;
uniform vec4 transparentColor;
uniform vec3 tintColor;
uniform float opacity;

uniform float coordinateConversion;
uniform vec4 bounds;

/* projection utils */
const float TILE_SIZE = 512.0;
const float PI = 3.1415926536;
const float WORLD_SCALE = TILE_SIZE / PI / 2.0;

// from degrees to Web Mercator
vec2 lnglat_to_mercator(vec2 lnglat) {
  float x = lnglat.x;
  float y = clamp(lnglat.y, -89.9, 89.9);
  return vec2(
    radians(x) + PI,
    PI + log(tan(PI * 0.25 + radians(y) * 0.5))
  ) * WORLD_SCALE;
}

// from Web Mercator to degrees
vec2 mercator_to_lnglat(vec2 xy) {
  xy /= WORLD_SCALE;
  return degrees(vec2(
    xy.x - PI,
    atan(exp(xy.y - PI)) * 2.0 - PI * 0.5
  ));
}
/* End projection utils */

// apply desaturation
vec3 color_desaturate(vec3 color) {
  float luminance = (color.r + color.g + color.b) * 0.333333333;
  return mix(color, vec3(luminance), desaturate);
}

// apply tint
vec3 color_tint(vec3 color) {
  return color * tintColor;
}

// blend with background color
vec4 apply_opacity(vec3 color, float alpha) {
  if (transparentColor.a == 0.0) {
    return vec4(color, alpha);
  }
  float blendedAlpha = alpha + transparentColor.a * (1.0 - alpha);
  float highLightRatio = alpha / blendedAlpha;
  vec3 blendedRGB = mix(transparentColor.rgb, color, highLightRatio);
  return vec4(blendedRGB, blendedAlpha);
}

vec2 getUV(vec2 pos) {
  return vec2(
    (pos.x - bounds[0]) / (bounds[2] - bounds[0]),
    (pos.y - bounds[3]) / (bounds[1] - bounds[3])
  );
}

${packUVsIntoRGB}

void main(void) {
  vec2 uv = vTexCoord;
  if (coordinateConversion < -0.5) {
    vec2 lnglat = mercator_to_lnglat(vTexPos);
    uv = getUV(lnglat);
  } else if (coordinateConversion > 0.5) {
    vec2 commonPos = lnglat_to_mercator(vTexPos);
    uv = getUV(commonPos);
  }
  vec4 bitmapColor = texture(bitmapTexture, uv);

  fragColor = apply_opacity(color_tint(color_desaturate(bitmapColor.rgb)), bitmapColor.a * opacity);

  geometry.uv = uv;
  DECKGL_FILTER_COLOR(fragColor, geometry);

  if (bool(picking.isActive) && !bool(picking.isAttribute)) {
    // Since instance information is not used, we can use picking color for pixel index
    fragColor.rgb = packUVsIntoRGB(uv);
  }
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer-vertex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer-vertex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME bitmap-layer-vertex-shader

in vec2 texCoords;
in vec3 positions;
in vec3 positions64Low;

out vec2 vTexCoord;
out vec2 vTexPos;

uniform float coordinateConversion;

const vec3 pickingColor = vec3(1.0, 0.0, 0.0);

void main(void) {
  geometry.worldPosition = positions;
  geometry.uv = texCoords;
  geometry.pickingColor = pickingColor;

  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  vTexCoord = texCoords;

  if (coordinateConversion < -0.5) {
    vTexPos = geometry.position.xy + project_uCommonOrigin.xy;
  } else if (coordinateConversion > 0.5) {
    vTexPos = geometry.worldPosition.xy;
  }

  vec4 color = vec4(0.0);
  DECKGL_FILTER_COLOR(color, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BitmapLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/index.js");
/* harmony import */ var _create_mesh_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./create-mesh.js */ "./node_modules/@deck.gl/layers/dist/bitmap-layer/create-mesh.js");
/* harmony import */ var _bitmap_layer_vertex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bitmap-layer-vertex.js */ "./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer-vertex.js");
/* harmony import */ var _bitmap_layer_fragment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bitmap-layer-fragment.js */ "./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer-fragment.js");
// Copyright (c) 2015 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.






const defaultProps = {
    image: { type: 'image', value: null, async: true },
    bounds: { type: 'array', value: [1, 0, 0, 1], compare: true },
    _imageCoordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.DEFAULT,
    desaturate: { type: 'number', min: 0, max: 1, value: 0 },
    // More context: because of the blending mode we're using for ground imagery,
    // alpha is not effective when blending the bitmap layers with the base map.
    // Instead we need to manually dim/blend rgb values with a background color.
    transparentColor: { type: 'color', value: [0, 0, 0, 0] },
    tintColor: { type: 'color', value: [255, 255, 255] },
    textureParameters: { type: 'object', ignore: true, value: null }
};
/** Render a bitmap at specified boundaries. */
class BitmapLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static { this.layerName = 'BitmapLayer'; }
    static { this.defaultProps = defaultProps; }
    getShaders() {
        return super.getShaders({ vs: _bitmap_layer_vertex_js__WEBPACK_IMPORTED_MODULE_3__["default"], fs: _bitmap_layer_fragment_js__WEBPACK_IMPORTED_MODULE_4__["default"], modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_5__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__["default"]] });
    }
    initializeState() {
        const attributeManager = this.getAttributeManager();
        attributeManager.remove(['instancePickingColors']);
        const noAlloc = true;
        attributeManager.add({
            indices: {
                size: 1,
                isIndexed: true,
                update: attribute => (attribute.value = this.state.mesh.indices),
                noAlloc
            },
            positions: {
                size: 3,
                type: 'float64',
                fp64: this.use64bitPositions(),
                update: attribute => (attribute.value = this.state.mesh.positions),
                noAlloc
            },
            texCoords: {
                size: 2,
                update: attribute => (attribute.value = this.state.mesh.texCoords),
                noAlloc
            }
        });
    }
    updateState({ props, oldProps, changeFlags }) {
        // setup model first
        const attributeManager = this.getAttributeManager();
        if (changeFlags.extensionsChanged) {
            this.state.model?.destroy();
            this.state.model = this._getModel();
            attributeManager.invalidateAll();
        }
        if (props.bounds !== oldProps.bounds) {
            const oldMesh = this.state.mesh;
            const mesh = this._createMesh();
            this.state.model.setVertexCount(mesh.vertexCount);
            for (const key in mesh) {
                if (oldMesh && oldMesh[key] !== mesh[key]) {
                    attributeManager.invalidate(key);
                }
            }
            this.setState({ mesh, ...this._getCoordinateUniforms() });
        }
        else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {
            this.setState(this._getCoordinateUniforms());
        }
    }
    getPickingInfo(params) {
        const { image } = this.props;
        const info = params.info;
        if (!info.color || !image) {
            info.bitmap = null;
            return info;
        }
        const { width, height } = image;
        // Picking color doesn't represent object index in this layer
        info.index = 0;
        // Calculate uv and pixel in bitmap
        const uv = unpackUVsFromRGB(info.color);
        info.bitmap = {
            size: { width, height },
            uv,
            pixel: [Math.floor(uv[0] * width), Math.floor(uv[1] * height)]
        };
        return info;
    }
    // Override base Layer multi-depth picking logic
    disablePickingIndex() {
        this.setState({ disablePicking: true });
    }
    restorePickingColors() {
        this.setState({ disablePicking: false });
    }
    _updateAutoHighlight(info) {
        super._updateAutoHighlight({
            ...info,
            color: this.encodePickingColor(0)
        });
    }
    _createMesh() {
        const { bounds } = this.props;
        let normalizedBounds = bounds;
        // bounds as [minX, minY, maxX, maxY]
        if (isRectangularBounds(bounds)) {
            /*
              (minX0, maxY3) ---- (maxX2, maxY3)
                     |                  |
                     |                  |
                     |                  |
              (minX0, minY1) ---- (maxX2, minY1)
           */
            normalizedBounds = [
                [bounds[0], bounds[1]],
                [bounds[0], bounds[3]],
                [bounds[2], bounds[3]],
                [bounds[2], bounds[1]]
            ];
        }
        return (0,_create_mesh_js__WEBPACK_IMPORTED_MODULE_7__["default"])(normalizedBounds, this.context.viewport.resolution);
    }
    _getModel() {
        /*
          0,0 --- 1,0
           |       |
          0,1 --- 1,1
        */
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_8__.Model(this.context.device, {
            ...this.getShaders(),
            id: this.props.id,
            bufferLayout: this.getAttributeManager().getBufferLayouts(),
            topology: 'triangle-list',
            isInstanced: false
        });
    }
    draw(opts) {
        const { uniforms, moduleParameters } = opts;
        const { model, coordinateConversion, bounds, disablePicking } = this.state;
        const { image, desaturate, transparentColor, tintColor } = this.props;
        if (moduleParameters.picking.isActive && disablePicking) {
            return;
        }
        // // TODO fix zFighting
        // Render the image
        if (image && model) {
            model.setUniforms(uniforms);
            model.setBindings({ bitmapTexture: image });
            model.setUniforms({
                desaturate,
                transparentColor: transparentColor.map(x => x / 255),
                tintColor: tintColor.slice(0, 3).map(x => x / 255),
                coordinateConversion,
                bounds
            });
            model.draw(this.context.renderPass);
        }
    }
    _getCoordinateUniforms() {
        const { LNGLAT, CARTESIAN, DEFAULT } = _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM;
        let { _imageCoordinateSystem: imageCoordinateSystem } = this.props;
        if (imageCoordinateSystem !== DEFAULT) {
            const { bounds } = this.props;
            if (!isRectangularBounds(bounds)) {
                throw new Error('_imageCoordinateSystem only supports rectangular bounds');
            }
            // The default behavior (linearly interpolated tex coords)
            const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;
            imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;
            if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {
                // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection
                return { coordinateConversion: -1, bounds };
            }
            if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {
                // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection
                const bottomLeft = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.lngLatToWorld)([bounds[0], bounds[1]]);
                const topRight = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_0__.lngLatToWorld)([bounds[2], bounds[3]]);
                return {
                    coordinateConversion: 1,
                    bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]
                };
            }
        }
        return {
            coordinateConversion: 0,
            bounds: [0, 0, 0, 0]
        };
    }
}
/**
 * Decode uv floats from rgb bytes where b contains 4-bit fractions of uv
 * @param {number[]} color
 * @returns {number[]} uvs
 * https://stackoverflow.com/questions/30242013/glsl-compressing-packing-multiple-0-1-colours-var4-into-a-single-var4-variab
 */
function unpackUVsFromRGB(color) {
    const [u, v, fracUV] = color;
    const vFrac = (fracUV & 0xf0) / 256;
    const uFrac = (fracUV & 0x0f) / 16;
    return [(u + uFrac) / 256, (v + vFrac) / 256];
}
function isRectangularBounds(bounds) {
    return Number.isFinite(bounds[0]);
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/bitmap-layer/create-mesh.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/bitmap-layer/create-mesh.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createMesh)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");

const DEFAULT_INDICES = new Uint32Array([0, 2, 1, 0, 3, 2]);
const DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);
/*
  1 ---- 2
  |      |
  |      |
  0 ---- 3
*/
/* eslint-disable max-statements */
function createMesh(bounds, resolution) {
    if (!resolution) {
        return createQuad(bounds);
    }
    const maxXSpan = Math.max(Math.abs(bounds[0][0] - bounds[3][0]), Math.abs(bounds[1][0] - bounds[2][0]));
    const maxYSpan = Math.max(Math.abs(bounds[1][1] - bounds[0][1]), Math.abs(bounds[2][1] - bounds[3][1]));
    const uCount = Math.ceil(maxXSpan / resolution) + 1;
    const vCount = Math.ceil(maxYSpan / resolution) + 1;
    const vertexCount = (uCount - 1) * (vCount - 1) * 6;
    const indices = new Uint32Array(vertexCount);
    const texCoords = new Float32Array(uCount * vCount * 2);
    const positions = new Float64Array(uCount * vCount * 3);
    // Tesselate
    let vertex = 0;
    let index = 0;
    for (let u = 0; u < uCount; u++) {
        const ut = u / (uCount - 1);
        for (let v = 0; v < vCount; v++) {
            const vt = v / (vCount - 1);
            const p = interpolateQuad(bounds, ut, vt);
            positions[vertex * 3 + 0] = p[0];
            positions[vertex * 3 + 1] = p[1];
            positions[vertex * 3 + 2] = p[2] || 0;
            texCoords[vertex * 2 + 0] = ut;
            texCoords[vertex * 2 + 1] = 1 - vt;
            if (u > 0 && v > 0) {
                indices[index++] = vertex - vCount;
                indices[index++] = vertex - vCount - 1;
                indices[index++] = vertex - 1;
                indices[index++] = vertex - vCount;
                indices[index++] = vertex - 1;
                indices[index++] = vertex;
            }
            vertex++;
        }
    }
    return {
        vertexCount,
        positions,
        indices,
        texCoords
    };
}
function createQuad(bounds) {
    const positions = new Float64Array(12);
    // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]
    for (let i = 0; i < bounds.length; i++) {
        positions[i * 3 + 0] = bounds[i][0];
        positions[i * 3 + 1] = bounds[i][1];
        positions[i * 3 + 2] = bounds[i][2] || 0;
    }
    return {
        vertexCount: 6,
        positions,
        indices: DEFAULT_INDICES,
        texCoords: DEFAULT_TEX_COORDS
    };
}
function interpolateQuad(quad, ut, vt) {
    return (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_0__.lerp)((0,_math_gl_core__WEBPACK_IMPORTED_MODULE_0__.lerp)(quad[0], quad[1], vt), (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_0__.lerp)(quad[3], quad[2], vt), ut);
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/column-layer/column-geometry.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/column-layer/column-geometry.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ColumnGeometry)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/polygon */ "./node_modules/@math.gl/polygon/dist/index.js");



class ColumnGeometry extends _luma_gl_engine__WEBPACK_IMPORTED_MODULE_1__.Geometry {
    constructor(props) {
        const { indices, attributes } = tesselateColumn(props);
        super({
            ...props,
            indices,
            // @ts-expect-error
            attributes
        });
    }
}
/* eslint-disable max-statements, complexity */
function tesselateColumn(props) {
    const { radius, height = 1, nradial = 10 } = props;
    let { vertices } = props;
    if (vertices) {
        _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__["default"].assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points
        vertices = vertices.flatMap(v => [v[0], v[1]]);
        (0,_math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__.modifyPolygonWindingDirection)(vertices, _math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__.WINDING.COUNTER_CLOCKWISE);
    }
    const isExtruded = height > 0;
    const vertsAroundEdge = nradial + 1; // loop
    const numVertices = isExtruded
        ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex
        : nradial; // top
    const stepAngle = (Math.PI * 2) / nradial;
    // Used for wireframe
    const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop
    const positions = new Float32Array(numVertices * 3);
    const normals = new Float32Array(numVertices * 3);
    let i = 0;
    // side tesselation: 0, 1, 2, 3, 4, 5, ...
    //
    // 0 - 2 - 4  ... top
    // | / | / |
    // 1 - 3 - 5  ... bottom
    //
    if (isExtruded) {
        for (let j = 0; j < vertsAroundEdge; j++) {
            const a = j * stepAngle;
            const vertexIndex = j % nradial;
            const sin = Math.sin(a);
            const cos = Math.cos(a);
            for (let k = 0; k < 2; k++) {
                positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;
                positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;
                positions[i + 2] = (1 / 2 - k) * height;
                normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;
                normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;
                i += 3;
            }
        }
        // duplicate the last vertex to create proper degenerate triangle.
        positions[i + 0] = positions[i - 3];
        positions[i + 1] = positions[i - 2];
        positions[i + 2] = positions[i - 1];
        i += 3;
    }
    // The column geometry is rendered as a triangle strip, so
    // in order to render sides and top in one go we need to use degenerate triangles.
    // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.
    // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...
    //
    //    0 -- 1
    //   /      \
    // -1        2
    //  |        |
    // -2        3
    //   \      /
    //   -3 -- 4
    //
    for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {
        const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));
        const a = v * stepAngle;
        const vertexIndex = (v + nradial) % nradial;
        const sin = Math.sin(a);
        const cos = Math.cos(a);
        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;
        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;
        positions[i + 2] = height / 2;
        normals[i + 2] = 1;
        i += 3;
    }
    if (isExtruded) {
        let index = 0;
        for (let j = 0; j < nradial; j++) {
            // top loop
            indices[index++] = j * 2 + 0;
            indices[index++] = j * 2 + 2;
            // side vertical
            indices[index++] = j * 2 + 0;
            indices[index++] = j * 2 + 1;
            // bottom loop
            indices[index++] = j * 2 + 1;
            indices[index++] = j * 2 + 3;
        }
    }
    return {
        indices,
        attributes: {
            POSITION: { size: 3, value: positions },
            NORMAL: { size: 3, value: normals }
        }
    };
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/column-layer/column-layer-fragment.glsl.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/column-layer/column-layer-fragment.glsl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`#version 300 es
#define SHADER_NAME column-layer-fragment-shader
precision highp float;
uniform vec3 project_uCameraPosition;
uniform bool extruded;
uniform bool isStroke;
out vec4 fragColor;
in vec4 vColor;
#ifdef FLAT_SHADING
in vec4 position_commonspace;
#endif
void main(void) {
fragColor = vColor;
geometry.uv = vec2(0.);
#ifdef FLAT_SHADING
if (extruded && !isStroke && !bool(picking.isActive)) {
vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));
fragColor.rgb = lighting_getLightColor(vColor.rgb, project_uCameraPosition, position_commonspace.xyz, normal);
}
#endif
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/column-layer/column-layer-vertex.glsl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/column-layer/column-layer-vertex.glsl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`#version 300 es
#define SHADER_NAME column-layer-vertex-shader
in vec3 positions;
in vec3 normals;
in vec3 instancePositions;
in float instanceElevations;
in vec3 instancePositions64Low;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in float instanceStrokeWidths;
in vec3 instancePickingColors;
uniform float opacity;
uniform float radius;
uniform float angle;
uniform vec2 offset;
uniform bool extruded;
uniform bool stroked;
uniform bool isStroke;
uniform float coverage;
uniform float elevationScale;
uniform float edgeDistance;
uniform float widthScale;
uniform float widthMinPixels;
uniform float widthMaxPixels;
uniform int radiusUnits;
uniform int widthUnits;
out vec4 vColor;
#ifdef FLAT_SHADING
out vec4 position_commonspace;
#endif
void main(void) {
geometry.worldPosition = instancePositions;
vec4 color = isStroke ? instanceLineColors : instanceFillColors;
mat2 rotationMatrix = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));
float elevation = 0.0;
float strokeOffsetRatio = 1.0;
if (extruded) {
elevation = instanceElevations * (positions.z + 1.0) / 2.0 * elevationScale;
} else if (stroked) {
float widthPixels = clamp(
project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),
widthMinPixels, widthMaxPixels) / 2.0;
float halfOffset = project_pixel_size(widthPixels) / project_size(edgeDistance * coverage * radius);
if (isStroke) {
strokeOffsetRatio -= sign(positions.z) * halfOffset;
} else {
strokeOffsetRatio -= halfOffset;
}
}
float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);
float dotRadius = radius * coverage * shouldRender;
geometry.pickingColor = instancePickingColors;
vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);
vec3 centroidPosition64Low = instancePositions64Low;
vec2 offset = (rotationMatrix * positions.xy * strokeOffsetRatio + offset) * dotRadius;
if (radiusUnits == UNIT_METERS) {
offset = project_size(offset);
}
vec3 pos = vec3(offset, 0.);
DECKGL_FILTER_SIZE(pos, geometry);
gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);
geometry.normal = project_normal(vec3(rotationMatrix * normals.xy, normals.z));
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
if (extruded && !isStroke) {
#ifdef FLAT_SHADING
position_commonspace = geometry.position;
vColor = vec4(color.rgb, color.a * opacity);
#else
vec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);
vColor = vec4(lightColor, color.a * opacity);
#endif
} else {
vColor = vec4(color.rgb, color.a * opacity);
}
DECKGL_FILTER_COLOR(vColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/column-layer/column-layer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/column-layer/column-layer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ColumnLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _column_geometry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./column-geometry.js */ "./node_modules/@deck.gl/layers/dist/column-layer/column-geometry.js");
/* harmony import */ var _column_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./column-layer-vertex.glsl.js */ "./node_modules/@deck.gl/layers/dist/column-layer/column-layer-vertex.glsl.js");
/* harmony import */ var _column_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./column-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/column-layer/column-layer-fragment.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





const DEFAULT_COLOR = [0, 0, 0, 255];
const defaultProps = {
    diskResolution: { type: 'number', min: 4, value: 20 },
    vertices: null,
    radius: { type: 'number', min: 0, value: 1000 },
    angle: { type: 'number', value: 0 },
    offset: { type: 'array', value: [0, 0] },
    coverage: { type: 'number', min: 0, max: 1, value: 1 },
    elevationScale: { type: 'number', min: 0, value: 1 },
    radiusUnits: 'meters',
    lineWidthUnits: 'meters',
    lineWidthScale: 1,
    lineWidthMinPixels: 0,
    lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
    extruded: true,
    wireframe: false,
    filled: true,
    stroked: false,
    flatShading: false,
    getPosition: { type: 'accessor', value: (x) => x.position },
    getFillColor: { type: 'accessor', value: DEFAULT_COLOR },
    getLineColor: { type: 'accessor', value: DEFAULT_COLOR },
    getLineWidth: { type: 'accessor', value: 1 },
    getElevation: { type: 'accessor', value: 1000 },
    material: true,
    getColor: { deprecatedFor: ['getFillColor', 'getLineColor'] }
};
/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */
class ColumnLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.layerName = 'ColumnLayer'; }
    static { this.defaultProps = defaultProps; }
    getShaders() {
        const defines = {};
        const { flatShading } = this.props;
        if (flatShading) {
            defines.FLAT_SHADING = 1;
        }
        return super.getShaders({
            vs: _column_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            fs: _column_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__["default"],
            defines,
            modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"], flatShading ? _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__.phongLighting : _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__.gouraudLighting, _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__["default"]]
        });
    }
    /**
     * DeckGL calls initializeState when GL context is available
     * Essentially a deferred constructor
     */
    initializeState() {
        const attributeManager = this.getAttributeManager();
        /* eslint-disable max-len */
        attributeManager.addInstanced({
            instancePositions: {
                size: 3,
                type: 'float64',
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceElevations: {
                size: 1,
                transition: true,
                accessor: 'getElevation'
            },
            instanceFillColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                transition: true,
                accessor: 'getFillColor',
                defaultValue: DEFAULT_COLOR
            },
            instanceLineColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                transition: true,
                accessor: 'getLineColor',
                defaultValue: DEFAULT_COLOR
            },
            instanceStrokeWidths: {
                size: 1,
                accessor: 'getLineWidth',
                transition: true
            }
        });
        /* eslint-enable max-len */
    }
    updateState(params) {
        super.updateState(params);
        const { props, oldProps, changeFlags } = params;
        const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;
        if (regenerateModels) {
            this.state.models?.forEach(model => model.destroy());
            this.setState(this._getModels());
            this.getAttributeManager().invalidateAll();
        }
        const instanceCount = this.getNumInstances();
        this.state.fillModel.setInstanceCount(instanceCount);
        this.state.wireframeModel.setInstanceCount(instanceCount);
        if (regenerateModels ||
            props.diskResolution !== oldProps.diskResolution ||
            props.vertices !== oldProps.vertices ||
            (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {
            this._updateGeometry(props);
        }
    }
    getGeometry(diskResolution, vertices, hasThinkness) {
        const geometry = new _column_geometry_js__WEBPACK_IMPORTED_MODULE_6__["default"]({
            radius: 1,
            height: hasThinkness ? 2 : 0,
            vertices,
            nradial: diskResolution
        });
        let meanVertexDistance = 0;
        if (vertices) {
            for (let i = 0; i < diskResolution; i++) {
                const p = vertices[i];
                const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);
                meanVertexDistance += d / diskResolution;
            }
        }
        else {
            meanVertexDistance = 1;
        }
        this.setState({
            edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance
        });
        return geometry;
    }
    _getModels() {
        const shaders = this.getShaders();
        const bufferLayout = this.getAttributeManager().getBufferLayouts();
        const fillModel = new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__.Model(this.context.device, {
            ...shaders,
            id: `${this.props.id}-fill`,
            bufferLayout,
            isInstanced: true
        });
        const wireframeModel = new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__.Model(this.context.device, {
            ...shaders,
            id: `${this.props.id}-wireframe`,
            bufferLayout,
            isInstanced: true
        });
        return {
            fillModel,
            wireframeModel,
            models: [wireframeModel, fillModel]
        };
    }
    _updateGeometry({ diskResolution, vertices, extruded, stroked }) {
        const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);
        this.setState({
            fillVertexCount: geometry.attributes.POSITION.value.length / 3
        });
        const fillModel = this.state.fillModel;
        const wireframeModel = this.state.wireframeModel;
        fillModel.setGeometry(geometry);
        fillModel.setTopology('triangle-strip');
        // Disable indices
        fillModel.setIndexBuffer(null);
        wireframeModel.setGeometry(geometry);
        wireframeModel.setTopology('line-list');
    }
    draw({ uniforms }) {
        const { lineWidthUnits, lineWidthScale, lineWidthMinPixels, lineWidthMaxPixels, radiusUnits, elevationScale, extruded, filled, stroked, wireframe, offset, coverage, radius, angle } = this.props;
        const fillModel = this.state.fillModel;
        const wireframeModel = this.state.wireframeModel;
        const { fillVertexCount, edgeDistance } = this.state;
        const renderUniforms = {
            ...uniforms,
            radius,
            angle: (angle / 180) * Math.PI,
            offset,
            extruded,
            stroked,
            coverage,
            elevationScale,
            edgeDistance,
            radiusUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_8__.UNIT[radiusUnits],
            widthUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_8__.UNIT[lineWidthUnits],
            widthScale: lineWidthScale,
            widthMinPixels: lineWidthMinPixels,
            widthMaxPixels: lineWidthMaxPixels
        };
        // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test
        if (extruded && wireframe) {
            wireframeModel.setUniforms(renderUniforms);
            wireframeModel.setUniforms({ isStroke: true });
            wireframeModel.draw(this.context.renderPass);
        }
        fillModel.setUniforms(renderUniforms);
        if (filled) {
            // model.setProps({isIndexed: false});
            fillModel.setVertexCount(fillVertexCount);
            fillModel.setUniforms({ isStroke: false });
            fillModel.draw(this.context.renderPass);
        }
        // When drawing 2d: draw fill before stroke so that the outline is always on top
        if (!extruded && stroked) {
            // model.setProps({isIndexed: false});
            // The width of the stroke is achieved by flattening the side of the cylinder.
            // Skip the last 1/3 of the vertices which is the top.
            fillModel.setVertexCount((fillVertexCount * 2) / 3);
            fillModel.setUniforms({ isStroke: true });
            fillModel.draw(this.context.renderPass);
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-binary.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-binary.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   binaryToFeatureForAccesor: () => (/* binding */ binaryToFeatureForAccesor),
/* harmony export */   calculatePickingColors: () => (/* binding */ calculatePickingColors)
/* harmony export */ });
// This module implement some utility functions to work with
// the geojson-binary format defined at loaders.gl:
// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md
/**
 * Return the feature for an accesor
 */
function binaryToFeatureForAccesor(data, index) {
    if (!data) {
        return null;
    }
    const featureIndex = 'startIndices' in data ? data.startIndices[index] : index;
    const geometryIndex = data.featureIds.value[featureIndex];
    if (featureIndex !== -1) {
        return getPropertiesForIndex(data, geometryIndex, featureIndex);
    }
    return null;
}
function getPropertiesForIndex(data, propertiesIndex, numericPropsIndex) {
    const feature = {
        properties: { ...data.properties[propertiesIndex] }
    };
    for (const prop in data.numericProps) {
        feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];
    }
    return feature;
}
// Custom picking color to keep binary indexes
function calculatePickingColors(geojsonBinary, encodePickingColor) {
    const pickingColors = {
        points: null,
        lines: null,
        polygons: null
    };
    for (const key in pickingColors) {
        const featureIds = geojsonBinary[key].globalFeatureIds.value;
        pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);
        const pickingColor = [];
        for (let i = 0; i < featureIds.length; i++) {
            encodePickingColor(featureIds[i], pickingColor);
            pickingColors[key][i * 3 + 0] = pickingColor[0];
            pickingColors[key][i * 3 + 1] = pickingColor[1];
            pickingColors[key][i * 3 + 2] = pickingColor[2];
        }
    }
    return pickingColors;
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer-props.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer-props.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLayerPropsFromBinary: () => (/* binding */ createLayerPropsFromBinary),
/* harmony export */   createLayerPropsFromFeatures: () => (/* binding */ createLayerPropsFromFeatures)
/* harmony export */ });
/* harmony import */ var _geojson_binary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geojson-binary.js */ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-binary.js");

function createEmptyLayerProps() {
    return {
        points: {},
        lines: {},
        polygons: {},
        polygonsOutline: {}
    };
}
function getCoordinates(f) {
    return f.geometry.coordinates;
}
function createLayerPropsFromFeatures(features, featuresDiff) {
    const layerProps = createEmptyLayerProps();
    const { pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures } = features;
    layerProps.points.data = pointFeatures;
    layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);
    layerProps.points.getPosition = getCoordinates;
    layerProps.lines.data = lineFeatures;
    layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);
    layerProps.lines.getPath = getCoordinates;
    layerProps.polygons.data = polygonFeatures;
    layerProps.polygons._dataDiff =
        featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);
    layerProps.polygons.getPolygon = getCoordinates;
    layerProps.polygonsOutline.data = polygonOutlineFeatures;
    layerProps.polygonsOutline._dataDiff =
        featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);
    layerProps.polygonsOutline.getPath = getCoordinates;
    return layerProps;
}
function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {
    // The binary data format is documented here
    // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md
    // It is the default output from the `MVTLoader` and can also be obtained
    // from GeoJSON by using the `geojsonToBinary` utility function.
    const layerProps = createEmptyLayerProps();
    const { points, lines, polygons } = geojsonBinary;
    const customPickingColors = (0,_geojson_binary_js__WEBPACK_IMPORTED_MODULE_0__.calculatePickingColors)(geojsonBinary, encodePickingColor);
    layerProps.points.data = {
        length: points.positions.value.length / points.positions.size,
        attributes: {
            ...points.attributes,
            getPosition: points.positions,
            instancePickingColors: {
                size: 3,
                value: customPickingColors.points
            }
        },
        properties: points.properties,
        numericProps: points.numericProps,
        featureIds: points.featureIds
    };
    layerProps.lines.data = {
        length: lines.pathIndices.value.length - 1,
        startIndices: lines.pathIndices.value,
        attributes: {
            ...lines.attributes,
            getPath: lines.positions,
            instancePickingColors: {
                size: 3,
                value: customPickingColors.lines
            }
        },
        properties: lines.properties,
        numericProps: lines.numericProps,
        featureIds: lines.featureIds
    };
    layerProps.lines._pathType = 'open';
    layerProps.polygons.data = {
        length: polygons.polygonIndices.value.length - 1,
        startIndices: polygons.polygonIndices.value,
        attributes: {
            ...polygons.attributes,
            getPolygon: polygons.positions,
            pickingColors: {
                size: 3,
                value: customPickingColors.polygons
            }
        },
        properties: polygons.properties,
        numericProps: polygons.numericProps,
        featureIds: polygons.featureIds
    };
    layerProps.polygons._normalize = false;
    if (polygons.triangles) {
        layerProps.polygons.data.attributes.indices = polygons.triangles.value;
    }
    layerProps.polygonsOutline.data = {
        length: polygons.primitivePolygonIndices.value.length - 1,
        startIndices: polygons.primitivePolygonIndices.value,
        attributes: {
            ...polygons.attributes,
            getPath: polygons.positions,
            instancePickingColors: {
                size: 3,
                value: customPickingColors.polygons
            }
        },
        properties: polygons.properties,
        numericProps: polygons.numericProps,
        featureIds: polygons.featureIds
    };
    layerProps.polygonsOutline._pathType = 'open';
    return layerProps;
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GeoJsonLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/composite-layer.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils.js */ "./node_modules/@deck.gl/layers/dist/utils.js");
/* harmony import */ var _geojson_binary_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./geojson-binary.js */ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-binary.js");
/* harmony import */ var _sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sub-layer-map.js */ "./node_modules/@deck.gl/layers/dist/geojson-layer/sub-layer-map.js");
/* harmony import */ var _geojson_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./geojson.js */ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson.js");
/* harmony import */ var _geojson_layer_props_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./geojson-layer-props.js */ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer-props.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.






const FEATURE_TYPES = ['points', 'linestrings', 'polygons'];
const defaultProps = {
    ...(0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultProps)(_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.POINT_LAYER.circle),
    ...(0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultProps)(_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.POINT_LAYER.icon),
    ...(0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultProps)(_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.POINT_LAYER.text),
    ...(0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultProps)(_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.LINE_LAYER),
    ...(0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultProps)(_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.POLYGON_LAYER),
    // Overwrite sub layer defaults
    stroked: true,
    filled: true,
    extruded: false,
    wireframe: false,
    _full3d: false,
    iconAtlas: { type: 'object', value: null },
    iconMapping: { type: 'object', value: {} },
    getIcon: { type: 'accessor', value: f => f.properties.icon },
    getText: { type: 'accessor', value: f => f.properties.text },
    // Self props
    pointType: 'circle',
    // TODO: deprecated, remove in v9
    getRadius: { deprecatedFor: 'getPointRadius' }
};
/** Render GeoJSON formatted data as polygons, lines and points (circles, icons and/or texts). */
class GeoJsonLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__["default"] {
    static { this.layerName = 'GeoJsonLayer'; }
    static { this.defaultProps = defaultProps; }
    initializeState() {
        this.state = {
            layerProps: {},
            features: {},
            featuresDiff: {}
        };
    }
    updateState({ props, changeFlags }) {
        if (!changeFlags.dataChanged) {
            return;
        }
        const { data } = this.props;
        const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;
        this.setState({ binary });
        if (binary) {
            this._updateStateBinary({ props, changeFlags });
        }
        else {
            this._updateStateJSON({ props, changeFlags });
        }
    }
    _updateStateBinary({ props, changeFlags }) {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const layerProps = (0,_geojson_layer_props_js__WEBPACK_IMPORTED_MODULE_2__.createLayerPropsFromBinary)(props.data, this.encodePickingColor);
        this.setState({ layerProps });
    }
    _updateStateJSON({ props, changeFlags }) {
        const features = (0,_geojson_js__WEBPACK_IMPORTED_MODULE_3__.getGeojsonFeatures)(props.data);
        const wrapFeature = this.getSubLayerRow.bind(this);
        let newFeatures = {};
        const featuresDiff = {};
        if (Array.isArray(changeFlags.dataChanged)) {
            const oldFeatures = this.state.features;
            for (const key in oldFeatures) {
                newFeatures[key] = oldFeatures[key].slice();
                featuresDiff[key] = [];
            }
            for (const dataRange of changeFlags.dataChanged) {
                const partialFeatures = (0,_geojson_js__WEBPACK_IMPORTED_MODULE_3__.separateGeojsonFeatures)(features, wrapFeature, dataRange);
                for (const key in oldFeatures) {
                    featuresDiff[key].push((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.replaceInRange)({
                        data: newFeatures[key],
                        getIndex: f => f.__source.index,
                        dataRange,
                        replace: partialFeatures[key]
                    }));
                }
            }
        }
        else {
            newFeatures = (0,_geojson_js__WEBPACK_IMPORTED_MODULE_3__.separateGeojsonFeatures)(features, wrapFeature);
        }
        const layerProps = (0,_geojson_layer_props_js__WEBPACK_IMPORTED_MODULE_2__.createLayerPropsFromFeatures)(newFeatures, featuresDiff);
        this.setState({
            features: newFeatures,
            featuresDiff,
            layerProps
        });
    }
    getPickingInfo(params) {
        const info = super.getPickingInfo(params);
        const { index, sourceLayer } = info;
        info.featureType = FEATURE_TYPES.find(ft => sourceLayer.id.startsWith(`${this.id}-${ft}-`));
        if (index >= 0 && sourceLayer.id.startsWith(`${this.id}-points-text`) && this.state.binary) {
            info.index = this.props.data.points.globalFeatureIds.value[index];
        }
        return info;
    }
    _updateAutoHighlight(info) {
        // All sub layers except the points layer use source feature index to encode the picking color
        // The points layer uses indices from the points data array.
        const pointLayerIdPrefix = `${this.id}-points-`;
        const sourceIsPoints = info.featureType === 'points';
        for (const layer of this.getSubLayers()) {
            if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {
                layer.updateAutoHighlight(info);
            }
        }
    }
    _renderPolygonLayer() {
        const { extruded, wireframe } = this.props;
        const { layerProps } = this.state;
        const id = 'polygons-fill';
        const PolygonFillLayer = this.shouldRenderSubLayer(id, layerProps.polygons?.data) &&
            this.getSubLayerClass(id, _sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.POLYGON_LAYER.type);
        if (PolygonFillLayer) {
            const forwardedProps = (0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.forwardProps)(this, _sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.POLYGON_LAYER.props);
            // Avoid building the lineColors attribute if wireframe is off
            const useLineColor = extruded && wireframe;
            if (!useLineColor) {
                delete forwardedProps.getLineColor;
            }
            // using a legacy API to invalid lineColor attributes
            forwardedProps.updateTriggers.lineColors = useLineColor;
            return new PolygonFillLayer(forwardedProps, this.getSubLayerProps({
                id,
                updateTriggers: forwardedProps.updateTriggers
            }), layerProps.polygons);
        }
        return null;
    }
    _renderLineLayers() {
        const { extruded, stroked } = this.props;
        const { layerProps } = this.state;
        const polygonStrokeLayerId = 'polygons-stroke';
        const lineStringsLayerId = 'linestrings';
        const PolygonStrokeLayer = !extruded &&
            stroked &&
            this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline?.data) &&
            this.getSubLayerClass(polygonStrokeLayerId, _sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.LINE_LAYER.type);
        const LineStringsLayer = this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines?.data) &&
            this.getSubLayerClass(lineStringsLayerId, _sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.LINE_LAYER.type);
        if (PolygonStrokeLayer || LineStringsLayer) {
            const forwardedProps = (0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.forwardProps)(this, _sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.LINE_LAYER.props);
            return [
                PolygonStrokeLayer &&
                    new PolygonStrokeLayer(forwardedProps, this.getSubLayerProps({
                        id: polygonStrokeLayerId,
                        updateTriggers: forwardedProps.updateTriggers
                    }), layerProps.polygonsOutline),
                LineStringsLayer &&
                    new LineStringsLayer(forwardedProps, this.getSubLayerProps({
                        id: lineStringsLayerId,
                        updateTriggers: forwardedProps.updateTriggers
                    }), layerProps.lines)
            ];
        }
        return null;
    }
    _renderPointLayers() {
        const { pointType } = this.props;
        const { layerProps, binary } = this.state;
        let { highlightedObjectIndex } = this.props;
        if (!binary && Number.isFinite(highlightedObjectIndex)) {
            // @ts-expect-error TODO - type non-binary data
            highlightedObjectIndex = layerProps.points.data.findIndex(d => d.__source.index === highlightedObjectIndex);
        }
        // Avoid duplicate sub layer ids
        const types = new Set(pointType.split('+'));
        const pointLayers = [];
        for (const type of types) {
            const id = `points-${type}`;
            const PointLayerMapping = _sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.POINT_LAYER[type];
            const PointsLayer = PointLayerMapping &&
                this.shouldRenderSubLayer(id, layerProps.points?.data) &&
                this.getSubLayerClass(id, PointLayerMapping.type);
            if (PointsLayer) {
                const forwardedProps = (0,_sub_layer_map_js__WEBPACK_IMPORTED_MODULE_0__.forwardProps)(this, PointLayerMapping.props);
                let pointsLayerProps = layerProps.points;
                if (type === 'text' && binary) {
                    // Picking colors are per-point but for text per-character are required
                    // getPickingInfo() maps back to the correct index
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    // @ts-expect-error TODO - type binary data
                    const { instancePickingColors, ...rest } = pointsLayerProps.data.attributes;
                    pointsLayerProps = {
                        ...pointsLayerProps,
                        // @ts-expect-error TODO - type binary data
                        data: { ...pointsLayerProps.data, attributes: rest }
                    };
                }
                pointLayers.push(new PointsLayer(forwardedProps, this.getSubLayerProps({
                    id,
                    updateTriggers: forwardedProps.updateTriggers,
                    highlightedObjectIndex
                }), pointsLayerProps));
            }
        }
        return pointLayers;
    }
    renderLayers() {
        const { extruded } = this.props;
        const polygonFillLayer = this._renderPolygonLayer();
        const lineLayers = this._renderLineLayers();
        const pointLayers = this._renderPointLayers();
        return [
            // If not extruded: flat fill layer is drawn below outlines
            !extruded && polygonFillLayer,
            lineLayers,
            pointLayers,
            // If extruded: draw fill layer last for correct blending behavior
            extruded && polygonFillLayer
        ];
    }
    getSubLayerAccessor(accessor) {
        const { binary } = this.state;
        if (!binary || typeof accessor !== 'function') {
            return super.getSubLayerAccessor(accessor);
        }
        return (object, info) => {
            const { data, index } = info;
            const feature = (0,_geojson_binary_js__WEBPACK_IMPORTED_MODULE_5__.binaryToFeatureForAccesor)(data, index);
            // @ts-ignore (TS2349) accessor is always function
            return accessor(feature, info);
        };
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/geojson-layer/geojson.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGeojsonFeatures: () => (/* binding */ getGeojsonFeatures),
/* harmony export */   separateGeojsonFeatures: () => (/* binding */ separateGeojsonFeatures),
/* harmony export */   validateGeometry: () => (/* binding */ validateGeometry)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * "Normalizes" complete or partial GeoJSON data into iterable list of features
 * Can accept GeoJSON geometry or "Feature", "FeatureCollection" in addition
 * to plain arrays and iterables.
 * Works by extracting the feature array or wrapping single objects in an array,
 * so that subsequent code can simply iterate over features.
 *
 * @param {object} geojson - geojson data
 * @param {Object|Array} data - geojson object (FeatureCollection, Feature or
 *  Geometry) or array of features
 * @return {Array|"iteratable"} - iterable list of features
 */
function getGeojsonFeatures(geojson) {
    // If array, assume this is a list of features
    if (Array.isArray(geojson)) {
        return geojson;
    }
    _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"].assert(geojson.type, 'GeoJSON does not have type');
    switch (geojson.type) {
        case 'Feature':
            // Wrap the feature in a 'Features' array
            return [geojson];
        case 'FeatureCollection':
            // Just return the 'Features' array from the collection
            _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"].assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');
            return geojson.features;
        default:
            // Assume it's a geometry, we'll check type in separateGeojsonFeatures
            // Wrap the geometry object in a 'Feature' object and wrap in an array
            return [{ geometry: geojson }];
    }
}
// Linearize
function separateGeojsonFeatures(features, wrapFeature, dataRange = {}) {
    const separated = {
        pointFeatures: [],
        lineFeatures: [],
        polygonFeatures: [],
        polygonOutlineFeatures: []
    };
    const { startRow = 0, endRow = features.length } = dataRange;
    for (let featureIndex = startRow; featureIndex < endRow; featureIndex++) {
        const feature = features[featureIndex];
        const { geometry } = feature;
        if (!geometry) {
            // geometry can be null per specification
            continue; // eslint-disable-line no-continue
        }
        if (geometry.type === 'GeometryCollection') {
            _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"].assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');
            const { geometries } = geometry;
            for (let i = 0; i < geometries.length; i++) {
                const subGeometry = geometries[i];
                separateGeometry(subGeometry, separated, wrapFeature, feature, featureIndex);
            }
        }
        else {
            separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);
        }
    }
    return separated;
}
function separateGeometry(geometry, separated, wrapFeature, sourceFeature, sourceFeatureIndex) {
    const { type, coordinates } = geometry;
    const { pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures } = separated;
    if (!validateGeometry(type, coordinates)) {
        // Avoid hard failure if some features are malformed
        _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`${type} coordinates are malformed`)();
        return;
    }
    // Split each feature, but keep track of the source feature and index (for Multi* geometries)
    switch (type) {
        case 'Point':
            pointFeatures.push(wrapFeature({
                geometry
            }, sourceFeature, sourceFeatureIndex));
            break;
        case 'MultiPoint':
            coordinates.forEach(point => {
                pointFeatures.push(wrapFeature({
                    geometry: { type: 'Point', coordinates: point }
                }, sourceFeature, sourceFeatureIndex));
            });
            break;
        case 'LineString':
            lineFeatures.push(wrapFeature({
                geometry
            }, sourceFeature, sourceFeatureIndex));
            break;
        case 'MultiLineString':
            // Break multilinestrings into multiple lines
            coordinates.forEach(path => {
                lineFeatures.push(wrapFeature({
                    geometry: { type: 'LineString', coordinates: path }
                }, sourceFeature, sourceFeatureIndex));
            });
            break;
        case 'Polygon':
            polygonFeatures.push(wrapFeature({
                geometry
            }, sourceFeature, sourceFeatureIndex));
            // Break polygon into multiple lines
            coordinates.forEach(path => {
                polygonOutlineFeatures.push(wrapFeature({
                    geometry: { type: 'LineString', coordinates: path }
                }, sourceFeature, sourceFeatureIndex));
            });
            break;
        case 'MultiPolygon':
            // Break multipolygons into multiple polygons
            coordinates.forEach(polygon => {
                polygonFeatures.push(wrapFeature({
                    geometry: { type: 'Polygon', coordinates: polygon }
                }, sourceFeature, sourceFeatureIndex));
                // Break polygon into multiple lines
                polygon.forEach(path => {
                    polygonOutlineFeatures.push(wrapFeature({
                        geometry: { type: 'LineString', coordinates: path }
                    }, sourceFeature, sourceFeatureIndex));
                });
            });
            break;
        default:
    }
}
/**
 * Simple GeoJSON validation util. For perf reasons we do not validate against the full spec,
 * only the following:
   - geometry.type is supported
   - geometry.coordinate has correct nesting level
 */
const COORDINATE_NEST_LEVEL = {
    Point: 1,
    MultiPoint: 2,
    LineString: 2,
    MultiLineString: 3,
    Polygon: 3,
    MultiPolygon: 4
};
function validateGeometry(type, coordinates) {
    let nestLevel = COORDINATE_NEST_LEVEL[type];
    _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"].assert(nestLevel, `Unknown GeoJSON type ${type}`);
    while (coordinates && --nestLevel > 0) {
        coordinates = coordinates[0];
    }
    return coordinates && Number.isFinite(coordinates[0]);
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/geojson-layer/sub-layer-map.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/geojson-layer/sub-layer-map.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LINE_LAYER: () => (/* binding */ LINE_LAYER),
/* harmony export */   POINT_LAYER: () => (/* binding */ POINT_LAYER),
/* harmony export */   POLYGON_LAYER: () => (/* binding */ POLYGON_LAYER),
/* harmony export */   forwardProps: () => (/* binding */ forwardProps),
/* harmony export */   getDefaultProps: () => (/* binding */ getDefaultProps)
/* harmony export */ });
/* harmony import */ var _icon_layer_icon_layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../icon-layer/icon-layer.js */ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer.js");
/* harmony import */ var _scatterplot_layer_scatterplot_layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scatterplot-layer/scatterplot-layer.js */ "./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer.js");
/* harmony import */ var _text_layer_text_layer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text-layer/text-layer.js */ "./node_modules/@deck.gl/layers/dist/text-layer/text-layer.js");
/* harmony import */ var _path_layer_path_layer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../path-layer/path-layer.js */ "./node_modules/@deck.gl/layers/dist/path-layer/path-layer.js");
/* harmony import */ var _solid_polygon_layer_solid_polygon_layer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../solid-polygon-layer/solid-polygon-layer.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer.js");





const POINT_LAYER = {
    circle: {
        type: _scatterplot_layer_scatterplot_layer_js__WEBPACK_IMPORTED_MODULE_0__["default"],
        props: {
            filled: 'filled',
            stroked: 'stroked',
            lineWidthMaxPixels: 'lineWidthMaxPixels',
            lineWidthMinPixels: 'lineWidthMinPixels',
            lineWidthScale: 'lineWidthScale',
            lineWidthUnits: 'lineWidthUnits',
            pointRadiusMaxPixels: 'radiusMaxPixels',
            pointRadiusMinPixels: 'radiusMinPixels',
            pointRadiusScale: 'radiusScale',
            pointRadiusUnits: 'radiusUnits',
            pointAntialiasing: 'antialiasing',
            pointBillboard: 'billboard',
            getFillColor: 'getFillColor',
            getLineColor: 'getLineColor',
            getLineWidth: 'getLineWidth',
            getPointRadius: 'getRadius'
        }
    },
    icon: {
        type: _icon_layer_icon_layer_js__WEBPACK_IMPORTED_MODULE_1__["default"],
        props: {
            iconAtlas: 'iconAtlas',
            iconMapping: 'iconMapping',
            iconSizeMaxPixels: 'sizeMaxPixels',
            iconSizeMinPixels: 'sizeMinPixels',
            iconSizeScale: 'sizeScale',
            iconSizeUnits: 'sizeUnits',
            iconAlphaCutoff: 'alphaCutoff',
            iconBillboard: 'billboard',
            getIcon: 'getIcon',
            getIconAngle: 'getAngle',
            getIconColor: 'getColor',
            getIconPixelOffset: 'getPixelOffset',
            getIconSize: 'getSize'
        }
    },
    text: {
        type: _text_layer_text_layer_js__WEBPACK_IMPORTED_MODULE_2__["default"],
        props: {
            textSizeMaxPixels: 'sizeMaxPixels',
            textSizeMinPixels: 'sizeMinPixels',
            textSizeScale: 'sizeScale',
            textSizeUnits: 'sizeUnits',
            textBackground: 'background',
            textBackgroundPadding: 'backgroundPadding',
            textFontFamily: 'fontFamily',
            textFontWeight: 'fontWeight',
            textLineHeight: 'lineHeight',
            textMaxWidth: 'maxWidth',
            textOutlineColor: 'outlineColor',
            textOutlineWidth: 'outlineWidth',
            textWordBreak: 'wordBreak',
            textCharacterSet: 'characterSet',
            textBillboard: 'billboard',
            textFontSettings: 'fontSettings',
            getText: 'getText',
            getTextAngle: 'getAngle',
            getTextColor: 'getColor',
            getTextPixelOffset: 'getPixelOffset',
            getTextSize: 'getSize',
            getTextAnchor: 'getTextAnchor',
            getTextAlignmentBaseline: 'getAlignmentBaseline',
            getTextBackgroundColor: 'getBackgroundColor',
            getTextBorderColor: 'getBorderColor',
            getTextBorderWidth: 'getBorderWidth'
        }
    }
};
const LINE_LAYER = {
    type: _path_layer_path_layer_js__WEBPACK_IMPORTED_MODULE_3__["default"],
    props: {
        lineWidthUnits: 'widthUnits',
        lineWidthScale: 'widthScale',
        lineWidthMinPixels: 'widthMinPixels',
        lineWidthMaxPixels: 'widthMaxPixels',
        lineJointRounded: 'jointRounded',
        lineCapRounded: 'capRounded',
        lineMiterLimit: 'miterLimit',
        lineBillboard: 'billboard',
        getLineColor: 'getColor',
        getLineWidth: 'getWidth'
    }
};
const POLYGON_LAYER = {
    type: _solid_polygon_layer_solid_polygon_layer_js__WEBPACK_IMPORTED_MODULE_4__["default"],
    props: {
        extruded: 'extruded',
        filled: 'filled',
        wireframe: 'wireframe',
        elevationScale: 'elevationScale',
        material: 'material',
        _full3d: '_full3d',
        getElevation: 'getElevation',
        getFillColor: 'getFillColor',
        getLineColor: 'getLineColor'
    }
};
function getDefaultProps({ type, props }) {
    const result = {};
    for (const key in props) {
        result[key] = type.defaultProps[props[key]];
    }
    return result;
}
function forwardProps(layer, mapping) {
    const { transitions, updateTriggers } = layer.props;
    const result = {
        updateTriggers: {},
        transitions: transitions && {
            getPosition: transitions.geometry
        }
    };
    for (const sourceKey in mapping) {
        const targetKey = mapping[sourceKey];
        let value = layer.props[sourceKey];
        if (sourceKey.startsWith('get')) {
            // isAccessor
            value = layer.getSubLayerAccessor(value);
            result.updateTriggers[targetKey] = updateTriggers[sourceKey];
            if (transitions) {
                result.transitions[targetKey] = transitions[sourceKey];
            }
        }
        result[targetKey] = value;
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer-fragment.glsl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer-fragment.glsl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME icon-layer-fragment-shader
precision highp float;
uniform float opacity;
uniform sampler2D iconsTexture;
uniform float alphaCutoff;
in float vColorMode;
in vec4 vColor;
in vec2 vTextureCoords;
in vec2 uv;
out vec4 fragColor;
void main(void) {
geometry.uv = uv;
vec4 texColor = texture(iconsTexture, vTextureCoords);
vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);
float a = texColor.a * opacity * vColor.a;
if (a < alphaCutoff) {
discard;
}
fragColor = vec4(color, a);
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer-vertex.glsl.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer-vertex.glsl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME icon-layer-vertex-shader
in vec2 positions;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in float instanceSizes;
in float instanceAngles;
in vec4 instanceColors;
in vec3 instancePickingColors;
in vec4 instanceIconFrames;
in float instanceColorModes;
in vec2 instanceOffsets;
in vec2 instancePixelOffset;
uniform float sizeScale;
uniform vec2 iconsTextureDim;
uniform float sizeMinPixels;
uniform float sizeMaxPixels;
uniform bool billboard;
uniform int sizeUnits;
out float vColorMode;
out vec4 vColor;
out vec2 vTextureCoords;
out vec2 uv;
vec2 rotate_by_angle(vec2 vertex, float angle) {
float angle_radian = angle * PI / 180.0;
float cos_angle = cos(angle_radian);
float sin_angle = sin(angle_radian);
mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);
return rotationMatrix * vertex;
}
void main(void) {
geometry.worldPosition = instancePositions;
geometry.uv = positions;
geometry.pickingColor = instancePickingColors;
uv = positions;
vec2 iconSize = instanceIconFrames.zw;
float sizePixels = clamp(
project_size_to_pixel(instanceSizes * sizeScale, sizeUnits),
sizeMinPixels, sizeMaxPixels
);
float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;
vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;
pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;
pixelOffset += instancePixelOffset;
pixelOffset.y *= -1.0;
if (billboard)  {
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
vec3 offset = vec3(pixelOffset, 0.0);
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
} else {
vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);
DECKGL_FILTER_SIZE(offset_common, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
vTextureCoords = mix(
instanceIconFrames.xy,
instanceIconFrames.xy + iconSize,
(positions.xy + 1.0) / 2.0
) / iconsTextureDim;
vColor = instanceColors;
DECKGL_FILTER_COLOR(vColor, geometry);
vColorMode = instanceColorModes;
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ IconLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _icon_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon-layer-vertex.glsl.js */ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer-vertex.glsl.js");
/* harmony import */ var _icon_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./icon-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer-fragment.glsl.js");
/* harmony import */ var _icon_manager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icon-manager.js */ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-manager.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





const DEFAULT_COLOR = [0, 0, 0, 255];
const defaultProps = {
    iconAtlas: { type: 'image', value: null, async: true },
    iconMapping: { type: 'object', value: {}, async: true },
    sizeScale: { type: 'number', value: 1, min: 0 },
    billboard: true,
    sizeUnits: 'pixels',
    sizeMinPixels: { type: 'number', min: 0, value: 0 }, //  min point radius in pixels
    sizeMaxPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER }, // max point radius in pixels
    alphaCutoff: { type: 'number', value: 0.05, min: 0, max: 1 },
    getPosition: { type: 'accessor', value: (x) => x.position },
    getIcon: { type: 'accessor', value: (x) => x.icon },
    getColor: { type: 'accessor', value: DEFAULT_COLOR },
    getSize: { type: 'accessor', value: 1 },
    getAngle: { type: 'accessor', value: 0 },
    getPixelOffset: { type: 'accessor', value: [0, 0] },
    onIconError: { type: 'function', value: null, optional: true },
    textureParameters: { type: 'object', ignore: true, value: null }
};
/** Render raster icons at given coordinates. */
class IconLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'IconLayer'; }
    getShaders() {
        return super.getShaders({ vs: _icon_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"], fs: _icon_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__["default"], modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"]] });
    }
    initializeState() {
        this.state = {
            iconManager: new _icon_manager_js__WEBPACK_IMPORTED_MODULE_5__["default"](this.context.device, {
                onUpdate: this._onUpdate.bind(this),
                onError: this._onError.bind(this)
            })
        };
        const attributeManager = this.getAttributeManager();
        /* eslint-disable max-len */
        attributeManager.addInstanced({
            instancePositions: {
                size: 3,
                type: 'float64',
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceSizes: {
                size: 1,
                transition: true,
                accessor: 'getSize',
                defaultValue: 1
            },
            instanceOffsets: {
                size: 2,
                accessor: 'getIcon',
                // eslint-disable-next-line @typescript-eslint/unbound-method
                transform: this.getInstanceOffset
            },
            instanceIconFrames: {
                size: 4,
                accessor: 'getIcon',
                // eslint-disable-next-line @typescript-eslint/unbound-method
                transform: this.getInstanceIconFrame
            },
            instanceColorModes: {
                size: 1,
                type: 'uint8',
                accessor: 'getIcon',
                // eslint-disable-next-line @typescript-eslint/unbound-method
                transform: this.getInstanceColorMode
            },
            instanceColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                transition: true,
                accessor: 'getColor',
                defaultValue: DEFAULT_COLOR
            },
            instanceAngles: {
                size: 1,
                transition: true,
                accessor: 'getAngle'
            },
            instancePixelOffset: {
                size: 2,
                transition: true,
                accessor: 'getPixelOffset'
            }
        });
        /* eslint-enable max-len */
    }
    /* eslint-disable max-statements, complexity */
    updateState(params) {
        super.updateState(params);
        const { props, oldProps, changeFlags } = params;
        const attributeManager = this.getAttributeManager();
        const { iconAtlas, iconMapping, data, getIcon, textureParameters } = props;
        const { iconManager } = this.state;
        if (typeof iconAtlas === 'string') {
            return;
        }
        // internalState is always defined during updateState
        const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');
        iconManager.setProps({
            loadOptions: props.loadOptions,
            autoPacking: !prePacked,
            iconAtlas,
            iconMapping: prePacked ? iconMapping : null,
            textureParameters
        });
        // prepacked iconAtlas from user
        if (prePacked) {
            if (oldProps.iconMapping !== props.iconMapping) {
                attributeManager.invalidate('getIcon');
            }
        }
        else if (changeFlags.dataChanged ||
            (changeFlags.updateTriggersChanged &&
                (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))) {
            // Auto packing - getIcon is expected to return an object
            iconManager.packIcons(data, getIcon);
        }
        if (changeFlags.extensionsChanged) {
            this.state.model?.destroy();
            this.state.model = this._getModel();
            attributeManager.invalidateAll();
        }
    }
    /* eslint-enable max-statements, complexity */
    get isLoaded() {
        return super.isLoaded && this.state.iconManager.isLoaded;
    }
    finalizeState(context) {
        super.finalizeState(context);
        // Release resources held by the icon manager
        this.state.iconManager.finalize();
    }
    draw({ uniforms }) {
        const { sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff } = this.props;
        const { iconManager } = this.state;
        const iconsTexture = iconManager.getTexture();
        if (iconsTexture) {
            const model = this.state.model;
            model.setBindings({ iconsTexture });
            model.setUniforms(uniforms);
            model.setUniforms({
                iconsTextureDim: [iconsTexture.width, iconsTexture.height],
                sizeUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__.UNIT[sizeUnits],
                sizeScale,
                sizeMinPixels,
                sizeMaxPixels,
                billboard,
                alphaCutoff
            });
            model.draw(this.context.renderPass);
        }
    }
    _getModel() {
        // The icon-layer vertex shader uses 2d positions
        // specifed via: in vec2 positions;
        const positions = [-1, -1, 1, -1, -1, 1, 1, 1];
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__.Model(this.context.device, {
            ...this.getShaders(),
            id: this.props.id,
            bufferLayout: this.getAttributeManager().getBufferLayouts(),
            geometry: new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_8__.Geometry({
                topology: 'triangle-strip',
                attributes: {
                    // The size must be explicitly passed here otherwise luma.gl
                    // will default to assuming that positions are 3D (x,y,z)
                    positions: {
                        size: 2,
                        value: new Float32Array(positions)
                    }
                }
            }),
            isInstanced: true
        });
    }
    _onUpdate() {
        this.setNeedsRedraw();
    }
    _onError(evt) {
        const onIconError = this.getCurrentLayer()?.props.onIconError;
        if (onIconError) {
            onIconError(evt);
        }
        else {
            _deck_gl_core__WEBPACK_IMPORTED_MODULE_9__["default"].error(evt.error.message)();
        }
    }
    getInstanceOffset(icon) {
        const { width, height, anchorX = width / 2, anchorY = height / 2 } = this.state.iconManager.getIconMapping(icon);
        return [width / 2 - anchorX, height / 2 - anchorY];
    }
    getInstanceColorMode(icon) {
        const mapping = this.state.iconManager.getIconMapping(icon);
        return mapping.mask ? 1 : 0;
    }
    getInstanceIconFrame(icon) {
        const { x, y, width, height } = this.state.iconManager.getIconMapping(icon);
        return [x, y, width, height];
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-manager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/icon-layer/icon-manager.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildMapping: () => (/* binding */ buildMapping),
/* harmony export */   "default": () => (/* binding */ IconManager),
/* harmony export */   getDiffIcons: () => (/* binding */ getDiffIcons)
/* harmony export */ });
/* harmony import */ var _loaders_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/core */ "./node_modules/@loaders.gl/core/dist/lib/api/load.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js");


const DEFAULT_CANVAS_WIDTH = 1024;
const DEFAULT_BUFFER = 4;
const noop = () => { };
const DEFAULT_SAMPLER_PARAMETERS = {
    minFilter: 'linear',
    mipmapFilter: 'linear',
    // LINEAR is the default value but explicitly set it here
    magFilter: 'linear',
    // minimize texture boundary artifacts
    addressModeU: 'clamp-to-edge',
    addressModeV: 'clamp-to-edge'
};
const MISSING_ICON = {
    x: 0,
    y: 0,
    width: 0,
    height: 0
};
function nextPowOfTwo(number) {
    return Math.pow(2, Math.ceil(Math.log2(number)));
}
// update comment to create a new texture and copy original data.
function resizeImage(ctx, imageData, maxWidth, maxHeight) {
    const resizeRatio = Math.min(maxWidth / imageData.width, maxHeight / imageData.height);
    const width = Math.floor(imageData.width * resizeRatio);
    const height = Math.floor(imageData.height * resizeRatio);
    if (resizeRatio === 1) {
        // No resizing required
        return { data: imageData, width, height };
    }
    ctx.canvas.height = height;
    ctx.canvas.width = width;
    ctx.clearRect(0, 0, width, height);
    // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight
    ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);
    return { data: ctx.canvas, width, height };
}
function getIconId(icon) {
    return icon && (icon.id || icon.url);
}
// resize texture without losing original data
function resizeTexture(texture, width, height, sampler) {
    const { width: oldWidth, height: oldHeight, device } = texture;
    const newTexture = device.createTexture({ format: 'rgba8unorm', width, height, sampler });
    const commandEncoder = device.createCommandEncoder();
    commandEncoder.copyTextureToTexture({
        source: texture,
        destination: newTexture,
        width: oldWidth,
        height: oldHeight
    });
    commandEncoder.finish();
    texture.destroy();
    return newTexture;
}
// traverse icons in a row of icon atlas
// extend each icon with left-top coordinates
function buildRowMapping(mapping, columns, yOffset) {
    for (let i = 0; i < columns.length; i++) {
        const { icon, xOffset } = columns[i];
        const id = getIconId(icon);
        mapping[id] = {
            ...icon,
            x: xOffset,
            y: yOffset
        };
    }
}
/**
 * Generate coordinate mapping to retrieve icon left-top position from an icon atlas
 */
function buildMapping({ icons, buffer, mapping = {}, xOffset = 0, yOffset = 0, rowHeight = 0, canvasWidth }) {
    let columns = [];
    // Strategy to layout all the icons into a texture:
    // traverse the icons sequentially, layout the icons from left to right, top to bottom
    // when the sum of the icons width is equal or larger than canvasWidth,
    // move to next row starting from total height so far plus max height of the icons in previous row
    // row width is equal to canvasWidth
    // row height is decided by the max height of the icons in that row
    // mapping coordinates of each icon is its left-top position in the texture
    for (let i = 0; i < icons.length; i++) {
        const icon = icons[i];
        const id = getIconId(icon);
        if (!mapping[id]) {
            const { height, width } = icon;
            // fill one row
            if (xOffset + width + buffer > canvasWidth) {
                buildRowMapping(mapping, columns, yOffset);
                xOffset = 0;
                yOffset = rowHeight + yOffset + buffer;
                rowHeight = 0;
                columns = [];
            }
            columns.push({
                icon,
                xOffset
            });
            xOffset = xOffset + width + buffer;
            rowHeight = Math.max(rowHeight, height);
        }
    }
    if (columns.length > 0) {
        buildRowMapping(mapping, columns, yOffset);
    }
    return {
        mapping,
        rowHeight,
        xOffset,
        yOffset,
        canvasWidth,
        canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)
    };
}
// extract icons from data
// return icons should be unique, and not cached or cached but url changed
function getDiffIcons(data, getIcon, cachedIcons) {
    if (!data || !getIcon) {
        return null;
    }
    cachedIcons = cachedIcons || {};
    const icons = {};
    const { iterable, objectInfo } = (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__.createIterable)(data);
    for (const object of iterable) {
        objectInfo.index++;
        const icon = getIcon(object, objectInfo);
        const id = getIconId(icon);
        if (!icon) {
            throw new Error('Icon is missing.');
        }
        if (!icon.url) {
            throw new Error('Icon url is missing.');
        }
        if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {
            icons[id] = { ...icon, source: object, sourceIndex: objectInfo.index };
        }
    }
    return icons;
}
class IconManager {
    constructor(device, { onUpdate = noop, onError = noop }) {
        this._loadOptions = null;
        this._texture = null;
        this._externalTexture = null;
        this._mapping = {};
        this._textureParameters = null;
        /** count of pending requests to fetch icons */
        this._pendingCount = 0;
        this._autoPacking = false;
        // / internal state used for autoPacking
        this._xOffset = 0;
        this._yOffset = 0;
        this._rowHeight = 0;
        this._buffer = DEFAULT_BUFFER;
        this._canvasWidth = DEFAULT_CANVAS_WIDTH;
        this._canvasHeight = 0;
        this._canvas = null;
        this.device = device;
        this.onUpdate = onUpdate;
        this.onError = onError;
    }
    finalize() {
        this._texture?.delete();
    }
    getTexture() {
        return this._texture || this._externalTexture;
    }
    getIconMapping(icon) {
        const id = this._autoPacking ? getIconId(icon) : icon;
        return this._mapping[id] || MISSING_ICON;
    }
    setProps({ loadOptions, autoPacking, iconAtlas, iconMapping, textureParameters }) {
        if (loadOptions) {
            this._loadOptions = loadOptions;
        }
        if (autoPacking !== undefined) {
            this._autoPacking = autoPacking;
        }
        if (iconMapping) {
            this._mapping = iconMapping;
        }
        if (iconAtlas) {
            this._texture?.delete();
            this._texture = null;
            this._externalTexture = iconAtlas;
        }
        if (textureParameters) {
            this._textureParameters = textureParameters;
        }
    }
    get isLoaded() {
        return this._pendingCount === 0;
    }
    packIcons(data, getIcon) {
        if (!this._autoPacking || typeof document === 'undefined') {
            return;
        }
        const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});
        if (icons.length > 0) {
            // generate icon mapping
            const { mapping, xOffset, yOffset, rowHeight, canvasHeight } = buildMapping({
                icons,
                buffer: this._buffer,
                canvasWidth: this._canvasWidth,
                mapping: this._mapping,
                rowHeight: this._rowHeight,
                xOffset: this._xOffset,
                yOffset: this._yOffset
            });
            this._rowHeight = rowHeight;
            this._mapping = mapping;
            this._xOffset = xOffset;
            this._yOffset = yOffset;
            this._canvasHeight = canvasHeight;
            // create new texture
            if (!this._texture) {
                this._texture = this.device.createTexture({
                    format: 'rgba8unorm',
                    width: this._canvasWidth,
                    height: this._canvasHeight,
                    sampler: this._textureParameters || DEFAULT_SAMPLER_PARAMETERS
                });
            }
            if (this._texture.height !== this._canvasHeight) {
                this._texture = resizeTexture(this._texture, this._canvasWidth, this._canvasHeight, this._textureParameters || DEFAULT_SAMPLER_PARAMETERS);
            }
            this.onUpdate();
            // load images
            this._canvas = this._canvas || document.createElement('canvas');
            this._loadIcons(icons);
        }
    }
    _loadIcons(icons) {
        // This method is only called in the auto packing case, where _canvas is defined
        const ctx = this._canvas.getContext('2d', {
            willReadFrequently: true
        });
        for (const icon of icons) {
            this._pendingCount++;
            (0,_loaders_gl_core__WEBPACK_IMPORTED_MODULE_1__.load)(icon.url, this._loadOptions)
                .then(imageData => {
                const id = getIconId(icon);
                const iconDef = this._mapping[id];
                const { x, y, width: maxWidth, height: maxHeight } = iconDef;
                const { data, width, height } = resizeImage(ctx, imageData, maxWidth, maxHeight);
                // @ts-expect-error TODO v9 API not yet clear
                this._texture.setSubImageData({
                    data,
                    x: x + (maxWidth - width) / 2,
                    y: y + (maxHeight - height) / 2,
                    width,
                    height
                });
                iconDef.width = width;
                iconDef.height = height;
                // Call to regenerate mipmaps after modifying texture(s)
                // @ts-expect-error TODO v9 API not yet clear
                this._texture.generateMipmap();
                this.onUpdate();
            })
                .catch(error => {
                this.onError({
                    url: icon.url,
                    source: icon.source,
                    sourceIndex: icon.sourceIndex,
                    loadOptions: this._loadOptions,
                    error
                });
            })
                .finally(() => {
                this._pendingCount--;
            });
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/line-layer/line-layer-fragment.glsl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/line-layer/line-layer-fragment.glsl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME line-layer-fragment-shader
precision highp float;
in vec4 vColor;
in vec2 uv;
out vec4 fragColor;
void main(void) {
geometry.uv = uv;
fragColor = vColor;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/line-layer/line-layer-vertex.glsl.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/line-layer/line-layer-vertex.glsl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME line-layer-vertex-shader
in vec3 positions;
in vec3 instanceSourcePositions;
in vec3 instanceTargetPositions;
in vec3 instanceSourcePositions64Low;
in vec3 instanceTargetPositions64Low;
in vec4 instanceColors;
in vec3 instancePickingColors;
in float instanceWidths;
uniform float opacity;
uniform float widthScale;
uniform float widthMinPixels;
uniform float widthMaxPixels;
uniform float useShortestPath;
uniform int widthUnits;
out vec4 vColor;
out vec2 uv;
vec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {
vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);
dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);
return dir_screenspace * offset_direction * width / 2.0;
}
vec3 splitLine(vec3 a, vec3 b, float x) {
float t = (x - a.x) / (b.x - a.x);
return vec3(x, mix(a.yz, b.yz, t));
}
void main(void) {
geometry.worldPosition = instanceSourcePositions;
geometry.worldPositionAlt = instanceTargetPositions;
vec3 source_world = instanceSourcePositions;
vec3 target_world = instanceTargetPositions;
vec3 source_world_64low = instanceSourcePositions64Low;
vec3 target_world_64low = instanceTargetPositions64Low;
if (useShortestPath > 0.5 || useShortestPath < -0.5) {
source_world.x = mod(source_world.x + 180., 360.0) - 180.;
target_world.x = mod(target_world.x + 180., 360.0) - 180.;
float deltaLng = target_world.x - source_world.x;
if (deltaLng * useShortestPath > 180.) {
source_world.x += 360. * useShortestPath;
source_world = splitLine(source_world, target_world, 180. * useShortestPath);
source_world_64low = vec3(0.0);
} else if (deltaLng * useShortestPath < -180.) {
target_world.x += 360. * useShortestPath;
target_world = splitLine(source_world, target_world, 180. * useShortestPath);
target_world_64low = vec3(0.0);
} else if (useShortestPath < 0.) {
gl_Position = vec4(0.);
return;
}
}
vec4 source_commonspace;
vec4 target_commonspace;
vec4 source = project_position_to_clipspace(source_world, source_world_64low, vec3(0.), source_commonspace);
vec4 target = project_position_to_clipspace(target_world, target_world_64low, vec3(0.), target_commonspace);
float segmentIndex = positions.x;
vec4 p = mix(source, target, segmentIndex);
geometry.position = mix(source_commonspace, target_commonspace, segmentIndex);
uv = positions.xy;
geometry.uv = uv;
geometry.pickingColor = instancePickingColors;
float widthPixels = clamp(
project_size_to_pixel(instanceWidths * widthScale, widthUnits),
widthMinPixels, widthMaxPixels
);
vec3 offset = vec3(
getExtrusionOffset(target.xy - source.xy, positions.y, widthPixels),
0.0);
DECKGL_FILTER_SIZE(offset, geometry);
DECKGL_FILTER_GL_POSITION(p, geometry);
gl_Position = p + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);
vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);
DECKGL_FILTER_COLOR(vColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/line-layer/line-layer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/line-layer/line-layer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _line_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./line-layer-vertex.glsl.js */ "./node_modules/@deck.gl/layers/dist/line-layer/line-layer-vertex.glsl.js");
/* harmony import */ var _line_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/line-layer/line-layer-fragment.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





const DEFAULT_COLOR = [0, 0, 0, 255];
const defaultProps = {
    getSourcePosition: { type: 'accessor', value: (x) => x.sourcePosition },
    getTargetPosition: { type: 'accessor', value: (x) => x.targetPosition },
    getColor: { type: 'accessor', value: DEFAULT_COLOR },
    getWidth: { type: 'accessor', value: 1 },
    widthUnits: 'pixels',
    widthScale: { type: 'number', value: 1, min: 0 },
    widthMinPixels: { type: 'number', value: 0, min: 0 },
    widthMaxPixels: { type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0 }
};
/**
 * A layer that renders straight lines joining pairs of source and target coordinates.
 */
class LineLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.layerName = 'LineLayer'; }
    static { this.defaultProps = defaultProps; }
    getBounds() {
        return this.getAttributeManager()?.getBounds([
            'instanceSourcePositions',
            'instanceTargetPositions'
        ]);
    }
    getShaders() {
        return super.getShaders({ vs: _line_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"], fs: _line_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__["default"], modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"]] });
    }
    // This layer has its own wrapLongitude logic
    get wrapLongitude() {
        return false;
    }
    initializeState() {
        const attributeManager = this.getAttributeManager();
        /* eslint-disable max-len */
        attributeManager.addInstanced({
            instanceSourcePositions: {
                size: 3,
                type: 'float64',
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getSourcePosition'
            },
            instanceTargetPositions: {
                size: 3,
                type: 'float64',
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getTargetPosition'
            },
            instanceColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                transition: true,
                accessor: 'getColor',
                defaultValue: [0, 0, 0, 255]
            },
            instanceWidths: {
                size: 1,
                transition: true,
                accessor: 'getWidth',
                defaultValue: 1
            }
        });
        /* eslint-enable max-len */
    }
    updateState(params) {
        super.updateState(params);
        if (params.changeFlags.extensionsChanged) {
            this.state.model?.destroy();
            this.state.model = this._getModel();
            this.getAttributeManager().invalidateAll();
        }
    }
    draw({ uniforms }) {
        const { widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude } = this.props;
        const model = this.state.model;
        model.setUniforms(uniforms);
        model.setUniforms({
            widthUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__.UNIT[widthUnits],
            widthScale,
            widthMinPixels,
            widthMaxPixels,
            useShortestPath: wrapLongitude ? 1 : 0
        });
        model.draw(this.context.renderPass);
        if (wrapLongitude) {
            // Render a second copy for the clipped lines at the 180th meridian
            model.setUniforms({
                useShortestPath: -1
            });
            model.draw(this.context.renderPass);
        }
    }
    _getModel() {
        /*
         *  (0, -1)-------------_(1, -1)
         *       |          _,-"  |
         *       o      _,-"      o
         *       |  _,-"          |
         *   (0, 1)"-------------(1, 1)
         */
        const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_6__.Model(this.context.device, {
            ...this.getShaders(),
            id: this.props.id,
            bufferLayout: this.getAttributeManager().getBufferLayouts(),
            geometry: new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__.Geometry({
                topology: 'triangle-strip',
                attributes: {
                    positions: { size: 3, value: new Float32Array(positions) }
                }
            }),
            isInstanced: true
        });
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/path-layer/path-layer-fragment.glsl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/path-layer/path-layer-fragment.glsl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME path-layer-fragment-shader
precision highp float;
uniform float miterLimit;
in vec4 vColor;
in vec2 vCornerOffset;
in float vMiterLength;
in vec2 vPathPosition;
in float vPathLength;
in float vJointType;
out vec4 fragColor;
void main(void) {
geometry.uv = vPathPosition;
if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {
if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {
discard;
}
if (vJointType < 0.5 && vMiterLength > miterLimit + 1.0) {
discard;
}
}
fragColor = vColor;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/path-layer/path-layer-vertex.glsl.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/path-layer/path-layer-vertex.glsl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME path-layer-vertex-shader
in vec2 positions;
in float instanceTypes;
in vec3 instanceStartPositions;
in vec3 instanceEndPositions;
in vec3 instanceLeftPositions;
in vec3 instanceRightPositions;
in vec3 instanceLeftPositions64Low;
in vec3 instanceStartPositions64Low;
in vec3 instanceEndPositions64Low;
in vec3 instanceRightPositions64Low;
in float instanceStrokeWidths;
in vec4 instanceColors;
in vec3 instancePickingColors;
uniform float widthScale;
uniform float widthMinPixels;
uniform float widthMaxPixels;
uniform float jointType;
uniform float capType;
uniform float miterLimit;
uniform bool billboard;
uniform int widthUnits;
uniform float opacity;
out vec4 vColor;
out vec2 vCornerOffset;
out float vMiterLength;
out vec2 vPathPosition;
out float vPathLength;
out float vJointType;
const float EPSILON = 0.001;
const vec3 ZERO_OFFSET = vec3(0.0);
float flipIfTrue(bool flag) {
return -(float(flag) * 2. - 1.);
}
vec3 getLineJoinOffset(
vec3 prevPoint, vec3 currPoint, vec3 nextPoint,
vec2 width
) {
bool isEnd = positions.x > 0.0;
float sideOfPath = positions.y;
float isJoint = float(sideOfPath == 0.0);
vec3 deltaA3 = (currPoint - prevPoint);
vec3 deltaB3 = (nextPoint - currPoint);
mat3 rotationMatrix;
bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);
if (needsRotation) {
deltaA3 = deltaA3 * rotationMatrix;
deltaB3 = deltaB3 * rotationMatrix;
}
vec2 deltaA = deltaA3.xy / width;
vec2 deltaB = deltaB3.xy / width;
float lenA = length(deltaA);
float lenB = length(deltaB);
vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);
vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);
vec2 perpA = vec2(-dirA.y, dirA.x);
vec2 perpB = vec2(-dirB.y, dirB.x);
vec2 tangent = dirA + dirB;
tangent = length(tangent) > 0. ? normalize(tangent) : perpA;
vec2 miterVec = vec2(-tangent.y, tangent.x);
vec2 dir = isEnd ? dirA : dirB;
vec2 perp = isEnd ? perpA : perpB;
float L = isEnd ? lenA : lenB;
float sinHalfA = abs(dot(miterVec, perp));
float cosHalfA = abs(dot(dirA, miterVec));
float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);
float cornerPosition = sideOfPath * turnDirection;
float miterSize = 1.0 / max(sinHalfA, EPSILON);
miterSize = mix(
min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),
miterSize,
step(0.0, cornerPosition)
);
vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))
* (sideOfPath + isJoint * turnDirection);
bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));
bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));
bool isCap = isStartCap || isEndCap;
if (isCap) {
offsetVec = mix(perp * sideOfPath, dir * capType * 4.0 * flipIfTrue(isStartCap), isJoint);
vJointType = capType;
} else {
vJointType = jointType;
}
vPathLength = L;
vCornerOffset = offsetVec;
vMiterLength = dot(vCornerOffset, miterVec * turnDirection);
vMiterLength = isCap ? isJoint : vMiterLength;
vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);
vPathPosition = vec2(
dot(offsetFromStartOfPath, perp),
dot(offsetFromStartOfPath, dir)
);
geometry.uv = vPathPosition;
float isValid = step(instanceTypes, 3.5);
vec3 offset = vec3(offsetVec * width * isValid, 0.0);
if (needsRotation) {
offset = rotationMatrix * offset;
}
return offset;
}
void clipLine(inout vec4 position, vec4 refPosition) {
if (position.w < EPSILON) {
float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);
position = refPosition + (position - refPosition) * r;
}
}
void main() {
geometry.pickingColor = instancePickingColors;
vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);
float isEnd = positions.x;
vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);
vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);
vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);
vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);
vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);
vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);
geometry.worldPosition = currPosition;
vec2 widthPixels = vec2(clamp(
project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),
widthMinPixels, widthMaxPixels) / 2.0);
vec3 width;
if (billboard) {
vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);
vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);
vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);
clipLine(prevPositionScreen, currPositionScreen);
clipLine(nextPositionScreen, currPositionScreen);
clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));
width = vec3(widthPixels, 0.0);
DECKGL_FILTER_SIZE(width, geometry);
vec3 offset = getLineJoinOffset(
prevPositionScreen.xyz / prevPositionScreen.w,
currPositionScreen.xyz / currPositionScreen.w,
nextPositionScreen.xyz / nextPositionScreen.w,
project_pixel_size_to_clipspace(width.xy)
);
DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);
gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);
} else {
prevPosition = project_position(prevPosition, prevPosition64Low);
currPosition = project_position(currPosition, currPosition64Low);
nextPosition = project_position(nextPosition, nextPosition64Low);
width = vec3(project_pixel_size(widthPixels), 0.0);
DECKGL_FILTER_SIZE(width, geometry);
vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);
geometry.position = vec4(currPosition + offset, 1.0);
gl_Position = project_common_position_to_clipspace(geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
DECKGL_FILTER_COLOR(vColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/path-layer/path-layer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/path-layer/path-layer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PathLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _path_tesselator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./path-tesselator.js */ "./node_modules/@deck.gl/layers/dist/path-layer/path-tesselator.js");
/* harmony import */ var _path_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./path-layer-vertex.glsl.js */ "./node_modules/@deck.gl/layers/dist/path-layer/path-layer-vertex.glsl.js");
/* harmony import */ var _path_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/path-layer/path-layer-fragment.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.






const DEFAULT_COLOR = [0, 0, 0, 255];
const defaultProps = {
    widthUnits: 'meters',
    widthScale: { type: 'number', min: 0, value: 1 },
    widthMinPixels: { type: 'number', min: 0, value: 0 },
    widthMaxPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER },
    jointRounded: false,
    capRounded: false,
    miterLimit: { type: 'number', min: 0, value: 4 },
    billboard: false,
    _pathType: null,
    getPath: { type: 'accessor', value: (object) => object.path },
    getColor: { type: 'accessor', value: DEFAULT_COLOR },
    getWidth: { type: 'accessor', value: 1 },
    // deprecated props
    rounded: { deprecatedFor: ['jointRounded', 'capRounded'] }
};
const ATTRIBUTE_TRANSITION = {
    enter: (value, chunk) => {
        return chunk.length ? chunk.subarray(chunk.length - value.length) : value;
    }
};
/** Render lists of coordinate points as extruded polylines with mitering. */
class PathLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'PathLayer'; }
    getShaders() {
        return super.getShaders({ vs: _path_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"], fs: _path_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__["default"], modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"]] }); // 'project' module added by default.
    }
    get wrapLongitude() {
        return false;
    }
    getBounds() {
        return this.getAttributeManager()?.getBounds(['vertexPositions']);
    }
    initializeState() {
        const noAlloc = true;
        const attributeManager = this.getAttributeManager();
        /* eslint-disable max-len */
        attributeManager.addInstanced({
            vertexPositions: {
                size: 3,
                // Start filling buffer from 1 vertex in
                vertexOffset: 1,
                type: 'float64',
                fp64: this.use64bitPositions(),
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getPath',
                // eslint-disable-next-line @typescript-eslint/unbound-method
                update: this.calculatePositions,
                noAlloc,
                shaderAttributes: {
                    instanceLeftPositions: {
                        vertexOffset: 0
                    },
                    instanceStartPositions: {
                        vertexOffset: 1
                    },
                    instanceEndPositions: {
                        vertexOffset: 2
                    },
                    instanceRightPositions: {
                        vertexOffset: 3
                    }
                }
            },
            instanceTypes: {
                size: 1,
                type: 'uint8',
                // eslint-disable-next-line @typescript-eslint/unbound-method
                update: this.calculateSegmentTypes,
                noAlloc
            },
            instanceStrokeWidths: {
                size: 1,
                accessor: 'getWidth',
                transition: ATTRIBUTE_TRANSITION,
                defaultValue: 1
            },
            instanceColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                accessor: 'getColor',
                transition: ATTRIBUTE_TRANSITION,
                defaultValue: DEFAULT_COLOR
            },
            instancePickingColors: {
                size: 4,
                type: 'uint8',
                accessor: (object, { index, target: value }) => this.encodePickingColor(object && object.__source ? object.__source.index : index, value)
            }
        });
        /* eslint-enable max-len */
        this.setState({
            pathTesselator: new _path_tesselator_js__WEBPACK_IMPORTED_MODULE_5__["default"]({
                fp64: this.use64bitPositions()
            })
        });
    }
    updateState(params) {
        super.updateState(params);
        const { props, changeFlags } = params;
        const attributeManager = this.getAttributeManager();
        const geometryChanged = changeFlags.dataChanged ||
            (changeFlags.updateTriggersChanged &&
                (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));
        if (geometryChanged) {
            const { pathTesselator } = this.state;
            const buffers = props.data.attributes || {};
            pathTesselator.updateGeometry({
                data: props.data,
                geometryBuffer: buffers.getPath,
                buffers,
                normalize: !props._pathType,
                loop: props._pathType === 'loop',
                getGeometry: props.getPath,
                positionFormat: props.positionFormat,
                wrapLongitude: props.wrapLongitude,
                // TODO - move the flag out of the viewport
                resolution: this.context.viewport.resolution,
                dataChanged: changeFlags.dataChanged
            });
            this.setState({
                numInstances: pathTesselator.instanceCount,
                startIndices: pathTesselator.vertexStarts
            });
            if (!changeFlags.dataChanged) {
                // Base `layer.updateState` only invalidates all attributes on data change
                // Cover the rest of the scenarios here
                attributeManager.invalidateAll();
            }
        }
        if (changeFlags.extensionsChanged) {
            this.state.model?.destroy();
            this.state.model = this._getModel();
            attributeManager.invalidateAll();
        }
    }
    getPickingInfo(params) {
        const info = super.getPickingInfo(params);
        const { index } = info;
        const data = this.props.data;
        // Check if data comes from a composite layer, wrapped with getSubLayerRow
        if (data[0] && data[0].__source) {
            // index decoded from picking color refers to the source index
            info.object = data.find(d => d.__source.index === index);
        }
        return info;
    }
    /** Override base Layer method */
    disablePickingIndex(objectIndex) {
        const data = this.props.data;
        // Check if data comes from a composite layer, wrapped with getSubLayerRow
        if (data[0] && data[0].__source) {
            // index decoded from picking color refers to the source index
            for (let i = 0; i < data.length; i++) {
                if (data[i].__source.index === objectIndex) {
                    this._disablePickingIndex(i);
                }
            }
        }
        else {
            super.disablePickingIndex(objectIndex);
        }
    }
    draw({ uniforms }) {
        const { jointRounded, capRounded, billboard, miterLimit, widthUnits, widthScale, widthMinPixels, widthMaxPixels } = this.props;
        const model = this.state.model;
        model.setUniforms(uniforms);
        model.setUniforms({
            jointType: Number(jointRounded),
            capType: Number(capRounded),
            billboard,
            widthUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__.UNIT[widthUnits],
            widthScale,
            miterLimit,
            widthMinPixels,
            widthMaxPixels
        });
        model.draw(this.context.renderPass);
    }
    _getModel() {
        /*
         *       _
         *        "-_ 1                   3                       5
         *     _     "o---------------------o-------------------_-o
         *       -   / ""--..__              '.             _.-' /
         *   _     "@- - - - - ""--..__- - - - x - - - -_.@'    /
         *    "-_  /                   ""--..__ '.  _,-` :     /
         *       "o----------------------------""-o'    :     /
         *      0,2                            4 / '.  :     /
         *                                      /   '.:     /
         *                                     /     :'.   /
         *                                    /     :  ', /
         *                                   /     :     o
         */
        // prettier-ignore
        const SEGMENT_INDICES = [
            // start corner
            0, 1, 2,
            // body
            1, 4, 2,
            1, 3, 4,
            // end corner
            3, 5, 4
        ];
        // [0] position on segment - 0: start, 1: end
        // [1] side of path - -1: left, 0: center (joint), 1: right
        // prettier-ignore
        const SEGMENT_POSITIONS = [
            // bevel start corner
            0, 0,
            // start inner corner
            0, -1,
            // start outer corner
            0, 1,
            // end inner corner
            1, -1,
            // end outer corner
            1, 1,
            // bevel end corner
            1, 0
        ];
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__.Model(this.context.device, {
            ...this.getShaders(),
            id: this.props.id,
            bufferLayout: this.getAttributeManager().getBufferLayouts(),
            geometry: new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_8__.Geometry({
                topology: 'triangle-list',
                attributes: {
                    indices: new Uint16Array(SEGMENT_INDICES),
                    positions: { value: new Float32Array(SEGMENT_POSITIONS), size: 2 }
                }
            }),
            isInstanced: true
        });
    }
    calculatePositions(attribute) {
        const { pathTesselator } = this.state;
        attribute.startIndices = pathTesselator.vertexStarts;
        attribute.value = pathTesselator.get('positions');
    }
    calculateSegmentTypes(attribute) {
        const { pathTesselator } = this.state;
        attribute.startIndices = pathTesselator.vertexStarts;
        attribute.value = pathTesselator.get('segmentTypes');
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/path-layer/path-tesselator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/path-layer/path-tesselator.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PathTesselator)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/tesselator.js");
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./path.js */ "./node_modules/@deck.gl/layers/dist/path-layer/path.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


const START_CAP = 1;
const END_CAP = 2;
const INVALID = 4;
// This class is set up to allow querying one attribute at a time
// the way the AttributeManager expects it
class PathTesselator extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(opts) {
        super({
            ...opts,
            attributes: {
                // Padding covers shaderAttributes for last segment in largest case fp64
                // additional vertex + hi & low parts, 3 * 6
                positions: {
                    size: 3,
                    padding: 18,
                    initialize: true,
                    type: opts.fp64 ? Float64Array : Float32Array
                },
                segmentTypes: { size: 1, type: Uint8ClampedArray }
            }
        });
    }
    /** Get packed attribute by name */
    get(attributeName) {
        return this.attributes[attributeName];
    }
    /* Implement base Tesselator interface */
    getGeometryFromBuffer(buffer) {
        if (this.normalize) {
            return super.getGeometryFromBuffer(buffer);
        }
        // we don't need to read the positions if no normalization
        return null;
    }
    /* Implement base Tesselator interface */
    normalizeGeometry(path) {
        if (this.normalize) {
            return (0,_path_js__WEBPACK_IMPORTED_MODULE_1__.normalizePath)(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);
        }
        return path;
    }
    /* Implement base Tesselator interface */
    getGeometrySize(path) {
        if (isCut(path)) {
            let size = 0;
            for (const subPath of path) {
                size += this.getGeometrySize(subPath);
            }
            return size;
        }
        const numPoints = this.getPathLength(path);
        if (numPoints < 2) {
            // invalid path
            return 0;
        }
        if (this.isClosed(path)) {
            // minimum 3 vertices
            return numPoints < 3 ? 0 : numPoints + 2;
        }
        return numPoints;
    }
    /* Implement base Tesselator interface */
    updateGeometryAttributes(path, context) {
        if (context.geometrySize === 0) {
            return;
        }
        if (path && isCut(path)) {
            for (const subPath of path) {
                const geometrySize = this.getGeometrySize(subPath);
                context.geometrySize = geometrySize;
                this.updateGeometryAttributes(subPath, context);
                context.vertexStart += geometrySize;
            }
        }
        else {
            this._updateSegmentTypes(path, context);
            this._updatePositions(path, context);
        }
    }
    _updateSegmentTypes(path, context) {
        const segmentTypes = this.attributes.segmentTypes;
        const isPathClosed = path ? this.isClosed(path) : false;
        const { vertexStart, geometrySize } = context;
        // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --
        // segmentTypes     3  4  4  0  0  0  0  4  4
        segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);
        if (isPathClosed) {
            segmentTypes[vertexStart] = INVALID;
            segmentTypes[vertexStart + geometrySize - 2] = INVALID;
        }
        else {
            segmentTypes[vertexStart] += START_CAP;
            segmentTypes[vertexStart + geometrySize - 2] += END_CAP;
        }
        segmentTypes[vertexStart + geometrySize - 1] = INVALID;
    }
    _updatePositions(path, context) {
        const { positions } = this.attributes;
        if (!positions || !path) {
            return;
        }
        const { vertexStart, geometrySize } = context;
        const p = new Array(3);
        // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --
        // segmentTypes     3  4  4  0  0  0  0  4  4
        for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {
            this.getPointOnPath(path, ptIndex, p);
            positions[i * 3] = p[0];
            positions[i * 3 + 1] = p[1];
            positions[i * 3 + 2] = p[2];
        }
    }
    // Utilities
    /** Returns the number of points in the path */
    getPathLength(path) {
        return path.length / this.positionSize;
    }
    /** Returns a point on the path at the specified index */
    getPointOnPath(path, index, target = []) {
        const { positionSize } = this;
        if (index * positionSize >= path.length) {
            // loop
            index += 1 - path.length / positionSize;
        }
        const i = index * positionSize;
        target[0] = path[i];
        target[1] = path[i + 1];
        target[2] = (positionSize === 3 && path[i + 2]) || 0;
        return target;
    }
    // Returns true if the first and last points are identical
    isClosed(path) {
        if (!this.normalize) {
            return Boolean(this.opts.loop);
        }
        const { positionSize } = this;
        const lastPointIndex = path.length - positionSize;
        return (path[0] === path[lastPointIndex] &&
            path[1] === path[lastPointIndex + 1] &&
            (positionSize === 2 || path[2] === path[lastPointIndex + 2]));
    }
}
function isCut(path) {
    return Array.isArray(path[0]);
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/path-layer/path.js":
/*!**************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/path-layer/path.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizePath: () => (/* binding */ normalizePath)
/* harmony export */ });
/* harmony import */ var _math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/polygon */ "./node_modules/@math.gl/polygon/dist/index.js");

/**
 * Flattens a nested path object
 * Cut the feature if needed (globe projection, wrap longitude, etc.)
 * Returns a flat array of path positions, or a list of flat arrays representing multiple paths
 */
function normalizePath(path, size, gridResolution, wrapLongitude) {
    let flatPath;
    if (Array.isArray(path[0])) {
        const length = path.length * size;
        flatPath = new Array(length);
        for (let i = 0; i < path.length; i++) {
            for (let j = 0; j < size; j++) {
                flatPath[i * size + j] = path[i][j] || 0;
            }
        }
    }
    else {
        flatPath = path;
    }
    if (gridResolution) {
        return (0,_math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__.cutPolylineByGrid)(flatPath, { size, gridResolution });
    }
    if (wrapLongitude) {
        return (0,_math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__.cutPolylineByMercatorBounds)(flatPath, { size });
    }
    return flatPath;
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer-fragment.glsl.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer-fragment.glsl.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME scatterplot-layer-fragment-shader
precision highp float;
uniform bool filled;
uniform float stroked;
uniform bool antialiasing;
in vec4 vFillColor;
in vec4 vLineColor;
in vec2 unitPosition;
in float innerUnitRadius;
in float outerRadiusPixels;
out vec4 fragColor;
void main(void) {
geometry.uv = unitPosition;
float distToCenter = length(unitPosition) * outerRadiusPixels;
float inCircle = antialiasing ?
smoothedge(distToCenter, outerRadiusPixels) :
step(distToCenter, outerRadiusPixels);
if (inCircle == 0.0) {
discard;
}
if (stroked > 0.5) {
float isLine = antialiasing ?
smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :
step(innerUnitRadius * outerRadiusPixels, distToCenter);
if (filled) {
fragColor = mix(vFillColor, vLineColor, isLine);
} else {
if (isLine == 0.0) {
discard;
}
fragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);
}
} else if (!filled) {
discard;
} else {
fragColor = vFillColor;
}
fragColor.a *= inCircle;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer-vertex.glsl.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer-vertex.glsl.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME scatterplot-layer-vertex-shader
in vec3 positions;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in float instanceRadius;
in float instanceLineWidths;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in vec3 instancePickingColors;
uniform float opacity;
uniform float radiusScale;
uniform float radiusMinPixels;
uniform float radiusMaxPixels;
uniform float lineWidthScale;
uniform float lineWidthMinPixels;
uniform float lineWidthMaxPixels;
uniform float stroked;
uniform bool filled;
uniform bool antialiasing;
uniform bool billboard;
uniform int radiusUnits;
uniform int lineWidthUnits;
out vec4 vFillColor;
out vec4 vLineColor;
out vec2 unitPosition;
out float innerUnitRadius;
out float outerRadiusPixels;
void main(void) {
geometry.worldPosition = instancePositions;
outerRadiusPixels = clamp(
project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),
radiusMinPixels, radiusMaxPixels
);
float lineWidthPixels = clamp(
project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),
lineWidthMinPixels, lineWidthMaxPixels
);
outerRadiusPixels += stroked * lineWidthPixels / 2.0;
float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;
unitPosition = edgePadding * positions.xy;
geometry.uv = unitPosition;
geometry.pickingColor = instancePickingColors;
innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;
if (billboard) {
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
vec3 offset = edgePadding * positions * outerRadiusPixels;
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
} else {
vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);
DECKGL_FILTER_COLOR(vFillColor, geometry);
vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);
DECKGL_FILTER_COLOR(vLineColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScatterplotLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _scatterplot_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scatterplot-layer-vertex.glsl.js */ "./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer-vertex.glsl.js");
/* harmony import */ var _scatterplot_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scatterplot-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer-fragment.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





const DEFAULT_COLOR = [0, 0, 0, 255];
const defaultProps = {
    radiusUnits: 'meters',
    radiusScale: { type: 'number', min: 0, value: 1 },
    radiusMinPixels: { type: 'number', min: 0, value: 0 }, //  min point radius in pixels
    radiusMaxPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER }, // max point radius in pixels
    lineWidthUnits: 'meters',
    lineWidthScale: { type: 'number', min: 0, value: 1 },
    lineWidthMinPixels: { type: 'number', min: 0, value: 0 },
    lineWidthMaxPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER },
    stroked: false,
    filled: true,
    billboard: false,
    antialiasing: true,
    getPosition: { type: 'accessor', value: (x) => x.position },
    getRadius: { type: 'accessor', value: 1 },
    getFillColor: { type: 'accessor', value: DEFAULT_COLOR },
    getLineColor: { type: 'accessor', value: DEFAULT_COLOR },
    getLineWidth: { type: 'accessor', value: 1 },
    // deprecated
    strokeWidth: { deprecatedFor: 'getLineWidth' },
    outline: { deprecatedFor: 'stroked' },
    getColor: { deprecatedFor: ['getFillColor', 'getLineColor'] }
};
/** Render circles at given coordinates. */
class ScatterplotLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'ScatterplotLayer'; }
    getShaders() {
        return super.getShaders({ vs: _scatterplot_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"], fs: _scatterplot_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__["default"], modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"]] });
    }
    initializeState() {
        this.getAttributeManager().addInstanced({
            instancePositions: {
                size: 3,
                type: 'float64',
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceRadius: {
                size: 1,
                transition: true,
                accessor: 'getRadius',
                defaultValue: 1
            },
            instanceFillColors: {
                size: this.props.colorFormat.length,
                transition: true,
                type: 'unorm8',
                accessor: 'getFillColor',
                defaultValue: [0, 0, 0, 255]
            },
            instanceLineColors: {
                size: this.props.colorFormat.length,
                transition: true,
                type: 'unorm8',
                accessor: 'getLineColor',
                defaultValue: [0, 0, 0, 255]
            },
            instanceLineWidths: {
                size: 1,
                transition: true,
                accessor: 'getLineWidth',
                defaultValue: 1
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        if (params.changeFlags.extensionsChanged) {
            this.state.model?.destroy();
            this.state.model = this._getModel();
            this.getAttributeManager().invalidateAll();
        }
    }
    draw({ uniforms }) {
        const { radiusUnits, radiusScale, radiusMinPixels, radiusMaxPixels, stroked, filled, billboard, antialiasing, lineWidthUnits, lineWidthScale, lineWidthMinPixels, lineWidthMaxPixels } = this.props;
        const model = this.state.model;
        model.setUniforms(uniforms);
        model.setUniforms({
            stroked: stroked ? 1 : 0,
            filled,
            billboard,
            antialiasing,
            radiusUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__.UNIT[radiusUnits],
            radiusScale,
            radiusMinPixels,
            radiusMaxPixels,
            lineWidthUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__.UNIT[lineWidthUnits],
            lineWidthScale,
            lineWidthMinPixels,
            lineWidthMaxPixels
        });
        model.draw(this.context.renderPass);
    }
    _getModel() {
        // a square that minimally cover the unit circle
        const positions = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_6__.Model(this.context.device, {
            ...this.getShaders(),
            id: this.props.id,
            bufferLayout: this.getAttributeManager().getBufferLayouts(),
            geometry: new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__.Geometry({
                topology: 'triangle-strip',
                attributes: {
                    positions: { size: 3, value: new Float32Array(positions) }
                }
            }),
            isInstanced: true
        });
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/polygon-tesselator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/solid-polygon-layer/polygon-tesselator.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PolygonTesselator)
/* harmony export */ });
/* harmony import */ var _polygon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polygon.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/polygon.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/tesselator.js");
/* harmony import */ var _math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/polygon */ "./node_modules/@math.gl/polygon/dist/index.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Handles tesselation of polygons with holes
// - 2D surfaces
// - 2D outlines
// - 3D surfaces (top and sides only)
// - 3D wireframes (not yet)



// This class is set up to allow querying one attribute at a time
// the way the AttributeManager expects it
class PolygonTesselator extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(opts) {
        const { fp64, IndexType = Uint32Array } = opts;
        super({
            ...opts,
            attributes: {
                positions: { size: 3, type: fp64 ? Float64Array : Float32Array },
                vertexValid: { type: Uint16Array, size: 1 },
                indices: { type: IndexType, size: 1 }
            }
        });
    }
    /** Get attribute by name */
    get(attributeName) {
        const { attributes } = this;
        if (attributeName === 'indices') {
            return attributes.indices && attributes.indices.subarray(0, this.vertexCount);
        }
        return attributes[attributeName];
    }
    /** Override base Tesselator method */
    updateGeometry(opts) {
        super.updateGeometry(opts);
        const externalIndices = this.buffers.indices;
        if (externalIndices) {
            // @ts-ignore (2339) value is not defined on TypedArray (fall through)
            this.vertexCount = (externalIndices.value || externalIndices).length;
        }
        else if (this.data && !this.getGeometry) {
            throw new Error('missing indices buffer');
        }
    }
    /** Implement base Tesselator interface */
    normalizeGeometry(polygon) {
        if (this.normalize) {
            const normalizedPolygon = _polygon_js__WEBPACK_IMPORTED_MODULE_2__.normalize(polygon, this.positionSize);
            if (this.opts.resolution) {
                return (0,_math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__.cutPolygonByGrid)(_polygon_js__WEBPACK_IMPORTED_MODULE_2__.getPositions(normalizedPolygon), _polygon_js__WEBPACK_IMPORTED_MODULE_2__.getHoleIndices(normalizedPolygon), {
                    size: this.positionSize,
                    gridResolution: this.opts.resolution,
                    edgeTypes: true
                });
            }
            if (this.opts.wrapLongitude) {
                return (0,_math_gl_polygon__WEBPACK_IMPORTED_MODULE_0__.cutPolygonByMercatorBounds)(_polygon_js__WEBPACK_IMPORTED_MODULE_2__.getPositions(normalizedPolygon), _polygon_js__WEBPACK_IMPORTED_MODULE_2__.getHoleIndices(normalizedPolygon), {
                    size: this.positionSize,
                    maxLatitude: 86,
                    edgeTypes: true
                });
            }
            return normalizedPolygon;
        }
        // normalize is explicitly set to false, assume that user passed in already normalized polygons
        return polygon;
    }
    /** Implement base Tesselator interface */
    getGeometrySize(polygon) {
        if (isCut(polygon)) {
            let size = 0;
            for (const subPolygon of polygon) {
                size += this.getGeometrySize(subPolygon);
            }
            return size;
        }
        return _polygon_js__WEBPACK_IMPORTED_MODULE_2__.getPositions(polygon).length / this.positionSize;
    }
    /** Override base Tesselator method */
    getGeometryFromBuffer(buffer) {
        if (this.normalize || !this.buffers.indices) {
            return super.getGeometryFromBuffer(buffer);
        }
        // we don't need to read the positions if no normalization/tesselation
        return null;
    }
    /** Implement base Tesselator interface */
    updateGeometryAttributes(polygon, context) {
        if (polygon && isCut(polygon)) {
            for (const subPolygon of polygon) {
                const geometrySize = this.getGeometrySize(subPolygon);
                context.geometrySize = geometrySize;
                this.updateGeometryAttributes(subPolygon, context);
                context.vertexStart += geometrySize;
                context.indexStart = this.indexStarts[context.geometryIndex + 1];
            }
        }
        else {
            const normalizedPolygon = polygon;
            this._updateIndices(normalizedPolygon, context);
            this._updatePositions(normalizedPolygon, context);
            this._updateVertexValid(normalizedPolygon, context);
        }
    }
    // Flatten the indices array
    _updateIndices(polygon, { geometryIndex, vertexStart: offset, indexStart }) {
        const { attributes, indexStarts, typedArrayManager } = this;
        let target = attributes.indices;
        if (!target || !polygon) {
            return;
        }
        let i = indexStart;
        // 1. get triangulated indices for the internal areas
        const indices = _polygon_js__WEBPACK_IMPORTED_MODULE_2__.getSurfaceIndices(polygon, this.positionSize, this.opts.preproject, this.opts.full3d);
        // make sure the buffer is large enough
        target = typedArrayManager.allocate(target, indexStart + indices.length, {
            copy: true
        });
        // 2. offset each index by the number of indices in previous polygons
        for (let j = 0; j < indices.length; j++) {
            target[i++] = indices[j] + offset;
        }
        indexStarts[geometryIndex + 1] = indexStart + indices.length;
        attributes.indices = target;
    }
    // Flatten out all the vertices of all the sub subPolygons
    _updatePositions(polygon, { vertexStart, geometrySize }) {
        const { attributes: { positions }, positionSize } = this;
        if (!positions || !polygon) {
            return;
        }
        const polygonPositions = _polygon_js__WEBPACK_IMPORTED_MODULE_2__.getPositions(polygon);
        for (let i = vertexStart, j = 0; j < geometrySize; i++, j++) {
            const x = polygonPositions[j * positionSize];
            const y = polygonPositions[j * positionSize + 1];
            const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;
            positions[i * 3] = x;
            positions[i * 3 + 1] = y;
            positions[i * 3 + 2] = z;
        }
    }
    _updateVertexValid(polygon, { vertexStart, geometrySize }) {
        const { positionSize } = this;
        const vertexValid = this.attributes.vertexValid;
        const holeIndices = polygon && _polygon_js__WEBPACK_IMPORTED_MODULE_2__.getHoleIndices(polygon);
        /* We are reusing the some buffer for `nextPositions` by offseting one vertex
         * to the left. As a result,
         * the last vertex of each ring overlaps with the first vertex of the next ring.
         * `vertexValid` is used to mark the end of each ring so we don't draw these
         * segments:
          positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...
          nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...
          vertexValid    1  1  1  1  0  1  1  0  1 ...
         */
        if (polygon && polygon.edgeTypes) {
            vertexValid.set(polygon.edgeTypes, vertexStart);
        }
        else {
            vertexValid.fill(1, vertexStart, vertexStart + geometrySize);
        }
        if (holeIndices) {
            for (let j = 0; j < holeIndices.length; j++) {
                vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;
            }
        }
        vertexValid[vertexStart + geometrySize - 1] = 0;
    }
}
function isCut(polygon) {
    return Array.isArray(polygon) && polygon.length > 0 && !Number.isFinite(polygon[0]);
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/polygon.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/solid-polygon-layer/polygon.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getHoleIndices: () => (/* binding */ getHoleIndices),
/* harmony export */   getPositions: () => (/* binding */ getPositions),
/* harmony export */   getSurfaceIndices: () => (/* binding */ getSurfaceIndices),
/* harmony export */   normalize: () => (/* binding */ normalize)
/* harmony export */ });
/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! earcut */ "./node_modules/earcut/src/earcut.js");
/* harmony import */ var _math_gl_polygon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/polygon */ "./node_modules/@math.gl/polygon/dist/index.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-params */


const OUTER_POLYGON_WINDING = _math_gl_polygon__WEBPACK_IMPORTED_MODULE_1__.WINDING.CLOCKWISE;
const HOLE_POLYGON_WINDING = _math_gl_polygon__WEBPACK_IMPORTED_MODULE_1__.WINDING.COUNTER_CLOCKWISE;
/** A scratch object for sending winding options */
const windingOptions = {
    isClosed: true
};
/**
 * Ensure a polygon is valid format
 */
function validate(polygon) {
    polygon = (polygon && polygon.positions) || polygon;
    if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {
        throw new Error('invalid polygon');
    }
}
/** Get the positions from a normalized polygon */
function getPositions(polygon) {
    return 'positions' in polygon ? polygon.positions : polygon;
}
/** Get the hole indices from a normalized polygon */
function getHoleIndices(polygon) {
    return 'holeIndices' in polygon ? polygon.holeIndices : null;
}
/**
 * Check if a polygon is nested or flat
 * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)
 */
function isNested(polygon) {
    return Array.isArray(polygon[0]);
}
/**
 * Check if a polygon is simple or complex
 * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)
 */
function isSimple(polygon) {
    return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);
}
/**
 * Check if a simple polygon is a closed ring
 * Returns true if the simple polygon is a closed ring
 */
function isNestedRingClosed(simplePolygon) {
    // check if first and last vertex are the same
    const p0 = simplePolygon[0];
    const p1 = simplePolygon[simplePolygon.length - 1];
    return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];
}
/**
 * Check if a simple flat array is a closed ring
 * Returns true if the simple flat array is a closed ring
 */
function isFlatRingClosed(positions, 
/** size of a position, 2 (xy) or 3 (xyz) */
size, 
/** start index of the path in the positions array */
startIndex, 
/** end index of the path in the positions array */
endIndex) {
    for (let i = 0; i < size; i++) {
        if (positions[startIndex + i] !== positions[endIndex - size + i]) {
            return false;
        }
    }
    return true;
}
/**
 * Copy a simple polygon coordinates into a flat array, closes the ring if needed.
 * Returns the index of the write head in the destination
 */
function copyNestedRing(
/** destination */
target, 
/** index in the destination to start copying into */
targetStartIndex, 
/** the source polygon */
simplePolygon, 
/** size of a position, 2 (xy) or 3 (xyz) */
size, 
/** modify polygon to be of the specified winding direction */
windingDirection) {
    let targetIndex = targetStartIndex;
    const len = simplePolygon.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < size; j++) {
            target[targetIndex++] = simplePolygon[i][j] || 0;
        }
    }
    if (!isNestedRingClosed(simplePolygon)) {
        for (let j = 0; j < size; j++) {
            target[targetIndex++] = simplePolygon[0][j] || 0;
        }
    }
    windingOptions.start = targetStartIndex;
    windingOptions.end = targetIndex;
    windingOptions.size = size;
    (0,_math_gl_polygon__WEBPACK_IMPORTED_MODULE_1__.modifyPolygonWindingDirection)(target, windingDirection, windingOptions);
    return targetIndex;
}
/**
 * Copy a simple flat array into another flat array, closes the ring if needed.
 * Returns the index of the write head in the destination
 */
function copyFlatRing(
/** destination */
target, 
/** index in the destination to start copying into */
targetStartIndex, 
/** the source polygon */
positions, 
/** size of a position, 2 (xy) or 3 (xyz) */
size, 
/** start index of the path in the positions array */
srcStartIndex = 0, 
/** end index of the path in the positions array */
srcEndIndex, windingDirection) {
    srcEndIndex = srcEndIndex || positions.length;
    const srcLength = srcEndIndex - srcStartIndex;
    if (srcLength <= 0) {
        return targetStartIndex;
    }
    let targetIndex = targetStartIndex;
    for (let i = 0; i < srcLength; i++) {
        target[targetIndex++] = positions[srcStartIndex + i];
    }
    if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {
        for (let i = 0; i < size; i++) {
            target[targetIndex++] = positions[srcStartIndex + i];
        }
    }
    windingOptions.start = targetStartIndex;
    windingOptions.end = targetIndex;
    windingOptions.size = size;
    (0,_math_gl_polygon__WEBPACK_IMPORTED_MODULE_1__.modifyPolygonWindingDirection)(target, windingDirection, windingOptions);
    return targetIndex;
}
/**
 * Normalize any polygon representation into the "complex flat" format
 */
/* eslint-disable max-statements */
function normalize(polygon, positionSize) {
    validate(polygon);
    const positions = [];
    const holeIndices = [];
    if ('positions' in polygon) {
        // complex flat
        const { positions: srcPositions, holeIndices: srcHoleIndices } = polygon;
        if (srcHoleIndices) {
            let targetIndex = 0;
            // split the positions array into `holeIndices.length + 1` rings
            // holeIndices[-1] falls back to 0
            // holeIndices[holeIndices.length] falls back to positions.length
            for (let i = 0; i <= srcHoleIndices.length; i++) {
                targetIndex = copyFlatRing(positions, targetIndex, srcPositions, positionSize, srcHoleIndices[i - 1], srcHoleIndices[i], i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);
                holeIndices.push(targetIndex);
            }
            // The last one is not a starting index of a hole, remove
            holeIndices.pop();
            return { positions, holeIndices };
        }
        polygon = srcPositions;
    }
    if (!isNested(polygon)) {
        // simple flat
        copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);
        return positions;
    }
    if (!isSimple(polygon)) {
        // complex polygon
        let targetIndex = 0;
        for (const [polygonIndex, simplePolygon] of polygon.entries()) {
            targetIndex = copyNestedRing(positions, targetIndex, simplePolygon, positionSize, polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);
            holeIndices.push(targetIndex);
        }
        // The last one is not a starting index of a hole, remove
        holeIndices.pop();
        // last index points to the end of the array, remove it
        return { positions, holeIndices };
    }
    // simple polygon
    copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);
    return positions;
}
/* eslint-enable max-statements */
/*
 * Calculate the area of a single plane of the polygon
 */
function getPlaneArea(positions, xIndex, yIndex) {
    const numVerts = positions.length / 3;
    let area = 0;
    for (let i = 0; i < numVerts; i++) {
        const j = (i + 1) % numVerts;
        area += positions[i * 3 + xIndex] * positions[j * 3 + yIndex];
        area -= positions[j * 3 + xIndex] * positions[i * 3 + yIndex];
    }
    return Math.abs(area / 2);
}
function permutePositions(positions, xIndex, yIndex, zIndex) {
    const numVerts = positions.length / 3;
    for (let i = 0; i < numVerts; i++) {
        const o = i * 3;
        const x = positions[o + 0];
        const y = positions[o + 1];
        const z = positions[o + 2];
        positions[o + xIndex] = x;
        positions[o + yIndex] = y;
        positions[o + zIndex] = z;
    }
}
/**
 * Get vertex indices for drawing polygon mesh (triangulation)
 */
// eslint-disable-next-line complexity, max-statements
function getSurfaceIndices(polygon, positionSize, preproject, full3d) {
    let holeIndices = getHoleIndices(polygon);
    if (holeIndices) {
        holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);
    }
    let positions = getPositions(polygon);
    const is3d = full3d && positionSize === 3;
    if (preproject) {
        // When tesselating lnglat coordinates, project them to the common space for accuracy
        const n = positions.length;
        // Clone the array
        positions = positions.slice();
        const p = [];
        for (let i = 0; i < n; i += positionSize) {
            p[0] = positions[i];
            p[1] = positions[i + 1];
            if (is3d) {
                p[2] = positions[i + 2];
            }
            const xy = preproject(p);
            positions[i] = xy[0];
            positions[i + 1] = xy[1];
            if (is3d) {
                positions[i + 2] = xy[2];
            }
        }
    }
    if (is3d) {
        // calculate plane with largest area
        const xyArea = getPlaneArea(positions, 0, 1);
        const xzArea = getPlaneArea(positions, 0, 2);
        const yzArea = getPlaneArea(positions, 1, 2);
        if (!xyArea && !xzArea && !yzArea) {
            return []; // no planes have area, nothing we can do
        }
        // permute positions to make the largest plane xy for earcut
        if (xyArea > xzArea && xyArea > yzArea) {
            // xy plane largest, nothing to do
        }
        else if (xzArea > yzArea) {
            // xz plane largest, permute to make xyz -> xzy
            if (!preproject) {
                positions = positions.slice();
            }
            permutePositions(positions, 0, 2, 1);
        }
        else {
            // yz plane largest, permute to make xyz -> yzx
            if (!preproject) {
                positions = positions.slice();
            }
            permutePositions(positions, 2, 0, 1);
        }
    }
    // Let earcut triangulate the polygon
    return earcut__WEBPACK_IMPORTED_MODULE_0__(positions, holeIndices, positionSize);
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-fragment.glsl.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-fragment.glsl.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME solid-polygon-layer-fragment-shader
precision highp float;
in vec4 vColor;
out vec4 fragColor;
void main(void) {
fragColor = vColor;
geometry.uv = vec2(0.);
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
uniform bool extruded;
uniform bool isWireframe;
uniform float elevationScale;
uniform float opacity;
in vec4 fillColors;
in vec4 lineColors;
in vec3 pickingColors;
out vec4 vColor;
struct PolygonProps {
vec3 positions;
vec3 positions64Low;
vec3 normal;
float elevations;
};
vec3 project_offset_normal(vec3 vector) {
if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {
return normalize(vector * project_uCommonUnitsPerWorldUnit);
}
return project_normal(vector);
}
void calculatePosition(PolygonProps props) {
vec3 pos = props.positions;
vec3 pos64Low = props.positions64Low;
vec3 normal = props.normal;
vec4 colors = isWireframe ? lineColors : fillColors;
geometry.worldPosition = props.positions;
geometry.pickingColor = pickingColors;
if (extruded) {
pos.z += props.elevations * elevationScale;
}
gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
if (extruded) {
#ifdef IS_SIDE_VERTEX
normal = project_offset_normal(normal);
#else
normal = project_normal(normal);
#endif
geometry.normal = normal;
vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);
vColor = vec4(lightColor, colors.a * opacity);
} else {
vColor = vec4(colors.rgb, colors.a * opacity);
}
DECKGL_FILTER_COLOR(vColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-side.glsl.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-side.glsl.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _solid_polygon_layer_vertex_main_glsl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./solid-polygon-layer-vertex-main.glsl.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME solid-polygon-layer-vertex-shader-side
#define IS_SIDE_VERTEX
in vec2 positions;
in vec3 vertexPositions;
in vec3 nextVertexPositions;
in vec3 vertexPositions64Low;
in vec3 nextVertexPositions64Low;
in float elevations;
in float instanceVertexValid;
${_solid_polygon_layer_vertex_main_glsl_js__WEBPACK_IMPORTED_MODULE_0__["default"]}
void main(void) {
if(instanceVertexValid < 0.5){
gl_Position = vec4(0.);
return;
}
PolygonProps props;
vec3 pos;
vec3 pos64Low;
vec3 nextPos;
vec3 nextPos64Low;
#if RING_WINDING_ORDER_CW == 1
pos = vertexPositions;
pos64Low = vertexPositions64Low;
nextPos = nextVertexPositions;
nextPos64Low = nextVertexPositions64Low;
#else
pos = nextVertexPositions;
pos64Low = nextVertexPositions64Low;
nextPos = vertexPositions;
nextPos64Low = vertexPositions64Low;
#endif
props.positions = mix(pos, nextPos, positions.x);
props.positions64Low = mix(pos64Low, nextPos64Low, positions.x);
props.normal = vec3(
pos.y - nextPos.y + (pos64Low.y - nextPos64Low.y),
nextPos.x - pos.x + (nextPos64Low.x - pos64Low.x),
0.0);
props.elevations = elevations * positions.y;
calculatePosition(props);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-top.glsl.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-top.glsl.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _solid_polygon_layer_vertex_main_glsl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./solid-polygon-layer-vertex-main.glsl.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME solid-polygon-layer-vertex-shader
in vec3 vertexPositions;
in vec3 vertexPositions64Low;
in float elevations;
${_solid_polygon_layer_vertex_main_glsl_js__WEBPACK_IMPORTED_MODULE_0__["default"]}
void main(void) {
PolygonProps props;
props.positions = vertexPositions;
props.positions64Low = vertexPositions64Low;
props.elevations = elevations;
props.normal = vec3(0.0, 0.0, 1.0);
calculatePosition(props);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SolidPolygonLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _polygon_tesselator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./polygon-tesselator.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/polygon-tesselator.js");
/* harmony import */ var _solid_polygon_layer_vertex_top_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./solid-polygon-layer-vertex-top.glsl.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-top.glsl.js");
/* harmony import */ var _solid_polygon_layer_vertex_side_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solid-polygon-layer-vertex-side.glsl.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-vertex-side.glsl.js");
/* harmony import */ var _solid_polygon_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./solid-polygon-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer-fragment.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


// Polygon geometry generation is managed by the polygon tesselator




const DEFAULT_COLOR = [0, 0, 0, 255];
const defaultProps = {
    filled: true,
    extruded: false,
    wireframe: false,
    _normalize: true,
    _windingOrder: 'CW',
    _full3d: false,
    elevationScale: { type: 'number', min: 0, value: 1 },
    getPolygon: { type: 'accessor', value: (f) => f.polygon },
    getElevation: { type: 'accessor', value: 1000 },
    getFillColor: { type: 'accessor', value: DEFAULT_COLOR },
    getLineColor: { type: 'accessor', value: DEFAULT_COLOR },
    material: true
};
const ATTRIBUTE_TRANSITION = {
    enter: (value, chunk) => {
        return chunk.length ? chunk.subarray(chunk.length - value.length) : value;
    }
};
class SolidPolygonLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'SolidPolygonLayer'; }
    getShaders(type) {
        return super.getShaders({
            vs: type === 'top' ? _solid_polygon_layer_vertex_top_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"] : _solid_polygon_layer_vertex_side_glsl_js__WEBPACK_IMPORTED_MODULE_2__["default"],
            fs: _solid_polygon_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_3__["default"],
            defines: {
                RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1
            },
            modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__.gouraudLighting, _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__["default"]]
        });
    }
    get wrapLongitude() {
        return false;
    }
    getBounds() {
        return this.getAttributeManager()?.getBounds(['vertexPositions']);
    }
    initializeState() {
        const { viewport } = this.context;
        let { coordinateSystem } = this.props;
        const { _full3d } = this.props;
        if (viewport.isGeospatial && coordinateSystem === _deck_gl_core__WEBPACK_IMPORTED_MODULE_7__.COORDINATE_SYSTEM.DEFAULT) {
            coordinateSystem = _deck_gl_core__WEBPACK_IMPORTED_MODULE_7__.COORDINATE_SYSTEM.LNGLAT;
        }
        let preproject;
        if (coordinateSystem === _deck_gl_core__WEBPACK_IMPORTED_MODULE_7__.COORDINATE_SYSTEM.LNGLAT) {
            if (_full3d) {
                preproject = viewport.projectPosition.bind(viewport);
            }
            else {
                preproject = viewport.projectFlat.bind(viewport);
            }
        }
        this.setState({
            numInstances: 0,
            polygonTesselator: new _polygon_tesselator_js__WEBPACK_IMPORTED_MODULE_8__["default"]({
                // Lnglat coordinates are usually projected non-linearly, which affects tesselation results
                // Provide a preproject function if the coordinates are in lnglat
                preproject,
                fp64: this.use64bitPositions(),
                IndexType: Uint32Array
            })
        });
        const attributeManager = this.getAttributeManager();
        const noAlloc = true;
        attributeManager.remove(['instancePickingColors']);
        /* eslint-disable max-len */
        attributeManager.add({
            indices: {
                size: 1,
                isIndexed: true,
                // eslint-disable-next-line @typescript-eslint/unbound-method
                update: this.calculateIndices,
                noAlloc
            },
            vertexPositions: {
                size: 3,
                type: 'float64',
                stepMode: 'dynamic',
                fp64: this.use64bitPositions(),
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getPolygon',
                // eslint-disable-next-line @typescript-eslint/unbound-method
                update: this.calculatePositions,
                noAlloc,
                shaderAttributes: {
                    nextVertexPositions: {
                        vertexOffset: 1
                    }
                }
            },
            instanceVertexValid: {
                size: 1,
                type: 'uint16',
                stepMode: 'instance',
                // eslint-disable-next-line @typescript-eslint/unbound-method
                update: this.calculateVertexValid,
                noAlloc
            },
            elevations: {
                size: 1,
                stepMode: 'dynamic',
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getElevation'
            },
            fillColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                stepMode: 'dynamic',
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getFillColor',
                defaultValue: DEFAULT_COLOR
            },
            lineColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                stepMode: 'dynamic',
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getLineColor',
                defaultValue: DEFAULT_COLOR
            },
            pickingColors: {
                size: 4,
                type: 'uint8',
                stepMode: 'dynamic',
                accessor: (object, { index, target: value }) => this.encodePickingColor(object && object.__source ? object.__source.index : index, value)
            }
        });
        /* eslint-enable max-len */
    }
    getPickingInfo(params) {
        const info = super.getPickingInfo(params);
        const { index } = info;
        const data = this.props.data;
        // Check if data comes from a composite layer, wrapped with getSubLayerRow
        if (data[0] && data[0].__source) {
            // index decoded from picking color refers to the source index
            info.object = data.find(d => d.__source.index === index);
        }
        return info;
    }
    disablePickingIndex(objectIndex) {
        const data = this.props.data;
        // Check if data comes from a composite layer, wrapped with getSubLayerRow
        if (data[0] && data[0].__source) {
            // index decoded from picking color refers to the source index
            for (let i = 0; i < data.length; i++) {
                if (data[i].__source.index === objectIndex) {
                    this._disablePickingIndex(i);
                }
            }
        }
        else {
            super.disablePickingIndex(objectIndex);
        }
    }
    draw({ uniforms }) {
        const { extruded, filled, wireframe, elevationScale } = this.props;
        const { topModel, sideModel, wireframeModel, polygonTesselator } = this.state;
        const renderUniforms = {
            ...uniforms,
            extruded: Boolean(extruded),
            elevationScale
        };
        // Note - the order is important
        if (wireframeModel && wireframe) {
            wireframeModel.setInstanceCount(polygonTesselator.instanceCount - 1);
            wireframeModel.setUniforms(renderUniforms);
            wireframeModel.draw(this.context.renderPass);
        }
        if (sideModel && filled) {
            sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);
            sideModel.setUniforms(renderUniforms);
            sideModel.draw(this.context.renderPass);
        }
        if (topModel && filled) {
            topModel.setVertexCount(polygonTesselator.vertexCount);
            topModel.setUniforms(renderUniforms);
            topModel.draw(this.context.renderPass);
        }
    }
    updateState(updateParams) {
        super.updateState(updateParams);
        this.updateGeometry(updateParams);
        const { props, oldProps, changeFlags } = updateParams;
        const attributeManager = this.getAttributeManager();
        const regenerateModels = changeFlags.extensionsChanged ||
            props.filled !== oldProps.filled ||
            props.extruded !== oldProps.extruded;
        if (regenerateModels) {
            this.state.models?.forEach(model => model.destroy());
            this.setState(this._getModels());
            attributeManager.invalidateAll();
        }
    }
    updateGeometry({ props, oldProps, changeFlags }) {
        const geometryConfigChanged = changeFlags.dataChanged ||
            (changeFlags.updateTriggersChanged &&
                (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));
        // When the geometry config  or the data is changed,
        // tessellator needs to be invoked
        if (geometryConfigChanged) {
            const { polygonTesselator } = this.state;
            const buffers = props.data.attributes || {};
            polygonTesselator.updateGeometry({
                data: props.data,
                normalize: props._normalize,
                geometryBuffer: buffers.getPolygon,
                buffers,
                getGeometry: props.getPolygon,
                positionFormat: props.positionFormat,
                wrapLongitude: props.wrapLongitude,
                // TODO - move the flag out of the viewport
                resolution: this.context.viewport.resolution,
                fp64: this.use64bitPositions(),
                dataChanged: changeFlags.dataChanged,
                full3d: props._full3d
            });
            this.setState({
                numInstances: polygonTesselator.instanceCount,
                startIndices: polygonTesselator.vertexStarts
            });
            if (!changeFlags.dataChanged) {
                // Base `layer.updateState` only invalidates all attributes on data change
                // Cover the rest of the scenarios here
                this.getAttributeManager().invalidateAll();
            }
        }
    }
    _getModels() {
        const { id, filled, extruded } = this.props;
        let topModel;
        let sideModel;
        let wireframeModel;
        if (filled) {
            const shaders = this.getShaders('top');
            shaders.defines.NON_INSTANCED_MODEL = 1;
            const bufferLayout = this.getAttributeManager().getBufferLayouts({ isInstanced: false });
            topModel = new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_9__.Model(this.context.device, {
                ...shaders,
                id: `${id}-top`,
                topology: 'triangle-list',
                uniforms: {
                    isWireframe: false
                },
                bufferLayout,
                isIndexed: true,
                userData: {
                    excludeAttributes: { instanceVertexValid: true }
                }
            });
        }
        if (extruded) {
            const bufferLayout = this.getAttributeManager().getBufferLayouts({ isInstanced: true });
            sideModel = new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_9__.Model(this.context.device, {
                ...this.getShaders('side'),
                id: `${id}-side`,
                bufferLayout,
                uniforms: {
                    isWireframe: false
                },
                geometry: new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_10__.Geometry({
                    topology: 'triangle-strip',
                    attributes: {
                        // top right - top left - bottom right - bottom left
                        positions: {
                            size: 2,
                            value: new Float32Array([1, 0, 0, 0, 1, 1, 0, 1])
                        }
                    }
                }),
                isInstanced: true,
                userData: {
                    excludeAttributes: { indices: true }
                }
            });
            wireframeModel = new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_9__.Model(this.context.device, {
                ...this.getShaders('side'),
                id: `${id}-wireframe`,
                bufferLayout,
                uniforms: {
                    isWireframe: true
                },
                geometry: new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_10__.Geometry({
                    topology: 'line-strip',
                    attributes: {
                        // top right - top left - bottom left - bottom right
                        positions: {
                            size: 2,
                            value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])
                        }
                    }
                }),
                isInstanced: true,
                userData: {
                    excludeAttributes: { indices: true }
                }
            });
        }
        return {
            models: [sideModel, wireframeModel, topModel].filter(Boolean),
            topModel,
            sideModel,
            wireframeModel
        };
    }
    calculateIndices(attribute) {
        const { polygonTesselator } = this.state;
        attribute.startIndices = polygonTesselator.indexStarts;
        attribute.value = polygonTesselator.get('indices');
    }
    calculatePositions(attribute) {
        const { polygonTesselator } = this.state;
        attribute.startIndices = polygonTesselator.vertexStarts;
        attribute.value = polygonTesselator.get('positions');
    }
    calculateVertexValid(attribute) {
        attribute.value = this.state.polygonTesselator.get('vertexValid');
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/font-atlas-manager.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/font-atlas-manager.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_FONT_SETTINGS: () => (/* binding */ DEFAULT_FONT_SETTINGS),
/* harmony export */   "default": () => (/* binding */ FontAtlasManager),
/* harmony export */   setFontAtlasCacheLimit: () => (/* binding */ setFontAtlasCacheLimit)
/* harmony export */ });
/* harmony import */ var _mapbox_tiny_sdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mapbox/tiny-sdf */ "./node_modules/@mapbox/tiny-sdf/index.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@deck.gl/layers/dist/text-layer/utils.js");
/* harmony import */ var _lru_cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lru-cache.js */ "./node_modules/@deck.gl/layers/dist/text-layer/lru-cache.js");
/* global document */




// import type {Texture} from '@deck.gl/core';
function getDefaultCharacterSet() {
    const charSet = [];
    for (let i = 32; i < 128; i++) {
        charSet.push(String.fromCharCode(i));
    }
    return charSet;
}
const DEFAULT_FONT_SETTINGS = {
    fontFamily: 'Monaco, monospace',
    fontWeight: 'normal',
    characterSet: getDefaultCharacterSet(),
    fontSize: 64,
    buffer: 4,
    sdf: false,
    cutoff: 0.25,
    radius: 12,
    smoothing: 0.1
};
const MAX_CANVAS_WIDTH = 1024;
const BASELINE_SCALE = 0.9;
const HEIGHT_SCALE = 1.2;
// only preserve latest three fontAtlas
const CACHE_LIMIT = 3;
let cache = new _lru_cache_js__WEBPACK_IMPORTED_MODULE_1__["default"](CACHE_LIMIT);
/**
 * get all the chars not in cache
 * @returns chars not in cache
 */
function getNewChars(cacheKey, characterSet) {
    let newCharSet;
    if (typeof characterSet === 'string') {
        newCharSet = new Set(Array.from(characterSet));
    }
    else {
        newCharSet = new Set(characterSet);
    }
    const cachedFontAtlas = cache.get(cacheKey);
    if (!cachedFontAtlas) {
        return newCharSet;
    }
    for (const char in cachedFontAtlas.mapping) {
        if (newCharSet.has(char)) {
            newCharSet.delete(char);
        }
    }
    return newCharSet;
}
function populateAlphaChannel(alphaChannel, imageData) {
    // populate distance value from tinySDF to image alpha channel
    for (let i = 0; i < alphaChannel.length; i++) {
        imageData.data[4 * i + 3] = alphaChannel[i];
    }
}
function setTextStyle(ctx, fontFamily, fontSize, fontWeight) {
    ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;
    ctx.fillStyle = '#000';
    ctx.textBaseline = 'alphabetic';
    ctx.textAlign = 'left';
}
/**
 * Sets the Font Atlas LRU Cache Limit
 * @param {number} limit LRU Cache limit
 */
function setFontAtlasCacheLimit(limit) {
    _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__["default"].assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');
    cache = new _lru_cache_js__WEBPACK_IMPORTED_MODULE_1__["default"](limit);
}
class FontAtlasManager {
    constructor() {
        /** Font settings */
        this.props = { ...DEFAULT_FONT_SETTINGS };
    }
    get atlas() {
        return this._atlas;
    }
    // TODO - cut during v9 porting as types reveal this is not correct
    // get texture(): Texture | undefined {
    //   return this._atlas;
    // }
    get mapping() {
        return this._atlas && this._atlas.mapping;
    }
    get scale() {
        const { fontSize, buffer } = this.props;
        return (fontSize * HEIGHT_SCALE + buffer * 2) / fontSize;
    }
    setProps(props = {}) {
        Object.assign(this.props, props);
        // update cache key
        this._key = this._getKey();
        const charSet = getNewChars(this._key, this.props.characterSet);
        const cachedFontAtlas = cache.get(this._key);
        // if a fontAtlas associated with the new settings is cached and
        // there are no new chars
        if (cachedFontAtlas && charSet.size === 0) {
            // update texture with cached fontAtlas
            if (this._atlas !== cachedFontAtlas) {
                this._atlas = cachedFontAtlas;
            }
            return;
        }
        // update fontAtlas with new settings
        const fontAtlas = this._generateFontAtlas(charSet, cachedFontAtlas);
        this._atlas = fontAtlas;
        // update cache
        cache.set(this._key, fontAtlas);
    }
    // eslint-disable-next-line max-statements
    _generateFontAtlas(characterSet, cachedFontAtlas) {
        const { fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff } = this.props;
        let canvas = cachedFontAtlas && cachedFontAtlas.data;
        if (!canvas) {
            canvas = document.createElement('canvas');
            canvas.width = MAX_CANVAS_WIDTH;
        }
        const ctx = canvas.getContext('2d', { willReadFrequently: true });
        setTextStyle(ctx, fontFamily, fontSize, fontWeight);
        // 1. build mapping
        const { mapping, canvasHeight, xOffset, yOffset } = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.buildMapping)({
            getFontWidth: char => ctx.measureText(char).width,
            fontHeight: fontSize * HEIGHT_SCALE,
            buffer,
            characterSet,
            maxCanvasWidth: MAX_CANVAS_WIDTH,
            ...(cachedFontAtlas && {
                mapping: cachedFontAtlas.mapping,
                xOffset: cachedFontAtlas.xOffset,
                yOffset: cachedFontAtlas.yOffset
            })
        });
        // 2. update canvas
        // copy old canvas data to new canvas only when height changed
        if (canvas.height !== canvasHeight) {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            canvas.height = canvasHeight;
            ctx.putImageData(imageData, 0, 0);
        }
        setTextStyle(ctx, fontFamily, fontSize, fontWeight);
        // 3. layout characters
        if (sdf) {
            const tinySDF = new _mapbox_tiny_sdf__WEBPACK_IMPORTED_MODULE_0__["default"]({
                fontSize,
                buffer,
                radius,
                cutoff,
                fontFamily,
                fontWeight: `${fontWeight}`
            });
            for (const char of characterSet) {
                const { data, width, height, glyphTop } = tinySDF.draw(char);
                mapping[char].width = width;
                mapping[char].layoutOffsetY = fontSize * BASELINE_SCALE - glyphTop;
                const imageData = ctx.createImageData(width, height);
                populateAlphaChannel(data, imageData);
                ctx.putImageData(imageData, mapping[char].x, mapping[char].y);
            }
        }
        else {
            for (const char of characterSet) {
                ctx.fillText(char, mapping[char].x, mapping[char].y + buffer + fontSize * BASELINE_SCALE);
            }
        }
        return {
            xOffset,
            yOffset,
            mapping,
            data: canvas,
            width: canvas.width,
            height: canvas.height
        };
    }
    _getKey() {
        const { fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff } = this.props;
        if (sdf) {
            return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;
        }
        return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/lru-cache.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/lru-cache.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LRUCache)
/* harmony export */ });
/**
 * LRU Cache class with limit
 *
 * Update order for each get/set operation
 * Delete oldest when reach given limit
 */
class LRUCache {
    constructor(limit = 5) {
        this._cache = {};
        /** access/update order, first item is oldest, last item is newest */
        this._order = [];
        this.limit = limit;
    }
    get(key) {
        const value = this._cache[key];
        if (value) {
            // update order
            this._deleteOrder(key);
            this._appendOrder(key);
        }
        return value;
    }
    set(key, value) {
        if (!this._cache[key]) {
            // if reach limit, delete the oldest
            if (Object.keys(this._cache).length === this.limit) {
                this.delete(this._order[0]);
            }
            this._cache[key] = value;
            this._appendOrder(key);
        }
        else {
            // if found in cache, delete the old one, insert new one to the first of list
            this.delete(key);
            this._cache[key] = value;
            this._appendOrder(key);
        }
    }
    delete(key) {
        const value = this._cache[key];
        if (value) {
            delete this._cache[key];
            this._deleteOrder(key);
        }
    }
    _deleteOrder(key) {
        const index = this._order.indexOf(key);
        if (index >= 0) {
            this._order.splice(index, 1);
        }
    }
    _appendOrder(key) {
        this._order.push(key);
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME multi-icon-layer-fragment-shader
precision highp float;
uniform float opacity;
uniform sampler2D iconsTexture;
uniform float gamma;
uniform bool sdf;
uniform float alphaCutoff;
uniform float sdfBuffer;
uniform float outlineBuffer;
uniform vec4 outlineColor;
in vec4 vColor;
in vec2 vTextureCoords;
in vec2 uv;
out vec4 fragColor;
void main(void) {
geometry.uv = uv;
if (!bool(picking.isActive)) {
float alpha = texture(iconsTexture, vTextureCoords).a;
vec4 color = vColor;
if (sdf) {
float distance = alpha;
alpha = smoothstep(sdfBuffer - gamma, sdfBuffer + gamma, distance);
if (outlineBuffer > 0.0) {
float inFill = alpha;
float inBorder = smoothstep(outlineBuffer - gamma, outlineBuffer + gamma, distance);
color = mix(outlineColor, vColor, inFill);
alpha = inBorder;
}
}
float a = alpha * color.a;
if (a < alphaCutoff) {
discard;
}
fragColor = vec4(color.rgb, a * opacity);
}
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/multi-icon-layer/multi-icon-layer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/multi-icon-layer/multi-icon-layer.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MultiIconLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _icon_layer_icon_layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../icon-layer/icon-layer.js */ "./node_modules/@deck.gl/layers/dist/icon-layer/icon-layer.js");
/* harmony import */ var _multi_icon_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multi-icon-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



// TODO expose as layer properties
const DEFAULT_BUFFER = 192.0 / 256;
const EMPTY_ARRAY = [];
const defaultProps = {
    getIconOffsets: { type: 'accessor', value: (x) => x.offsets },
    alphaCutoff: 0.001,
    smoothing: 0.1,
    outlineWidth: 0,
    outlineColor: { type: 'color', value: [0, 0, 0, 255] }
};
class MultiIconLayer extends _icon_layer_icon_layer_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'MultiIconLayer'; }
    getShaders() {
        return { ...super.getShaders(), fs: _multi_icon_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"] };
    }
    initializeState() {
        super.initializeState();
        const attributeManager = this.getAttributeManager();
        attributeManager.addInstanced({
            instanceOffsets: {
                size: 2,
                accessor: 'getIconOffsets'
            },
            instancePickingColors: {
                type: 'uint8',
                size: 3,
                accessor: (object, { index, target: value }) => this.encodePickingColor(index, value)
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        const { props, oldProps } = params;
        let { outlineColor } = props;
        if (outlineColor !== oldProps.outlineColor) {
            outlineColor = outlineColor.map(x => x / 255);
            outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;
            this.setState({
                outlineColor
            });
        }
        if (!props.sdf && props.outlineWidth) {
            _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__["default"].warn(`${this.id}: fontSettings.sdf is required to render outline`)();
        }
    }
    draw(params) {
        const { sdf, smoothing, outlineWidth } = this.props;
        const { outlineColor } = this.state;
        const outlineBuffer = outlineWidth
            ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth))
            : -1;
        params.uniforms = {
            ...params.uniforms,
            // Refer the following doc about gamma and buffer
            // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817
            sdfBuffer: DEFAULT_BUFFER,
            outlineBuffer,
            gamma: smoothing,
            sdf: Boolean(sdf),
            outlineColor
        };
        super.draw(params);
        // draw text without outline on top to ensure a thick outline won't occlude other characters
        if (sdf && outlineWidth) {
            const { iconManager } = this.state;
            const iconsTexture = iconManager.getTexture();
            const model = this.state.model;
            if (iconsTexture) {
                model.setUniforms({ outlineBuffer: DEFAULT_BUFFER });
                model.draw(this.context.renderPass);
            }
        }
    }
    getInstanceOffset(icons) {
        return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;
    }
    getInstanceColorMode(icons) {
        return 1; // mask
    }
    getInstanceIconFrame(icons) {
        return icons
            ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon))
            : EMPTY_ARRAY;
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer-fragment.glsl.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer-fragment.glsl.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME text-background-layer-fragment-shader
precision highp float;
uniform bool stroked;
in vec4 vFillColor;
in vec4 vLineColor;
in float vLineWidth;
in vec2 uv;
in vec2 dimensions;
out vec4 fragColor;
void main(void) {
geometry.uv = uv;
vec2 pixelPosition = uv * dimensions;
if (stroked) {
float distToEdge = min(
min(pixelPosition.x, dimensions.x - pixelPosition.x),
min(pixelPosition.y, dimensions.y - pixelPosition.y)
);
float isBorder = smoothedge(distToEdge, vLineWidth);
fragColor = mix(vFillColor, vLineColor, isBorder);
} else {
fragColor = vFillColor;
}
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer-vertex.glsl.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer-vertex.glsl.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`\
#version 300 es
#define SHADER_NAME text-background-layer-vertex-shader
in vec2 positions;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec4 instanceRects;
in float instanceSizes;
in float instanceAngles;
in vec2 instancePixelOffsets;
in float instanceLineWidths;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in vec3 instancePickingColors;
uniform bool billboard;
uniform float opacity;
uniform float sizeScale;
uniform float sizeMinPixels;
uniform float sizeMaxPixels;
uniform vec4 padding;
uniform int sizeUnits;
out vec4 vFillColor;
out vec4 vLineColor;
out float vLineWidth;
out vec2 uv;
out vec2 dimensions;
vec2 rotate_by_angle(vec2 vertex, float angle) {
float angle_radian = radians(angle);
float cos_angle = cos(angle_radian);
float sin_angle = sin(angle_radian);
mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);
return rotationMatrix * vertex;
}
void main(void) {
geometry.worldPosition = instancePositions;
geometry.uv = positions;
geometry.pickingColor = instancePickingColors;
uv = positions;
vLineWidth = instanceLineWidths;
float sizePixels = clamp(
project_size_to_pixel(instanceSizes * sizeScale, sizeUnits),
sizeMinPixels, sizeMaxPixels
);
dimensions = instanceRects.zw * sizePixels + padding.xy + padding.zw;
vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-padding.xy, padding.zw, positions);
pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);
pixelOffset += instancePixelOffsets;
pixelOffset.y *= -1.0;
if (billboard)  {
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
vec3 offset = vec3(pixelOffset, 0.0);
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
} else {
vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);
DECKGL_FILTER_SIZE(offset_common, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);
DECKGL_FILTER_COLOR(vFillColor, geometry);
vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);
DECKGL_FILTER_COLOR(vLineColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextBackgroundLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _text_background_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./text-background-layer-vertex.glsl.js */ "./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer-vertex.glsl.js");
/* harmony import */ var _text_background_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-background-layer-fragment.glsl.js */ "./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer-fragment.glsl.js");





const defaultProps = {
    billboard: true,
    sizeScale: 1,
    sizeUnits: 'pixels',
    sizeMinPixels: 0,
    sizeMaxPixels: Number.MAX_SAFE_INTEGER,
    padding: { type: 'array', value: [0, 0, 0, 0] },
    getPosition: { type: 'accessor', value: (x) => x.position },
    getSize: { type: 'accessor', value: 1 },
    getAngle: { type: 'accessor', value: 0 },
    getPixelOffset: { type: 'accessor', value: [0, 0] },
    getBoundingRect: { type: 'accessor', value: [0, 0, 0, 0] },
    getFillColor: { type: 'accessor', value: [0, 0, 0, 255] },
    getLineColor: { type: 'accessor', value: [0, 0, 0, 255] },
    getLineWidth: { type: 'accessor', value: 1 }
};
class TextBackgroundLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'TextBackgroundLayer'; }
    getShaders() {
        return super.getShaders({ vs: _text_background_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_1__["default"], fs: _text_background_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_2__["default"], modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_3__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__["default"]] });
    }
    initializeState() {
        this.getAttributeManager().addInstanced({
            instancePositions: {
                size: 3,
                type: 'float64',
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceSizes: {
                size: 1,
                transition: true,
                accessor: 'getSize',
                defaultValue: 1
            },
            instanceAngles: {
                size: 1,
                transition: true,
                accessor: 'getAngle'
            },
            instanceRects: {
                size: 4,
                accessor: 'getBoundingRect'
            },
            instancePixelOffsets: {
                size: 2,
                transition: true,
                accessor: 'getPixelOffset'
            },
            instanceFillColors: {
                size: 4,
                transition: true,
                type: 'unorm8',
                accessor: 'getFillColor',
                defaultValue: [0, 0, 0, 255]
            },
            instanceLineColors: {
                size: 4,
                transition: true,
                type: 'unorm8',
                accessor: 'getLineColor',
                defaultValue: [0, 0, 0, 255]
            },
            instanceLineWidths: {
                size: 1,
                transition: true,
                accessor: 'getLineWidth',
                defaultValue: 1
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        const { changeFlags } = params;
        if (changeFlags.extensionsChanged) {
            this.state.model?.destroy();
            this.state.model = this._getModel();
            this.getAttributeManager().invalidateAll();
        }
    }
    draw({ uniforms }) {
        const { billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth } = this.props;
        let { padding } = this.props;
        if (padding.length < 4) {
            padding = [padding[0], padding[1], padding[0], padding[1]];
        }
        const model = this.state.model;
        model.setUniforms(uniforms);
        model.setUniforms({
            billboard,
            stroked: Boolean(getLineWidth),
            padding,
            sizeUnits: _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__.UNIT[sizeUnits],
            sizeScale,
            sizeMinPixels,
            sizeMaxPixels
        });
        model.draw(this.context.renderPass);
    }
    _getModel() {
        // a square that minimally cover the unit circle
        const positions = [0, 0, 1, 0, 1, 1, 0, 1];
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_6__.Model(this.context.device, {
            ...this.getShaders(),
            id: this.props.id,
            bufferLayout: this.getAttributeManager().getBufferLayouts(),
            geometry: new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_7__.Geometry({
                topology: 'triangle-fan-webgl',
                vertexCount: 4,
                attributes: {
                    positions: { size: 2, value: new Float32Array(positions) }
                }
            }),
            isInstanced: true
        });
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/text-layer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/text-layer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/composite-layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js");
/* harmony import */ var _multi_icon_layer_multi_icon_layer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multi-icon-layer/multi-icon-layer.js */ "./node_modules/@deck.gl/layers/dist/text-layer/multi-icon-layer/multi-icon-layer.js");
/* harmony import */ var _font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font-atlas-manager.js */ "./node_modules/@deck.gl/layers/dist/text-layer/font-atlas-manager.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@deck.gl/layers/dist/text-layer/utils.js");
/* harmony import */ var _text_background_layer_text_background_layer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text-background-layer/text-background-layer.js */ "./node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer.js");
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.





const TEXT_ANCHOR = {
    start: 1,
    middle: 0,
    end: -1
};
const ALIGNMENT_BASELINE = {
    top: 1,
    center: 0,
    bottom: -1
};
const DEFAULT_COLOR = [0, 0, 0, 255];
const DEFAULT_LINE_HEIGHT = 1.0;
const defaultProps = {
    billboard: true,
    sizeScale: 1,
    sizeUnits: 'pixels',
    sizeMinPixels: 0,
    sizeMaxPixels: Number.MAX_SAFE_INTEGER,
    background: false,
    getBackgroundColor: { type: 'accessor', value: [255, 255, 255, 255] },
    getBorderColor: { type: 'accessor', value: DEFAULT_COLOR },
    getBorderWidth: { type: 'accessor', value: 0 },
    backgroundPadding: { type: 'array', value: [0, 0, 0, 0] },
    characterSet: { type: 'object', value: _font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FONT_SETTINGS.characterSet },
    fontFamily: _font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FONT_SETTINGS.fontFamily,
    fontWeight: _font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FONT_SETTINGS.fontWeight,
    lineHeight: DEFAULT_LINE_HEIGHT,
    outlineWidth: { type: 'number', value: 0, min: 0 },
    outlineColor: { type: 'color', value: DEFAULT_COLOR },
    fontSettings: { type: 'object', value: {}, compare: 1 },
    // auto wrapping options
    wordBreak: 'break-word',
    maxWidth: { type: 'number', value: -1 },
    getText: { type: 'accessor', value: (x) => x.text },
    getPosition: { type: 'accessor', value: (x) => x.position },
    getColor: { type: 'accessor', value: DEFAULT_COLOR },
    getSize: { type: 'accessor', value: 32 },
    getAngle: { type: 'accessor', value: 0 },
    getTextAnchor: { type: 'accessor', value: 'middle' },
    getAlignmentBaseline: { type: 'accessor', value: 'center' },
    getPixelOffset: { type: 'accessor', value: [0, 0] },
    // deprecated
    backgroundColor: { deprecatedFor: ['background', 'getBackgroundColor'] }
};
/** Render text labels at given coordinates. */
class TextLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(...arguments);
        /** Returns the x, y, width, height of each text string, relative to pixel size.
         * Used to render the background.
         */
        this.getBoundingRect = (object, objectInfo) => {
            let { size: [width, height] } = this.transformParagraph(object, objectInfo);
            const { fontSize } = this.state.fontAtlasManager.props;
            width /= fontSize;
            height /= fontSize;
            const { getTextAnchor, getAlignmentBaseline } = this.props;
            const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];
            const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function'
                ? getAlignmentBaseline(object, objectInfo)
                : getAlignmentBaseline];
            return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];
        };
        /** Returns the x, y offsets of each character in a text string, in texture size.
         * Used to layout characters in the vertex shader.
         */
        this.getIconOffsets = (object, objectInfo) => {
            const { getTextAnchor, getAlignmentBaseline } = this.props;
            const { x, y, rowWidth, size: [width, height] } = this.transformParagraph(object, objectInfo);
            const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];
            const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function'
                ? getAlignmentBaseline(object, objectInfo)
                : getAlignmentBaseline];
            const numCharacters = x.length;
            const offsets = new Array(numCharacters * 2);
            let index = 0;
            for (let i = 0; i < numCharacters; i++) {
                // For a multi-line object, offset in x-direction needs consider
                // the row offset in the paragraph and the object offset in the row
                const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;
                offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];
                offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];
            }
            return offsets;
        };
    }
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'TextLayer'; }
    initializeState() {
        this.state = {
            styleVersion: 0,
            fontAtlasManager: new _font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__["default"]()
        };
        // Breaking change in v8.9
        if (this.props.maxWidth > 0) {
            _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__["default"].warn('v8.9 breaking change: TextLayer maxWidth is now relative to text size')();
        }
    }
    // eslint-disable-next-line complexity
    updateState(params) {
        const { props, oldProps, changeFlags } = params;
        const textChanged = changeFlags.dataChanged ||
            (changeFlags.updateTriggersChanged &&
                (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));
        if (textChanged) {
            this._updateText();
        }
        const fontChanged = this._updateFontAtlas();
        const styleChanged = fontChanged ||
            props.lineHeight !== oldProps.lineHeight ||
            props.wordBreak !== oldProps.wordBreak ||
            props.maxWidth !== oldProps.maxWidth;
        if (styleChanged) {
            this.setState({
                styleVersion: this.state.styleVersion + 1
            });
        }
    }
    getPickingInfo({ info }) {
        // because `TextLayer` assign the same pickingInfoIndex for one text label,
        // here info.index refers the index of text label in props.data
        info.object = info.index >= 0 ? this.props.data[info.index] : null;
        return info;
    }
    /** Returns true if font has changed */
    _updateFontAtlas() {
        const { fontSettings, fontFamily, fontWeight } = this.props;
        const { fontAtlasManager, characterSet } = this.state;
        const fontProps = {
            ...fontSettings,
            characterSet,
            fontFamily,
            fontWeight
        };
        if (!fontAtlasManager.mapping) {
            // This is the first update
            fontAtlasManager.setProps(fontProps);
            return true;
        }
        for (const key in fontProps) {
            if (fontProps[key] !== fontAtlasManager.props[key]) {
                fontAtlasManager.setProps(fontProps);
                return true;
            }
        }
        return false;
    }
    // Text strings are variable width objects
    // Count characters and start offsets
    _updateText() {
        const { data, characterSet } = this.props;
        const textBuffer = data.attributes?.getText;
        let { getText } = this.props;
        let startIndices = data.startIndices;
        let numInstances;
        const autoCharacterSet = characterSet === 'auto' && new Set();
        if (textBuffer && startIndices) {
            const { texts, characterCount } = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.getTextFromBuffer)({
                ...(ArrayBuffer.isView(textBuffer) ? { value: textBuffer } : textBuffer),
                // @ts-ignore if data.attribute is defined then length is expected
                length: data.length,
                startIndices,
                characterSet: autoCharacterSet
            });
            numInstances = characterCount;
            getText = (_, { index }) => texts[index];
        }
        else {
            const { iterable, objectInfo } = (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_4__.createIterable)(data);
            startIndices = [0];
            numInstances = 0;
            for (const object of iterable) {
                objectInfo.index++;
                // Break into an array of characters
                // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work
                const text = Array.from(getText(object, objectInfo) || '');
                if (autoCharacterSet) {
                    // eslint-disable-next-line @typescript-eslint/unbound-method
                    text.forEach(autoCharacterSet.add, autoCharacterSet);
                }
                numInstances += text.length;
                startIndices.push(numInstances);
            }
        }
        this.setState({
            getText,
            startIndices,
            numInstances,
            characterSet: autoCharacterSet || characterSet
        });
    }
    /** There are two size systems in this layer:
  
      + Pixel size: user-specified text size, via getSize, sizeScale, sizeUnits etc.
        The layer roughly matches the output of the layer to CSS pixels, e.g. getSize: 12, sizeScale: 2
        in layer props is roughly equivalent to font-size: 24px in CSS.
      + Texture size: internally, character positions in a text blob are calculated using the sizes of iconMapping,
        which depends on how large each character is drawn into the font atlas. This is controlled by
        fontSettings.fontSize (default 64) and most users do not set it manually.
        These numbers are intended to be used in the vertex shader and never to be exposed to the end user.
  
      All surfaces exposed to the user should either use the pixel size or a multiplier relative to the pixel size. */
    /** Calculate the size and position of each character in a text string.
     * Values are in texture size */
    transformParagraph(object, objectInfo) {
        const { fontAtlasManager } = this.state;
        const iconMapping = fontAtlasManager.mapping;
        const getText = this.state.getText;
        const { wordBreak, lineHeight, maxWidth } = this.props;
        const paragraph = getText(object, objectInfo) || '';
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.transformParagraph)(paragraph, lineHeight, wordBreak, maxWidth * fontAtlasManager.props.fontSize, iconMapping);
    }
    renderLayers() {
        const { startIndices, numInstances, getText, fontAtlasManager: { scale, atlas, mapping }, styleVersion } = this.state;
        const { data, _dataDiff, getPosition, getColor, getSize, getAngle, getPixelOffset, getBackgroundColor, getBorderColor, getBorderWidth, backgroundPadding, background, billboard, fontSettings, outlineWidth, outlineColor, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, transitions, updateTriggers } = this.props;
        const CharactersLayerClass = this.getSubLayerClass('characters', _multi_icon_layer_multi_icon_layer_js__WEBPACK_IMPORTED_MODULE_5__["default"]);
        const BackgroundLayerClass = this.getSubLayerClass('background', _text_background_layer_text_background_layer_js__WEBPACK_IMPORTED_MODULE_6__["default"]);
        return [
            background &&
                new BackgroundLayerClass({
                    // background props
                    getFillColor: getBackgroundColor,
                    getLineColor: getBorderColor,
                    getLineWidth: getBorderWidth,
                    padding: backgroundPadding,
                    // props shared with characters layer
                    getPosition,
                    getSize,
                    getAngle,
                    getPixelOffset,
                    billboard,
                    sizeScale,
                    sizeUnits,
                    sizeMinPixels,
                    sizeMaxPixels,
                    transitions: transitions && {
                        getPosition: transitions.getPosition,
                        getAngle: transitions.getAngle,
                        getSize: transitions.getSize,
                        getFillColor: transitions.getBackgroundColor,
                        getLineColor: transitions.getBorderColor,
                        getLineWidth: transitions.getBorderWidth,
                        getPixelOffset: transitions.getPixelOffset
                    }
                }, this.getSubLayerProps({
                    id: 'background',
                    updateTriggers: {
                        getPosition: updateTriggers.getPosition,
                        getAngle: updateTriggers.getAngle,
                        getSize: updateTriggers.getSize,
                        getFillColor: updateTriggers.getBackgroundColor,
                        getLineColor: updateTriggers.getBorderColor,
                        getLineWidth: updateTriggers.getBorderWidth,
                        getPixelOffset: updateTriggers.getPixelOffset,
                        getBoundingRect: {
                            getText: updateTriggers.getText,
                            getTextAnchor: updateTriggers.getTextAnchor,
                            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
                            styleVersion
                        }
                    }
                }), {
                    data: 
                    // @ts-ignore (2339) attribute is not defined on all data types
                    data.attributes && data.attributes.background
                        ? // @ts-ignore (2339) attribute is not defined on all data types
                            { length: data.length, attributes: data.attributes.background }
                        : data,
                    _dataDiff,
                    // Maintain the same background behavior as <=8.3. Remove in v9?
                    autoHighlight: false,
                    getBoundingRect: this.getBoundingRect
                }),
            new CharactersLayerClass({
                sdf: fontSettings.sdf,
                smoothing: Number.isFinite(fontSettings.smoothing)
                    ? fontSettings.smoothing
                    : _font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FONT_SETTINGS.smoothing,
                outlineWidth: outlineWidth / (fontSettings.radius || _font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FONT_SETTINGS.radius),
                outlineColor,
                iconAtlas: atlas,
                iconMapping: mapping,
                getPosition,
                getColor,
                getSize,
                getAngle,
                getPixelOffset,
                billboard,
                sizeScale: sizeScale * scale,
                sizeUnits,
                sizeMinPixels: sizeMinPixels * scale,
                sizeMaxPixels: sizeMaxPixels * scale,
                transitions: transitions && {
                    getPosition: transitions.getPosition,
                    getAngle: transitions.getAngle,
                    getColor: transitions.getColor,
                    getSize: transitions.getSize,
                    getPixelOffset: transitions.getPixelOffset
                }
            }, this.getSubLayerProps({
                id: 'characters',
                updateTriggers: {
                    all: updateTriggers.getText,
                    getPosition: updateTriggers.getPosition,
                    getAngle: updateTriggers.getAngle,
                    getColor: updateTriggers.getColor,
                    getSize: updateTriggers.getSize,
                    getPixelOffset: updateTriggers.getPixelOffset,
                    getIconOffsets: {
                        getTextAnchor: updateTriggers.getTextAnchor,
                        getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
                        styleVersion
                    }
                }
            }), {
                data,
                _dataDiff,
                startIndices,
                numInstances,
                getIconOffsets: this.getIconOffsets,
                getIcon: getText
            })
        ];
    }
    static set fontAtlasCacheLimit(limit) {
        (0,_font_atlas_manager_js__WEBPACK_IMPORTED_MODULE_0__.setFontAtlasCacheLimit)(limit);
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/text-layer/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/text-layer/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   autoWrapping: () => (/* binding */ autoWrapping),
/* harmony export */   buildMapping: () => (/* binding */ buildMapping),
/* harmony export */   getTextFromBuffer: () => (/* binding */ getTextFromBuffer),
/* harmony export */   nextPowOfTwo: () => (/* binding */ nextPowOfTwo),
/* harmony export */   transformParagraph: () => (/* binding */ transformParagraph)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* eslint-disable max-statements, max-params, complexity, max-depth */
// TODO merge with icon-layer/icon-manager

const MISSING_CHAR_WIDTH = 32;
const SINGLE_LINE = [];
function nextPowOfTwo(number) {
    return Math.pow(2, Math.ceil(Math.log2(number)));
}
/**
 * Generate character mapping table or update from an existing mapping table
 */
function buildMapping({ characterSet, getFontWidth, fontHeight, buffer, maxCanvasWidth, mapping = {}, xOffset = 0, yOffset = 0 }) {
    let row = 0;
    // continue from x position of last character in the old mapping
    let x = xOffset;
    const rowHeight = fontHeight + buffer * 2;
    for (const char of characterSet) {
        if (!mapping[char]) {
            // measure texts
            // TODO - use Advanced text metrics when they are adopted:
            // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics
            const width = getFontWidth(char);
            if (x + width + buffer * 2 > maxCanvasWidth) {
                x = 0;
                row++;
            }
            mapping[char] = {
                x: x + buffer,
                y: yOffset + row * rowHeight + buffer,
                width,
                height: rowHeight,
                layoutWidth: width,
                layoutHeight: fontHeight
            };
            x += width + buffer * 2;
        }
    }
    return {
        mapping,
        xOffset: x,
        yOffset: yOffset + row * rowHeight,
        canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)
    };
}
function getTextWidth(text, startIndex, endIndex, mapping) {
    let width = 0;
    for (let i = startIndex; i < endIndex; i++) {
        const character = text[i];
        width += mapping[character]?.layoutWidth || 0;
    }
    return width;
}
function breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {
    let rowStartCharIndex = startIndex;
    let rowOffsetLeft = 0;
    for (let i = startIndex; i < endIndex; i++) {
        // 2. figure out where to break lines
        const textWidth = getTextWidth(text, i, i + 1, iconMapping);
        if (rowOffsetLeft + textWidth > maxWidth) {
            if (rowStartCharIndex < i) {
                target.push(i);
            }
            rowStartCharIndex = i;
            rowOffsetLeft = 0;
        }
        rowOffsetLeft += textWidth;
    }
    return rowOffsetLeft;
}
function breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {
    let rowStartCharIndex = startIndex;
    let groupStartCharIndex = startIndex;
    let groupEndCharIndex = startIndex;
    let rowOffsetLeft = 0;
    for (let i = startIndex; i < endIndex; i++) {
        // 1. break text into word groups
        //  - if current char is white space
        //  - else if next char is white space
        //  - else if reach last char
        if (text[i] === ' ') {
            groupEndCharIndex = i + 1;
        }
        else if (text[i + 1] === ' ' || i + 1 === endIndex) {
            groupEndCharIndex = i + 1;
        }
        if (groupEndCharIndex > groupStartCharIndex) {
            // 2. break text into next row at maxWidth
            let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);
            if (rowOffsetLeft + groupWidth > maxWidth) {
                if (rowStartCharIndex < groupStartCharIndex) {
                    target.push(groupStartCharIndex);
                    rowStartCharIndex = groupStartCharIndex;
                    rowOffsetLeft = 0;
                }
                // if a single text group is bigger than maxWidth, then `break-all`
                if (groupWidth > maxWidth) {
                    groupWidth = breakAll(text, groupStartCharIndex, groupEndCharIndex, maxWidth, iconMapping, target);
                    // move reference to last row
                    rowStartCharIndex = target[target.length - 1];
                }
            }
            groupStartCharIndex = groupEndCharIndex;
            rowOffsetLeft += groupWidth;
        }
    }
    return rowOffsetLeft;
}
/**
 * Wrap the given text so that each line does not exceed the given max width.
 * Returns a list of indices where line breaks should be inserted.
 */
function autoWrapping(text, wordBreak, maxWidth, iconMapping, startIndex = 0, endIndex) {
    if (endIndex === undefined) {
        endIndex = text.length;
    }
    const result = [];
    if (wordBreak === 'break-all') {
        breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);
    }
    else {
        breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);
    }
    return result;
}
function transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {
    let x = 0;
    let rowHeight = 0;
    for (let i = startIndex; i < endIndex; i++) {
        const character = line[i];
        const frame = iconMapping[character];
        if (frame) {
            if (!rowHeight) {
                // frame.height should be a constant
                rowHeight = frame.layoutHeight;
            }
            leftOffsets[i] = x + frame.layoutWidth / 2;
            x += frame.layoutWidth;
        }
        else {
            _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Missing character: ${character} (${character.codePointAt(0)})`)();
            leftOffsets[i] = x;
            x += MISSING_CHAR_WIDTH;
        }
    }
    rowSize[0] = x;
    rowSize[1] = rowHeight;
}
/**
 * Transform a text paragraph to an array of characters, each character contains
 */
function transformParagraph(paragraph, 
/** CSS line-height */
lineHeight, 
/** CSS word-break option */
wordBreak, 
/** CSS max-width */
maxWidth, 
/** character mapping table for retrieving a character from font atlas */
iconMapping) {
    // Break into an array of characters
    // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work
    const characters = Array.from(paragraph);
    const numCharacters = characters.length;
    const x = new Array(numCharacters);
    const y = new Array(numCharacters);
    const rowWidth = new Array(numCharacters);
    const autoWrappingEnabled = (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;
    // maxWidth and height of the paragraph
    const size = [0, 0];
    const rowSize = [0, 0];
    let rowOffsetTop = 0;
    let lineStartIndex = 0;
    let lineEndIndex = 0;
    for (let i = 0; i <= numCharacters; i++) {
        const char = characters[i];
        if (char === '\n' || i === numCharacters) {
            lineEndIndex = i;
        }
        if (lineEndIndex > lineStartIndex) {
            const rows = autoWrappingEnabled
                ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)
                : SINGLE_LINE;
            for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {
                const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];
                const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;
                transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);
                for (let j = rowStart; j < rowEnd; j++) {
                    const char = characters[j];
                    const layoutOffsetY = iconMapping[char]?.layoutOffsetY || 0;
                    y[j] = rowOffsetTop + rowSize[1] / 2 + layoutOffsetY;
                    rowWidth[j] = rowSize[0];
                }
                rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;
                size[0] = Math.max(size[0], rowSize[0]);
            }
            lineStartIndex = lineEndIndex;
        }
        if (char === '\n') {
            // Make sure result.length matches paragraph.length
            x[lineStartIndex] = 0;
            y[lineStartIndex] = 0;
            rowWidth[lineStartIndex] = 0;
            lineStartIndex++;
        }
    }
    // last row
    size[1] = rowOffsetTop;
    return { x, y, rowWidth, size };
}
function getTextFromBuffer({ value, length, stride, offset, startIndices, characterSet }) {
    const bytesPerElement = value.BYTES_PER_ELEMENT;
    const elementStride = stride ? stride / bytesPerElement : 1;
    const elementOffset = offset ? offset / bytesPerElement : 0;
    const characterCount = startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);
    const autoCharacterSet = characterSet && new Set();
    const texts = new Array(length);
    let codes = value;
    if (elementStride > 1 || elementOffset > 0) {
        const ArrayType = value.constructor;
        codes = new ArrayType(characterCount);
        for (let i = 0; i < characterCount; i++) {
            codes[i] = value[i * elementStride + elementOffset];
        }
    }
    for (let index = 0; index < length; index++) {
        const startIndex = startIndices[index];
        const endIndex = startIndices[index + 1] || characterCount;
        const codesAtIndex = codes.subarray(startIndex, endIndex);
        // @ts-ignore TS wants the argument to be number[] but typed array works too
        texts[index] = String.fromCodePoint.apply(null, codesAtIndex);
        if (autoCharacterSet) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);
        }
    }
    if (autoCharacterSet) {
        for (const charCode of autoCharacterSet) {
            characterSet.add(String.fromCodePoint(charCode));
        }
    }
    return { texts, characterCount };
}


/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   replaceInRange: () => (/* binding */ replaceInRange)
/* harmony export */ });
// Assume data array is sorted by <accessor>
// Replaces the specified range with a new subarray
// Mutates the data array
// Returns {startRow, endRow} of the inserted items
function replaceInRange({ data, getIndex, dataRange, replace }) {
    const { startRow = 0, endRow = Infinity } = dataRange;
    const count = data.length;
    let replaceStart = count;
    let replaceEnd = count;
    for (let i = 0; i < count; i++) {
        const row = getIndex(data[i]);
        if (replaceStart > i && row >= startRow) {
            replaceStart = i;
        }
        if (row >= endRow) {
            replaceEnd = i;
            break;
        }
    }
    let index = replaceStart;
    const dataLengthChanged = replaceEnd - replaceStart !== replace.length;
    // Save the items after replaceEnd before we overwrite data
    const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;
    // Insert new items
    for (let i = 0; i < replace.length; i++) {
        data[index++] = replace[i];
    }
    if (endChunk) {
        // Append items after replaceEnd
        for (let i = 0; i < endChunk.length; i++) {
            data[index++] = endChunk[i];
        }
        // Trim additional items
        data.length = index;
    }
    return {
        startRow: replaceStart,
        endRow: replaceStart + replace.length
    };
}


/***/ }),

/***/ "./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer-fragment.glsl.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer-fragment.glsl.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`#version 300 es
#define SHADER_NAME simple-mesh-layer-fs
precision highp float;
uniform bool hasTexture;
uniform sampler2D sampler;
uniform bool flatShading;
uniform float opacity;
in vec2 vTexCoord;
in vec3 cameraPosition;
in vec3 normals_commonspace;
in vec4 position_commonspace;
in vec4 vColor;
out vec4 fragColor;
void main(void) {
geometry.uv = vTexCoord;
vec3 normal;
if (flatShading) {
normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));
} else {
normal = normals_commonspace;
}
vec4 color = hasTexture ? texture(sampler, vTexCoord) : vColor;
DECKGL_FILTER_COLOR(color, geometry);
vec3 lightColor = lighting_getLightColor(color.rgb, cameraPosition, position_commonspace.xyz, normal);
fragColor = vec4(lightColor, color.a * opacity);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer-vertex.glsl.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer-vertex.glsl.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`#version 300 es
#define SHADER_NAME simple-mesh-layer-vs
uniform float sizeScale;
uniform bool composeModelMatrix;
in vec3 positions;
in vec3 normals;
in vec3 colors;
in vec2 texCoords;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec4 instanceColors;
in vec3 instancePickingColors;
in vec3 instanceModelMatrixCol0;
in vec3 instanceModelMatrixCol1;
in vec3 instanceModelMatrixCol2;
in vec3 instanceTranslation;
out vec2 vTexCoord;
out vec3 cameraPosition;
out vec3 normals_commonspace;
out vec4 position_commonspace;
out vec4 vColor;
void main(void) {
geometry.worldPosition = instancePositions;
geometry.uv = texCoords;
geometry.pickingColor = instancePickingColors;
vTexCoord = texCoords;
cameraPosition = project_uCameraPosition;
vColor = vec4(colors * instanceColors.rgb, instanceColors.a);
mat3 instanceModelMatrix = mat3(instanceModelMatrixCol0, instanceModelMatrixCol1, instanceModelMatrixCol2);
vec3 pos = (instanceModelMatrix * positions) * sizeScale + instanceTranslation;
if (composeModelMatrix) {
DECKGL_FILTER_SIZE(pos, geometry);
normals_commonspace = project_normal(instanceModelMatrix * normals);
geometry.worldPosition += pos;
gl_Position = project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), position_commonspace);
geometry.position = position_commonspace;
}
else {
pos = project_size(pos);
DECKGL_FILTER_SIZE(pos, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, pos, position_commonspace);
geometry.position = position_commonspace;
normals_commonspace = project_normal(instanceModelMatrix * normals);
}
geometry.normal = normals_commonspace;
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
DECKGL_FILTER_COLOR(vColor, geometry);
}
`);


/***/ }),

/***/ "./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SimpleMeshLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/log.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _utils_matrix_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/matrix.js */ "./node_modules/@deck.gl/mesh-layers/dist/utils/matrix.js");
/* harmony import */ var _simple_mesh_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./simple-mesh-layer-vertex.glsl.js */ "./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer-vertex.glsl.js");
/* harmony import */ var _simple_mesh_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simple-mesh-layer-fragment.glsl.js */ "./node_modules/@deck.gl/mesh-layers/dist/simple-mesh-layer/simple-mesh-layer-fragment.glsl.js");
/* harmony import */ var _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @loaders.gl/schema */ "./node_modules/@loaders.gl/schema/dist/lib/mesh/mesh-utils.js");
// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards
// Disabling lint temporarily to facilitate copying code in and out of this repo
/* eslint-disable */
// Copyright (c) 2015 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.







function normalizeGeometryAttributes(attributes) {
    const positionAttribute = attributes.positions || attributes.POSITION;
    _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["default"].assert(positionAttribute, 'no "postions" or "POSITION" attribute in mesh');
    const vertexCount = positionAttribute.value.length / positionAttribute.size;
    let colorAttribute = attributes.COLOR_0 || attributes.colors;
    if (!colorAttribute) {
        colorAttribute = { size: 3, value: new Float32Array(vertexCount * 3).fill(1) };
    }
    let normalAttribute = attributes.NORMAL || attributes.normals;
    if (!normalAttribute) {
        normalAttribute = { size: 3, value: new Float32Array(vertexCount * 3).fill(0) };
    }
    let texCoordAttribute = attributes.TEXCOORD_0 || attributes.texCoords;
    if (!texCoordAttribute) {
        texCoordAttribute = { size: 2, value: new Float32Array(vertexCount * 2).fill(0) };
    }
    return {
        positions: positionAttribute,
        colors: colorAttribute,
        normals: normalAttribute,
        texCoords: texCoordAttribute
    };
}
/*
 * Convert mesh data into geometry
 * @returns {Geometry} geometry
 */
function getGeometry(data) {
    if (data instanceof _luma_gl_engine__WEBPACK_IMPORTED_MODULE_1__.Geometry) {
        // @ts-expect-error data.attributes is readonly
        data.attributes = normalizeGeometryAttributes(data.attributes);
        return data;
    }
    else if (data.attributes) {
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_1__.Geometry({
            ...data,
            topology: 'triangle-list',
            attributes: normalizeGeometryAttributes(data.attributes)
        });
    }
    else {
        return new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_1__.Geometry({
            topology: 'triangle-list',
            attributes: normalizeGeometryAttributes(data)
        });
    }
}
const DEFAULT_COLOR = [0, 0, 0, 255];
const defaultProps = {
    mesh: { type: 'object', value: null, async: true },
    texture: { type: 'image', value: null, async: true },
    sizeScale: { type: 'number', value: 1, min: 0 },
    // _instanced is a hack to use world position instead of meter offsets in mesh
    // TODO - formalize API
    _instanced: true,
    // NOTE(Tarek): Quick and dirty wireframe. Just draws
    // the same mesh with LINE_STRIPS. Won't follow edges
    // of the original mesh.
    wireframe: false,
    // Optional material for 'lighting' shader module
    material: true,
    getPosition: { type: 'accessor', value: (x) => x.position },
    getColor: { type: 'accessor', value: DEFAULT_COLOR },
    // yaw, pitch and roll are in degrees
    // https://en.wikipedia.org/wiki/Euler_angles
    // [pitch, yaw, roll]
    getOrientation: { type: 'accessor', value: [0, 0, 0] },
    getScale: { type: 'accessor', value: [1, 1, 1] },
    getTranslation: { type: 'accessor', value: [0, 0, 0] },
    // 4x4 matrix
    getTransformMatrix: { type: 'accessor', value: [] },
    textureParameters: { type: 'object', ignore: true, value: null }
};
/** Render a number of instances of an arbitrary 3D geometry. */
class SimpleMeshLayer extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static { this.defaultProps = defaultProps; }
    static { this.layerName = 'SimpleMeshLayer'; }
    getShaders() {
        return super.getShaders({
            vs: _simple_mesh_layer_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_3__["default"],
            fs: _simple_mesh_layer_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_4__["default"],
            modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_5__["default"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_6__.phongLighting, _deck_gl_core__WEBPACK_IMPORTED_MODULE_7__["default"]]
        });
    }
    getBounds() {
        if (this.props._instanced) {
            return super.getBounds();
        }
        let result = this.state.positionBounds;
        if (result) {
            return result;
        }
        const { mesh } = this.props;
        if (!mesh) {
            return null;
        }
        // @ts-ignore Detect if mesh is generated by loaders.gl
        result = mesh.header?.boundingBox;
        if (!result) {
            // Otherwise, calculate bounding box from positions
            const { attributes } = getGeometry(mesh);
            attributes.POSITION = attributes.POSITION || attributes.positions;
            //@ts-expect-error
            result = (0,_loaders_gl_schema__WEBPACK_IMPORTED_MODULE_8__.getMeshBoundingBox)(attributes);
        }
        this.state.positionBounds = result;
        return result;
    }
    initializeState() {
        const attributeManager = this.getAttributeManager();
        // attributeManager is always defined in a primitive layer
        attributeManager.addInstanced({
            instancePositions: {
                transition: true,
                type: 'float64',
                fp64: this.use64bitPositions(),
                size: 3,
                accessor: 'getPosition'
            },
            instanceColors: {
                type: 'unorm8',
                transition: true,
                size: this.props.colorFormat.length,
                accessor: 'getColor',
                defaultValue: [0, 0, 0, 255]
            },
            instanceModelMatrix: _utils_matrix_js__WEBPACK_IMPORTED_MODULE_9__.MATRIX_ATTRIBUTES
        });
        this.setState({
            // Avoid luma.gl's missing uniform warning
            // TODO - add feature to luma.gl to specify ignored uniforms?
            emptyTexture: this.context.device.createTexture({
                data: new Uint8Array(4),
                width: 1,
                height: 1
            })
        });
    }
    updateState(params) {
        super.updateState(params);
        const { props, oldProps, changeFlags } = params;
        if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {
            this.state.positionBounds = null;
            this.state.model?.destroy();
            if (props.mesh) {
                this.state.model = this.getModel(props.mesh);
                const attributes = props.mesh.attributes || props.mesh;
                this.setState({
                    hasNormals: Boolean(attributes.NORMAL || attributes.normals)
                });
            }
            // attributeManager is always defined in a primitive layer
            this.getAttributeManager().invalidateAll();
        }
        if (props.texture !== oldProps.texture && props.texture instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.Texture) {
            this.setTexture(props.texture);
        }
        if (this.state.model) {
            this.state.model.setTopology(this.props.wireframe ? 'line-strip' : 'triangle-list');
        }
    }
    finalizeState(context) {
        super.finalizeState(context);
        this.state.emptyTexture.delete();
    }
    draw({ uniforms }) {
        const { model } = this.state;
        if (!model) {
            return;
        }
        const { viewport, renderPass } = this.context;
        const { sizeScale, coordinateSystem, _instanced } = this.props;
        model.setUniforms(uniforms);
        model.setUniforms({
            sizeScale,
            composeModelMatrix: !_instanced || (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_9__.shouldComposeModelMatrix)(viewport, coordinateSystem),
            flatShading: !this.state.hasNormals
        });
        model.draw(renderPass);
    }
    get isLoaded() {
        return Boolean(this.state?.model && super.isLoaded);
    }
    getModel(mesh) {
        const model = new _luma_gl_engine__WEBPACK_IMPORTED_MODULE_11__.Model(this.context.device, {
            ...this.getShaders(),
            id: this.props.id,
            bufferLayout: this.getAttributeManager().getBufferLayouts(),
            geometry: getGeometry(mesh),
            isInstanced: true
        });
        const { texture } = this.props;
        const { emptyTexture } = this.state;
        model.setBindings({
            sampler: texture || emptyTexture
        });
        model.setUniforms({
            hasTexture: Boolean(texture)
        });
        return model;
    }
    setTexture(texture) {
        const { emptyTexture, model } = this.state;
        // props.mesh may not be ready at this time.
        // The sampler will be set when `getModel` is called
        if (model) {
            model.setBindings({
                sampler: texture || emptyTexture
            });
            model.setUniforms({
                hasTexture: Boolean(texture)
            });
        }
    }
}


/***/ }),

/***/ "./node_modules/@deck.gl/mesh-layers/dist/utils/matrix.js":
/*!****************************************************************!*\
  !*** ./node_modules/@deck.gl/mesh-layers/dist/utils/matrix.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MATRIX_ATTRIBUTES: () => (/* binding */ MATRIX_ATTRIBUTES),
/* harmony export */   shouldComposeModelMatrix: () => (/* binding */ shouldComposeModelMatrix)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/utils/iterable-utils.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deck.gl/core */ "./node_modules/@deck.gl/core/dist/lib/constants.js");

/* eslint-disable max-statements, complexity, camelcase */
const RADIAN_PER_DEGREE = Math.PI / 180;
const modelMatrix = new Float32Array(16);
const valueArray = new Float32Array(12);
function calculateTransformMatrix(targetMatrix, orientation, scale) {
    const pitch = orientation[0] * RADIAN_PER_DEGREE;
    const yaw = orientation[1] * RADIAN_PER_DEGREE;
    const roll = orientation[2] * RADIAN_PER_DEGREE;
    const sr = Math.sin(roll);
    const sp = Math.sin(pitch);
    const sw = Math.sin(yaw);
    const cr = Math.cos(roll);
    const cp = Math.cos(pitch);
    const cw = Math.cos(yaw);
    const scx = scale[0];
    const scy = scale[1];
    const scz = scale[2];
    targetMatrix[0] = scx * cw * cp; // 0,0
    targetMatrix[1] = scx * sw * cp; // 1,0
    targetMatrix[2] = scx * -sp; // 2,0
    targetMatrix[3] = scy * (-sw * cr + cw * sp * sr); // 0,1
    targetMatrix[4] = scy * (cw * cr + sw * sp * sr); // 1,1
    targetMatrix[5] = scy * cp * sr; // 2,1
    targetMatrix[6] = scz * (sw * sr + cw * sp * cr); // 0,2
    targetMatrix[7] = scz * (-cw * sr + sw * sp * cr); // 1,2
    targetMatrix[8] = scz * cp * cr; // 2,2
}
function getExtendedMat3FromMat4(mat4) {
    mat4[0] = mat4[0];
    mat4[1] = mat4[1];
    mat4[2] = mat4[2];
    mat4[3] = mat4[4];
    mat4[4] = mat4[5];
    mat4[5] = mat4[6];
    mat4[6] = mat4[8];
    mat4[7] = mat4[9];
    mat4[8] = mat4[10];
    mat4[9] = mat4[12];
    mat4[10] = mat4[13];
    mat4[11] = mat4[14];
    return mat4.subarray(0, 12);
}
const MATRIX_ATTRIBUTES = {
    size: 12,
    accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],
    shaderAttributes: {
        instanceModelMatrixCol0: {
            size: 3,
            elementOffset: 0
        },
        instanceModelMatrixCol1: {
            size: 3,
            elementOffset: 3
        },
        instanceModelMatrixCol2: {
            size: 3,
            elementOffset: 6
        },
        instanceTranslation: {
            size: 3,
            elementOffset: 9
        }
    },
    update(attribute, { startRow, endRow }) {
        // @ts-expect-error: "this" will be bound to a layer when this  function is called
        const { data, getOrientation, getScale, getTranslation, getTransformMatrix } = this.props;
        const arrayMatrix = Array.isArray(getTransformMatrix);
        const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;
        const constantScale = Array.isArray(getScale);
        const constantOrientation = Array.isArray(getOrientation);
        const constantTranslation = Array.isArray(getTranslation);
        const hasMatrix = constantMatrix || (!arrayMatrix && Boolean(getTransformMatrix(data[0])));
        if (hasMatrix) {
            attribute.constant = constantMatrix;
        }
        else {
            attribute.constant = constantOrientation && constantScale && constantTranslation;
        }
        const instanceModelMatrixData = attribute.value;
        if (attribute.constant) {
            let matrix;
            if (hasMatrix) {
                modelMatrix.set(getTransformMatrix);
                matrix = getExtendedMat3FromMat4(modelMatrix);
            }
            else {
                matrix = valueArray;
                const orientation = getOrientation;
                const scale = getScale;
                calculateTransformMatrix(matrix, orientation, scale);
                matrix.set(getTranslation, 9);
            }
            attribute.value = new Float32Array(matrix);
        }
        else {
            let i = startRow * attribute.size;
            const { iterable, objectInfo } = (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__.createIterable)(data, startRow, endRow);
            for (const object of iterable) {
                objectInfo.index++;
                let matrix;
                if (hasMatrix) {
                    modelMatrix.set(constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo));
                    matrix = getExtendedMat3FromMat4(modelMatrix);
                }
                else {
                    matrix = valueArray;
                    const orientation = constantOrientation
                        ? getOrientation
                        : getOrientation(object, objectInfo);
                    const scale = constantScale ? getScale : getScale(object, objectInfo);
                    calculateTransformMatrix(matrix, orientation, scale);
                    matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);
                }
                instanceModelMatrixData[i++] = matrix[0];
                instanceModelMatrixData[i++] = matrix[1];
                instanceModelMatrixData[i++] = matrix[2];
                instanceModelMatrixData[i++] = matrix[3];
                instanceModelMatrixData[i++] = matrix[4];
                instanceModelMatrixData[i++] = matrix[5];
                instanceModelMatrixData[i++] = matrix[6];
                instanceModelMatrixData[i++] = matrix[7];
                instanceModelMatrixData[i++] = matrix[8];
                instanceModelMatrixData[i++] = matrix[9];
                instanceModelMatrixData[i++] = matrix[10];
                instanceModelMatrixData[i++] = matrix[11];
            }
        }
    }
};
// only apply composeModelMatrix when in cartesian or meter_offsets coordinate system
// with `composeModelMatrix` enabled, the rotation part of the layer's modelMatrix will be composed to instance's transformations
// since rotating latitude and longitude can not provide meaningful results, hence `composeModelMatrix` is disabled
// when in LNGLAT and LNGLAT_OFFSET coordinates.
function shouldComposeModelMatrix(viewport, coordinateSystem) {
    return (coordinateSystem === _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.CARTESIAN ||
        coordinateSystem === _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.METER_OFFSETS ||
        (coordinateSystem === _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial));
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-array-buffer-iterator.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-array-buffer-iterator.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeArrayBufferIterator: () => (/* binding */ makeArrayBufferIterator)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const DEFAULT_CHUNK_SIZE = 256 * 1024;
/**
 * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one
 * @param blob ArrayBuffer to iterate over
 * @param options
 * @param options.chunkSize
 */
function* makeArrayBufferIterator(arrayBuffer, options = {}) {
    const { chunkSize = DEFAULT_CHUNK_SIZE } = options;
    let byteOffset = 0;
    while (byteOffset < arrayBuffer.byteLength) {
        // Create a chunk of the right size
        const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);
        const chunk = new ArrayBuffer(chunkByteLength);
        // Copy data from the big chunk
        const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);
        const chunkArray = new Uint8Array(chunk);
        chunkArray.set(sourceArray);
        // yield the chunk
        byteOffset += chunkByteLength;
        yield chunk;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-blob-iterator.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-blob-iterator.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeBlobIterator: () => (/* binding */ makeBlobIterator)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB — biggest value that keeps UI responsive
/**
 * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one
 * @param blob Blob or File object
 * @param options
 * @param options.chunkSize
 */
async function* makeBlobIterator(blob, options) {
    const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;
    let offset = 0;
    while (offset < blob.size) {
        const end = offset + chunkSize;
        const chunk = await blob.slice(offset, end).arrayBuffer();
        offset = end;
        yield chunk;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-iterator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-iterator.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeIterator: () => (/* binding */ makeIterator)
/* harmony export */ });
/* harmony import */ var _make_string_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./make-string-iterator.js */ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-string-iterator.js");
/* harmony import */ var _make_array_buffer_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./make-array-buffer-iterator.js */ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-array-buffer-iterator.js");
/* harmony import */ var _make_blob_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./make-blob-iterator.js */ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-blob-iterator.js");
/* harmony import */ var _make_stream_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./make-stream-iterator.js */ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-stream-iterator.js");
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors





/**
 * Returns an iterator that breaks its input into chunks and yields them one-by-one.
 * @param data
 * @param options
 * @returns
 * This function can e.g. be used to enable data sources that can only be read atomically
 * (such as `Blob` and `File` via `FileReader`) to still be parsed in batches.
 */
function makeIterator(data, options) {
    if (typeof data === 'string') {
        // Note: Converts string chunks to binary
        return (0,_make_string_iterator_js__WEBPACK_IMPORTED_MODULE_0__.makeStringIterator)(data, options);
    }
    if (data instanceof ArrayBuffer) {
        return (0,_make_array_buffer_iterator_js__WEBPACK_IMPORTED_MODULE_1__.makeArrayBufferIterator)(data, options);
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__.isBlob)(data)) {
        return (0,_make_blob_iterator_js__WEBPACK_IMPORTED_MODULE_3__.makeBlobIterator)(data, options);
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__.isReadableStream)(data)) {
        return (0,_make_stream_iterator_js__WEBPACK_IMPORTED_MODULE_4__.makeStreamIterator)(data, options);
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__.isResponse)(data)) {
        const response = data;
        return (0,_make_stream_iterator_js__WEBPACK_IMPORTED_MODULE_4__.makeStreamIterator)(response.body, options);
    }
    throw new Error('makeIterator');
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-stream-iterator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-stream-iterator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeStreamIterator: () => (/* binding */ makeStreamIterator)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/globals.js");
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/memory-conversion-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Returns an async iterable that reads from a stream (works in both Node.js and browsers)
 * @param stream stream to iterator over
 */
function makeStreamIterator(stream, options) {
    return _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.isBrowser
        ? makeBrowserStreamIterator(stream, options)
        : makeNodeStreamIterator(stream, options);
}
/**
 * Returns an async iterable that reads from a DOM (browser) stream
 * @param stream stream to iterate from
 * @see https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate
 */
async function* makeBrowserStreamIterator(stream, options) {
    // WhatWG: stream is supposed to have a `getIterator` method
    // if (typeof stream.getIterator === 'function') {
    //   return stream.getIterator();
    // }
    // if (typeof stream[Symbol.asyncIterator] === 'function') {
    //   return makeToArrayBufferIterator(stream);
    // }
    // In the browser, we first need to get a lock on the stream
    const reader = stream.getReader();
    let nextBatchPromise;
    try {
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const currentBatchPromise = nextBatchPromise || reader.read();
            // Issue a read for an additional batch, while we await the next batch
            // Idea is to make fetching happen in parallel with processing / parsing
            if (options?._streamReadAhead) {
                nextBatchPromise = reader.read();
            }
            // Read from the stream
            // value is a Uint8Array
            const { done, value } = await currentBatchPromise;
            // Exit if we're done
            if (done) {
                return;
            }
            // Else yield the chunk
            yield (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__.toArrayBuffer)(value);
        }
    }
    catch (error) {
        // TODO - examples makes it look like this should always be called,
        // but that generates exceptions so only call it if we do not reach the end
        reader.releaseLock();
    }
}
/**
 * Returns an async iterable that reads from a DOM (browser) stream
 * @param stream stream to iterate from
 * @note Requires Node.js >= 10
 */
async function* makeNodeStreamIterator(stream, options) {
    // Hacky test for node version to ensure we don't call bad polyfills
    // NODE 10+: stream is an asyncIterator
    for await (const chunk of stream) {
        yield (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__.toArrayBuffer)(chunk); // Coerce each chunk to ArrayBuffer
    }
}
/* TODO - remove NODE < 10
 * @see https://github.com/bustle/streaming-iterables, MIT license
 *
  if (typeof stream[Symbol.asyncIterator] === 'function') {
    return;
  }

  // TODO - check if is this ever used in Node 10+?
  // eslint-disable-next-line no-constant-condition
  while (true) {
    const data = stream.read();
    if (data !== null) {
      yield toArrayBuffer(data);
      // eslint-disable-next-line no-continue
      continue;
    }
    if (stream._readableState?.ended) {
      return;
    }
    await onceReadable(stream);
  }

async function onceReadable(stream: Readable): Promise<any> {
  return new Promise((resolve) => {
    stream.once('readable', resolve);
  });
}
  */


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-string-iterator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-string-iterator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeStringIterator: () => (/* binding */ makeStringIterator)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const DEFAULT_CHUNK_SIZE = 256 * 1024;
/**
 * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers
 * @param blob string to iterate over
 * @param options
 * @param options.chunkSize
 */
function* makeStringIterator(string, options) {
    const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;
    let offset = 0;
    const textEncoder = new TextEncoder();
    while (offset < string.length) {
        // Create a chunk of the right size
        const chunkLength = Math.min(string.length - offset, chunkSize);
        const chunk = string.slice(offset, offset + chunkLength);
        offset += chunkLength;
        // yield an ArrayBuffer chunk
        yield textEncoder.encode(chunk);
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js":
/*!************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),
/* harmony export */   isBlob: () => (/* binding */ isBlob),
/* harmony export */   isBuffer: () => (/* binding */ isBuffer),
/* harmony export */   isFile: () => (/* binding */ isFile),
/* harmony export */   isIterable: () => (/* binding */ isIterable),
/* harmony export */   isIterator: () => (/* binding */ isIterator),
/* harmony export */   isObject: () => (/* binding */ isObject),
/* harmony export */   isPromise: () => (/* binding */ isPromise),
/* harmony export */   isPureObject: () => (/* binding */ isPureObject),
/* harmony export */   isReadableDOMStream: () => (/* binding */ isReadableDOMStream),
/* harmony export */   isReadableNodeStream: () => (/* binding */ isReadableNodeStream),
/* harmony export */   isReadableStream: () => (/* binding */ isReadableStream),
/* harmony export */   isResponse: () => (/* binding */ isResponse),
/* harmony export */   isWritableDOMStream: () => (/* binding */ isWritableDOMStream),
/* harmony export */   isWritableNodeStream: () => (/* binding */ isWritableNodeStream),
/* harmony export */   isWritableStream: () => (/* binding */ isWritableStream)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const isBoolean = (x) => typeof x === 'boolean';
const isFunction = (x) => typeof x === 'function';
const isObject = (x) => x !== null && typeof x === 'object';
const isPureObject = (x) => isObject(x) && x.constructor === {}.constructor;
const isPromise = (x) => isObject(x) && isFunction(x.then);
const isIterable = (x) => Boolean(x) && typeof x[Symbol.iterator] === 'function';
const isAsyncIterable = (x) => x && typeof x[Symbol.asyncIterator] === 'function';
const isIterator = (x) => x && isFunction(x.next);
const isResponse = (x) => (typeof Response !== 'undefined' && x instanceof Response) ||
    (x && x.arrayBuffer && x.text && x.json);
const isFile = (x) => typeof File !== 'undefined' && x instanceof File;
const isBlob = (x) => typeof Blob !== 'undefined' && x instanceof Blob;
/** Check for Node.js `Buffer` without triggering bundler to include buffer polyfill */
const isBuffer = (x) => x && typeof x === 'object' && x.isBuffer;
const isWritableDOMStream = (x) => isObject(x) && isFunction(x.abort) && isFunction(x.getWriter);
const isReadableDOMStream = (x) => (typeof ReadableStream !== 'undefined' && x instanceof ReadableStream) ||
    (isObject(x) && isFunction(x.tee) && isFunction(x.cancel) && isFunction(x.getReader));
// Not implemented in Firefox: && isFunction(x.pipeTo)
const isWritableNodeStream = (x) => isObject(x) && isFunction(x.end) && isFunction(x.write) && isBoolean(x.writable);
const isReadableNodeStream = (x) => isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);
const isReadableStream = (x) => isReadableDOMStream(x) || isReadableNodeStream(x);
const isWritableStream = (x) => isWritableDOMStream(x) || isWritableNodeStream(x);


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/api/load.js":
/*!************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/api/load.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   load: () => (/* binding */ load)
/* harmony export */ });
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loader-utils/normalize-loader.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js");
/* harmony import */ var _loader_utils_get_fetch_function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loader-utils/get-fetch-function.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parse.js */ "./node_modules/@loaders.gl/core/dist/lib/api/parse.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




// implementation signature
async function load(url, loaders, options, context) {
    let resolvedLoaders;
    let resolvedOptions;
    // Signature: load(url, options)
    if (!Array.isArray(loaders) && !(0,_loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_0__.isLoaderObject)(loaders)) {
        resolvedLoaders = [];
        resolvedOptions = loaders;
        context = undefined; // context not supported in short signature
    }
    else {
        resolvedLoaders = loaders;
        resolvedOptions = options;
    }
    // Select fetch function
    const fetch = (0,_loader_utils_get_fetch_function_js__WEBPACK_IMPORTED_MODULE_1__.getFetchFunction)(resolvedOptions);
    // at this point, `url` could be already loaded binary data
    let data = url;
    // url is a string, fetch the url
    if (typeof url === 'string') {
        data = await fetch(url);
        // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__.isBlob)(url)) {
        // The fetch response object will contain blob.name
        // @ts-expect-error TODO - This may not work for overridden fetch functions
        data = await fetch(url);
    }
    // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`
    // return await parse(data, loaders as Loader[], options);
    return Array.isArray(resolvedLoaders)
        ? await (0,_parse_js__WEBPACK_IMPORTED_MODULE_3__.parse)(data, resolvedLoaders, resolvedOptions) // loader array overload
        : await (0,_parse_js__WEBPACK_IMPORTED_MODULE_3__.parse)(data, resolvedLoaders, resolvedOptions); // single loader overload
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/api/parse.js":
/*!*************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/api/parse.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parse: () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/worker-loader-utils/parse-with-worker.js");
/* harmony import */ var _loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @loaders.gl/worker-utils */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/validate-worker-version.js");
/* harmony import */ var _loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @loaders.gl/worker-utils */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js");
/* harmony import */ var _loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loader-utils/normalize-loader.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js");
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _loader_utils_option_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../loader-utils/option-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-utils.js");
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/option-utils/merge-loader-options.js");
/* harmony import */ var _loader_utils_get_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../loader-utils/get-data.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/get-data.js");
/* harmony import */ var _loader_utils_loader_context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../loader-utils/loader-context.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/loader-context.js");
/* harmony import */ var _utils_resource_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/resource-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js");
/* harmony import */ var _select_loader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./select-loader.js */ "./node_modules/@loaders.gl/core/dist/lib/api/select-loader.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors










/**
 * Parses `data` using a specified loader
 * @param data
 * @param loaders
 * @param options
 * @param context
 */
// implementation signature
async function parse(data, loaders, options, context) {
    // Signature: parse(data, options, context | url)
    // Uses registered loaders
    if (loaders && !Array.isArray(loaders) && !(0,_loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_0__.isLoaderObject)(loaders)) {
        context = undefined; // context not supported in short signature
        options = loaders;
        loaders = undefined;
    }
    data = await data; // Resolve any promise
    options = options || {}; // Could be invalid...
    // Extract a url for auto detection
    const url = (0,_utils_resource_utils_js__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(data);
    // Chooses a loader (and normalizes it)
    // Also use any loaders in the context, new loaders take priority
    const typedLoaders = loaders;
    const candidateLoaders = (0,_loader_utils_loader_context_js__WEBPACK_IMPORTED_MODULE_2__.getLoadersFromContext)(typedLoaders, context);
    // todo hacky type cast
    const loader = await (0,_select_loader_js__WEBPACK_IMPORTED_MODULE_3__.selectLoader)(data, candidateLoaders, options);
    // Note: if no loader was found, if so just return null
    if (!loader) {
        return null;
    }
    // Normalize options
    // @ts-expect-error
    options = (0,_loader_utils_option_utils_js__WEBPACK_IMPORTED_MODULE_4__.normalizeOptions)(options, loader, candidateLoaders, url); // Could be invalid...
    // Get a context (if already present, will be unchanged)
    context = (0,_loader_utils_loader_context_js__WEBPACK_IMPORTED_MODULE_2__.getLoaderContext)(
    // @ts-expect-error
    { url, _parse: parse, loaders: candidateLoaders }, options, context || null);
    return await parseWithLoader(loader, data, options, context);
}
// TODO: support progress and abort
// TODO - should accept loader.parseAsyncIterator and concatenate.
async function parseWithLoader(loader, data, options, context) {
    (0,_loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_5__.validateWorkerVersion)(loader);
    options = (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_6__.mergeLoaderOptions)(loader.options, options);
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_7__.isResponse)(data)) {
        // Serialize to support passing the response to web worker
        const response = data;
        const { ok, redirected, status, statusText, type, url } = response;
        const headers = Object.fromEntries(response.headers.entries());
        // @ts-expect-error TODO - fix this
        context.response = { headers, ok, redirected, status, statusText, type, url };
    }
    data = await (0,_loader_utils_get_data_js__WEBPACK_IMPORTED_MODULE_8__.getArrayBufferOrStringFromData)(data, loader, options);
    const loaderWithParser = loader;
    // First check for synchronous text parser, wrap results in promises
    if (loaderWithParser.parseTextSync && typeof data === 'string') {
        return loaderWithParser.parseTextSync(data, options, context);
    }
    // If we have a workerUrl and the loader can parse the given options efficiently in a worker
    if ((0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_9__.canParseWithWorker)(loader, options)) {
        return await (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_9__.parseWithWorker)(loader, data, options, context, parse);
    }
    // Check for asynchronous parser
    if (loaderWithParser.parseText && typeof data === 'string') {
        return await loaderWithParser.parseText(data, options, context);
    }
    if (loaderWithParser.parse) {
        return await loaderWithParser.parse(data, options, context);
    }
    // This should not happen, all sync loaders should also offer `parse` function
    (0,_loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_10__.assert)(!loaderWithParser.parseSync);
    // TBD - If asynchronous parser not available, return null
    throw new Error(`${loader.id} loader - no parser found and worker is disabled`);
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js":
/*!************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _unregisterLoaders: () => (/* binding */ _unregisterLoaders),
/* harmony export */   getRegisteredLoaders: () => (/* binding */ getRegisteredLoaders),
/* harmony export */   registerLoaders: () => (/* binding */ registerLoaders)
/* harmony export */ });
/* harmony import */ var _loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loader-utils/normalize-loader.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js");
/* harmony import */ var _loader_utils_option_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loader-utils/option-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Store global registered loaders on the global object to increase chances of cross loaders-version interoperability
 * This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks
 */
const getGlobalLoaderRegistry = () => {
    const state = (0,_loader_utils_option_utils_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalLoaderState)();
    state.loaderRegistry = state.loaderRegistry || [];
    return state.loaderRegistry;
};
/** Register a list of global loaders */
function registerLoaders(loaders) {
    const loaderRegistry = getGlobalLoaderRegistry();
    loaders = Array.isArray(loaders) ? loaders : [loaders];
    for (const loader of loaders) {
        const normalizedLoader = (0,_loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_1__.normalizeLoader)(loader);
        if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {
            // add to the beginning of the loaderRegistry, so the last registeredLoader get picked
            loaderRegistry.unshift(normalizedLoader);
        }
    }
}
function getRegisteredLoaders() {
    return getGlobalLoaderRegistry();
}
/** @deprecated For testing only  */
function _unregisterLoaders() {
    const state = (0,_loader_utils_option_utils_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalLoaderState)();
    state.loaderRegistry = [];
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/api/select-loader.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/api/select-loader.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectLoader: () => (/* binding */ selectLoader),
/* harmony export */   selectLoaderSync: () => (/* binding */ selectLoaderSync)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js");
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js");
/* harmony import */ var _loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loader-utils/normalize-loader.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/log.js");
/* harmony import */ var _utils_resource_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/resource-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js");
/* harmony import */ var _utils_mime_type_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/mime-type-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/mime-type-utils.js");
/* harmony import */ var _register_loaders_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./register-loaders.js */ "./node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js");
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _utils_url_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/url-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors








const EXT_PATTERN = /\.([^.]+)$/;
// TODO - Need a variant that peeks at streams for parseInBatches
// TODO - Detect multiple matching loaders? Use heuristics to grade matches?
// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?
/**
 * Find a loader that matches file extension and/or initial file content
 * Search the loaders array argument for a loader that matches url extension or initial data
 * Returns: a normalized loader
 * @param data data to assist
 * @param loaders
 * @param options
 * @param context used internally, applications should not provide this parameter
 */
async function selectLoader(data, loaders = [], options, context) {
    if (!validHTTPResponse(data)) {
        return null;
    }
    // First make a sync attempt, disabling exceptions
    let loader = selectLoaderSync(data, loaders, { ...options, nothrow: true }, context);
    if (loader) {
        return loader;
    }
    // For Blobs and Files, try to asynchronously read a small initial slice and test again with that
    // to see if we can detect by initial content
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isBlob)(data)) {
        data = await data.slice(0, 10).arrayBuffer();
        loader = selectLoaderSync(data, loaders, options, context);
    }
    // no loader available
    if (!loader && !options?.nothrow) {
        throw new Error(getNoValidLoaderMessage(data));
    }
    return loader;
}
/**
 * Find a loader that matches file extension and/or initial file content
 * Search the loaders array argument for a loader that matches url extension or initial data
 * Returns: a normalized loader
 * @param data data to assist
 * @param loaders
 * @param options
 * @param context used internally, applications should not provide this parameter
 */
function selectLoaderSync(data, loaders = [], options, context) {
    if (!validHTTPResponse(data)) {
        return null;
    }
    // eslint-disable-next-line complexity
    // if only a single loader was provided (not as array), force its use
    // TODO - Should this behavior be kept and documented?
    if (loaders && !Array.isArray(loaders)) {
        // TODO - remove support for legacy loaders
        return (0,_loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_1__.normalizeLoader)(loaders);
    }
    // Build list of candidate loaders that will be searched in order for a match
    let candidateLoaders = [];
    // First search supplied loaders
    if (loaders) {
        candidateLoaders = candidateLoaders.concat(loaders);
    }
    // Then fall back to registered loaders
    if (!options?.ignoreRegisteredLoaders) {
        candidateLoaders.push(...(0,_register_loaders_js__WEBPACK_IMPORTED_MODULE_2__.getRegisteredLoaders)());
    }
    // TODO - remove support for legacy loaders
    normalizeLoaders(candidateLoaders);
    const loader = selectLoaderInternal(data, candidateLoaders, options, context);
    // no loader available
    if (!loader && !options?.nothrow) {
        throw new Error(getNoValidLoaderMessage(data));
    }
    return loader;
}
/** Implements loaders selection logic */
// eslint-disable-next-line complexity
function selectLoaderInternal(data, loaders, options, context) {
    const url = (0,_utils_resource_utils_js__WEBPACK_IMPORTED_MODULE_3__.getResourceUrl)(data);
    const type = (0,_utils_resource_utils_js__WEBPACK_IMPORTED_MODULE_3__.getResourceMIMEType)(data);
    const testUrl = (0,_utils_url_utils_js__WEBPACK_IMPORTED_MODULE_4__.stripQueryString)(url) || context?.url;
    let loader = null;
    let reason = '';
    // if options.mimeType is supplied, it takes precedence
    if (options?.mimeType) {
        loader = findLoaderByMIMEType(loaders, options?.mimeType);
        reason = `match forced by supplied MIME type ${options?.mimeType}`;
    }
    // Look up loader by url
    loader = loader || findLoaderByUrl(loaders, testUrl);
    reason = reason || (loader ? `matched url ${testUrl}` : '');
    // Look up loader by mime type
    loader = loader || findLoaderByMIMEType(loaders, type);
    reason = reason || (loader ? `matched MIME type ${type}` : '');
    // Look for loader via initial bytes (Note: not always accessible (e.g. Response, stream, async iterator)
    // @ts-ignore Blob | Response
    loader = loader || findLoaderByInitialBytes(loaders, data);
    // @ts-ignore Blob | Response
    reason = reason || (loader ? `matched initial data ${getFirstCharacters(data)}` : '');
    // Look up loader by fallback mime type
    if (options?.fallbackMimeType) {
        loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);
        reason = reason || (loader ? `matched fallback MIME type ${type}` : '');
    }
    if (reason) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.log(1, `selectLoader selected ${loader?.name}: ${reason}.`);
    }
    return loader;
}
/** Check HTTP Response */
function validHTTPResponse(data) {
    // HANDLE HTTP status
    if (data instanceof Response) {
        // 204 - NO CONTENT. This handles cases where e.g. a tile server responds with 204 for a missing tile
        if (data.status === 204) {
            return false;
        }
    }
    return true;
}
/** Generate a helpful message to help explain why loader selection failed. */
function getNoValidLoaderMessage(data) {
    const url = (0,_utils_resource_utils_js__WEBPACK_IMPORTED_MODULE_3__.getResourceUrl)(data);
    const type = (0,_utils_resource_utils_js__WEBPACK_IMPORTED_MODULE_3__.getResourceMIMEType)(data);
    let message = 'No valid loader found (';
    message += url ? `${_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_6__.filename(url)}, ` : 'no url provided, ';
    message += `MIME type: ${type ? `"${type}"` : 'not provided'}, `;
    // First characters are only accessible when called on data (string or arrayBuffer).
    // @ts-ignore Blob | Response
    const firstCharacters = data ? getFirstCharacters(data) : '';
    message += firstCharacters ? ` first bytes: "${firstCharacters}"` : 'first bytes: not available';
    message += ')';
    return message;
}
function normalizeLoaders(loaders) {
    for (const loader of loaders) {
        (0,_loader_utils_normalize_loader_js__WEBPACK_IMPORTED_MODULE_1__.normalizeLoader)(loader);
    }
}
// TODO - Would be nice to support http://example.com/file.glb?parameter=1
// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname
function findLoaderByUrl(loaders, url) {
    // Get extension
    const match = url && EXT_PATTERN.exec(url);
    const extension = match && match[1];
    return extension ? findLoaderByExtension(loaders, extension) : null;
}
function findLoaderByExtension(loaders, extension) {
    extension = extension.toLowerCase();
    for (const loader of loaders) {
        for (const loaderExtension of loader.extensions) {
            if (loaderExtension.toLowerCase() === extension) {
                return loader;
            }
        }
    }
    return null;
}
function findLoaderByMIMEType(loaders, mimeType) {
    for (const loader of loaders) {
        if (loader.mimeTypes?.some((mimeType1) => (0,_utils_mime_type_utils_js__WEBPACK_IMPORTED_MODULE_7__.compareMIMETypes)(mimeType, mimeType1))) {
            return loader;
        }
        // Support referring to loaders using the "unregistered tree"
        // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree
        if ((0,_utils_mime_type_utils_js__WEBPACK_IMPORTED_MODULE_7__.compareMIMETypes)(mimeType, `application/x.${loader.id}`)) {
            return loader;
        }
    }
    return null;
}
function findLoaderByInitialBytes(loaders, data) {
    if (!data) {
        return null;
    }
    for (const loader of loaders) {
        if (typeof data === 'string') {
            if (testDataAgainstText(data, loader)) {
                return loader;
            }
        }
        else if (ArrayBuffer.isView(data)) {
            // Typed Arrays can have offsets into underlying buffer
            if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {
                return loader;
            }
        }
        else if (data instanceof ArrayBuffer) {
            const byteOffset = 0;
            if (testDataAgainstBinary(data, byteOffset, loader)) {
                return loader;
            }
        }
        // TODO Handle streaming case (requires creating a new AsyncIterator)
    }
    return null;
}
function testDataAgainstText(data, loader) {
    if (loader.testText) {
        return loader.testText(data);
    }
    const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];
    return tests.some((test) => data.startsWith(test));
}
function testDataAgainstBinary(data, byteOffset, loader) {
    const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];
    return tests.some((test) => testBinary(data, byteOffset, loader, test));
}
function testBinary(data, byteOffset, loader, test) {
    if (test instanceof ArrayBuffer) {
        return (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_8__.compareArrayBuffers)(test, data, test.byteLength);
    }
    switch (typeof test) {
        case 'function':
            return test(data);
        case 'string':
            // Magic bytes check: If `test` is a string, check if binary data starts with that strings
            const magic = getMagicString(data, byteOffset, test.length);
            return test === magic;
        default:
            return false;
    }
}
function getFirstCharacters(data, length = 5) {
    if (typeof data === 'string') {
        return data.slice(0, length);
    }
    else if (ArrayBuffer.isView(data)) {
        // Typed Arrays can have offsets into underlying buffer
        return getMagicString(data.buffer, data.byteOffset, length);
    }
    else if (data instanceof ArrayBuffer) {
        const byteOffset = 0;
        return getMagicString(data, byteOffset, length);
    }
    return '';
}
function getMagicString(arrayBuffer, byteOffset, length) {
    if (arrayBuffer.byteLength < byteOffset + length) {
        return '';
    }
    const dataView = new DataView(arrayBuffer);
    let magic = '';
    for (let i = 0; i < length; i++) {
        magic += String.fromCharCode(dataView.getUint8(byteOffset + i));
    }
    return magic;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/fetch/fetch-error.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/fetch/fetch-error.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FetchError: () => (/* binding */ FetchError)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
class FetchError extends Error {
    constructor(message, info) {
        super(message);
        this.reason = info.reason;
        this.url = info.url;
        this.response = info.response;
    }
    /** A best effort reason for why the fetch failed */
    reason;
    /** The URL that failed to load. Empty string if not available. */
    url;
    /** The Response object, if any. */
    response;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/fetch/fetch-file.js":
/*!********************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/fetch/fetch-file.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fetchFile: () => (/* binding */ fetchFile),
/* harmony export */   isDataURL: () => (/* binding */ isDataURL),
/* harmony export */   isNodePath: () => (/* binding */ isNodePath),
/* harmony export */   isRequestURL: () => (/* binding */ isRequestURL)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/file-aliases.js");
/* harmony import */ var _utils_response_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/response-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/response-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// import {FetchError} from './fetch-error';
function isNodePath(url) {
    return !isRequestURL(url) && !isDataURL(url);
}
function isRequestURL(url) {
    return url.startsWith('http:') || url.startsWith('https:');
}
function isDataURL(url) {
    return url.startsWith('data:');
}
/**
 * fetch API compatible function
 * - Supports fetching from Node.js local file system paths
 * - Respects pathPrefix and file aliases
 */
async function fetchFile(urlOrData, fetchOptions) {
    if (typeof urlOrData === 'string') {
        const url = (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.resolvePath)(urlOrData);
        // Support fetching from local file system
        if (isNodePath(url)) {
            if (globalThis.loaders?.fetchNode) {
                return globalThis.loaders?.fetchNode(url, fetchOptions);
            }
            // throw new Error(
            //   'fetchFile: globalThis.loaders.fetchNode not defined. Install @loaders.gl/polyfills'
            // );
        }
        // Call global fetch
        return await fetch(url, fetchOptions);
    }
    // TODO - should we still call fetch on non-URL inputs?
    return await (0,_utils_response_utils_js__WEBPACK_IMPORTED_MODULE_1__.makeResponse)(urlOrData);
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/get-data.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/loader-utils/get-data.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getArrayBufferOrStringFromData: () => (/* binding */ getArrayBufferOrStringFromData),
/* harmony export */   getArrayBufferOrStringFromDataSync: () => (/* binding */ getArrayBufferOrStringFromDataSync),
/* harmony export */   getAsyncIterableFromData: () => (/* binding */ getAsyncIterableFromData),
/* harmony export */   getReadableStream: () => (/* binding */ getReadableStream)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/iterators/async-iteration.js");
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _iterators_make_iterator_make_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../iterators/make-iterator/make-iterator.js */ "./node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-iterator.js");
/* harmony import */ var _utils_response_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/response-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/response-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




const ERR_DATA = 'Cannot convert supplied data type';
// eslint-disable-next-line complexity
function getArrayBufferOrStringFromDataSync(data, loader, options) {
    if (loader.text && typeof data === 'string') {
        return data;
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isBuffer)(data)) {
        // @ts-ignore
        data = data.buffer;
    }
    if (data instanceof ArrayBuffer) {
        const arrayBuffer = data;
        if (loader.text && !loader.binary) {
            const textDecoder = new TextDecoder('utf8');
            return textDecoder.decode(arrayBuffer);
        }
        return arrayBuffer;
    }
    // We may need to handle offsets
    if (ArrayBuffer.isView(data)) {
        // TextDecoder is invoked on typed arrays and will handle offsets
        if (loader.text && !loader.binary) {
            const textDecoder = new TextDecoder('utf8');
            return textDecoder.decode(data);
        }
        let arrayBuffer = data.buffer;
        // Since we are returning the underlying arrayBuffer, we must create a new copy
        // if this typed array / Buffer is a partial view into the ArryayBuffer
        // TODO - this is a potentially unnecessary copy
        const byteLength = data.byteLength || data.length;
        if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {
            // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);
            arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);
        }
        return arrayBuffer;
    }
    throw new Error(ERR_DATA);
}
// Convert async iterator to a promise
async function getArrayBufferOrStringFromData(data, loader, options) {
    const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);
    if (typeof data === 'string' || isArrayBuffer) {
        return getArrayBufferOrStringFromDataSync(data, loader, options);
    }
    // Blobs and files are FileReader compatible
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isBlob)(data)) {
        data = await (0,_utils_response_utils_js__WEBPACK_IMPORTED_MODULE_1__.makeResponse)(data);
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isResponse)(data)) {
        const response = data;
        await (0,_utils_response_utils_js__WEBPACK_IMPORTED_MODULE_1__.checkResponse)(response);
        return loader.binary ? await response.arrayBuffer() : await response.text();
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isReadableStream)(data)) {
        // @ts-expect-error TS2559 options type
        data = (0,_iterators_make_iterator_make_iterator_js__WEBPACK_IMPORTED_MODULE_2__.makeIterator)(data, options);
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isIterable)(data) || (0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(data)) {
        // Assume arrayBuffer iterator - attempt to concatenate
        return (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_3__.concatenateArrayBuffersAsync)(data);
    }
    throw new Error(ERR_DATA);
}
async function getAsyncIterableFromData(data, options) {
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isIterator)(data)) {
        return data;
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isResponse)(data)) {
        const response = data;
        // Note Since this function is not async, we currently can't load error message, just status
        await (0,_utils_response_utils_js__WEBPACK_IMPORTED_MODULE_1__.checkResponse)(response);
        // TODO - bug in polyfill, body can be a Promise under Node.js
        // eslint-disable-next-line @typescript-eslint/await-thenable
        const body = await response.body;
        // TODO - body can be null?
        return (0,_iterators_make_iterator_make_iterator_js__WEBPACK_IMPORTED_MODULE_2__.makeIterator)(body, options);
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isBlob)(data) || (0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isReadableStream)(data)) {
        return (0,_iterators_make_iterator_make_iterator_js__WEBPACK_IMPORTED_MODULE_2__.makeIterator)(data, options);
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(data)) {
        return data;
    }
    return getIterableFromData(data);
}
async function getReadableStream(data) {
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isReadableStream)(data)) {
        return data;
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isResponse)(data)) {
        // @ts-ignore
        return data.body;
    }
    const response = await (0,_utils_response_utils_js__WEBPACK_IMPORTED_MODULE_1__.makeResponse)(data);
    // @ts-ignore
    return response.body;
}
// HELPERS
function getIterableFromData(data) {
    // generate an iterator that emits a single chunk
    if (ArrayBuffer.isView(data)) {
        return (function* oneChunk() {
            yield data.buffer;
        })();
    }
    if (data instanceof ArrayBuffer) {
        return (function* oneChunk() {
            yield data;
        })();
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isIterator)(data)) {
        return data;
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isIterable)(data)) {
        return data[Symbol.iterator]();
    }
    throw new Error(ERR_DATA);
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFetchFunction: () => (/* binding */ getFetchFunction)
/* harmony export */ });
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _fetch_fetch_file_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../fetch/fetch-file.js */ "./node_modules/@loaders.gl/core/dist/lib/fetch/fetch-file.js");
/* harmony import */ var _option_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./option-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Gets the current fetch function from options and context
 * @param options
 * @param context
 */
function getFetchFunction(options, context) {
    const globalOptions = (0,_option_utils_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalLoaderOptions)();
    const loaderOptions = options || globalOptions;
    // options.fetch can be a function
    if (typeof loaderOptions.fetch === 'function') {
        return loaderOptions.fetch;
    }
    // options.fetch can be an options object
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(loaderOptions.fetch)) {
        return (url) => (0,_fetch_fetch_file_js__WEBPACK_IMPORTED_MODULE_2__.fetchFile)(url, loaderOptions.fetch);
    }
    // else refer to context (from parent loader) if available
    if (context?.fetch) {
        return context?.fetch;
    }
    // else return the default fetch function
    return _fetch_fetch_file_js__WEBPACK_IMPORTED_MODULE_2__.fetchFile;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/loader-context.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/loader-utils/loader-context.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLoaderContext: () => (/* binding */ getLoaderContext),
/* harmony export */   getLoadersFromContext: () => (/* binding */ getLoadersFromContext)
/* harmony export */ });
/* harmony import */ var _get_fetch_function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-fetch-function.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js");
/* harmony import */ var _utils_url_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/url-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js");
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * "sub" loaders invoked by other loaders get a "context" injected on `this`
 * The context will inject core methods like `parse` and contain information
 * about loaders and options passed in to the top-level `parse` call.
 *
 * @param context
 * @param options
 * @param previousContext
 */
function getLoaderContext(context, options, parentContext) {
    // For recursive calls, we already have a context
    // TODO - add any additional loaders to context?
    if (parentContext) {
        return parentContext;
    }
    const newContext = {
        fetch: (0,_get_fetch_function_js__WEBPACK_IMPORTED_MODULE_0__.getFetchFunction)(options, context),
        ...context
    };
    // Parse URLs so that subloaders can easily generate correct strings
    if (newContext.url) {
        const baseUrl = (0,_utils_url_utils_js__WEBPACK_IMPORTED_MODULE_1__.stripQueryString)(newContext.url);
        newContext.baseUrl = baseUrl;
        newContext.queryString = (0,_utils_url_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractQueryString)(newContext.url);
        newContext.filename = _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_2__.filename(baseUrl);
        newContext.baseUrl = _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_2__.dirname(baseUrl);
    }
    // Recursive loading does not use single loader
    if (!Array.isArray(newContext.loaders)) {
        newContext.loaders = null;
    }
    return newContext;
}
// eslint-disable-next-line complexity
function getLoadersFromContext(loaders, context) {
    // A single loader (non-array) indicates no selection desired. Force select.
    if (loaders && !Array.isArray(loaders)) {
        return loaders;
    }
    // Create a merged list
    let candidateLoaders;
    if (loaders) {
        candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];
    }
    if (context && context.loaders) {
        const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];
        candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;
    }
    // If no loaders, return null to look in globally registered loaders
    return candidateLoaders && candidateLoaders.length ? candidateLoaders : undefined;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/loggers.js":
/*!************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/loader-utils/loggers.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConsoleLog: () => (/* binding */ ConsoleLog),
/* harmony export */   NullLog: () => (/* binding */ NullLog),
/* harmony export */   probeLog: () => (/* binding */ probeLog)
/* harmony export */ });
/* harmony import */ var _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/log */ "./node_modules/@probe.gl/log/dist/log.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// probe.gl Log compatible loggers

const probeLog = new _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__.Log({ id: 'loaders.gl' });
// Logs nothing
class NullLog {
    log() {
        return () => { };
    }
    info() {
        return () => { };
    }
    warn() {
        return () => { };
    }
    error() {
        return () => { };
    }
}
// Logs to console
class ConsoleLog {
    console;
    constructor() {
        this.console = console; // eslint-disable-line
    }
    log(...args) {
        return this.console.log.bind(this.console, ...args);
    }
    info(...args) {
        return this.console.info.bind(this.console, ...args);
    }
    warn(...args) {
        return this.console.warn.bind(this.console, ...args);
    }
    error(...args) {
        return this.console.error.bind(this.console, ...args);
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isLoaderObject: () => (/* binding */ isLoaderObject),
/* harmony export */   normalizeLoader: () => (/* binding */ normalizeLoader)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/assert.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

function isLoaderObject(loader) {
    if (!loader) {
        return false;
    }
    if (Array.isArray(loader)) {
        loader = loader[0];
    }
    const hasExtensions = Array.isArray(loader?.extensions);
    /* Now handled by types and worker loaders do not have these
    let hasParser =
      loader.parseTextSync ||
      loader.parseSync ||
      loader.parse ||
      loader.parseStream || // TODO Remove, Replace with parseInBatches
      loader.parseInBatches;
    */
    return hasExtensions;
}
function normalizeLoader(loader) {
    // This error is fairly easy to trigger by mixing up import statements etc
    // So we make an exception and add a developer error message for this case
    // To help new users from getting stuck here
    (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.assert)(loader, 'null loader');
    (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.assert)(isLoaderObject(loader), 'invalid loader');
    // NORMALIZE [LOADER, OPTIONS] => LOADER
    // If [loader, options], create a new loaders object with options merged in
    let options;
    if (Array.isArray(loader)) {
        options = loader[1];
        loader = loader[0];
        loader = {
            ...loader,
            options: { ...loader.options, ...options }
        };
    }
    // NORMALIZE text and binary flags
    // Ensure at least one of text/binary flags are properly set
    // @ts-expect-error
    if (loader?.parseTextSync || loader?.parseText) {
        loader.text = true;
    }
    if (!loader.text) {
        loader.binary = true;
    }
    return loader;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-defaults.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-defaults.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_LOADER_OPTIONS: () => (/* binding */ DEFAULT_LOADER_OPTIONS),
/* harmony export */   REMOVED_LOADER_OPTIONS: () => (/* binding */ REMOVED_LOADER_OPTIONS)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/globals.js");
/* harmony import */ var _loggers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loggers.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/loggers.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


const DEFAULT_LOADER_OPTIONS = {
    // baseUri
    fetch: null,
    mimeType: undefined,
    nothrow: false,
    log: new _loggers_js__WEBPACK_IMPORTED_MODULE_0__.ConsoleLog(), // A probe.gl compatible (`log.log()()` syntax) that just logs to console
    useLocalLibraries: false,
    CDN: 'https://unpkg.com/@loaders.gl',
    worker: true, // By default, use worker if provided by loader.
    maxConcurrency: 3, // How many worker instances should be created for each loader.
    maxMobileConcurrency: 1, // How many worker instances should be created for each loader on mobile devices.
    reuseWorkers: _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__.isBrowser, // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)
    _nodeWorkers: false, // By default do not support node workers
    _workerType: '', // 'test' to use locally generated workers
    limit: 0,
    _limitMB: 0,
    batchSize: 'auto',
    batchDebounceMs: 0,
    metadata: false, // TODO - currently only implemented for parseInBatches, adds initial metadata batch,
    transforms: []
};
const REMOVED_LOADER_OPTIONS = {
    throws: 'nothrow',
    dataType: '(no longer used)',
    uri: 'baseUri',
    // Warn if fetch options are used on top-level
    method: 'fetch.method',
    headers: 'fetch.headers',
    body: 'fetch.body',
    mode: 'fetch.mode',
    credentials: 'fetch.credentials',
    cache: 'fetch.cache',
    redirect: 'fetch.redirect',
    referrer: 'fetch.referrer',
    referrerPolicy: 'fetch.referrerPolicy',
    integrity: 'fetch.integrity',
    keepalive: 'fetch.keepalive',
    signal: 'fetch.signal'
};


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGlobalLoaderOptions: () => (/* binding */ getGlobalLoaderOptions),
/* harmony export */   getGlobalLoaderState: () => (/* binding */ getGlobalLoaderState),
/* harmony export */   normalizeOptions: () => (/* binding */ normalizeOptions),
/* harmony export */   setGlobalOptions: () => (/* binding */ setGlobalOptions)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/module-utils/js-module-utils.js");
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _loggers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loggers.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/loggers.js");
/* harmony import */ var _option_defaults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./option-defaults.js */ "./node_modules/@loaders.gl/core/dist/lib/loader-utils/option-defaults.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * Helper for safely accessing global loaders.gl variables
 * Wraps initialization of global variable in function to defeat overly aggressive tree-shakers
 */
function getGlobalLoaderState() {
    // @ts-ignore
    globalThis.loaders = globalThis.loaders || {};
    // @ts-ignore
    const { loaders } = globalThis;
    // Add _state object to keep separate from modules added to globalThis.loaders
    if (!loaders._state) {
        loaders._state = {};
    }
    return loaders._state;
}
/**
 * Store global loader options on the global object to increase chances of cross loaders-version interoperability
 * NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks
 * @returns global loader options merged with default loader options
 */
function getGlobalLoaderOptions() {
    const state = getGlobalLoaderState();
    // Ensure all default loader options from this library are mentioned
    state.globalOptions = state.globalOptions || { ..._option_defaults_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_LOADER_OPTIONS };
    return state.globalOptions;
}
/**
 * Set global loader options
 * @param options
 */
function setGlobalOptions(options) {
    const state = getGlobalLoaderState();
    const globalOptions = getGlobalLoaderOptions();
    // @ts-expect-error First param looks incorrect
    state.globalOptions = normalizeOptionsInternal(globalOptions, options);
    // Make sure any new modules are registered
    (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__.registerJSModules)(options.modules);
}
/**
 * Merges options with global opts and loader defaults, also injects baseUri
 * @param options
 * @param loader
 * @param loaders
 * @param url
 */
function normalizeOptions(options, loader, loaders, url) {
    loaders = loaders || [];
    loaders = Array.isArray(loaders) ? loaders : [loaders];
    validateOptions(options, loaders);
    return normalizeOptionsInternal(loader, options, url);
}
// VALIDATE OPTIONS
/**
 * Warn for unsupported options
 * @param options
 * @param loaders
 */
function validateOptions(options, loaders) {
    // Check top level options
    validateOptionsObject(options, null, _option_defaults_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_LOADER_OPTIONS, _option_defaults_js__WEBPACK_IMPORTED_MODULE_0__.REMOVED_LOADER_OPTIONS, loaders);
    for (const loader of loaders) {
        // Get the scoped, loader specific options from the user supplied options
        const idOptions = ((options && options[loader.id]) || {});
        // Get scoped, loader specific default and deprecated options from the selected loader
        const loaderOptions = (loader.options && loader.options[loader.id]) || {};
        const deprecatedOptions = (loader.deprecatedOptions && loader.deprecatedOptions[loader.id]) || {};
        // Validate loader specific options
        // @ts-ignore
        validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);
    }
}
// eslint-disable-next-line max-params, complexity
function validateOptionsObject(options, id, defaultOptions, deprecatedOptions, loaders) {
    const loaderName = id || 'Top level';
    const prefix = id ? `${id}.` : '';
    for (const key in options) {
        // If top level option value is an object it could options for a loader, so ignore
        const isSubOptions = !id && (0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(options[key]);
        const isBaseUriOption = key === 'baseUri' && !id;
        const isWorkerUrlOption = key === 'workerUrl' && id;
        // <loader>.workerUrl requires special handling as it is now auto-generated and no longer specified as a default option.
        if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {
            // Issue deprecation warnings
            if (key in deprecatedOptions) {
                _loggers_js__WEBPACK_IMPORTED_MODULE_3__.probeLog.warn(`${loaderName} loader option \'${prefix}${key}\' no longer supported, use \'${deprecatedOptions[key]}\'`)();
            }
            else if (!isSubOptions) {
                const suggestion = findSimilarOption(key, loaders);
                _loggers_js__WEBPACK_IMPORTED_MODULE_3__.probeLog.warn(`${loaderName} loader option \'${prefix}${key}\' not recognized. ${suggestion}`)();
            }
        }
    }
}
function findSimilarOption(optionKey, loaders) {
    const lowerCaseOptionKey = optionKey.toLowerCase();
    let bestSuggestion = '';
    for (const loader of loaders) {
        for (const key in loader.options) {
            if (optionKey === key) {
                return `Did you mean \'${loader.id}.${key}\'?`;
            }
            const lowerCaseKey = key.toLowerCase();
            const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);
            if (isPartialMatch) {
                bestSuggestion = bestSuggestion || `Did you mean \'${loader.id}.${key}\'?`;
            }
        }
    }
    return bestSuggestion;
}
function normalizeOptionsInternal(loader, options, url) {
    const loaderDefaultOptions = loader.options || {};
    const mergedOptions = { ...loaderDefaultOptions };
    addUrlOptions(mergedOptions, url);
    // LOGGING: options.log can be set to `null` to defeat logging
    if (mergedOptions.log === null) {
        mergedOptions.log = new _loggers_js__WEBPACK_IMPORTED_MODULE_3__.NullLog();
    }
    mergeNestedFields(mergedOptions, getGlobalLoaderOptions());
    mergeNestedFields(mergedOptions, options);
    return mergedOptions;
}
// Merge nested options objects
function mergeNestedFields(mergedOptions, options) {
    for (const key in options) {
        // Check for nested options
        // object in options => either no key in defaultOptions or object in defaultOptions
        if (key in options) {
            const value = options[key];
            if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__.isPureObject)(value) && (0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_2__.isPureObject)(mergedOptions[key])) {
                mergedOptions[key] = {
                    ...mergedOptions[key],
                    ...options[key]
                };
            }
            else {
                mergedOptions[key] = options[key];
            }
        }
        // else: No need to merge nested opts, and the initial merge already copied over the nested options
    }
}
/**
 * Harvest information from the url
 * @deprecated This is mainly there to support a hack in the GLTFLoader
 * TODO - baseUri should be a directory, i.e. remove file component from baseUri
 * TODO - extract extension?
 * TODO - extract query parameters?
 * TODO - should these be injected on context instead of options?
 */
function addUrlOptions(options, url) {
    if (url && !('baseUri' in options)) {
        options.baseUri = url;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   log: () => (/* binding */ log)
/* harmony export */ });
/* harmony import */ var _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/log */ "./node_modules/@probe.gl/log/dist/log.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const log = new _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__.Log({ id: 'loaders.gl' });


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/utils/mime-type-utils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/utils/mime-type-utils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareMIMETypes: () => (/* binding */ compareMIMETypes),
/* harmony export */   parseMIMEType: () => (/* binding */ parseMIMEType),
/* harmony export */   parseMIMETypeFromURL: () => (/* binding */ parseMIMETypeFromURL)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// TODO - build/integrate proper MIME type parsing
// https://mimesniff.spec.whatwg.org/
const DATA_URL_PATTERN = /^data:([-\w.]+\/[-\w.+]+)(;|,)/;
const MIME_TYPE_PATTERN = /^([-\w.]+\/[-\w.+]+)/;
/**
 * Compare two MIME types, case insensitively etc.
 * @param mimeType1
 * @param mimeType2
 * @returns true if the MIME types are equivalent
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#structure_of_a_mime_type
 */
function compareMIMETypes(mimeType1, mimeType2) {
    if (mimeType1.toLowerCase() === mimeType2.toLowerCase()) {
        return true;
    }
    return false;
}
/**
 * Remove extra data like `charset` from MIME types
 * @param mimeString
 * @returns A clean MIME type, or an empty string
 *
 * @todo - handle more advanced MIMETYpes, multiple types
 * @todo - extract charset etc
 */
function parseMIMEType(mimeString) {
    // If resource is a data url, extract any embedded mime type
    const matches = MIME_TYPE_PATTERN.exec(mimeString);
    if (matches) {
        return matches[1];
    }
    return mimeString;
}
/**
 * Extract MIME type from data URL
 *
 * @param mimeString
 * @returns A clean MIME type, or an empty string
 *
 * @todo - handle more advanced MIMETYpes, multiple types
 * @todo - extract charset etc
 */
function parseMIMETypeFromURL(url) {
    // If resource is a data URL, extract any embedded mime type
    const matches = DATA_URL_PATTERN.exec(url);
    if (matches) {
        return matches[1];
    }
    return '';
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getResourceContentLength: () => (/* binding */ getResourceContentLength),
/* harmony export */   getResourceMIMEType: () => (/* binding */ getResourceMIMEType),
/* harmony export */   getResourceUrl: () => (/* binding */ getResourceUrl)
/* harmony export */ });
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _mime_type_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mime-type-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/mime-type-utils.js");
/* harmony import */ var _url_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Returns the URL associated with this resource.
 * The returned value may include a query string and need further processing.
 * If it cannot determine url, the corresponding value will be an empty string
 *
 * @todo string parameters are assumed to be URLs
 */
function getResourceUrl(resource) {
    // If resource is a `Response`, it contains the information directly as a field
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isResponse)(resource)) {
        const response = resource;
        return response.url;
    }
    // If the resource is a Blob or a File (subclass of Blob)
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isBlob)(resource)) {
        const blob = resource;
        // File objects have a "name" property. Blob objects don't have any
        // url (name) information
        return blob.name || '';
    }
    if (typeof resource === 'string') {
        return resource;
    }
    // Unknown
    return '';
}
/**
 * Returns the URL associated with this resource.
 * The returned value may include a query string and need further processing.
 * If it cannot determine url, the corresponding value will be an empty string
 *
 * @todo string parameters are assumed to be URLs
 */
function getResourceMIMEType(resource) {
    // If resource is a response, it contains the information directly
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isResponse)(resource)) {
        const response = resource;
        const contentTypeHeader = response.headers.get('content-type') || '';
        const noQueryUrl = (0,_url_utils_js__WEBPACK_IMPORTED_MODULE_1__.stripQueryString)(response.url);
        return (0,_mime_type_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseMIMEType)(contentTypeHeader) || (0,_mime_type_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseMIMETypeFromURL)(noQueryUrl);
    }
    // If the resource is a Blob or a File (subclass of Blob)
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isBlob)(resource)) {
        const blob = resource;
        return blob.type || '';
    }
    if (typeof resource === 'string') {
        return (0,_mime_type_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseMIMETypeFromURL)(resource);
    }
    // Unknown
    return '';
}
/**
  * Returns (approximate) content length for a resource if it can be determined.
  * Returns -1 if content length cannot be determined.
  * @param resource

  * @note string parameters are NOT assumed to be URLs
  */
function getResourceContentLength(resource) {
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isResponse)(resource)) {
        const response = resource;
        return response.headers['content-length'] || -1;
    }
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isBlob)(resource)) {
        const blob = resource;
        return blob.size;
    }
    if (typeof resource === 'string') {
        // TODO - handle data URL?
        return resource.length;
    }
    if (resource instanceof ArrayBuffer) {
        return resource.byteLength;
    }
    if (ArrayBuffer.isView(resource)) {
        return resource.byteLength;
    }
    return -1;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/utils/response-utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/utils/response-utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkResponse: () => (/* binding */ checkResponse),
/* harmony export */   checkResponseSync: () => (/* binding */ checkResponseSync),
/* harmony export */   makeResponse: () => (/* binding */ makeResponse)
/* harmony export */ });
/* harmony import */ var _javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../javascript-utils/is-type.js */ "./node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js");
/* harmony import */ var _fetch_fetch_error_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../fetch/fetch-error.js */ "./node_modules/@loaders.gl/core/dist/lib/fetch/fetch-error.js");
/* harmony import */ var _resource_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resource-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js");
/* harmony import */ var _url_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-utils.js */ "./node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * Returns a Response object
 * Adds content-length header when possible
 *
 * @param resource
 */
async function makeResponse(resource) {
    if ((0,_javascript_utils_is_type_js__WEBPACK_IMPORTED_MODULE_0__.isResponse)(resource)) {
        return resource;
    }
    // Add content-length header if possible
    const headers = {};
    const contentLength = (0,_resource_utils_js__WEBPACK_IMPORTED_MODULE_1__.getResourceContentLength)(resource);
    if (contentLength >= 0) {
        headers['content-length'] = String(contentLength);
    }
    // `new Response(File)` does not preserve content-type and URL
    // so we add them here
    const url = (0,_resource_utils_js__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(resource);
    const type = (0,_resource_utils_js__WEBPACK_IMPORTED_MODULE_1__.getResourceMIMEType)(resource);
    if (type) {
        headers['content-type'] = type;
    }
    // Add a custom header with initial bytes if available
    const initialDataUrl = await getInitialDataUrl(resource);
    if (initialDataUrl) {
        headers['x-first-bytes'] = initialDataUrl;
    }
    // TODO - is this the best way of handling strings?
    // Maybe package as data URL instead?
    if (typeof resource === 'string') {
        // Convert to ArrayBuffer to avoid Response treating it as a URL
        resource = new TextEncoder().encode(resource);
    }
    // Attempt to create a Response from the resource, adding headers and setting url
    const response = new Response(resource, { headers });
    // We can't control `Response.url` via constructor, use a property override to record URL.
    Object.defineProperty(response, 'url', { value: url });
    return response;
}
/**
 * Checks response status (async) and throws a helpful error message if status is not OK.
 * @param response
 */
async function checkResponse(response) {
    if (!response.ok) {
        const error = await getResponseError(response);
        throw error;
    }
}
/**
 * Checks response status (sync) and throws a helpful error message if status is not OK.
 * @param response
 */
function checkResponseSync(response) {
    if (!response.ok) {
        let message = `${response.status} ${response.statusText}`;
        message = message.length > 60 ? `${message.slice(0, 60)}...` : message;
        throw new Error(message);
    }
}
// HELPERS
async function getResponseError(response) {
    const shortUrl = (0,_url_utils_js__WEBPACK_IMPORTED_MODULE_2__.shortenUrlForDisplay)(response.url);
    let message = `Failed to fetch resource (${response.status}) ${response.statusText}: ${shortUrl}`;
    message = message.length > 100 ? `${message.slice(0, 100)}...` : message;
    const info = {
        reason: response.statusText,
        url: response.url,
        response
    };
    try {
        const contentType = response.headers.get('Content-Type');
        info.reason = contentType?.includes('application/json')
            ? await response.json()
            : response.text();
    }
    catch (error) {
        // eslint forbids return in a finally statement, so we just catch here
    }
    return new _fetch_fetch_error_js__WEBPACK_IMPORTED_MODULE_3__.FetchError(message, info);
}
async function getInitialDataUrl(resource) {
    const INITIAL_DATA_LENGTH = 5;
    if (typeof resource === 'string') {
        return `data:,${resource.slice(0, INITIAL_DATA_LENGTH)}`;
    }
    if (resource instanceof Blob) {
        const blobSlice = resource.slice(0, 5);
        return await new Promise((resolve) => {
            const reader = new FileReader();
            reader.onload = (event) => resolve(event?.target?.result);
            reader.readAsDataURL(blobSlice);
        });
    }
    if (resource instanceof ArrayBuffer) {
        const slice = resource.slice(0, INITIAL_DATA_LENGTH);
        const base64 = arrayBufferToBase64(slice);
        return `data:base64,${base64}`;
    }
    return null;
}
// https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string
function arrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    for (let i = 0; i < bytes.byteLength; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
}


/***/ }),

/***/ "./node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extractQueryString: () => (/* binding */ extractQueryString),
/* harmony export */   shortenUrlForDisplay: () => (/* binding */ shortenUrlForDisplay),
/* harmony export */   stripQueryString: () => (/* binding */ stripQueryString)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const QUERY_STRING_PATTERN = /\?.*/;
function extractQueryString(url) {
    const matches = url.match(QUERY_STRING_PATTERN);
    return matches && matches[0];
}
function stripQueryString(url) {
    return url.replace(QUERY_STRING_PATTERN, '');
}
function shortenUrlForDisplay(url) {
    if (url.length < 50) {
        return url;
    }
    const urlEnd = url.slice(url.length - 15);
    const urlStart = url.substr(0, 32);
    return `${urlStart}...${urlEnd}`;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/csv/dist/csv-loader.js":
/*!*********************************************************!*\
  !*** ./node_modules/@loaders.gl/csv/dist/csv-loader.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSVLoader: () => (/* binding */ CSVLoader)
/* harmony export */ });
/* harmony import */ var _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/schema */ "./node_modules/@loaders.gl/schema/dist/lib/table/simple-table/row-utils.js");
/* harmony import */ var _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @loaders.gl/schema */ "./node_modules/@loaders.gl/schema/dist/lib/utils/async-queue.js");
/* harmony import */ var _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @loaders.gl/schema */ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/table-batch-builder.js");
/* harmony import */ var _papaparse_papaparse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./papaparse/papaparse.js */ "./node_modules/@loaders.gl/csv/dist/papaparse/papaparse.js");
/* harmony import */ var _papaparse_async_iterator_streamer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./papaparse/async-iterator-streamer.js */ "./node_modules/@loaders.gl/csv/dist/papaparse/async-iterator-streamer.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



// __VERSION__ is injected by babel-plugin-version-inline
// @ts-ignore TS2304: Cannot find name '__VERSION__'.
const VERSION =  true ? "4.2.1" : 0;
const DEFAULT_CSV_SHAPE = 'object-row-table';
const CSVLoader = {
    dataType: null,
    batchType: null,
    id: 'csv',
    module: 'csv',
    name: 'CSV',
    version: VERSION,
    extensions: ['csv', 'tsv', 'dsv'],
    mimeTypes: ['text/csv', 'text/tab-separated-values', 'text/dsv'],
    category: 'table',
    parse: async (arrayBuffer, options) => parseCSV(new TextDecoder().decode(arrayBuffer), options),
    parseText: (text, options) => parseCSV(text, options),
    parseInBatches: parseCSVInBatches,
    // @ts-ignore
    // testText: null,
    options: {
        csv: {
            shape: DEFAULT_CSV_SHAPE, // 'object-row-table'
            optimizeMemoryUsage: false,
            // CSV options
            header: 'auto',
            columnPrefix: 'column',
            // delimiter: auto
            // newline: auto
            quoteChar: '"',
            escapeChar: '"',
            dynamicTyping: true,
            comments: false,
            skipEmptyLines: true,
            // transform: null?
            delimitersToGuess: [',', '\t', '|', ';']
            // fastMode: auto
        }
    }
};
async function parseCSV(csvText, options) {
    // Apps can call the parse method directly, we so apply default options here
    const csvOptions = { ...CSVLoader.options.csv, ...options?.csv };
    const firstRow = readFirstRow(csvText);
    const header = csvOptions.header === 'auto' ? isHeaderRow(firstRow) : Boolean(csvOptions.header);
    const parseWithHeader = header;
    const papaparseConfig = {
        // dynamicTyping: true,
        ...csvOptions,
        header: parseWithHeader,
        download: false, // We handle loading, no need for papaparse to do it for us
        transformHeader: parseWithHeader ? duplicateColumnTransformer() : undefined,
        error: (e) => {
            throw new Error(e);
        }
    };
    const result = _papaparse_papaparse_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(csvText, papaparseConfig);
    const rows = result.data;
    const headerRow = result.meta.fields || generateHeader(csvOptions.columnPrefix, firstRow.length);
    const shape = csvOptions.shape || DEFAULT_CSV_SHAPE;
    switch (shape) {
        case 'object-row-table':
            return {
                shape: 'object-row-table',
                data: rows.map((row) => (Array.isArray(row) ? (0,_loaders_gl_schema__WEBPACK_IMPORTED_MODULE_1__.convertToObjectRow)(row, headerRow) : row))
            };
        case 'array-row-table':
            return {
                shape: 'array-row-table',
                data: rows.map((row) => (Array.isArray(row) ? row : (0,_loaders_gl_schema__WEBPACK_IMPORTED_MODULE_1__.convertToArrayRow)(row, headerRow)))
            };
        default:
            throw new Error(shape);
    }
}
// TODO - support batch size 0 = no batching/single batch?
function parseCSVInBatches(asyncIterator, options) {
    // Papaparse does not support standard batch size handling
    // TODO - investigate papaparse chunks mode
    options = { ...options };
    if (options.batchSize === 'auto') {
        options.batchSize = 4000;
    }
    // Apps can call the parse method directly, we so apply default options here
    const csvOptions = { ...CSVLoader.options.csv, ...options?.csv };
    const asyncQueue = new _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_2__["default"]();
    let isFirstRow = true;
    let headerRow = null;
    let tableBatchBuilder = null;
    let schema = null;
    const config = {
        // dynamicTyping: true, // Convert numbers and boolean values in rows from strings,
        ...csvOptions,
        header: false, // Unfortunately, header detection is not automatic and does not infer shapes
        download: false, // We handle loading, no need for papaparse to do it for us
        // chunkSize is set to 5MB explicitly (same as Papaparse default) due to a bug where the
        // streaming parser gets stuck if skipEmptyLines and a step callback are both supplied.
        // See https://github.com/mholt/PapaParse/issues/465
        chunkSize: 1024 * 1024 * 5,
        // skipEmptyLines is set to a boolean value if supplied. Greedy is set to true
        // skipEmptyLines is handled manually given two bugs where the streaming parser gets stuck if
        // both of the skipEmptyLines and step callback options are provided:
        // - true doesn't work unless chunkSize is set: https://github.com/mholt/PapaParse/issues/465
        // - greedy doesn't work: https://github.com/mholt/PapaParse/issues/825
        skipEmptyLines: false,
        // step is called on every row
        // eslint-disable-next-line complexity, max-statements
        step(results) {
            let row = results.data;
            if (csvOptions.skipEmptyLines) {
                // Manually reject lines that are empty
                const collapsedRow = row.flat().join('').trim();
                if (collapsedRow === '') {
                    return;
                }
            }
            const bytesUsed = results.meta.cursor;
            // Check if we need to save a header row
            if (isFirstRow && !headerRow) {
                // Auto detects or can be forced with csvOptions.header
                const header = csvOptions.header === 'auto' ? isHeaderRow(row) : Boolean(csvOptions.header);
                if (header) {
                    headerRow = row.map(duplicateColumnTransformer());
                    return;
                }
            }
            // If first data row, we can deduce the schema
            if (isFirstRow) {
                isFirstRow = false;
                if (!headerRow) {
                    headerRow = generateHeader(csvOptions.columnPrefix, row.length);
                }
                schema = deduceSchema(row, headerRow);
            }
            if (csvOptions.optimizeMemoryUsage) {
                // A workaround to allocate new strings and don't retain pointers to original strings.
                // https://bugs.chromium.org/p/v8/issues/detail?id=2869
                row = JSON.parse(JSON.stringify(row));
            }
            const shape = csvOptions.shape || DEFAULT_CSV_SHAPE;
            // Add the row
            tableBatchBuilder =
                tableBatchBuilder ||
                    new _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_3__.TableBatchBuilder(
                    // @ts-expect-error TODO this is not a proper schema
                    schema, {
                        shape,
                        ...options
                    });
            try {
                tableBatchBuilder.addRow(row);
                // If a batch has been completed, emit it
                const batch = tableBatchBuilder && tableBatchBuilder.getFullBatch({ bytesUsed });
                if (batch) {
                    asyncQueue.enqueue(batch);
                }
            }
            catch (error) {
                asyncQueue.enqueue(error);
            }
        },
        // complete is called when all rows have been read
        complete(results) {
            try {
                const bytesUsed = results.meta.cursor;
                // Ensure any final (partial) batch gets emitted
                const batch = tableBatchBuilder && tableBatchBuilder.getFinalBatch({ bytesUsed });
                if (batch) {
                    asyncQueue.enqueue(batch);
                }
            }
            catch (error) {
                asyncQueue.enqueue(error);
            }
            asyncQueue.close();
        }
    };
    _papaparse_papaparse_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(asyncIterator, config, _papaparse_async_iterator_streamer_js__WEBPACK_IMPORTED_MODULE_4__["default"]);
    // TODO - Does it matter if we return asyncIterable or asyncIterator
    // return asyncQueue[Symbol.asyncIterator]();
    return asyncQueue;
}
/**
 * Checks if a certain row is a header row
 * @param row the row to check
 * @returns true if the row looks like a header
 */
function isHeaderRow(row) {
    return row && row.every((value) => typeof value === 'string');
}
/**
 * Reads, parses, and returns the first row of a CSV text
 * @param csvText the csv text to parse
 * @returns the first row
 */
function readFirstRow(csvText) {
    const result = _papaparse_papaparse_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(csvText, {
        download: false,
        dynamicTyping: true,
        preview: 1
    });
    return result.data[0];
}
/**
 * Creates a transformer that renames duplicate columns. This is needed as Papaparse doesn't handle
 * duplicate header columns and would use the latest occurrence by default.
 * See the header option in https://www.papaparse.com/docs#config
 * @returns a transform function that returns sanitized names for duplicate fields
 */
function duplicateColumnTransformer() {
    const observedColumns = new Set();
    return (col) => {
        let colName = col;
        let counter = 1;
        while (observedColumns.has(colName)) {
            colName = `${col}.${counter}`;
            counter++;
        }
        observedColumns.add(colName);
        return colName;
    };
}
/**
 * Generates the header of a CSV given a prefix and a column count
 * @param columnPrefix the columnPrefix to use
 * @param count the count of column names to generate
 * @returns an array of column names
 */
function generateHeader(columnPrefix, count = 0) {
    const headers = [];
    for (let i = 0; i < count; i++) {
        headers.push(`${columnPrefix}${i + 1}`);
    }
    return headers;
}
function deduceSchema(row, headerRow) {
    const schema = headerRow ? {} : [];
    for (let i = 0; i < row.length; i++) {
        const columnName = (headerRow && headerRow[i]) || i;
        const value = row[i];
        switch (typeof value) {
            case 'number':
            case 'boolean':
                // TODO - booleans could be handled differently...
                schema[columnName] = { name: String(columnName), index: i, type: Float32Array };
                break;
            case 'string':
            default:
                schema[columnName] = { name: String(columnName), index: i, type: Array };
            // We currently only handle numeric rows
            // TODO we could offer a function to map strings to numbers?
        }
    }
    return schema;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/csv/dist/papaparse/async-iterator-streamer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/csv/dist/papaparse/async-iterator-streamer.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AsyncIteratorStreamer)
/* harmony export */ });
/* harmony import */ var _papaparse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./papaparse.js */ "./node_modules/@loaders.gl/csv/dist/papaparse/papaparse.js");
// @ts-nocheck
// A custom papaparse `Streamer` for async iterators
// Ideally this can be contributed back to papaparse
// Or papaparse can expose Streamer API so we can extend without forking.
/* eslint-disable no-invalid-this */
// Note: papaparse is not an ES6 module

const { ChunkStreamer } = _papaparse_js__WEBPACK_IMPORTED_MODULE_0__["default"];
function AsyncIteratorStreamer(config) {
    config = config || {};
    ChunkStreamer.call(this, config);
    this.textDecoder = new TextDecoder(this._config.encoding);
    // Implement ChunkStreamer base class methods
    // this.pause = function() {
    //   ChunkStreamer.prototype.pause.apply(this, arguments);
    // };
    // this.resume = function() {
    //   ChunkStreamer.prototype.resume.apply(this, arguments);
    //   this._input.resume();
    // };
    this.stream = async function (asyncIterator) {
        this._input = asyncIterator;
        try {
            // ES2018 version
            // TODO - check for pause and abort flags?
            for await (const chunk of asyncIterator) {
                this.parseChunk(this.getStringChunk(chunk));
            }
            // ES5 VERSION
            // while (true) {
            //   asyncIterator.next().then(function(value) {
            //     if (value.done) {
            //       // finalize iterator?
            //     }
            //   }
            //   const  = await ;
            //   if (done) return total;
            //   total += value.length;
            // }
            this._finished = true;
            this.parseChunk('');
        }
        catch (error) {
            // Inform ChunkStreamer base class of error
            this._sendError(error);
        }
    };
    this._nextChunk = function nextChunk() {
        // Left empty, as async iterator automatically pulls next chunk
    };
    // HELPER METHODS
    this.getStringChunk = function (chunk) {
        return typeof chunk === 'string' ? chunk : this.textDecoder.decode(chunk, { stream: true });
    };
}
AsyncIteratorStreamer.prototype = Object.create(ChunkStreamer.prototype);
AsyncIteratorStreamer.prototype.constructor = AsyncIteratorStreamer;


/***/ }),

/***/ "./node_modules/@loaders.gl/csv/dist/papaparse/papaparse.js":
/*!******************************************************************!*\
  !*** ./node_modules/@loaders.gl/csv/dist/papaparse/papaparse.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// @ts-nocheck
// This is a fork of papaparse
// https://github.com/mholt/PapaParse
/* @license
Papa Parse
v5.0.0-beta.0
https://github.com/mholt/PapaParse
License: MIT
*/
// FORK SUMMARY:
// - Adopt ES6 exports
// - Implement new AsyncIteratorStreamer
// - Remove non Async Iterator streamers (can all be handled by new streamer)
// - Remove unused Worker support (loaders.gl worker system used instead)
// - Remove unused jQuery plugin support
/* eslint-disable */
const BYTE_ORDER_MARK = '\ufeff';
const Papa = {
    parse: CsvToJson,
    unparse: JsonToCsv,
    RECORD_SEP: String.fromCharCode(30),
    UNIT_SEP: String.fromCharCode(31),
    BYTE_ORDER_MARK,
    BAD_DELIMITERS: ['\r', '\n', '"', BYTE_ORDER_MARK],
    WORKERS_SUPPORTED: false, // !IS_WORKER && !!globalThis.Worker
    NODE_STREAM_INPUT: 1,
    // Configurable chunk sizes for local and remote files, respectively
    LocalChunkSize: 1024 * 1024 * 10, // 10 M,
    RemoteChunkSize: 1024 * 1024 * 5, // 5 M,
    DefaultDelimiter: ',', // Used if not specified and detection fail,
    // Exposed for testing and development only
    Parser: Parser,
    ParserHandle: ParserHandle,
    // BEGIN FORK
    ChunkStreamer: ChunkStreamer,
    StringStreamer: StringStreamer
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Papa);
/*
Papa.NetworkStreamer = NetworkStreamer;
Papa.FileStreamer = FileStreamer;
Papa.ReadableStreamStreamer = ReadableStreamStreamer;
if (typeof PAPA_BROWSER_CONTEXT === 'undefined') {
  Papa.DuplexStreamStreamer = DuplexStreamStreamer;
}
*/
// END FORK
// BEGIN FORK
// Adds an argument to papa.parse
// function CsvToJson(_input, _config)
function CsvToJson(_input, _config, UserDefinedStreamer // BEGIN FORK
) {
    _config = _config || {};
    var dynamicTyping = _config.dynamicTyping || false;
    if (isFunction(dynamicTyping)) {
        _config.dynamicTypingFunction = dynamicTyping;
        // Will be filled on first row call
        dynamicTyping = {};
    }
    _config.dynamicTyping = dynamicTyping;
    _config.transform = isFunction(_config.transform) ? _config.transform : false;
    if (_config.worker && Papa.WORKERS_SUPPORTED) {
        var w = newWorker();
        w.userStep = _config.step;
        w.userChunk = _config.chunk;
        w.userComplete = _config.complete;
        w.userError = _config.error;
        _config.step = isFunction(_config.step);
        _config.chunk = isFunction(_config.chunk);
        _config.complete = isFunction(_config.complete);
        _config.error = isFunction(_config.error);
        delete _config.worker; // prevent infinite loop
        w.postMessage({
            input: _input,
            config: _config,
            workerId: w.id
        });
        return;
    }
    var streamer = null;
    /*
    if (_input === Papa.NODE_STREAM_INPUT && typeof PAPA_BROWSER_CONTEXT === 'undefined') {
      // create a node Duplex stream for use
      // with .pipe
      streamer = new DuplexStreamStreamer(_config);
      return streamer.getStream();
    } else
    */
    if (typeof _input === 'string') {
        // if (_config.download) streamer = new NetworkStreamer(_config);
        // else
        streamer = new StringStreamer(_config);
    }
    /*
    else if (_input.readable === true && isFunction(_input.read) && isFunction(_input.on)) {
      streamer = new ReadableStreamStreamer(_config);
    } else if ((globalThis.File && _input instanceof File) || _input instanceof Object)
      // ...Safari. (see issue #106)
      streamer = new FileStreamer(_config);
    */
    // BEGIN FORK
    if (!streamer) {
        streamer = new UserDefinedStreamer(_config);
    }
    // END FORK
    return streamer.stream(_input);
}
function JsonToCsv(_input, _config) {
    // Default configuration
    /** whether to surround every datum with quotes */
    var _quotes = false;
    /** whether to write headers */
    var _writeHeader = true;
    /** delimiting character(s) */
    var _delimiter = ',';
    /** newline character(s) */
    var _newline = '\r\n';
    /** quote character */
    var _quoteChar = '"';
    /** escaped quote character, either "" or <config.escapeChar>" */
    var _escapedQuote = _quoteChar + _quoteChar;
    /** whether to skip empty lines */
    var _skipEmptyLines = false;
    /** the columns (keys) we expect when we unparse objects */
    var _columns = null;
    unpackConfig();
    var quoteCharRegex = new RegExp(escapeRegExp(_quoteChar), 'g');
    if (typeof _input === 'string')
        _input = JSON.parse(_input);
    if (Array.isArray(_input)) {
        if (!_input.length || Array.isArray(_input[0]))
            return serialize(null, _input, _skipEmptyLines);
        else if (typeof _input[0] === 'object')
            return serialize(_columns || objectKeys(_input[0]), _input, _skipEmptyLines);
    }
    else if (typeof _input === 'object') {
        if (typeof _input.data === 'string')
            _input.data = JSON.parse(_input.data);
        if (Array.isArray(_input.data)) {
            if (!_input.fields)
                _input.fields = _input.meta && _input.meta.fields;
            if (!_input.fields)
                _input.fields = Array.isArray(_input.data[0]) ? _input.fields : objectKeys(_input.data[0]);
            if (!Array.isArray(_input.data[0]) && typeof _input.data[0] !== 'object')
                _input.data = [_input.data]; // handles input like [1,2,3] or ['asdf']
        }
        return serialize(_input.fields || [], _input.data || [], _skipEmptyLines);
    }
    // Default (any valid paths should return before this)
    throw new Error('Unable to serialize unrecognized input');
    function unpackConfig() {
        if (typeof _config !== 'object')
            return;
        if (typeof _config.delimiter === 'string' &&
            !Papa.BAD_DELIMITERS.filter(function (value) {
                return _config.delimiter.indexOf(value) !== -1;
            }).length) {
            _delimiter = _config.delimiter;
        }
        if (typeof _config.quotes === 'boolean' || Array.isArray(_config.quotes))
            _quotes = _config.quotes;
        if (typeof _config.skipEmptyLines === 'boolean' || typeof _config.skipEmptyLines === 'string')
            _skipEmptyLines = _config.skipEmptyLines;
        if (typeof _config.newline === 'string')
            _newline = _config.newline;
        if (typeof _config.quoteChar === 'string')
            _quoteChar = _config.quoteChar;
        if (typeof _config.header === 'boolean')
            _writeHeader = _config.header;
        if (Array.isArray(_config.columns)) {
            if (_config.columns.length === 0)
                throw new Error('Option columns is empty');
            _columns = _config.columns;
        }
        if (_config.escapeChar !== undefined) {
            _escapedQuote = _config.escapeChar + _quoteChar;
        }
    }
    /** Turns an object's keys into an array */
    function objectKeys(obj) {
        if (typeof obj !== 'object')
            return [];
        var keys = [];
        for (var key in obj)
            keys.push(key);
        return keys;
    }
    /** The double for loop that iterates the data and writes out a CSV string including header row */
    function serialize(fields, data, skipEmptyLines) {
        var csv = '';
        if (typeof fields === 'string')
            fields = JSON.parse(fields);
        if (typeof data === 'string')
            data = JSON.parse(data);
        var hasHeader = Array.isArray(fields) && fields.length > 0;
        var dataKeyedByField = !Array.isArray(data[0]);
        // If there a header row, write it first
        if (hasHeader && _writeHeader) {
            for (var i = 0; i < fields.length; i++) {
                if (i > 0)
                    csv += _delimiter;
                csv += safe(fields[i], i);
            }
            if (data.length > 0)
                csv += _newline;
        }
        // Then write out the data
        for (var row = 0; row < data.length; row++) {
            var maxCol = hasHeader ? fields.length : data[row].length;
            var emptyLine = false;
            var nullLine = hasHeader ? Object.keys(data[row]).length === 0 : data[row].length === 0;
            if (skipEmptyLines && !hasHeader) {
                emptyLine =
                    skipEmptyLines === 'greedy'
                        ? data[row].join('').trim() === ''
                        : data[row].length === 1 && data[row][0].length === 0;
            }
            if (skipEmptyLines === 'greedy' && hasHeader) {
                var line = [];
                for (var c = 0; c < maxCol; c++) {
                    var cx = dataKeyedByField ? fields[c] : c;
                    line.push(data[row][cx]);
                }
                emptyLine = line.join('').trim() === '';
            }
            if (!emptyLine) {
                for (var col = 0; col < maxCol; col++) {
                    if (col > 0 && !nullLine)
                        csv += _delimiter;
                    var colIdx = hasHeader && dataKeyedByField ? fields[col] : col;
                    csv += safe(data[row][colIdx], col);
                }
                if (row < data.length - 1 && (!skipEmptyLines || (maxCol > 0 && !nullLine))) {
                    csv += _newline;
                }
            }
        }
        return csv;
    }
    /** Encloses a value around quotes if needed (makes a value safe for CSV insertion) */
    function safe(str, col) {
        if (typeof str === 'undefined' || str === null)
            return '';
        if (str.constructor === Date)
            return JSON.stringify(str).slice(1, 25);
        str = str.toString().replace(quoteCharRegex, _escapedQuote);
        var needsQuotes = (typeof _quotes === 'boolean' && _quotes) ||
            (Array.isArray(_quotes) && _quotes[col]) ||
            hasAny(str, Papa.BAD_DELIMITERS) ||
            str.indexOf(_delimiter) > -1 ||
            str.charAt(0) === ' ' ||
            str.charAt(str.length - 1) === ' ';
        return needsQuotes ? _quoteChar + str + _quoteChar : str;
    }
    function hasAny(str, substrings) {
        for (var i = 0; i < substrings.length; i++)
            if (str.indexOf(substrings[i]) > -1)
                return true;
        return false;
    }
}
/** ChunkStreamer is the base prototype for various streamer implementations. */
function ChunkStreamer(config) {
    this._handle = null;
    this._finished = false;
    this._completed = false;
    this._input = null;
    this._baseIndex = 0;
    this._partialLine = '';
    this._rowCount = 0;
    this._start = 0;
    this._nextChunk = null;
    this.isFirstChunk = true;
    this._completeResults = {
        data: [],
        errors: [],
        meta: {}
    };
    replaceConfig.call(this, config);
    this.parseChunk = function (chunk, isFakeChunk) {
        // First chunk pre-processing
        if (this.isFirstChunk && isFunction(this._config.beforeFirstChunk)) {
            var modifiedChunk = this._config.beforeFirstChunk(chunk);
            if (modifiedChunk !== undefined)
                chunk = modifiedChunk;
        }
        this.isFirstChunk = false;
        // Rejoin the line we likely just split in two by chunking the file
        var aggregate = this._partialLine + chunk;
        this._partialLine = '';
        var results = this._handle.parse(aggregate, this._baseIndex, !this._finished);
        if (this._handle.paused() || this._handle.aborted())
            return;
        var lastIndex = results.meta.cursor;
        if (!this._finished) {
            this._partialLine = aggregate.substring(lastIndex - this._baseIndex);
            this._baseIndex = lastIndex;
        }
        if (results && results.data)
            this._rowCount += results.data.length;
        var finishedIncludingPreview = this._finished || (this._config.preview && this._rowCount >= this._config.preview);
        if (isFunction(this._config.chunk) && !isFakeChunk) {
            this._config.chunk(results, this._handle);
            if (this._handle.paused() || this._handle.aborted())
                return;
            results = undefined;
            this._completeResults = undefined;
        }
        if (!this._config.step && !this._config.chunk) {
            this._completeResults.data = this._completeResults.data.concat(results.data);
            this._completeResults.errors = this._completeResults.errors.concat(results.errors);
            this._completeResults.meta = results.meta;
        }
        if (!this._completed &&
            finishedIncludingPreview &&
            isFunction(this._config.complete) &&
            (!results || !results.meta.aborted)) {
            this._config.complete(this._completeResults, this._input);
            this._completed = true;
        }
        if (!finishedIncludingPreview && (!results || !results.meta.paused))
            this._nextChunk();
        return results;
    };
    this._sendError = function (error) {
        if (isFunction(this._config.error))
            this._config.error(error);
    };
    function replaceConfig(config) {
        // Deep-copy the config so we can edit it
        var configCopy = copy(config);
        configCopy.chunkSize = parseInt(configCopy.chunkSize); // parseInt VERY important so we don't concatenate strings!
        if (!config.step && !config.chunk)
            configCopy.chunkSize = null; // disable Range header if not streaming; bad values break IIS - see issue #196
        this._handle = new ParserHandle(configCopy);
        this._handle.streamer = this;
        this._config = configCopy; // persist the copy to the caller
    }
}
function StringStreamer(config) {
    config = config || {};
    ChunkStreamer.call(this, config);
    var remaining;
    this.stream = function (s) {
        remaining = s;
        return this._nextChunk();
    };
    this._nextChunk = function () {
        if (this._finished)
            return;
        var size = this._config.chunkSize;
        var chunk = size ? remaining.substr(0, size) : remaining;
        remaining = size ? remaining.substr(size) : '';
        this._finished = !remaining;
        return this.parseChunk(chunk);
    };
}
StringStreamer.prototype = Object.create(StringStreamer.prototype);
StringStreamer.prototype.constructor = StringStreamer;
// Use one ParserHandle per entire CSV file or string
function ParserHandle(_config) {
    // One goal is to minimize the use of regular expressions...
    var FLOAT = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i;
    var ISO_DATE = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
    var self = this;
    var _stepCounter = 0; // Number of times step was called (number of rows parsed)
    var _rowCounter = 0; // Number of rows that have been parsed so far
    var _input; // The input being parsed
    var _parser; // The core parser being used
    var _paused = false; // Whether we are paused or not
    var _aborted = false; // Whether the parser has aborted or not
    var _delimiterError; // Temporary state between delimiter detection and processing results
    var _fields = []; // Fields are from the header row of the input, if there is one
    var _results = {
        // The last results returned from the parser
        data: [],
        errors: [],
        meta: {}
    };
    if (isFunction(_config.step)) {
        var userStep = _config.step;
        _config.step = function (results) {
            _results = results;
            if (needsHeaderRow())
                processResults();
            // only call user's step function after header row
            else {
                processResults();
                // It's possbile that this line was empty and there's no row here after all
                if (!_results.data || _results.data.length === 0)
                    return;
                _stepCounter += results.data.length;
                if (_config.preview && _stepCounter > _config.preview)
                    _parser.abort();
                else
                    userStep(_results, self);
            }
        };
    }
    /**
     * Parses input. Most users won't need, and shouldn't mess with, the baseIndex
     * and ignoreLastRow parameters. They are used by streamers (wrapper functions)
     * when an input comes in multiple chunks, like from a file.
     */
    this.parse = function (input, baseIndex, ignoreLastRow) {
        var quoteChar = _config.quoteChar || '"';
        if (!_config.newline)
            _config.newline = guessLineEndings(input, quoteChar);
        _delimiterError = false;
        if (!_config.delimiter) {
            var delimGuess = guessDelimiter(input, _config.newline, _config.skipEmptyLines, _config.comments, _config.delimitersToGuess);
            if (delimGuess.successful)
                _config.delimiter = delimGuess.bestDelimiter;
            else {
                _delimiterError = true; // add error after parsing (otherwise it would be overwritten)
                _config.delimiter = Papa.DefaultDelimiter;
            }
            _results.meta.delimiter = _config.delimiter;
        }
        else if (isFunction(_config.delimiter)) {
            _config.delimiter = _config.delimiter(input);
            _results.meta.delimiter = _config.delimiter;
        }
        var parserConfig = copy(_config);
        if (_config.preview && _config.header)
            parserConfig.preview++; // to compensate for header row
        _input = input;
        _parser = new Parser(parserConfig);
        _results = _parser.parse(_input, baseIndex, ignoreLastRow);
        processResults();
        return _paused ? { meta: { paused: true } } : _results || { meta: { paused: false } };
    };
    this.paused = function () {
        return _paused;
    };
    this.pause = function () {
        _paused = true;
        _parser.abort();
        _input = _input.substr(_parser.getCharIndex());
    };
    this.resume = function () {
        _paused = false;
        self.streamer.parseChunk(_input, true);
    };
    this.aborted = function () {
        return _aborted;
    };
    this.abort = function () {
        _aborted = true;
        _parser.abort();
        _results.meta.aborted = true;
        if (isFunction(_config.complete))
            _config.complete(_results);
        _input = '';
    };
    function testEmptyLine(s) {
        return _config.skipEmptyLines === 'greedy'
            ? s.join('').trim() === ''
            : s.length === 1 && s[0].length === 0;
    }
    function processResults() {
        if (_results && _delimiterError) {
            addError('Delimiter', 'UndetectableDelimiter', "Unable to auto-detect delimiting character; defaulted to '" + Papa.DefaultDelimiter + "'");
            _delimiterError = false;
        }
        if (_config.skipEmptyLines) {
            for (var i = 0; i < _results.data.length; i++)
                if (testEmptyLine(_results.data[i]))
                    _results.data.splice(i--, 1);
        }
        if (needsHeaderRow())
            fillHeaderFields();
        return applyHeaderAndDynamicTypingAndTransformation();
    }
    function needsHeaderRow() {
        return _config.header && _fields.length === 0;
    }
    function fillHeaderFields() {
        if (!_results)
            return;
        function addHeder(header) {
            if (isFunction(_config.transformHeader))
                header = _config.transformHeader(header);
            _fields.push(header);
        }
        if (Array.isArray(_results.data[0])) {
            for (var i = 0; needsHeaderRow() && i < _results.data.length; i++)
                _results.data[i].forEach(addHeder);
            _results.data.splice(0, 1);
        }
        // if _results.data[0] is not an array, we are in a step where _results.data is the row.
        else
            _results.data.forEach(addHeder);
    }
    function shouldApplyDynamicTyping(field) {
        // Cache function values to avoid calling it for each row
        if (_config.dynamicTypingFunction && _config.dynamicTyping[field] === undefined) {
            _config.dynamicTyping[field] = _config.dynamicTypingFunction(field);
        }
        return (_config.dynamicTyping[field] || _config.dynamicTyping) === true;
    }
    function parseDynamic(field, value) {
        if (shouldApplyDynamicTyping(field)) {
            if (value === 'true' || value === 'TRUE')
                return true;
            else if (value === 'false' || value === 'FALSE')
                return false;
            else if (FLOAT.test(value))
                return parseFloat(value);
            else if (ISO_DATE.test(value))
                return new Date(value);
            else
                return value === '' ? null : value;
        }
        return value;
    }
    function applyHeaderAndDynamicTypingAndTransformation() {
        if (!_results ||
            !_results.data ||
            (!_config.header && !_config.dynamicTyping && !_config.transform))
            return _results;
        function processRow(rowSource, i) {
            var row = _config.header ? {} : [];
            var j;
            for (j = 0; j < rowSource.length; j++) {
                var field = j;
                var value = rowSource[j];
                if (_config.header)
                    field = j >= _fields.length ? '__parsed_extra' : _fields[j];
                if (_config.transform)
                    value = _config.transform(value, field);
                value = parseDynamic(field, value);
                if (field === '__parsed_extra') {
                    row[field] = row[field] || [];
                    row[field].push(value);
                }
                else
                    row[field] = value;
            }
            if (_config.header) {
                if (j > _fields.length)
                    addError('FieldMismatch', 'TooManyFields', 'Too many fields: expected ' + _fields.length + ' fields but parsed ' + j, _rowCounter + i);
                else if (j < _fields.length)
                    addError('FieldMismatch', 'TooFewFields', 'Too few fields: expected ' + _fields.length + ' fields but parsed ' + j, _rowCounter + i);
            }
            return row;
        }
        var incrementBy = 1;
        if (!_results.data[0] || Array.isArray(_results.data[0])) {
            _results.data = _results.data.map(processRow);
            incrementBy = _results.data.length;
        }
        else
            _results.data = processRow(_results.data, 0);
        if (_config.header && _results.meta)
            _results.meta.fields = _fields;
        _rowCounter += incrementBy;
        return _results;
    }
    function guessDelimiter(input, newline, skipEmptyLines, comments, delimitersToGuess) {
        var bestDelim, bestDelta, fieldCountPrevRow;
        delimitersToGuess = delimitersToGuess || [',', '\t', '|', ';', Papa.RECORD_SEP, Papa.UNIT_SEP];
        for (var i = 0; i < delimitersToGuess.length; i++) {
            var delim = delimitersToGuess[i];
            var delta = 0, avgFieldCount = 0, emptyLinesCount = 0;
            fieldCountPrevRow = undefined;
            var preview = new Parser({
                comments: comments,
                delimiter: delim,
                newline: newline,
                preview: 10
            }).parse(input);
            for (var j = 0; j < preview.data.length; j++) {
                if (skipEmptyLines && testEmptyLine(preview.data[j])) {
                    emptyLinesCount++;
                    continue;
                }
                var fieldCount = preview.data[j].length;
                avgFieldCount += fieldCount;
                if (typeof fieldCountPrevRow === 'undefined') {
                    fieldCountPrevRow = 0;
                    continue;
                }
                else if (fieldCount > 1) {
                    delta += Math.abs(fieldCount - fieldCountPrevRow);
                    fieldCountPrevRow = fieldCount;
                }
            }
            if (preview.data.length > 0)
                avgFieldCount /= preview.data.length - emptyLinesCount;
            if ((typeof bestDelta === 'undefined' || delta > bestDelta) && avgFieldCount > 1.99) {
                bestDelta = delta;
                bestDelim = delim;
            }
        }
        _config.delimiter = bestDelim;
        return {
            successful: !!bestDelim,
            bestDelimiter: bestDelim
        };
    }
    function guessLineEndings(input, quoteChar) {
        input = input.substr(0, 1024 * 1024); // max length 1 MB
        // Replace all the text inside quotes
        var re = new RegExp(escapeRegExp(quoteChar) + '([^]*?)' + escapeRegExp(quoteChar), 'gm');
        input = input.replace(re, '');
        var r = input.split('\r');
        var n = input.split('\n');
        var nAppearsFirst = n.length > 1 && n[0].length < r[0].length;
        if (r.length === 1 || nAppearsFirst)
            return '\n';
        var numWithN = 0;
        for (var i = 0; i < r.length; i++) {
            if (r[i][0] === '\n')
                numWithN++;
        }
        return numWithN >= r.length / 2 ? '\r\n' : '\r';
    }
    function addError(type, code, msg, row) {
        _results.errors.push({
            type: type,
            code: code,
            message: msg,
            row: row
        });
    }
}
/** https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions */
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
/** The core parser implements speedy and correct CSV parsing */
function Parser(config) {
    // Unpack the config object
    config = config || {};
    var delim = config.delimiter;
    var newline = config.newline;
    var comments = config.comments;
    var step = config.step;
    var preview = config.preview;
    var fastMode = config.fastMode;
    var quoteChar;
    /** Allows for no quoteChar by setting quoteChar to undefined in config */
    if (config.quoteChar === undefined) {
        quoteChar = '"';
    }
    else {
        quoteChar = config.quoteChar;
    }
    var escapeChar = quoteChar;
    if (config.escapeChar !== undefined) {
        escapeChar = config.escapeChar;
    }
    // Delimiter must be valid
    if (typeof delim !== 'string' || Papa.BAD_DELIMITERS.indexOf(delim) > -1)
        delim = ',';
    // Comment character must be valid
    if (comments === delim)
        throw new Error('Comment character same as delimiter');
    else if (comments === true)
        comments = '#';
    else if (typeof comments !== 'string' || Papa.BAD_DELIMITERS.indexOf(comments) > -1)
        comments = false;
    // Newline must be valid: \r, \n, or \r\n
    if (newline !== '\n' && newline !== '\r' && newline !== '\r\n')
        newline = '\n';
    // We're gonna need these at the Parser scope
    var cursor = 0;
    var aborted = false;
    this.parse = function (input, baseIndex, ignoreLastRow) {
        // For some reason, in Chrome, this speeds things up (!?)
        if (typeof input !== 'string')
            throw new Error('Input must be a string');
        // We don't need to compute some of these every time parse() is called,
        // but having them in a more local scope seems to perform better
        var inputLen = input.length, delimLen = delim.length, newlineLen = newline.length, commentsLen = comments.length;
        var stepIsFunction = isFunction(step);
        // Establish starting state
        cursor = 0;
        var data = [], errors = [], row = [], lastCursor = 0;
        if (!input)
            return returnable();
        if (fastMode || (fastMode !== false && input.indexOf(quoteChar) === -1)) {
            var rows = input.split(newline);
            for (var i = 0; i < rows.length; i++) {
                row = rows[i];
                cursor += row.length;
                if (i !== rows.length - 1)
                    cursor += newline.length;
                else if (ignoreLastRow)
                    return returnable();
                if (comments && row.substr(0, commentsLen) === comments)
                    continue;
                if (stepIsFunction) {
                    data = [];
                    pushRow(row.split(delim));
                    doStep();
                    if (aborted)
                        return returnable();
                }
                else
                    pushRow(row.split(delim));
                if (preview && i >= preview) {
                    data = data.slice(0, preview);
                    return returnable(true);
                }
            }
            return returnable();
        }
        var nextDelim = input.indexOf(delim, cursor);
        var nextNewline = input.indexOf(newline, cursor);
        var quoteCharRegex = new RegExp(escapeRegExp(escapeChar) + escapeRegExp(quoteChar), 'g');
        var quoteSearch;
        // Parser loop
        for (;;) {
            // Field has opening quote
            if (input[cursor] === quoteChar) {
                // Start our search for the closing quote where the cursor is
                quoteSearch = cursor;
                // Skip the opening quote
                cursor++;
                for (;;) {
                    // Find closing quote
                    quoteSearch = input.indexOf(quoteChar, quoteSearch + 1);
                    //No other quotes are found - no other delimiters
                    if (quoteSearch === -1) {
                        if (!ignoreLastRow) {
                            // No closing quote... what a pity
                            errors.push({
                                type: 'Quotes',
                                code: 'MissingQuotes',
                                message: 'Quoted field unterminated',
                                row: data.length, // row has yet to be inserted
                                index: cursor
                            });
                        }
                        return finish();
                    }
                    // Closing quote at EOF
                    if (quoteSearch === inputLen - 1) {
                        var value = input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar);
                        return finish(value);
                    }
                    // If this quote is escaped, it's part of the data; skip it
                    // If the quote character is the escape character, then check if the next character is the escape character
                    if (quoteChar === escapeChar && input[quoteSearch + 1] === escapeChar) {
                        quoteSearch++;
                        continue;
                    }
                    // If the quote character is not the escape character, then check if the previous character was the escape character
                    if (quoteChar !== escapeChar &&
                        quoteSearch !== 0 &&
                        input[quoteSearch - 1] === escapeChar) {
                        continue;
                    }
                    // Check up to nextDelim or nextNewline, whichever is closest
                    var checkUpTo = nextNewline === -1 ? nextDelim : Math.min(nextDelim, nextNewline);
                    var spacesBetweenQuoteAndDelimiter = extraSpaces(checkUpTo);
                    // Closing quote followed by delimiter or 'unnecessary spaces + delimiter'
                    if (input[quoteSearch + 1 + spacesBetweenQuoteAndDelimiter] === delim) {
                        row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));
                        cursor = quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen;
                        nextDelim = input.indexOf(delim, cursor);
                        nextNewline = input.indexOf(newline, cursor);
                        if (stepIsFunction) {
                            doStep();
                            if (aborted)
                                return returnable();
                        }
                        if (preview && data.length >= preview)
                            return returnable(true);
                        break;
                    }
                    var spacesBetweenQuoteAndNewLine = extraSpaces(nextNewline);
                    // Closing quote followed by newline or 'unnecessary spaces + newLine'
                    if (input.substr(quoteSearch + 1 + spacesBetweenQuoteAndNewLine, newlineLen) === newline) {
                        row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));
                        saveRow(quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen);
                        nextDelim = input.indexOf(delim, cursor); // because we may have skipped the nextDelim in the quoted field
                        if (stepIsFunction) {
                            doStep();
                            if (aborted)
                                return returnable();
                        }
                        if (preview && data.length >= preview)
                            return returnable(true);
                        break;
                    }
                    // Checks for valid closing quotes are complete (escaped quotes or quote followed by EOF/delimiter/newline) -- assume these quotes are part of an invalid text string
                    errors.push({
                        type: 'Quotes',
                        code: 'InvalidQuotes',
                        message: 'Trailing quote on quoted field is malformed',
                        row: data.length, // row has yet to be inserted
                        index: cursor
                    });
                    quoteSearch++;
                    continue;
                }
                if (stepIsFunction) {
                    doStep();
                    if (aborted)
                        return returnable();
                }
                if (preview && data.length >= preview)
                    return returnable(true);
                continue;
            }
            // Comment found at start of new line
            if (comments && row.length === 0 && input.substr(cursor, commentsLen) === comments) {
                if (nextNewline === -1)
                    // Comment ends at EOF
                    return returnable();
                cursor = nextNewline + newlineLen;
                nextNewline = input.indexOf(newline, cursor);
                nextDelim = input.indexOf(delim, cursor);
                continue;
            }
            // Next delimiter comes before next newline, so we've reached end of field
            if (nextDelim !== -1 && (nextDelim < nextNewline || nextNewline === -1)) {
                row.push(input.substring(cursor, nextDelim));
                cursor = nextDelim + delimLen;
                nextDelim = input.indexOf(delim, cursor);
                continue;
            }
            // End of row
            if (nextNewline !== -1) {
                row.push(input.substring(cursor, nextNewline));
                saveRow(nextNewline + newlineLen);
                if (stepIsFunction) {
                    doStep();
                    if (aborted)
                        return returnable();
                }
                if (preview && data.length >= preview)
                    return returnable(true);
                continue;
            }
            break;
        }
        return finish();
        function pushRow(row) {
            data.push(row);
            lastCursor = cursor;
        }
        /**
         * checks if there are extra spaces after closing quote and given index without any text
         * if Yes, returns the number of spaces
         */
        function extraSpaces(index) {
            var spaceLength = 0;
            if (index !== -1) {
                var textBetweenClosingQuoteAndIndex = input.substring(quoteSearch + 1, index);
                if (textBetweenClosingQuoteAndIndex && textBetweenClosingQuoteAndIndex.trim() === '') {
                    spaceLength = textBetweenClosingQuoteAndIndex.length;
                }
            }
            return spaceLength;
        }
        /**
         * Appends the remaining input from cursor to the end into
         * row, saves the row, calls step, and returns the results.
         */
        function finish(value) {
            if (ignoreLastRow)
                return returnable();
            if (typeof value === 'undefined')
                value = input.substr(cursor);
            row.push(value);
            cursor = inputLen; // important in case parsing is paused
            pushRow(row);
            if (stepIsFunction)
                doStep();
            return returnable();
        }
        /**
         * Appends the current row to the results. It sets the cursor
         * to newCursor and finds the nextNewline. The caller should
         * take care to execute user's step function and check for
         * preview and end parsing if necessary.
         */
        function saveRow(newCursor) {
            cursor = newCursor;
            pushRow(row);
            row = [];
            nextNewline = input.indexOf(newline, cursor);
        }
        /** Returns an object with the results, errors, and meta. */
        function returnable(stopped, step) {
            var isStep = step || false;
            return {
                data: isStep ? data[0] : data,
                errors: errors,
                meta: {
                    delimiter: delim,
                    linebreak: newline,
                    aborted: aborted,
                    truncated: !!stopped,
                    cursor: lastCursor + (baseIndex || 0)
                }
            };
        }
        /** Executes the user's step function and resets data & errors. */
        function doStep() {
            step(returnable(undefined, true));
            data = [];
            errors = [];
        }
    };
    /** Sets the abort flag */
    this.abort = function () {
        aborted = true;
    };
    /** Gets the cursor position */
    this.getCharIndex = function () {
        return cursor;
    };
}
function notImplemented() {
    throw new Error('Not implemented.');
}
/** Makes a deep copy of an array or object (mostly) */
function copy(obj) {
    if (typeof obj !== 'object' || obj === null)
        return obj;
    var cpy = Array.isArray(obj) ? [] : {};
    for (var key in obj)
        cpy[key] = copy(obj[key]);
    return cpy;
}
function isFunction(func) {
    return typeof func === 'function';
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/image-loader.js":
/*!**************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/image-loader.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageLoader: () => (/* binding */ ImageLoader)
/* harmony export */ });
/* harmony import */ var _lib_utils_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/utils/version.js */ "./node_modules/@loaders.gl/images/dist/lib/utils/version.js");
/* harmony import */ var _lib_parsers_parse_image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/parsers/parse-image.js */ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-image.js");
/* harmony import */ var _lib_category_api_binary_image_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/category-api/binary-image-api.js */ "./node_modules/@loaders.gl/images/dist/lib/category-api/binary-image-api.js");
// import type { ImageType } from '@loaders.gl/schema';



const EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg', 'avif'];
const MIME_TYPES = [
    'image/png',
    'image/jpeg',
    'image/gif',
    'image/webp',
    'image/avif',
    'image/bmp',
    'image/vnd.microsoft.icon',
    'image/svg+xml'
];
const DEFAULT_IMAGE_LOADER_OPTIONS = {
    image: {
        type: 'auto',
        decode: true // if format is HTML
    }
    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor
};
/**
 * Loads a platform-specific image type
 * Note: This type can be used as input data to WebGL texture creation
 */
const ImageLoader = {
    dataType: null,
    batchType: null,
    id: 'image',
    module: 'images',
    name: 'Images',
    version: _lib_utils_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION,
    mimeTypes: MIME_TYPES,
    extensions: EXTENSIONS,
    parse: _lib_parsers_parse_image_js__WEBPACK_IMPORTED_MODULE_1__.parseImage,
    // TODO: byteOffset, byteLength;
    tests: [(arrayBuffer) => Boolean((0,_lib_category_api_binary_image_api_js__WEBPACK_IMPORTED_MODULE_2__.getBinaryImageMetadata)(new DataView(arrayBuffer)))],
    options: DEFAULT_IMAGE_LOADER_OPTIONS
};


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/category-api/binary-image-api.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/category-api/binary-image-api.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBinaryImageMetadata: () => (/* binding */ getBinaryImageMetadata),
/* harmony export */   getBmpMetadata: () => (/* binding */ getBmpMetadata)
/* harmony export */ });
/* harmony import */ var _parse_isobmff_binary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-isobmff-binary.js */ "./node_modules/@loaders.gl/images/dist/lib/category-api/parse-isobmff-binary.js");
// Attributions
// * Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng

const BIG_ENDIAN = false;
const LITTLE_ENDIAN = true;
/**
 * Extracts `{mimeType, width and height}` from a memory buffer containing a known image format
 * Currently supports `image/png`, `image/jpeg`, `image/bmp` and `image/gif`.
 * @param binaryData: DataView | ArrayBuffer image file memory to parse
 * @returns metadata or null if memory is not a valid image file format layout.
 */
function getBinaryImageMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    return (getPngMetadata(dataView) ||
        getJpegMetadata(dataView) ||
        getGifMetadata(dataView) ||
        getBmpMetadata(dataView) ||
        getISOBMFFMetadata(dataView));
}
// ISOBMFF
function getISOBMFFMetadata(binaryData) {
    const buffer = new Uint8Array(binaryData instanceof DataView ? binaryData.buffer : binaryData);
    const mediaType = (0,_parse_isobmff_binary_js__WEBPACK_IMPORTED_MODULE_0__.getISOBMFFMediaType)(buffer);
    if (!mediaType) {
        return null;
    }
    return {
        mimeType: mediaType.mimeType,
        // TODO - decode width and height
        width: 0,
        height: 0
    };
}
// PNG
function getPngMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    // Check file contains the first 4 bytes of the PNG signature.
    const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;
    if (!isPng) {
        return null;
    }
    // Extract size from a binary PNG file
    return {
        mimeType: 'image/png',
        width: dataView.getUint32(16, BIG_ENDIAN),
        height: dataView.getUint32(20, BIG_ENDIAN)
    };
}
// GIF
// Extract size from a binary GIF file
// TODO: GIF is not this simple
function getGifMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    // Check first 4 bytes of the GIF signature ("GIF8").
    const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;
    if (!isGif) {
        return null;
    }
    // GIF is little endian.
    return {
        mimeType: 'image/gif',
        width: dataView.getUint16(6, LITTLE_ENDIAN),
        height: dataView.getUint16(8, LITTLE_ENDIAN)
    };
}
// BMP
// TODO: BMP is not this simple
function getBmpMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    // Check magic number is valid (first 2 characters should be "BM").
    // The mandatory bitmap file header is 14 bytes long.
    const isBmp = dataView.byteLength >= 14 &&
        dataView.getUint16(0, BIG_ENDIAN) === 0x424d &&
        dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;
    if (!isBmp) {
        return null;
    }
    // BMP is little endian.
    return {
        mimeType: 'image/bmp',
        width: dataView.getUint32(18, LITTLE_ENDIAN),
        height: dataView.getUint32(22, LITTLE_ENDIAN)
    };
}
// JPEG
// Extract width and height from a binary JPEG file
function getJpegMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    // Check file contains the JPEG "start of image" (SOI) marker
    // followed by another marker.
    const isJpeg = dataView.byteLength >= 3 &&
        dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 &&
        dataView.getUint8(2) === 0xff;
    if (!isJpeg) {
        return null;
    }
    const { tableMarkers, sofMarkers } = getJpegMarkers();
    // Exclude the two byte SOI marker.
    let i = 2;
    while (i + 9 < dataView.byteLength) {
        const marker = dataView.getUint16(i, BIG_ENDIAN);
        // The frame that contains the width and height of the JPEG image.
        if (sofMarkers.has(marker)) {
            return {
                mimeType: 'image/jpeg',
                height: dataView.getUint16(i + 5, BIG_ENDIAN), // Number of lines
                width: dataView.getUint16(i + 7, BIG_ENDIAN) // Number of pixels per line
            };
        }
        // Miscellaneous tables/data preceding the frame header.
        if (!tableMarkers.has(marker)) {
            return null;
        }
        // Length includes size of length parameter but not the two byte header.
        i += 2;
        i += dataView.getUint16(i, BIG_ENDIAN);
    }
    return null;
}
function getJpegMarkers() {
    // Tables/misc header markers.
    // DQT, DHT, DAC, DRI, COM, APP_n
    const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);
    for (let i = 0xffe0; i < 0xfff0; ++i) {
        tableMarkers.add(i);
    }
    // SOF markers and DHP marker.
    // These markers are after tables/misc data.
    const sofMarkers = new Set([
        0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce,
        0xffcf, 0xffde
    ]);
    return { tableMarkers, sofMarkers };
}
// TODO - move into image module?
function toDataView(data) {
    if (data instanceof DataView) {
        return data;
    }
    if (ArrayBuffer.isView(data)) {
        return new DataView(data.buffer);
    }
    // TODO: make these functions work for Node.js buffers?
    // if (bufferToArrayBuffer) {
    //   data = bufferToArrayBuffer(data);
    // }
    // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)
    if (data instanceof ArrayBuffer) {
        return new DataView(data);
    }
    throw new Error('toDataView');
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/category-api/image-type.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/category-api/image-type.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefaultImageType: () => (/* binding */ getDefaultImageType),
/* harmony export */   isImageTypeSupported: () => (/* binding */ isImageTypeSupported)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/globals.js");

// @ts-ignore TS2339: Property does not exist on type
const parseImageNode = globalThis.loaders?.parseImageNode;
const IMAGE_SUPPORTED = typeof Image !== 'undefined'; // NOTE: "false" positives if jsdom is installed
const IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';
const NODE_IMAGE_SUPPORTED = Boolean(parseImageNode);
const DATA_SUPPORTED = _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.isBrowser ? true : NODE_IMAGE_SUPPORTED;
/**
 * Checks if a loaders.gl image type is supported
 * @param type image type string
 */
function isImageTypeSupported(type) {
    switch (type) {
        case 'auto':
            // Should only ever be false in Node.js, if polyfills have not been installed...
            return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;
        case 'imagebitmap':
            return IMAGE_BITMAP_SUPPORTED;
        case 'image':
            return IMAGE_SUPPORTED;
        case 'data':
            return DATA_SUPPORTED;
        default:
            throw new Error(`@loaders.gl/images: image ${type} not supported in this environment`);
    }
}
/**
 * Returns the "most performant" supported image type on this platform
 * @returns image type string
 */
function getDefaultImageType() {
    if (IMAGE_BITMAP_SUPPORTED) {
        return 'imagebitmap';
    }
    if (IMAGE_SUPPORTED) {
        return 'image';
    }
    if (DATA_SUPPORTED) {
        return 'data';
    }
    // This should only happen in Node.js
    throw new Error('Install \'@loaders.gl/polyfills\' to parse images under Node.js');
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/category-api/parse-isobmff-binary.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/category-api/parse-isobmff-binary.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeMajorBrand: () => (/* binding */ decodeMajorBrand),
/* harmony export */   getISOBMFFMediaType: () => (/* binding */ getISOBMFFMediaType)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// code adapted from https://github.com/sindresorhus/file-type under MIT license
/**
 * Tests if a buffer is in ISO base media file format (ISOBMFF) @see https://en.wikipedia.org/wiki/ISO_base_media_file_format
 * (ISOBMFF is a media container standard based on the Apple QuickTime container format)
 */
function getISOBMFFMediaType(buffer) {
    // Almost all ISO base media files start with `ftyp` box. (It's not required to be first, but it's recommended to be.)
    if (!checkString(buffer, 'ftyp', 4)) {
        return null;
    }
    // Extra check: test for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).
    if ((buffer[8] & 0x60) === 0x00) {
        return null;
    }
    // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.
    return decodeMajorBrand(buffer);
}
/**
 * brands explained @see https://github.com/strukturag/libheif/issues/83
 * code adapted from @see https://github.com/sindresorhus/file-type/blob/main/core.js#L489-L492
 */
function decodeMajorBrand(buffer) {
    const brandMajor = getUTF8String(buffer, 8, 12).replace('\0', ' ').trim();
    switch (brandMajor) {
        case 'avif':
        case 'avis':
            return { extension: 'avif', mimeType: 'image/avif' };
        default:
            return null;
    }
    // We don't need these now, but they are easy to add
    // case 'mif1':
    //   return {extension: 'heic', mimeType: 'image/heif'};
    // case 'msf1':
    //   return {extension: 'heic', mimeType: 'image/heif-sequence'};
    // case 'heic':
    // case 'heix':
    //   return {extension: 'heic', mimeType: 'image/heic'};
    // case 'hevc':
    // case 'hevx':
    //   return {extension: 'heic', mimeType: 'image/heic-sequence'};
    // case 'qt':
    //   return {ext: 'mov', mime: 'video/quicktime'};
    // case 'M4V':
    // case 'M4VH':
    // case 'M4VP':
    //   return {ext: 'm4v', mime: 'video/x-m4v'};
    // case 'M4P':
    //   return {ext: 'm4p', mime: 'video/mp4'};
    // case 'M4B':
    //   return {ext: 'm4b', mime: 'audio/mp4'};
    // case 'M4A':
    //   return {ext: 'm4a', mime: 'audio/x-m4a'};
    // case 'F4V':
    //   return {ext: 'f4v', mime: 'video/mp4'};
    // case 'F4P':
    //   return {ext: 'f4p', mime: 'video/mp4'};
    // case 'F4A':
    //   return {ext: 'f4a', mime: 'audio/mp4'};
    // case 'F4B':
    //   return {ext: 'f4b', mime: 'audio/mp4'};
    // case 'crx':
    //   return {ext: 'cr3', mime: 'image/x-canon-cr3'};
    // default:
    // if (brandMajor.startsWith('3g')) {
    //   if (brandMajor.startsWith('3g2')) {
    //     return {ext: '3g2', mime: 'video/3gpp2'};
    //   }
    //   return {ext: '3gp', mime: 'video/3gpp'};
    // }
    // return {ext: 'mp4', mime: 'video/mp4'};
}
/** Interpret a chunk of bytes as a UTF8 string */
function getUTF8String(array, start, end) {
    return String.fromCharCode(...array.slice(start, end));
}
function stringToBytes(string) {
    return [...string].map((character) => character.charCodeAt(0));
}
function checkString(buffer, header, offset = 0) {
    const headerBytes = stringToBytes(header);
    for (let i = 0; i < headerBytes.length; ++i) {
        if (headerBytes[i] !== buffer[i + offset]) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/category-api/parsed-image-api.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/category-api/parsed-image-api.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteImage: () => (/* binding */ deleteImage),
/* harmony export */   getImageData: () => (/* binding */ getImageData),
/* harmony export */   getImageSize: () => (/* binding */ getImageSize),
/* harmony export */   getImageType: () => (/* binding */ getImageType),
/* harmony export */   isImage: () => (/* binding */ isImage)
/* harmony export */ });
function isImage(image) {
    return Boolean(getImageTypeOrNull(image));
}
function deleteImage(image) {
    switch (getImageType(image)) {
        case 'imagebitmap':
            image.close();
            break;
        default:
        // Nothing to do for images and image data objects
    }
}
function getImageType(image) {
    const format = getImageTypeOrNull(image);
    if (!format) {
        throw new Error('Not an image');
    }
    return format;
}
function getImageSize(image) {
    return getImageData(image);
}
function getImageData(image) {
    switch (getImageType(image)) {
        case 'data':
            return image;
        case 'image':
        case 'imagebitmap':
            // Extract the image data from the image via a canvas
            const canvas = document.createElement('canvas');
            // TODO - reuse the canvas?
            const context = canvas.getContext('2d');
            if (!context) {
                throw new Error('getImageData');
            }
            // @ts-ignore
            canvas.width = image.width;
            // @ts-ignore
            canvas.height = image.height;
            // @ts-ignore
            context.drawImage(image, 0, 0);
            // @ts-ignore
            return context.getImageData(0, 0, image.width, image.height);
        default:
            throw new Error('getImageData');
    }
}
// PRIVATE
// eslint-disable-next-line complexity
function getImageTypeOrNull(image) {
    if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
        return 'imagebitmap';
    }
    if (typeof Image !== 'undefined' && image instanceof Image) {
        return 'image';
    }
    if (image && typeof image === 'object' && image.data && image.width && image.height) {
        return 'data';
    }
    return null;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-image.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/parsers/parse-image.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseImage: () => (/* binding */ parseImage)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/assert.js");
/* harmony import */ var _category_api_image_type_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../category-api/image-type.js */ "./node_modules/@loaders.gl/images/dist/lib/category-api/image-type.js");
/* harmony import */ var _category_api_parsed_image_api_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../category-api/parsed-image-api.js */ "./node_modules/@loaders.gl/images/dist/lib/category-api/parsed-image-api.js");
/* harmony import */ var _parse_to_image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-to-image.js */ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image.js");
/* harmony import */ var _parse_to_image_bitmap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-to-image-bitmap.js */ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image-bitmap.js");
/* harmony import */ var _parse_to_node_image_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse-to-node-image.js */ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-node-image.js");






// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)
// eslint-disable-next-line complexity
async function parseImage(arrayBuffer, options, context) {
    options = options || {};
    const imageOptions = options.image || {};
    // The user can request a specific output format via `options.image.type`
    const imageType = imageOptions.type || 'auto';
    const { url } = context || {};
    // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`
    const loadType = getLoadableImageType(imageType);
    let image;
    switch (loadType) {
        case 'imagebitmap':
            image = await (0,_parse_to_image_bitmap_js__WEBPACK_IMPORTED_MODULE_0__.parseToImageBitmap)(arrayBuffer, options, url);
            break;
        case 'image':
            image = await (0,_parse_to_image_js__WEBPACK_IMPORTED_MODULE_1__.parseToImage)(arrayBuffer, options, url);
            break;
        case 'data':
            // Node.js loads imagedata directly
            image = await (0,_parse_to_node_image_js__WEBPACK_IMPORTED_MODULE_2__.parseToNodeImage)(arrayBuffer, options);
            break;
        default:
            (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_3__.assert)(false);
    }
    // Browser: if options.image.type === 'data', we can now extract data from the loaded image
    if (imageType === 'data') {
        image = (0,_category_api_parsed_image_api_js__WEBPACK_IMPORTED_MODULE_4__.getImageData)(image);
    }
    return image;
}
// Get a loadable image type from image type
function getLoadableImageType(type) {
    switch (type) {
        case 'auto':
        case 'data':
            // Browser: For image data we need still need to load using an image format
            // Node: the default image type is `data`.
            return (0,_category_api_image_type_js__WEBPACK_IMPORTED_MODULE_5__.getDefaultImageType)();
        default:
            // Throw an error if not supported
            (0,_category_api_image_type_js__WEBPACK_IMPORTED_MODULE_5__.isImageTypeSupported)(type);
            return type;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image-bitmap.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image-bitmap.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseToImageBitmap: () => (/* binding */ parseToImageBitmap)
/* harmony export */ });
/* harmony import */ var _svg_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svg-utils.js */ "./node_modules/@loaders.gl/images/dist/lib/parsers/svg-utils.js");
/* harmony import */ var _parse_to_image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-to-image.js */ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image.js");


const EMPTY_OBJECT = {};
let imagebitmapOptionsSupported = true;
/**
 * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data
 * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari
 * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility
 *
 * TODO - createImageBitmap supports source rect (5 param overload), pass through?
 */
async function parseToImageBitmap(arrayBuffer, options, url) {
    let blob;
    // Cannot parse SVG directly to ImageBitmap, parse to Image first
    if ((0,_svg_utils_js__WEBPACK_IMPORTED_MODULE_0__.isSVG)(url)) {
        // Note: this only works on main thread
        const image = await (0,_parse_to_image_js__WEBPACK_IMPORTED_MODULE_1__.parseToImage)(arrayBuffer, options, url);
        blob = image;
    }
    else {
        // Create blob from the array buffer
        blob = (0,_svg_utils_js__WEBPACK_IMPORTED_MODULE_0__.getBlob)(arrayBuffer, url);
    }
    const imagebitmapOptions = options && options.imagebitmap;
    return await safeCreateImageBitmap(blob, imagebitmapOptions);
}
/**
 * Safely creates an imageBitmap with options
 * *
 * Firefox crashes if imagebitmapOptions is supplied
 * Avoid supplying if not provided or supported, remember if not supported
 */
async function safeCreateImageBitmap(blob, imagebitmapOptions = null) {
    if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {
        imagebitmapOptions = null;
    }
    if (imagebitmapOptions) {
        try {
            // @ts-ignore Options
            return await createImageBitmap(blob, imagebitmapOptions);
        }
        catch (error) {
            console.warn(error); // eslint-disable-line
            imagebitmapOptionsSupported = false;
        }
    }
    return await createImageBitmap(blob);
}
function isEmptyObject(object) {
    // @ts-ignore
    for (const key in object || EMPTY_OBJECT) {
        return false;
    }
    return true;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadToImage: () => (/* binding */ loadToImage),
/* harmony export */   parseToImage: () => (/* binding */ parseToImage)
/* harmony export */ });
/* harmony import */ var _svg_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svg-utils.js */ "./node_modules/@loaders.gl/images/dist/lib/parsers/svg-utils.js");

// Parses html image from array buffer
async function parseToImage(arrayBuffer, options, url) {
    // Note: image parsing requires conversion to Blob (for createObjectURL).
    // Potentially inefficient for not using `response.blob()` (and for File / Blob inputs)...
    // But presumably not worth adding 'blob' flag to loader objects?
    const blobOrDataUrl = (0,_svg_utils_js__WEBPACK_IMPORTED_MODULE_0__.getBlobOrSVGDataUrl)(arrayBuffer, url);
    const URL = self.URL || self.webkitURL;
    const objectUrl = typeof blobOrDataUrl !== 'string' && URL.createObjectURL(blobOrDataUrl);
    try {
        return await loadToImage(objectUrl || blobOrDataUrl, options);
    }
    finally {
        if (objectUrl) {
            URL.revokeObjectURL(objectUrl);
        }
    }
}
async function loadToImage(url, options) {
    const image = new Image();
    image.src = url;
    // The `image.onload()` callback does not guarantee that the image has been decoded
    // so a main thread "freeze" can be incurred when using the image for the first time.
    // `Image.decode()` returns a promise that completes when image is decoded.
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode
    // Note: When calling `img.decode()`, we do not need to wait for `img.onload()`
    // Note: `HTMLImageElement.decode()` is not available in Edge and IE11
    if (options.image && options.image.decode && image.decode) {
        await image.decode();
        return image;
    }
    // Create a promise that tracks onload/onerror callbacks
    return await new Promise((resolve, reject) => {
        try {
            image.onload = () => resolve(image);
            image.onerror = (error) => {
                const message = error instanceof Error ? error.message : 'error';
                reject(new Error(message));
            };
        }
        catch (error) {
            reject(error);
        }
    });
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-node-image.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-node-image.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseToNodeImage: () => (/* binding */ parseToNodeImage)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/assert.js");
/* harmony import */ var _category_api_binary_image_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../category-api/binary-image-api.js */ "./node_modules/@loaders.gl/images/dist/lib/category-api/binary-image-api.js");


// Use polyfills if installed to parsed image using get-pixels
async function parseToNodeImage(arrayBuffer, options) {
    const { mimeType } = (0,_category_api_binary_image_api_js__WEBPACK_IMPORTED_MODULE_0__.getBinaryImageMetadata)(arrayBuffer) || {};
    // @ts-ignore
    const parseImageNode = globalThis.loaders?.parseImageNode;
    (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__.assert)(parseImageNode); // '@loaders.gl/polyfills not installed'
    // @ts-expect-error TODO should we throw error in this case?
    return await parseImageNode(arrayBuffer, mimeType);
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/parsers/svg-utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/parsers/svg-utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBlob: () => (/* binding */ getBlob),
/* harmony export */   getBlobOrSVGDataUrl: () => (/* binding */ getBlobOrSVGDataUrl),
/* harmony export */   isSVG: () => (/* binding */ isSVG)
/* harmony export */ });
// SVG parsing has limitations, e.g:
// https://bugs.chromium.org/p/chromium/issues/detail?id=606319
const SVG_DATA_URL_PATTERN = /^data:image\/svg\+xml/;
const SVG_URL_PATTERN = /\.svg((\?|#).*)?$/;
function isSVG(url) {
    return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));
}
function getBlobOrSVGDataUrl(arrayBuffer, url) {
    if (isSVG(url)) {
        // Prepare a properly tagged data URL, and load using normal mechanism
        const textDecoder = new TextDecoder();
        let xmlText = textDecoder.decode(arrayBuffer);
        // TODO Escape in browser to support e.g. Chinese characters
        try {
            if (typeof unescape === 'function' && typeof encodeURIComponent === 'function') {
                xmlText = unescape(encodeURIComponent(xmlText));
            }
        }
        catch (error) {
            throw new Error(error.message);
        }
        // base64 encoding is safer. utf-8 fails in some browsers
        const src = `data:image/svg+xml;base64,${btoa(xmlText)}`;
        return src;
    }
    return getBlob(arrayBuffer, url);
}
function getBlob(arrayBuffer, url) {
    if (isSVG(url)) {
        // https://bugs.chromium.org/p/chromium/issues/detail?id=606319
        // return new Blob([new Uint8Array(arrayBuffer)], {type: 'image/svg+xml'});
        throw new Error('SVG cannot be parsed directly to imagebitmap');
    }
    // TODO - how to determine mime type? Param? Sniff here?
    return new Blob([new Uint8Array(arrayBuffer)]); // MIME type not needed?
}


/***/ }),

/***/ "./node_modules/@loaders.gl/images/dist/lib/utils/version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@loaders.gl/images/dist/lib/utils/version.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
// Version constant cannot be imported, it needs to correspond to the build version of **this** module.
// __VERSION__ is injected by babel-plugin-version-inline
// @ts-ignore TS2304: Cannot find name '__VERSION__'.
const VERSION =  true ? "4.2.1" : 0;


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareArrayBuffers: () => (/* binding */ compareArrayBuffers),
/* harmony export */   concatenateArrayBuffers: () => (/* binding */ concatenateArrayBuffers),
/* harmony export */   concatenateArrayBuffersFromArray: () => (/* binding */ concatenateArrayBuffersFromArray),
/* harmony export */   concatenateTypedArrays: () => (/* binding */ concatenateTypedArrays),
/* harmony export */   sliceArrayBuffer: () => (/* binding */ sliceArrayBuffer)
/* harmony export */ });
/**
 * compare two binary arrays for equality
 * @param a
 * @param b
 * @param byteLength
 */
function compareArrayBuffers(arrayBuffer1, arrayBuffer2, byteLength) {
    byteLength = byteLength || arrayBuffer1.byteLength;
    if (arrayBuffer1.byteLength < byteLength || arrayBuffer2.byteLength < byteLength) {
        return false;
    }
    const array1 = new Uint8Array(arrayBuffer1);
    const array2 = new Uint8Array(arrayBuffer2);
    for (let i = 0; i < array1.length; ++i) {
        if (array1[i] !== array2[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Concatenate a sequence of ArrayBuffers from arguments
 * @return A concatenated ArrayBuffer
 */
function concatenateArrayBuffers(...sources) {
    return concatenateArrayBuffersFromArray(sources);
}
/**
 * Concatenate a sequence of ArrayBuffers from array
 * @return A concatenated ArrayBuffer
 */
function concatenateArrayBuffersFromArray(sources) {
    // Make sure all inputs are wrapped in typed arrays
    const sourceArrays = sources.map((source2) => source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2);
    // Get length of all inputs
    const byteLength = sourceArrays.reduce((length, typedArray) => length + typedArray.byteLength, 0);
    // Allocate array with space for all inputs
    const result = new Uint8Array(byteLength);
    // Copy the subarrays
    let offset = 0;
    for (const sourceArray of sourceArrays) {
        result.set(sourceArray, offset);
        offset += sourceArray.byteLength;
    }
    // We work with ArrayBuffers, discard the typed array wrapper
    return result.buffer;
}
/**
 * Concatenate arbitrary count of typed arrays
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays
 * @param - list of arrays. All arrays should be the same type
 * @return A concatenated TypedArray
 */
function concatenateTypedArrays(...typedArrays) {
    // @ts-ignore
    const arrays = typedArrays;
    // @ts-ignore
    const TypedArrayConstructor = (arrays && arrays.length > 1 && arrays[0].constructor) || null;
    if (!TypedArrayConstructor) {
        throw new Error('"concatenateTypedArrays" - incorrect quantity of arguments or arguments have incompatible data types');
    }
    const sumLength = arrays.reduce((acc, value) => acc + value.length, 0);
    // @ts-ignore typescript does not like dynamic constructors
    const result = new TypedArrayConstructor(sumLength);
    let offset = 0;
    for (const array of arrays) {
        result.set(array, offset);
        offset += array.length;
    }
    return result;
}
/**
 * Copy a view of an ArrayBuffer into new ArrayBuffer with byteOffset = 0
 * @param arrayBuffer
 * @param byteOffset
 * @param byteLength
 */
function sliceArrayBuffer(arrayBuffer, byteOffset, byteLength) {
    const subArray = byteLength !== undefined
        ? new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + byteLength)
        : new Uint8Array(arrayBuffer).subarray(byteOffset);
    const arrayCopy = new Uint8Array(subArray);
    return arrayCopy.buffer;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/memory-conversion-utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/memory-conversion-utils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isBuffer: () => (/* binding */ isBuffer),
/* harmony export */   toArrayBuffer: () => (/* binding */ toArrayBuffer),
/* harmony export */   toBuffer: () => (/* binding */ toBuffer)
/* harmony export */ });
/* harmony import */ var _node_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node/buffer.js */ "./node_modules/@loaders.gl/loader-utils/dist/lib/node/buffer.browser.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Check for Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)
 */
function isBuffer(value) {
    return value && typeof value === 'object' && value.isBuffer;
}
/**
 * Converts to Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)
 * @todo better data type
 */
function toBuffer(data) {
    return _node_buffer_js__WEBPACK_IMPORTED_MODULE_0__.toBuffer ? _node_buffer_js__WEBPACK_IMPORTED_MODULE_0__.toBuffer(data) : data;
}
/**
 * Convert an object to an array buffer
 */
function toArrayBuffer(data) {
    // Note: Should be called first, Buffers can trigger other detections below
    if (isBuffer(data)) {
        return _node_buffer_js__WEBPACK_IMPORTED_MODULE_0__.toArrayBuffer(data);
    }
    if (data instanceof ArrayBuffer) {
        return data;
    }
    // Careful - Node Buffers look like Uint8Arrays (keep after isBuffer)
    if (ArrayBuffer.isView(data)) {
        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {
            return data.buffer;
        }
        return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);
    }
    if (typeof data === 'string') {
        const text = data;
        const uint8Array = new TextEncoder().encode(text);
        return uint8Array.buffer;
    }
    // HACK to support Blob polyfill
    if (data && typeof data === 'object' && data._toArrayBuffer) {
        return data._toArrayBuffer();
    }
    throw new Error('toArrayBuffer');
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/assert.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/assert.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
/**
 * Throws an `Error` with the optional `message` if `condition` is falsy
 * @note Replacement for the external assert method to reduce bundle size
 */
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'loader assertion failed.');
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/globals.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/globals.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   document: () => (/* binding */ document_),
/* harmony export */   global: () => (/* binding */ global_),
/* harmony export */   isBrowser: () => (/* binding */ isBrowser),
/* harmony export */   isWorker: () => (/* binding */ isWorker),
/* harmony export */   nodeVersion: () => (/* binding */ nodeVersion),
/* harmony export */   self: () => (/* binding */ self_),
/* harmony export */   window: () => (/* binding */ window_)
/* harmony export */ });
// Purpose: include this in your module to avoid
// dependencies on micro modules like 'global' and 'is-browser';
/* eslint-disable no-restricted-globals */
const globals = {
    self: typeof self !== 'undefined' && self,
    window: typeof window !== 'undefined' && window,
    global: typeof global !== 'undefined' && global,
    document: typeof document !== 'undefined' && document
};
const self_ = globals.self || globals.window || globals.global || {};
const window_ = globals.window || globals.self || globals.global || {};
const global_ = globals.global || globals.self || globals.window || {};
const document_ = globals.document || {};

/** true if running in a browser */
const isBrowser = 
// @ts-ignore process does not exist on browser
Boolean(typeof process !== 'object' || String(process) !== '[object process]' || process.browser);
/** true if running in a worker thread */
const isWorker = typeof importScripts === 'function';
// Extract node major version
const matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);
/** Major Node version (as a number) */
const nodeVersion = (matches && parseFloat(matches[1])) || 0;


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/iterators/async-iteration.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/iterators/async-iteration.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   concatenateArrayBuffersAsync: () => (/* binding */ concatenateArrayBuffersAsync),
/* harmony export */   concatenateStringsAsync: () => (/* binding */ concatenateStringsAsync),
/* harmony export */   forEach: () => (/* binding */ forEach)
/* harmony export */ });
/* harmony import */ var _binary_utils_array_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../binary-utils/array-buffer-utils.js */ "./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js");

// GENERAL UTILITIES
/**
 * Iterate over async iterator, without resetting iterator if end is not reached
 * - forEach intentionally does not reset iterator if exiting loop prematurely
 *   so that iteration can continue in a second loop
 * - It is recommended to use a standard for-await as last loop to ensure
 *   iterator gets properly reset
 *
 * TODO - optimize using sync iteration if argument is an Iterable?
 *
 * @param iterator
 * @param visitor
 */
async function forEach(iterator, visitor) {
    // eslint-disable-next-line
    while (true) {
        const { done, value } = await iterator.next();
        if (done) {
            iterator.return();
            return;
        }
        const cancel = visitor(value);
        if (cancel) {
            return;
        }
    }
}
// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects
/**
 * Concatenates all data chunks yielded by an (async) iterator
 * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs
 */
async function concatenateArrayBuffersAsync(asyncIterator) {
    const arrayBuffers = [];
    for await (const chunk of asyncIterator) {
        arrayBuffers.push(chunk);
    }
    return (0,_binary_utils_array_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatenateArrayBuffers)(...arrayBuffers);
}
async function concatenateStringsAsync(asyncIterator) {
    const strings = [];
    for await (const chunk of asyncIterator) {
        strings.push(chunk);
    }
    return strings.join('');
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/log-utils/log.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/log-utils/log.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   log: () => (/* binding */ log)
/* harmony export */ });
/* harmony import */ var _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/log */ "./node_modules/@probe.gl/log/dist/log.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Global log instance */
const log = new _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__.Log({ id: 'loaders.gl' });


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/module-utils/js-module-utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/module-utils/js-module-utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkJSModule: () => (/* binding */ checkJSModule),
/* harmony export */   getJSModule: () => (/* binding */ getJSModule),
/* harmony export */   getJSModuleOrNull: () => (/* binding */ getJSModuleOrNull),
/* harmony export */   registerJSModules: () => (/* binding */ registerJSModules)
/* harmony export */ });
/* harmony import */ var _log_utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../log-utils/log.js */ "./node_modules/@loaders.gl/loader-utils/dist/lib/log-utils/log.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Register application-imported modules
 * These modules are typically to big to bundle, or may have issues on some bundlers/environments
 */
function registerJSModules(modules) {
    globalThis.loaders ||= {};
    globalThis.loaders.modules ||= {};
    Object.assign(globalThis.loaders.modules, modules);
}
/**
 * Get a pre-registered application-imported module, warn if not present
 */
function checkJSModule(name, caller) {
    const module = globalThis.loaders?.modules?.[name];
    if (!module) {
        _log_utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.warn(`${caller}: ${name} library not installed`)();
    }
}
/**
 * Get a pre-registered application-imported module, throw if not present
 */
function getJSModule(name, caller) {
    const module = globalThis.loaders?.modules?.[name];
    if (!module) {
        throw new Error(`${caller}: ${name} library not installed`);
    }
    return module;
}
/**
 * Get a pre-registered application-imported module, return null if not present
 */
function getJSModuleOrNull(name) {
    const module = globalThis.loaders?.modules?.[name];
    return module || null;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/node/buffer.browser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/node/buffer.browser.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toArrayBuffer: () => (/* binding */ toArrayBuffer),
/* harmony export */   toBuffer: () => (/* binding */ toBuffer)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Isolates Buffer references to ensure they are only bundled under Node.js (avoids big webpack polyfill)
// this file is selected by the package.json "browser" field).
/**
 * Convert Buffer to ArrayBuffer
 * Converts Node.js `Buffer` to `ArrayBuffer` (without triggering bundler to include Buffer polyfill on browser)
 * @todo better data type
 */
function toArrayBuffer(buffer) {
    return buffer;
}
/**
 * Convert (copy) ArrayBuffer to Buffer
 */
function toBuffer(binaryData) {
    throw new Error('Buffer not supported in browser');
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/option-utils/merge-loader-options.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/option-utils/merge-loader-options.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeLoaderOptions: () => (/* binding */ mergeLoaderOptions)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 *
 * @param baseOptions Can be undefined, in which case a fresh options object will be minted
 * @param newOptions
 * @returns
 */
function mergeLoaderOptions(baseOptions, newOptions) {
    return mergeOptionsRecursively(baseOptions || {}, newOptions);
}
function mergeOptionsRecursively(baseOptions, newOptions, level = 0) {
    // Sanity check (jest test runner overwrites the console object which can lead to infinite recursion)
    if (level > 3) {
        return newOptions;
    }
    const options = { ...baseOptions };
    for (const [key, newValue] of Object.entries(newOptions)) {
        if (newValue && typeof newValue === 'object' && !Array.isArray(newValue)) {
            options[key] = mergeOptionsRecursively(options[key] || {}, newOptions[key], level + 1);
            // Object.assign(options[key] as object, newOptions[key]);
        }
        else {
            options[key] = newOptions[key];
        }
    }
    return options;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/file-aliases.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/file-aliases.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addAliases: () => (/* binding */ addAliases),
/* harmony export */   getPathPrefix: () => (/* binding */ getPathPrefix),
/* harmony export */   resolvePath: () => (/* binding */ resolvePath),
/* harmony export */   setPathPrefix: () => (/* binding */ setPathPrefix)
/* harmony export */ });
// Simple file alias mechanisms for tests.
let pathPrefix = '';
const fileAliases = {};
/*
 * Set a relative path prefix
 */
function setPathPrefix(prefix) {
    pathPrefix = prefix;
}
/*
 * Get the relative path prefix
 */
function getPathPrefix() {
    return pathPrefix;
}
/**
 *
 * @param aliases
 *
 * Note: addAliases are an experimental export, they are only for testing of loaders.gl loaders
 * not intended as a generic aliasing mechanism
 */
function addAliases(aliases) {
    Object.assign(fileAliases, aliases);
}
/**
 * Resolves aliases and adds path-prefix to paths
 */
function resolvePath(filename) {
    for (const alias in fileAliases) {
        if (filename.startsWith(alias)) {
            const replacement = fileAliases[alias];
            filename = filename.replace(alias, replacement);
        }
    }
    if (!filename.startsWith('http://') && !filename.startsWith('https://')) {
        filename = `${pathPrefix}${filename}`;
    }
    return filename;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/get-cwd.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/get-cwd.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCWD: () => (/* binding */ getCWD)
/* harmony export */ });
// loaders.gl MIT license
function getCWD() {
    if (typeof process !== 'undefined' && typeof process.cwd !== 'undefined') {
        return process.cwd();
    }
    const pathname = window.location?.pathname;
    return pathname?.slice(0, pathname.lastIndexOf('/') + 1) || '';
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dirname: () => (/* binding */ dirname),
/* harmony export */   filename: () => (/* binding */ filename),
/* harmony export */   join: () => (/* binding */ join),
/* harmony export */   resolve: () => (/* binding */ resolve)
/* harmony export */ });
/* harmony import */ var _get_cwd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-cwd.js */ "./node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/get-cwd.js");
// Beginning of a minimal implementation of the Node.js path API, that doesn't pull in big polyfills.

/**
 * Replacement for Node.js path.filename
 * @param url
 */
function filename(url) {
    const slashIndex = url ? url.lastIndexOf('/') : -1;
    return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';
}
/**
 * Replacement for Node.js path.dirname
 * @param url
 */
function dirname(url) {
    const slashIndex = url ? url.lastIndexOf('/') : -1;
    return slashIndex >= 0 ? url.substr(0, slashIndex) : '';
}
/**
 * Replacement for Node.js path.join
 * @param parts
 */
function join(...parts) {
    const separator = '/';
    parts = parts.map((part, index) => {
        if (index) {
            part = part.replace(new RegExp(`^${separator}`), '');
        }
        if (index !== parts.length - 1) {
            part = part.replace(new RegExp(`${separator}$`), '');
        }
        return part;
    });
    return parts.join(separator);
}
/* eslint-disable no-continue */
/**
 * https://nodejs.org/api/path.html#path_path_resolve_paths
 * @param paths A sequence of paths or path segments.
 * @return resolved path
 * Forked from BTOdell/path-resolve under MIT license
 * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE
 */
function resolve(...components) {
    const paths = [];
    for (let _i = 0; _i < components.length; _i++) {
        paths[_i] = components[_i];
    }
    let resolvedPath = '';
    let resolvedAbsolute = false;
    let cwd;
    for (let i = paths.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        let path;
        if (i >= 0) {
            path = paths[i];
        }
        else {
            if (cwd === undefined) {
                cwd = (0,_get_cwd_js__WEBPACK_IMPORTED_MODULE_0__.getCWD)();
            }
            path = cwd;
        }
        // Skip empty entries
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = path.charCodeAt(0) === SLASH;
    }
    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)
    // Normalize the path (removes leading slash)
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
    if (resolvedAbsolute) {
        return `/${resolvedPath}`;
    }
    else if (resolvedPath.length > 0) {
        return resolvedPath;
    }
    return '.';
}
const SLASH = 47;
const DOT = 46;
/**
 * Resolves . and .. elements in a path with directory names
 * Forked from BTOdell/path-resolve under MIT license
 * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE
 */
/* eslint-disable max-depth */
// eslint-disable-next-line complexity, max-statements
function normalizeStringPosix(path, allowAboveRoot) {
    let res = '';
    let lastSlash = -1;
    let dots = 0;
    let code;
    let isAboveRoot = false;
    for (let i = 0; i <= path.length; ++i) {
        if (i < path.length) {
            code = path.charCodeAt(i);
        }
        else if (code === SLASH) {
            break;
        }
        else {
            code = SLASH;
        }
        if (code === SLASH) {
            if (lastSlash === i - 1 || dots === 1) {
                // NOOP
            }
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 ||
                    !isAboveRoot ||
                    res.charCodeAt(res.length - 1) !== DOT ||
                    res.charCodeAt(res.length - 2) !== DOT) {
                    if (res.length > 2) {
                        const start = res.length - 1;
                        let j = start;
                        for (; j >= 0; --j) {
                            if (res.charCodeAt(j) === SLASH) {
                                break;
                            }
                        }
                        if (j !== start) {
                            res = j === -1 ? '' : res.slice(0, j);
                            lastSlash = i;
                            dots = 0;
                            isAboveRoot = false;
                            continue;
                        }
                    }
                    else if (res.length === 2 || res.length === 1) {
                        res = '';
                        lastSlash = i;
                        dots = 0;
                        isAboveRoot = false;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) {
                        res += '/..';
                    }
                    else {
                        res = '..';
                    }
                    isAboveRoot = true;
                }
            }
            else {
                const slice = path.slice(lastSlash + 1, i);
                if (res.length > 0) {
                    res += `/${slice}`;
                }
                else {
                    res = slice;
                }
                isAboveRoot = false;
            }
            lastSlash = i;
            dots = 0;
        }
        else if (code === DOT && dots !== -1) {
            ++dots;
        }
        else {
            dots = -1;
        }
    }
    return res;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/request-utils/request-scheduler.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/request-utils/request-scheduler.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RequestScheduler)
/* harmony export */ });
/* harmony import */ var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/stats */ "./node_modules/@probe.gl/stats/dist/index.js");

const STAT_QUEUED_REQUESTS = 'Queued Requests';
const STAT_ACTIVE_REQUESTS = 'Active Requests';
const STAT_CANCELLED_REQUESTS = 'Cancelled Requests';
const STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';
const STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';
const DEFAULT_PROPS = {
    id: 'request-scheduler',
    /** Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing. */
    throttleRequests: true,
    /** The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit. */
    maxRequests: 6,
    /**
     * Specifies a debounce time, in milliseconds. All requests are queued, until no new requests have
     * been added to the queue for this amount of time.
     */
    debounceTime: 0
};
/**
 * Used to issue a request, without having them "deeply queued" by the browser.
 * @todo - Track requests globally, across multiple servers
 */
class RequestScheduler {
    props;
    stats;
    activeRequestCount = 0;
    /** Tracks the number of active requests and prioritizes/cancels queued requests. */
    requestQueue = [];
    requestMap = new Map();
    updateTimer = null;
    constructor(props = {}) {
        this.props = { ...DEFAULT_PROPS, ...props };
        // Returns the statistics used by the request scheduler.
        this.stats = new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__.Stats({ id: this.props.id });
        this.stats.get(STAT_QUEUED_REQUESTS);
        this.stats.get(STAT_ACTIVE_REQUESTS);
        this.stats.get(STAT_CANCELLED_REQUESTS);
        this.stats.get(STAT_QUEUED_REQUESTS_EVER);
        this.stats.get(STAT_ACTIVE_REQUESTS_EVER);
    }
    /**
     * Called by an application that wants to issue a request, without having it deeply queued by the browser
     *
     * When the returned promise resolved, it is OK for the application to issue a request.
     * The promise resolves to an object that contains a `done` method.
     * When the application's request has completed (or failed), the application must call the `done` function
     *
     * @param handle
     * @param getPriority will be called when request "slots" open up,
     *    allowing the caller to update priority or cancel the request
     *    Highest priority executes first, priority < 0 cancels the request
     * @returns a promise
     *   - resolves to a object (with a `done` field) when the request can be issued without queueing,
     *   - resolves to `null` if the request has been cancelled (by the callback return < 0).
     *     In this case the application should not issue the request
     */
    scheduleRequest(handle, getPriority = () => 0) {
        // Allows throttling to be disabled
        if (!this.props.throttleRequests) {
            return Promise.resolve({ done: () => { } });
        }
        // dedupe
        if (this.requestMap.has(handle)) {
            return this.requestMap.get(handle);
        }
        const request = { handle, priority: 0, getPriority };
        const promise = new Promise((resolve) => {
            // @ts-ignore
            request.resolve = resolve;
            return request;
        });
        this.requestQueue.push(request);
        this.requestMap.set(handle, promise);
        this._issueNewRequests();
        return promise;
    }
    // PRIVATE
    _issueRequest(request) {
        const { handle, resolve } = request;
        let isDone = false;
        const done = () => {
            // can only be called once
            if (!isDone) {
                isDone = true;
                // Stop tracking a request - it has completed, failed, cancelled etc
                this.requestMap.delete(handle);
                this.activeRequestCount--;
                // A slot just freed up, see if any queued requests are waiting
                this._issueNewRequests();
            }
        };
        // Track this request
        this.activeRequestCount++;
        return resolve ? resolve({ done }) : Promise.resolve({ done });
    }
    /** We check requests asynchronously, to prevent multiple updates */
    _issueNewRequests() {
        if (this.updateTimer !== null) {
            clearTimeout(this.updateTimer);
        }
        this.updateTimer = setTimeout(() => this._issueNewRequestsAsync(), this.props.debounceTime);
    }
    /** Refresh all requests  */
    _issueNewRequestsAsync() {
        if (this.updateTimer !== null) {
            clearTimeout(this.updateTimer);
        }
        this.updateTimer = null;
        const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);
        if (freeSlots === 0) {
            return;
        }
        this._updateAllRequests();
        // Resolve pending promises for the top-priority requests
        for (let i = 0; i < freeSlots; ++i) {
            const request = this.requestQueue.shift();
            if (request) {
                this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises
            }
        }
        // Uncomment to debug
        // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);
    }
    /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */
    _updateAllRequests() {
        const requestQueue = this.requestQueue;
        for (let i = 0; i < requestQueue.length; ++i) {
            const request = requestQueue[i];
            if (!this._updateRequest(request)) {
                // Remove the element and make sure to adjust the counter to account for shortened array
                requestQueue.splice(i, 1);
                this.requestMap.delete(request.handle);
                i--;
            }
        }
        // Sort the remaining requests based on priority
        requestQueue.sort((a, b) => a.priority - b.priority);
    }
    /** Update a single request by calling the callback */
    _updateRequest(request) {
        request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return
        // by returning a negative priority, the callback cancels the request
        if (request.priority < 0) {
            request.resolve(null);
            return false;
        }
        return true;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/lib/worker-loader-utils/parse-with-worker.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/lib/worker-loader-utils/parse-with-worker.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canParseWithWorker: () => (/* binding */ canParseWithWorker),
/* harmony export */   parseWithWorker: () => (/* binding */ parseWithWorker)
/* harmony export */ });
/* harmony import */ var _loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/worker-utils */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js");
/* harmony import */ var _loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @loaders.gl/worker-utils */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-farm.js");
/* harmony import */ var _loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @loaders.gl/worker-utils */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/get-worker-url.js");


/**
 * Determines if a loader can parse with worker
 * @param loader
 * @param options
 */
function canParseWithWorker(loader, options) {
    if (!_loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_0__["default"].isSupported()) {
        return false;
    }
    // Node workers are still experimental
    if (!_loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_1__.isBrowser && !options?._nodeWorkers) {
        return false;
    }
    return loader.worker && options?.worker;
}
/**
 * this function expects that the worker function sends certain messages,
 * this can be automated if the worker is wrapper by a call to createLoaderWorker in @loaders.gl/loader-utils.
 */
async function parseWithWorker(loader, data, options, context, parseOnMainThread) {
    const name = loader.id; // TODO
    const url = (0,_loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_2__.getWorkerURL)(loader, options);
    const workerFarm = _loaders_gl_worker_utils__WEBPACK_IMPORTED_MODULE_0__["default"].getWorkerFarm(options);
    const workerPool = workerFarm.getWorkerPool({ name, url });
    // options.log object contains functions which cannot be transferred
    // context.fetch & context.parse functions cannot be transferred
    // TODO - decide how to handle logging on workers
    options = JSON.parse(JSON.stringify(options));
    context = JSON.parse(JSON.stringify(context || {}));
    const job = await workerPool.startJob('process-on-worker', 
    // @ts-expect-error
    onMessage.bind(null, parseOnMainThread) // eslint-disable-line @typescript-eslint/no-misused-promises
    );
    job.postMessage('process', {
        // @ts-ignore
        input: data,
        options,
        context
    });
    const result = await job.result;
    // TODO - what is going on here?
    return await result.result;
}
/**
 * Handle worker's responses to the main thread
 * @param job
 * @param type
 * @param payload
 */
async function onMessage(parseOnMainThread, job, type, payload) {
    switch (type) {
        case 'done':
            job.done(payload);
            break;
        case 'error':
            job.error(new Error(payload.error));
            break;
        case 'process':
            // Worker is asking for main thread to parseO
            const { id, input, options } = payload;
            try {
                const result = await parseOnMainThread(input, options);
                job.postMessage('done', { id, result });
            }
            catch (error) {
                const message = error instanceof Error ? error.message : 'unknown error';
                job.postMessage('error', { id, error: message });
            }
            break;
        default:
            // eslint-disable-next-line
            console.warn(`parse-with-worker unknown message ${type}`);
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/loader-utils/dist/loader-types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@loaders.gl/loader-utils/dist/loader-types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseFromContext: () => (/* binding */ parseFromContext),
/* harmony export */   parseInBatchesFromContext: () => (/* binding */ parseInBatchesFromContext),
/* harmony export */   parseSyncFromContext: () => (/* binding */ parseSyncFromContext)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Parses `data` using a specified loader
 * @param data
 * @param loaders
 * @param options
 * @param context
 */
// implementation signature
async function parseFromContext(data, loaders, options, context) {
    return context._parse(data, loaders, options, context);
}
/**
 * Parses `data` synchronously using the specified loader, parse function provided via the loader context
 */
function parseSyncFromContext(data, loader, options, context) {
    if (!context._parseSync) {
        throw new Error('parseSync');
    }
    return context._parseSync(data, loader, options, context);
}
/**
 * Parses `data` synchronously using a specified loader, parse function provided via the loader context
 */
async function parseInBatchesFromContext(data, loader, options, context) {
    if (!context._parseInBatches) {
        throw new Error('parseInBatches');
    }
    return context._parseInBatches(data, loader, options, context);
}


/***/ }),

/***/ "./node_modules/@loaders.gl/schema/dist/lib/mesh/mesh-utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@loaders.gl/schema/dist/lib/mesh/mesh-utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMeshBoundingBox: () => (/* binding */ getMeshBoundingBox),
/* harmony export */   getMeshSize: () => (/* binding */ getMeshSize)
/* harmony export */ });
/**
 * Get number of vertices in mesh
 * @param attributes
 */
function getMeshSize(attributes) {
    let size = 0;
    for (const attributeName in attributes) {
        const attribute = attributes[attributeName];
        if (ArrayBuffer.isView(attribute)) {
            // @ts-ignore DataView doesn't have BYTES_PER_ELEMENT
            size += attribute.byteLength * attribute.BYTES_PER_ELEMENT;
        }
    }
    return size;
}
/**
 * Get the (axis aligned) bounding box of a mesh
 * @param attributes
 * @returns array of two vectors representing the axis aligned bounding box
 */
// eslint-disable-next-line complexity
function getMeshBoundingBox(attributes) {
    let minX = Infinity;
    let minY = Infinity;
    let minZ = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let maxZ = -Infinity;
    const positions = attributes.POSITION ? attributes.POSITION.value : [];
    const len = positions && positions.length;
    for (let i = 0; i < len; i += 3) {
        const x = positions[i];
        const y = positions[i + 1];
        const z = positions[i + 2];
        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        minZ = z < minZ ? z : minZ;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
        maxZ = z > maxZ ? z : maxZ;
    }
    return [
        [minX, minY, minZ],
        [maxX, maxY, maxZ]
    ];
}


/***/ }),

/***/ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/base-table-batch-aggregator.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/schema/dist/lib/table/batches/base-table-batch-aggregator.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseTableBatchAggregator: () => (/* binding */ BaseTableBatchAggregator)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const DEFAULT_ROW_COUNT = 100;
class BaseTableBatchAggregator {
    schema;
    options;
    shape;
    length = 0;
    rows = null;
    cursor = 0;
    _headers = [];
    constructor(schema, options) {
        this.options = options;
        this.schema = schema;
        // schema is an array if there're no headers
        // object if there are headers
        if (!Array.isArray(schema)) {
            this._headers = [];
            for (const key in schema) {
                this._headers[schema[key].index] = schema[key].name;
            }
        }
    }
    rowCount() {
        return this.length;
    }
    addArrayRow(row, cursor) {
        if (Number.isFinite(cursor)) {
            this.cursor = cursor;
        }
        this.shape = 'array-row-table';
        this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);
        this.rows[this.length] = row;
        this.length++;
    }
    addObjectRow(row, cursor) {
        if (Number.isFinite(cursor)) {
            this.cursor = cursor;
        }
        this.shape = 'object-row-table';
        this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);
        this.rows[this.length] = row;
        this.length++;
    }
    getBatch() {
        let rows = this.rows;
        if (!rows) {
            return null;
        }
        rows = rows.slice(0, this.length);
        this.rows = null;
        const batch = {
            shape: this.shape || 'array-row-table',
            batchType: 'data',
            data: rows,
            length: this.length,
            schema: this.schema,
            cursor: this.cursor
        };
        return batch;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/columnar-table-batch-aggregator.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/schema/dist/lib/table/batches/columnar-table-batch-aggregator.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnarTableBatchAggregator: () => (/* binding */ ColumnarTableBatchAggregator)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const DEFAULT_ROW_COUNT = 100;
class ColumnarTableBatchAggregator {
    schema;
    length = 0;
    allocated = 0;
    columns = {};
    constructor(schema, options) {
        this.schema = schema;
        this._reallocateColumns();
    }
    rowCount() {
        return this.length;
    }
    addArrayRow(row) {
        // If user keeps pushing rows beyond batch size, reallocate
        this._reallocateColumns();
        let i = 0;
        // TODO what if no csv header, columns not populated?
        for (const fieldName in this.columns) {
            this.columns[fieldName][this.length] = row[i++];
        }
        this.length++;
    }
    addObjectRow(row) {
        // If user keeps pushing rows beyond batch size, reallocate
        this._reallocateColumns();
        for (const fieldName in row) {
            this.columns[fieldName][this.length] = row[fieldName];
        }
        this.length++;
    }
    getBatch() {
        this._pruneColumns();
        const columns = Array.isArray(this.schema) ? this.columns : {};
        // schema is an array if there're no headers
        // object if there are headers
        // columns should match schema format
        if (!Array.isArray(this.schema)) {
            for (const fieldName in this.schema) {
                const field = this.schema[fieldName];
                columns[field.name] = this.columns[field.index];
            }
        }
        this.columns = {};
        const batch = {
            shape: 'columnar-table',
            batchType: 'data',
            data: columns,
            schema: this.schema,
            length: this.length
        };
        return batch;
    }
    // HELPERS
    _reallocateColumns() {
        if (this.length < this.allocated) {
            return;
        }
        // @ts-ignore TODO
        this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;
        this.columns = {};
        for (const fieldName in this.schema) {
            const field = this.schema[fieldName];
            const ArrayType = field.type || Float32Array;
            const oldColumn = this.columns[field.index];
            if (oldColumn && ArrayBuffer.isView(oldColumn)) {
                // Copy the old data to the new array
                const typedArray = new ArrayType(this.allocated);
                typedArray.set(oldColumn);
                this.columns[field.index] = typedArray;
            }
            else if (oldColumn) {
                // Plain array
                oldColumn.length = this.allocated;
                this.columns[field.index] = oldColumn;
            }
            else {
                // Create new
                this.columns[field.index] = new ArrayType(this.allocated);
            }
        }
    }
    _pruneColumns() {
        for (const [columnName, column] of Object.entries(this.columns)) {
            this.columns[columnName] = column.slice(0, this.length);
        }
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/row-table-batch-aggregator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/schema/dist/lib/table/batches/row-table-batch-aggregator.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RowTableBatchAggregator: () => (/* binding */ RowTableBatchAggregator)
/* harmony export */ });
/* harmony import */ var _simple_table_row_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../simple-table/row-utils.js */ "./node_modules/@loaders.gl/schema/dist/lib/table/simple-table/row-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const DEFAULT_ROW_COUNT = 100;
class RowTableBatchAggregator {
    schema;
    options;
    length = 0;
    objectRows = null;
    arrayRows = null;
    cursor = 0;
    _headers = null;
    constructor(schema, options) {
        this.options = options;
        this.schema = schema;
        // schema is an array if there're no headers
        // object if there are headers
        if (schema) {
            this._headers = [];
            for (const key in schema) {
                this._headers[schema[key].index] = schema[key].name;
            }
        }
    }
    rowCount() {
        return this.length;
    }
    addArrayRow(row, cursor) {
        if (Number.isFinite(cursor)) {
            this.cursor = cursor;
        }
        // TODO - infer schema at a higher level, instead of hacking headers here?
        this._headers ||= (0,_simple_table_row_utils_js__WEBPACK_IMPORTED_MODULE_0__.inferHeadersFromArrayRow)(row);
        // eslint-disable-next-line default-case
        switch (this.options.shape) {
            case 'object-row-table':
                const rowObject = (0,_simple_table_row_utils_js__WEBPACK_IMPORTED_MODULE_0__.convertToObjectRow)(row, this._headers);
                this.addObjectRow(rowObject, cursor);
                break;
            case 'array-row-table':
                this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);
                this.arrayRows[this.length] = row;
                this.length++;
                break;
        }
    }
    addObjectRow(row, cursor) {
        if (Number.isFinite(cursor)) {
            this.cursor = cursor;
        }
        // TODO - infer schema at a higher level, instead of hacking headers here?
        this._headers ||= (0,_simple_table_row_utils_js__WEBPACK_IMPORTED_MODULE_0__.inferHeadersFromObjectRow)(row);
        // eslint-disable-next-line default-case
        switch (this.options.shape) {
            case 'array-row-table':
                const rowArray = (0,_simple_table_row_utils_js__WEBPACK_IMPORTED_MODULE_0__.convertToArrayRow)(row, this._headers);
                this.addArrayRow(rowArray, cursor);
                break;
            case 'object-row-table':
                this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);
                this.objectRows[this.length] = row;
                this.length++;
                break;
        }
    }
    getBatch() {
        let rows = this.arrayRows || this.objectRows;
        if (!rows) {
            return null;
        }
        rows = rows.slice(0, this.length);
        this.arrayRows = null;
        this.objectRows = null;
        return {
            shape: this.options.shape,
            batchType: 'data',
            data: rows,
            length: this.length,
            // @ts-expect-error we should infer a schema
            schema: this.schema,
            cursor: this.cursor
        };
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/table-batch-builder.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/schema/dist/lib/table/batches/table-batch-builder.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TableBatchBuilder: () => (/* binding */ TableBatchBuilder)
/* harmony export */ });
/* harmony import */ var _base_table_batch_aggregator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-table-batch-aggregator.js */ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/base-table-batch-aggregator.js");
/* harmony import */ var _row_table_batch_aggregator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./row-table-batch-aggregator.js */ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/row-table-batch-aggregator.js");
/* harmony import */ var _columnar_table_batch_aggregator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./columnar-table-batch-aggregator.js */ "./node_modules/@loaders.gl/schema/dist/lib/table/batches/columnar-table-batch-aggregator.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



const DEFAULT_OPTIONS = {
    shape: undefined,
    batchSize: 'auto',
    batchDebounceMs: 0,
    limit: 0,
    _limitMB: 0
};
const ERR_MESSAGE = 'TableBatchBuilder';
/** Incrementally builds batches from a stream of rows */
class TableBatchBuilder {
    schema;
    options;
    aggregator = null;
    batchCount = 0;
    bytesUsed = 0;
    isChunkComplete = false;
    lastBatchEmittedMs = Date.now();
    totalLength = 0;
    totalBytes = 0;
    rowBytes = 0;
    static ArrowBatch;
    constructor(schema, options) {
        this.schema = schema;
        this.options = { ...DEFAULT_OPTIONS, ...options };
    }
    limitReached() {
        if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {
            return true;
        }
        if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {
            return true;
        }
        return false;
    }
    /** @deprecated Use addArrayRow or addObjectRow */
    addRow(row) {
        if (this.limitReached()) {
            return;
        }
        this.totalLength++;
        this.rowBytes = this.rowBytes || this._estimateRowMB(row);
        this.totalBytes += this.rowBytes;
        if (Array.isArray(row)) {
            this.addArrayRow(row);
        }
        else {
            this.addObjectRow(row);
        }
    }
    /** Add one row to the batch */
    addArrayRow(row) {
        if (!this.aggregator) {
            const TableBatchType = this._getTableBatchType();
            this.aggregator = new TableBatchType(this.schema, this.options);
        }
        this.aggregator.addArrayRow(row);
    }
    /** Add one row to the batch */
    addObjectRow(row) {
        if (!this.aggregator) {
            const TableBatchType = this._getTableBatchType();
            this.aggregator = new TableBatchType(this.schema, this.options);
        }
        this.aggregator.addObjectRow(row);
    }
    /** Mark an incoming raw memory chunk has completed */
    chunkComplete(chunk) {
        if (chunk instanceof ArrayBuffer) {
            this.bytesUsed += chunk.byteLength;
        }
        if (typeof chunk === 'string') {
            this.bytesUsed += chunk.length;
        }
        this.isChunkComplete = true;
    }
    getFullBatch(options) {
        return this._isFull() ? this._getBatch(options) : null;
    }
    getFinalBatch(options) {
        return this._getBatch(options);
    }
    // INTERNAL
    _estimateRowMB(row) {
        return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;
    }
    _isFull() {
        // No batch, not ready
        if (!this.aggregator || this.aggregator.rowCount() === 0) {
            return false;
        }
        // if batchSize === 'auto' we wait for chunk to complete
        // if batchSize === number, ensure we have enough rows
        if (this.options.batchSize === 'auto') {
            if (!this.isChunkComplete) {
                return false;
            }
        }
        else if (this.options.batchSize > this.aggregator.rowCount()) {
            return false;
        }
        // Debounce batches
        if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {
            return false;
        }
        // Emit batch
        this.isChunkComplete = false;
        this.lastBatchEmittedMs = Date.now();
        return true;
    }
    /**
     * bytesUsed can be set via chunkComplete or via getBatch*
     */
    _getBatch(options) {
        if (!this.aggregator) {
            return null;
        }
        // TODO - this can overly increment bytes used?
        if (options?.bytesUsed) {
            this.bytesUsed = options.bytesUsed;
        }
        const normalizedBatch = this.aggregator.getBatch();
        normalizedBatch.count = this.batchCount;
        normalizedBatch.bytesUsed = this.bytesUsed;
        Object.assign(normalizedBatch, options);
        this.batchCount++;
        this.aggregator = null;
        return normalizedBatch;
    }
    _getTableBatchType() {
        switch (this.options.shape) {
            case 'array-row-table':
            case 'object-row-table':
                return _row_table_batch_aggregator_js__WEBPACK_IMPORTED_MODULE_0__.RowTableBatchAggregator;
            case 'columnar-table':
                return _columnar_table_batch_aggregator_js__WEBPACK_IMPORTED_MODULE_1__.ColumnarTableBatchAggregator;
            case 'arrow-table':
                if (!TableBatchBuilder.ArrowBatch) {
                    throw new Error(ERR_MESSAGE);
                }
                return TableBatchBuilder.ArrowBatch;
            default:
                return _base_table_batch_aggregator_js__WEBPACK_IMPORTED_MODULE_2__.BaseTableBatchAggregator;
        }
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/schema/dist/lib/table/simple-table/row-utils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/schema/dist/lib/table/simple-table/row-utils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertToArrayRow: () => (/* binding */ convertToArrayRow),
/* harmony export */   convertToObjectRow: () => (/* binding */ convertToObjectRow),
/* harmony export */   inferHeadersFromArrayRow: () => (/* binding */ inferHeadersFromArrayRow),
/* harmony export */   inferHeadersFromObjectRow: () => (/* binding */ inferHeadersFromObjectRow)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Convert an object row to an array row */
function convertToObjectRow(arrayRow, headers) {
    if (!arrayRow) {
        throw new Error('null row');
    }
    const objectRow = {};
    if (headers) {
        for (let i = 0; i < headers.length; i++) {
            objectRow[headers[i]] = arrayRow[i];
        }
    }
    else {
        for (let i = 0; i < arrayRow.length; i++) {
            const columnName = `column-${i}`;
            objectRow[columnName] = arrayRow[i];
        }
    }
    return objectRow;
}
/** Convert an object row to an array row */
function convertToArrayRow(objectRow, headers) {
    if (!objectRow) {
        throw new Error('null row');
    }
    if (headers) {
        const arrayRow = new Array(headers.length);
        for (let i = 0; i < headers.length; i++) {
            arrayRow[i] = objectRow[headers[i]];
        }
        return arrayRow;
    }
    return Object.values(objectRow);
}
/** Get headers from a sample array row */
function inferHeadersFromArrayRow(arrayRow) {
    const headers = [];
    for (let i = 0; i < arrayRow.length; i++) {
        const columnName = `column-${i}`;
        headers.push(columnName);
    }
    return headers;
}
/** Get headers from a smaple object row */
function inferHeadersFromObjectRow(row) {
    return Object.keys(row);
}


/***/ }),

/***/ "./node_modules/@loaders.gl/schema/dist/lib/utils/async-queue.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@loaders.gl/schema/dist/lib/utils/async-queue.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AsyncQueue),
/* harmony export */   takeAsync: () => (/* binding */ takeAsync)
/* harmony export */ });
// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license
// http://2ality.com/2016/10/asynchronous-iteration.html
class ArrayQueue extends Array {
    enqueue(value) {
        // Add at the end
        return this.push(value);
    }
    dequeue() {
        // Remove first element
        return this.shift();
    }
}
class AsyncQueue {
    _values;
    _settlers;
    _closed;
    constructor() {
        // enqueues > dequeues
        this._values = new ArrayQueue();
        // dequeues > enqueues
        this._settlers = new ArrayQueue();
        this._closed = false;
    }
    close() {
        while (this._settlers.length > 0) {
            this._settlers.dequeue().resolve({ done: true });
        }
        this._closed = true;
    }
    [Symbol.asyncIterator]() {
        return this;
    }
    enqueue(value) {
        if (this._closed) {
            throw new Error('Closed');
        }
        if (this._settlers.length > 0) {
            if (this._values.length > 0) {
                throw new Error('Illegal internal state');
            }
            const settler = this._settlers.dequeue();
            if (value instanceof Error) {
                settler.reject(value);
            }
            else {
                settler.resolve({ value });
            }
        }
        else {
            this._values.enqueue(value);
        }
    }
    /**
     * @returns a Promise for an IteratorResult
     */
    next() {
        if (this._values.length > 0) {
            const value = this._values.dequeue();
            if (value instanceof Error) {
                return Promise.reject(value);
            }
            return Promise.resolve({ value });
        }
        if (this._closed) {
            if (this._settlers.length > 0) {
                throw new Error('Illegal internal state');
            }
            return Promise.resolve({ done: true });
        }
        // Wait for new values to be enqueued
        return new Promise((resolve, reject) => {
            this._settlers.enqueue({ resolve, reject });
        });
    }
}
/**
 * @returns a Promise for an Array with the elements in `asyncIterable`
 */
async function takeAsync(asyncIterable, count = Infinity) {
    const result = [];
    const iterator = asyncIterable[Symbol.asyncIterator]();
    while (result.length < count) {
        const { value, done } = await iterator.next();
        if (done) {
            break;
        }
        result.push(value);
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QuantizedMeshLoader: () => (/* binding */ QuantizedMeshLoader),
/* harmony export */   QuantizedMeshWorkerLoader: () => (/* reexport safe */ _quantized_mesh_loader_js__WEBPACK_IMPORTED_MODULE_3__.QuantizedMeshLoader),
/* harmony export */   TerrainLoader: () => (/* binding */ TerrainLoader),
/* harmony export */   TerrainWorkerLoader: () => (/* reexport safe */ _terrain_loader_js__WEBPACK_IMPORTED_MODULE_0__.TerrainLoader),
/* harmony export */   parseTerrain: () => (/* binding */ parseTerrain)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/loader-types.js");
/* harmony import */ var _lib_parse_quantized_mesh_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/parse-quantized-mesh.js */ "./node_modules/@loaders.gl/terrain/dist/lib/parse-quantized-mesh.js");
/* harmony import */ var _lib_parse_terrain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/parse-terrain.js */ "./node_modules/@loaders.gl/terrain/dist/lib/parse-terrain.js");
/* harmony import */ var _terrain_loader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./terrain-loader.js */ "./node_modules/@loaders.gl/terrain/dist/terrain-loader.js");
/* harmony import */ var _quantized_mesh_loader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./quantized-mesh-loader.js */ "./node_modules/@loaders.gl/terrain/dist/quantized-mesh-loader.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors





// TerrainLoader

const TerrainLoader = {
    ..._terrain_loader_js__WEBPACK_IMPORTED_MODULE_0__.TerrainLoader,
    parse: parseTerrain
};
async function parseTerrain(arrayBuffer, options, context) {
    const loadImageOptions = {
        ...options,
        mimeType: 'application/x.image',
        image: { ...options?.image, type: 'data' }
    };
    const image = await (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_1__.parseFromContext)(arrayBuffer, [], loadImageOptions, context);
    // Extend function to support additional mesh generation options (square grid or delatin)
    const terrainOptions = { ...TerrainLoader.options.terrain, ...options?.terrain };
    // @ts-expect-error sort out image typing asap
    return (0,_lib_parse_terrain_js__WEBPACK_IMPORTED_MODULE_2__.makeTerrainMeshFromImage)(image, terrainOptions);
}
// QuantizedMeshLoader

/**
 * Loader for quantized meshes
 */
const QuantizedMeshLoader = {
    ..._quantized_mesh_loader_js__WEBPACK_IMPORTED_MODULE_3__.QuantizedMeshLoader,
    parseSync: (arrayBuffer, options) => (0,_lib_parse_quantized_mesh_js__WEBPACK_IMPORTED_MODULE_4__.parseQuantizedMesh)(arrayBuffer, options?.['quantized-mesh']),
    parse: async (arrayBuffer, options) => (0,_lib_parse_quantized_mesh_js__WEBPACK_IMPORTED_MODULE_4__.parseQuantizedMesh)(arrayBuffer, options?.['quantized-mesh'])
};


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/lib/decode-quantized-mesh.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/lib/decode-quantized-mesh.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DECODING_STEPS: () => (/* binding */ DECODING_STEPS),
/* harmony export */   "default": () => (/* binding */ decode)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Copyright (C) 2018-2019 HERE Europe B.V.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
const QUANTIZED_MESH_HEADER = new Map([
    ['centerX', Float64Array.BYTES_PER_ELEMENT],
    ['centerY', Float64Array.BYTES_PER_ELEMENT],
    ['centerZ', Float64Array.BYTES_PER_ELEMENT],
    ['minHeight', Float32Array.BYTES_PER_ELEMENT],
    ['maxHeight', Float32Array.BYTES_PER_ELEMENT],
    ['boundingSphereCenterX', Float64Array.BYTES_PER_ELEMENT],
    ['boundingSphereCenterY', Float64Array.BYTES_PER_ELEMENT],
    ['boundingSphereCenterZ', Float64Array.BYTES_PER_ELEMENT],
    ['boundingSphereRadius', Float64Array.BYTES_PER_ELEMENT],
    ['horizonOcclusionPointX', Float64Array.BYTES_PER_ELEMENT],
    ['horizonOcclusionPointY', Float64Array.BYTES_PER_ELEMENT],
    ['horizonOcclusionPointZ', Float64Array.BYTES_PER_ELEMENT]
]);
function decodeZigZag(value) {
    return (value >> 1) ^ -(value & 1);
}
function decodeHeader(dataView) {
    let position = 0;
    const header = {};
    for (const [key, bytesCount] of QUANTIZED_MESH_HEADER) {
        const getter = bytesCount === 8 ? dataView.getFloat64 : dataView.getFloat32;
        header[key] = getter.call(dataView, position, true);
        position += bytesCount;
    }
    return { header, headerEndPosition: position };
}
function decodeVertexData(dataView, headerEndPosition) {
    let position = headerEndPosition;
    const elementsPerVertex = 3;
    const vertexCount = dataView.getUint32(position, true);
    const vertexData = new Uint16Array(vertexCount * elementsPerVertex);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const bytesPerArrayElement = Uint16Array.BYTES_PER_ELEMENT;
    const elementArrayLength = vertexCount * bytesPerArrayElement;
    const uArrayStartPosition = position;
    const vArrayStartPosition = uArrayStartPosition + elementArrayLength;
    const heightArrayStartPosition = vArrayStartPosition + elementArrayLength;
    let u = 0;
    let v = 0;
    let height = 0;
    for (let i = 0; i < vertexCount; i++) {
        u += decodeZigZag(dataView.getUint16(uArrayStartPosition + bytesPerArrayElement * i, true));
        v += decodeZigZag(dataView.getUint16(vArrayStartPosition + bytesPerArrayElement * i, true));
        height += decodeZigZag(dataView.getUint16(heightArrayStartPosition + bytesPerArrayElement * i, true));
        vertexData[i] = u;
        vertexData[i + vertexCount] = v;
        vertexData[i + vertexCount * 2] = height;
    }
    position += elementArrayLength * 3;
    return { vertexData, vertexDataEndPosition: position };
}
function decodeIndex(buffer, position, indicesCount, bytesPerIndex, encoded = true) {
    let indices;
    if (bytesPerIndex === 2) {
        indices = new Uint16Array(buffer, position, indicesCount);
    }
    else {
        indices = new Uint32Array(buffer, position, indicesCount);
    }
    if (!encoded) {
        return indices;
    }
    let highest = 0;
    for (let i = 0; i < indices.length; ++i) {
        const code = indices[i];
        indices[i] = highest - code;
        if (code === 0) {
            ++highest;
        }
    }
    return indices;
}
function decodeTriangleIndices(dataView, vertexData, vertexDataEndPosition) {
    let position = vertexDataEndPosition;
    const elementsPerVertex = 3;
    const vertexCount = vertexData.length / elementsPerVertex;
    const bytesPerIndex = vertexCount > 65536 ? Uint32Array.BYTES_PER_ELEMENT : Uint16Array.BYTES_PER_ELEMENT;
    if (position % bytesPerIndex !== 0) {
        position += bytesPerIndex - (position % bytesPerIndex);
    }
    const triangleCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const triangleIndicesCount = triangleCount * 3;
    const triangleIndices = decodeIndex(dataView.buffer, position, triangleIndicesCount, bytesPerIndex);
    position += triangleIndicesCount * bytesPerIndex;
    return {
        triangleIndicesEndPosition: position,
        triangleIndices
    };
}
function decodeEdgeIndices(dataView, vertexData, triangleIndicesEndPosition) {
    let position = triangleIndicesEndPosition;
    const elementsPerVertex = 3;
    const vertexCount = vertexData.length / elementsPerVertex;
    const bytesPerIndex = vertexCount > 65536 ? Uint32Array.BYTES_PER_ELEMENT : Uint16Array.BYTES_PER_ELEMENT;
    const westVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const westIndices = decodeIndex(dataView.buffer, position, westVertexCount, bytesPerIndex, false);
    position += westVertexCount * bytesPerIndex;
    const southVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const southIndices = decodeIndex(dataView.buffer, position, southVertexCount, bytesPerIndex, false);
    position += southVertexCount * bytesPerIndex;
    const eastVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const eastIndices = decodeIndex(dataView.buffer, position, eastVertexCount, bytesPerIndex, false);
    position += eastVertexCount * bytesPerIndex;
    const northVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const northIndices = decodeIndex(dataView.buffer, position, northVertexCount, bytesPerIndex, false);
    position += northVertexCount * bytesPerIndex;
    return {
        edgeIndicesEndPosition: position,
        westIndices,
        southIndices,
        eastIndices,
        northIndices
    };
}
function decodeVertexNormalsExtension(extensionDataView) {
    return new Uint8Array(extensionDataView.buffer, extensionDataView.byteOffset, extensionDataView.byteLength);
}
function decodeWaterMaskExtension(extensionDataView) {
    return extensionDataView.buffer.slice(extensionDataView.byteOffset, extensionDataView.byteOffset + extensionDataView.byteLength);
}
function decodeExtensions(dataView, indicesEndPosition) {
    const extensions = {};
    if (dataView.byteLength <= indicesEndPosition) {
        return { extensions, extensionsEndPosition: indicesEndPosition };
    }
    let position = indicesEndPosition;
    while (position < dataView.byteLength) {
        const extensionId = dataView.getUint8(position, true);
        position += Uint8Array.BYTES_PER_ELEMENT;
        const extensionLength = dataView.getUint32(position, true);
        position += Uint32Array.BYTES_PER_ELEMENT;
        const extensionView = new DataView(dataView.buffer, position, extensionLength);
        switch (extensionId) {
            case 1: {
                extensions.vertexNormals = decodeVertexNormalsExtension(extensionView);
                break;
            }
            case 2: {
                extensions.waterMask = decodeWaterMaskExtension(extensionView);
                break;
            }
            default: {
                // console.warn(`Unknown extension with id ${extensionId}`)
            }
        }
        position += extensionLength;
    }
    return { extensions, extensionsEndPosition: position };
}
const DECODING_STEPS = {
    header: 0,
    vertices: 1,
    triangleIndices: 2,
    edgeIndices: 3,
    extensions: 4
};
const DEFAULT_OPTIONS = {
    maxDecodingStep: DECODING_STEPS.extensions
};
function decode(data, userOptions) {
    const options = Object.assign({}, DEFAULT_OPTIONS, userOptions);
    const view = new DataView(data);
    const { header, headerEndPosition } = decodeHeader(view);
    if (options.maxDecodingStep < DECODING_STEPS.vertices) {
        return { header };
    }
    const { vertexData, vertexDataEndPosition } = decodeVertexData(view, headerEndPosition);
    if (options.maxDecodingStep < DECODING_STEPS.triangleIndices) {
        return { header, vertexData };
    }
    const { triangleIndices, triangleIndicesEndPosition } = decodeTriangleIndices(view, vertexData, vertexDataEndPosition);
    if (options.maxDecodingStep < DECODING_STEPS.edgeIndices) {
        return { header, vertexData, triangleIndices };
    }
    const { westIndices, southIndices, eastIndices, northIndices, edgeIndicesEndPosition } = decodeEdgeIndices(view, vertexData, triangleIndicesEndPosition);
    if (options.maxDecodingStep < DECODING_STEPS.extensions) {
        return {
            header,
            vertexData,
            triangleIndices,
            westIndices,
            northIndices,
            eastIndices,
            southIndices
        };
    }
    const { extensions } = decodeExtensions(view, edgeIndicesEndPosition);
    return {
        header,
        vertexData,
        triangleIndices,
        westIndices,
        northIndices,
        eastIndices,
        southIndices,
        extensions
    };
}


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/lib/delatin/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/lib/delatin/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Delatin)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// ISC License
// Copyright(c) 2019, Michael Fogleman, Vladimir Agafonkin
// @ts-nocheck
/* eslint-disable complexity, max-params, max-statements, max-depth, no-constant-condition */
class Delatin {
    constructor(data, width, height = width) {
        this.data = data; // height data
        this.width = width;
        this.height = height;
        this.coords = []; // vertex coordinates (x, y)
        this.triangles = []; // mesh triangle indices
        // additional triangle data
        this._halfedges = [];
        this._candidates = [];
        this._queueIndices = [];
        this._queue = []; // queue of added triangles
        this._errors = [];
        this._rms = [];
        this._pending = []; // triangles pending addition to queue
        this._pendingLen = 0;
        this._rmsSum = 0;
        const x1 = width - 1;
        const y1 = height - 1;
        const p0 = this._addPoint(0, 0);
        const p1 = this._addPoint(x1, 0);
        const p2 = this._addPoint(0, y1);
        const p3 = this._addPoint(x1, y1);
        // add initial two triangles
        const t0 = this._addTriangle(p3, p0, p2, -1, -1, -1);
        this._addTriangle(p0, p3, p1, t0, -1, -1);
        this._flush();
    }
    // refine the mesh until its maximum error gets below the given one
    run(maxError = 1) {
        while (this.getMaxError() > maxError) {
            this.refine();
        }
    }
    // refine the mesh with a single point
    refine() {
        this._step();
        this._flush();
    }
    // max error of the current mesh
    getMaxError() {
        return this._errors[0];
    }
    // root-mean-square deviation of the current mesh
    getRMSD() {
        return this._rmsSum > 0 ? Math.sqrt(this._rmsSum / (this.width * this.height)) : 0;
    }
    // height value at a given position
    heightAt(x, y) {
        return this.data[this.width * y + x];
    }
    // rasterize and queue all triangles that got added or updated in _step
    _flush() {
        const coords = this.coords;
        for (let i = 0; i < this._pendingLen; i++) {
            const t = this._pending[i];
            // rasterize triangle to find maximum pixel error
            const a = 2 * this.triangles[t * 3 + 0];
            const b = 2 * this.triangles[t * 3 + 1];
            const c = 2 * this.triangles[t * 3 + 2];
            this._findCandidate(coords[a], coords[a + 1], coords[b], coords[b + 1], coords[c], coords[c + 1], t);
        }
        this._pendingLen = 0;
    }
    // rasterize a triangle, find its max error, and queue it for processing
    _findCandidate(p0x, p0y, p1x, p1y, p2x, p2y, t) {
        // triangle bounding box
        const minX = Math.min(p0x, p1x, p2x);
        const minY = Math.min(p0y, p1y, p2y);
        const maxX = Math.max(p0x, p1x, p2x);
        const maxY = Math.max(p0y, p1y, p2y);
        // forward differencing variables
        let w00 = orient(p1x, p1y, p2x, p2y, minX, minY);
        let w01 = orient(p2x, p2y, p0x, p0y, minX, minY);
        let w02 = orient(p0x, p0y, p1x, p1y, minX, minY);
        const a01 = p1y - p0y;
        const b01 = p0x - p1x;
        const a12 = p2y - p1y;
        const b12 = p1x - p2x;
        const a20 = p0y - p2y;
        const b20 = p2x - p0x;
        // pre-multiplied z values at vertices
        const a = orient(p0x, p0y, p1x, p1y, p2x, p2y);
        const z0 = this.heightAt(p0x, p0y) / a;
        const z1 = this.heightAt(p1x, p1y) / a;
        const z2 = this.heightAt(p2x, p2y) / a;
        // iterate over pixels in bounding box
        let maxError = 0;
        let mx = 0;
        let my = 0;
        let rms = 0;
        for (let y = minY; y <= maxY; y++) {
            // compute starting offset
            let dx = 0;
            if (w00 < 0 && a12 !== 0) {
                dx = Math.max(dx, Math.floor(-w00 / a12));
            }
            if (w01 < 0 && a20 !== 0) {
                dx = Math.max(dx, Math.floor(-w01 / a20));
            }
            if (w02 < 0 && a01 !== 0) {
                dx = Math.max(dx, Math.floor(-w02 / a01));
            }
            let w0 = w00 + a12 * dx;
            let w1 = w01 + a20 * dx;
            let w2 = w02 + a01 * dx;
            let wasInside = false;
            for (let x = minX + dx; x <= maxX; x++) {
                // check if inside triangle
                if (w0 >= 0 && w1 >= 0 && w2 >= 0) {
                    wasInside = true;
                    // compute z using barycentric coordinates
                    const z = z0 * w0 + z1 * w1 + z2 * w2;
                    const dz = Math.abs(z - this.heightAt(x, y));
                    rms += dz * dz;
                    if (dz > maxError) {
                        maxError = dz;
                        mx = x;
                        my = y;
                    }
                }
                else if (wasInside) {
                    break;
                }
                w0 += a12;
                w1 += a20;
                w2 += a01;
            }
            w00 += b12;
            w01 += b20;
            w02 += b01;
        }
        if ((mx === p0x && my === p0y) || (mx === p1x && my === p1y) || (mx === p2x && my === p2y)) {
            maxError = 0;
        }
        // update triangle metadata
        this._candidates[2 * t] = mx;
        this._candidates[2 * t + 1] = my;
        this._rms[t] = rms;
        // add triangle to priority queue
        this._queuePush(t, maxError, rms);
    }
    // process the next triangle in the queue, splitting it with a new point
    _step() {
        // pop triangle with highest error from priority queue
        const t = this._queuePop();
        const e0 = t * 3 + 0;
        const e1 = t * 3 + 1;
        const e2 = t * 3 + 2;
        const p0 = this.triangles[e0];
        const p1 = this.triangles[e1];
        const p2 = this.triangles[e2];
        const ax = this.coords[2 * p0];
        const ay = this.coords[2 * p0 + 1];
        const bx = this.coords[2 * p1];
        const by = this.coords[2 * p1 + 1];
        const cx = this.coords[2 * p2];
        const cy = this.coords[2 * p2 + 1];
        const px = this._candidates[2 * t];
        const py = this._candidates[2 * t + 1];
        const pn = this._addPoint(px, py);
        if (orient(ax, ay, bx, by, px, py) === 0) {
            this._handleCollinear(pn, e0);
        }
        else if (orient(bx, by, cx, cy, px, py) === 0) {
            this._handleCollinear(pn, e1);
        }
        else if (orient(cx, cy, ax, ay, px, py) === 0) {
            this._handleCollinear(pn, e2);
        }
        else {
            const h0 = this._halfedges[e0];
            const h1 = this._halfedges[e1];
            const h2 = this._halfedges[e2];
            const t0 = this._addTriangle(p0, p1, pn, h0, -1, -1, e0);
            const t1 = this._addTriangle(p1, p2, pn, h1, -1, t0 + 1);
            const t2 = this._addTriangle(p2, p0, pn, h2, t0 + 2, t1 + 1);
            this._legalize(t0);
            this._legalize(t1);
            this._legalize(t2);
        }
    }
    // add coordinates for a new vertex
    _addPoint(x, y) {
        const i = this.coords.length >> 1;
        this.coords.push(x, y);
        return i;
    }
    // add or update a triangle in the mesh
    _addTriangle(a, b, c, ab, bc, ca, e = this.triangles.length) {
        const t = e / 3; // new triangle index
        // add triangle vertices
        this.triangles[e + 0] = a;
        this.triangles[e + 1] = b;
        this.triangles[e + 2] = c;
        // add triangle halfedges
        this._halfedges[e + 0] = ab;
        this._halfedges[e + 1] = bc;
        this._halfedges[e + 2] = ca;
        // link neighboring halfedges
        if (ab >= 0) {
            this._halfedges[ab] = e + 0;
        }
        if (bc >= 0) {
            this._halfedges[bc] = e + 1;
        }
        if (ca >= 0) {
            this._halfedges[ca] = e + 2;
        }
        // init triangle metadata
        this._candidates[2 * t + 0] = 0;
        this._candidates[2 * t + 1] = 0;
        this._queueIndices[t] = -1;
        this._rms[t] = 0;
        // add triangle to pending queue for later rasterization
        this._pending[this._pendingLen++] = t;
        // return first halfedge index
        return e;
    }
    _legalize(a) {
        // if the pair of triangles doesn't satisfy the Delaunay condition
        // (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
        // then do the same check/flip recursively for the new pair of triangles
        //
        //           pl                    pl
        //          /||\                  /  \
        //       al/ || \bl            al/    \a
        //        /  ||  \              /      \
        //       /  a||b  \    flip    /___ar___\
        //     p0\   ||   /p1   =>   p0\---bl---/p1
        //        \  ||  /              \      /
        //       ar\ || /br             b\    /br
        //          \||/                  \  /
        //           pr                    pr
        const b = this._halfedges[a];
        if (b < 0) {
            return;
        }
        const a0 = a - (a % 3);
        const b0 = b - (b % 3);
        const al = a0 + ((a + 1) % 3);
        const ar = a0 + ((a + 2) % 3);
        const bl = b0 + ((b + 2) % 3);
        const br = b0 + ((b + 1) % 3);
        const p0 = this.triangles[ar];
        const pr = this.triangles[a];
        const pl = this.triangles[al];
        const p1 = this.triangles[bl];
        const coords = this.coords;
        if (!inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1])) {
            return;
        }
        const hal = this._halfedges[al];
        const har = this._halfedges[ar];
        const hbl = this._halfedges[bl];
        const hbr = this._halfedges[br];
        this._queueRemove(a0 / 3);
        this._queueRemove(b0 / 3);
        const t0 = this._addTriangle(p0, p1, pl, -1, hbl, hal, a0);
        const t1 = this._addTriangle(p1, p0, pr, t0, har, hbr, b0);
        this._legalize(t0 + 1);
        this._legalize(t1 + 2);
    }
    // handle a case where new vertex is on the edge of a triangle
    _handleCollinear(pn, a) {
        const a0 = a - (a % 3);
        const al = a0 + ((a + 1) % 3);
        const ar = a0 + ((a + 2) % 3);
        const p0 = this.triangles[ar];
        const pr = this.triangles[a];
        const pl = this.triangles[al];
        const hal = this._halfedges[al];
        const har = this._halfedges[ar];
        const b = this._halfedges[a];
        if (b < 0) {
            const t0 = this._addTriangle(pn, p0, pr, -1, har, -1, a0);
            const t1 = this._addTriangle(p0, pn, pl, t0, -1, hal);
            this._legalize(t0 + 1);
            this._legalize(t1 + 2);
            return;
        }
        const b0 = b - (b % 3);
        const bl = b0 + ((b + 2) % 3);
        const br = b0 + ((b + 1) % 3);
        const p1 = this.triangles[bl];
        const hbl = this._halfedges[bl];
        const hbr = this._halfedges[br];
        this._queueRemove(b0 / 3);
        const t0 = this._addTriangle(p0, pr, pn, har, -1, -1, a0);
        const t1 = this._addTriangle(pr, p1, pn, hbr, -1, t0 + 1, b0);
        const t2 = this._addTriangle(p1, pl, pn, hbl, -1, t1 + 1);
        const t3 = this._addTriangle(pl, p0, pn, hal, t0 + 2, t2 + 1);
        this._legalize(t0);
        this._legalize(t1);
        this._legalize(t2);
        this._legalize(t3);
    }
    // priority queue methods
    _queuePush(t, error, rms) {
        const i = this._queue.length;
        this._queueIndices[t] = i;
        this._queue.push(t);
        this._errors.push(error);
        this._rmsSum += rms;
        this._queueUp(i);
    }
    _queuePop() {
        const n = this._queue.length - 1;
        this._queueSwap(0, n);
        this._queueDown(0, n);
        return this._queuePopBack();
    }
    _queuePopBack() {
        const t = this._queue.pop();
        this._errors.pop();
        this._rmsSum -= this._rms[t];
        this._queueIndices[t] = -1;
        return t;
    }
    _queueRemove(t) {
        const i = this._queueIndices[t];
        if (i < 0) {
            const it = this._pending.indexOf(t);
            if (it !== -1) {
                this._pending[it] = this._pending[--this._pendingLen];
            }
            else {
                throw new Error('Broken triangulation (something went wrong).');
            }
            return;
        }
        const n = this._queue.length - 1;
        if (n !== i) {
            this._queueSwap(i, n);
            if (!this._queueDown(i, n)) {
                this._queueUp(i);
            }
        }
        this._queuePopBack();
    }
    _queueLess(i, j) {
        return this._errors[i] > this._errors[j];
    }
    _queueSwap(i, j) {
        const pi = this._queue[i];
        const pj = this._queue[j];
        this._queue[i] = pj;
        this._queue[j] = pi;
        this._queueIndices[pi] = j;
        this._queueIndices[pj] = i;
        const e = this._errors[i];
        this._errors[i] = this._errors[j];
        this._errors[j] = e;
    }
    _queueUp(j0) {
        let j = j0;
        while (true) {
            const i = (j - 1) >> 1;
            if (i === j || !this._queueLess(j, i)) {
                break;
            }
            this._queueSwap(i, j);
            j = i;
        }
    }
    _queueDown(i0, n) {
        let i = i0;
        while (true) {
            const j1 = 2 * i + 1;
            if (j1 >= n || j1 < 0) {
                break;
            }
            const j2 = j1 + 1;
            let j = j1;
            if (j2 < n && this._queueLess(j2, j1)) {
                j = j2;
            }
            if (!this._queueLess(j, i)) {
                break;
            }
            this._queueSwap(i, j);
            i = j;
        }
        return i > i0;
    }
}
function orient(ax, ay, bx, by, cx, cy) {
    return (bx - cx) * (ay - cy) - (by - cy) * (ax - cx);
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/lib/helpers/skirt.js":
/*!********************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/lib/helpers/skirt.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSkirt: () => (/* binding */ addSkirt)
/* harmony export */ });
/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @loaders.gl/loader-utils */ "./node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Add skirt to existing mesh
 * @param {object} attributes - POSITION and TEXCOOD_0 attributes data
 * @param {any} triangles - indices array of the mesh geometry
 * @param skirtHeight - height of the skirt geometry
 * @param outsideIndices - edge indices from quantized mesh data
 * @returns - geometry data with added skirt
 */
function addSkirt(attributes, triangles, skirtHeight, outsideIndices) {
    const outsideEdges = outsideIndices
        ? getOutsideEdgesFromIndices(outsideIndices, attributes.POSITION.value)
        : getOutsideEdgesFromTriangles(triangles);
    // 2 new vertices for each outside edge
    const newPosition = new attributes.POSITION.value.constructor(outsideEdges.length * 6);
    const newTexcoord0 = new attributes.TEXCOORD_0.value.constructor(outsideEdges.length * 4);
    // 2 new triangles for each outside edge
    const newTriangles = new triangles.constructor(outsideEdges.length * 6);
    for (let i = 0; i < outsideEdges.length; i++) {
        const edge = outsideEdges[i];
        updateAttributesForNewEdge({
            edge,
            edgeIndex: i,
            attributes,
            skirtHeight,
            newPosition,
            newTexcoord0,
            newTriangles
        });
    }
    attributes.POSITION.value = (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.concatenateTypedArrays)(attributes.POSITION.value, newPosition);
    attributes.TEXCOORD_0.value = (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.concatenateTypedArrays)(attributes.TEXCOORD_0.value, newTexcoord0);
    const resultTriangles = triangles instanceof Array
        ? triangles.concat(newTriangles)
        : (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__.concatenateTypedArrays)(triangles, newTriangles);
    return {
        attributes,
        triangles: resultTriangles
    };
}
/**
 * Get geometry edges that located on a border of the mesh
 * @param {any} triangles - indices array of the mesh geometry
 * @returns {number[][]} - outside edges data
 */
function getOutsideEdgesFromTriangles(triangles) {
    const edges = [];
    for (let i = 0; i < triangles.length; i += 3) {
        edges.push([triangles[i], triangles[i + 1]]);
        edges.push([triangles[i + 1], triangles[i + 2]]);
        edges.push([triangles[i + 2], triangles[i]]);
    }
    edges.sort((a, b) => Math.min(...a) - Math.min(...b) || Math.max(...a) - Math.max(...b));
    const outsideEdges = [];
    let index = 0;
    while (index < edges.length) {
        if (edges[index][0] === edges[index + 1]?.[1] && edges[index][1] === edges[index + 1]?.[0]) {
            index += 2;
        }
        else {
            outsideEdges.push(edges[index]);
            index++;
        }
    }
    return outsideEdges;
}
/**
 * Get geometry edges that located on a border of the mesh
 * @param {object} indices - edge indices from quantized mesh data
 * @param {TypedArray} position - position attribute geometry data
 * @returns {number[][]} - outside edges data
 */
function getOutsideEdgesFromIndices(indices, position) {
    // Sort skirt indices to create adjacent triangles
    indices.westIndices.sort((a, b) => position[3 * a + 1] - position[3 * b + 1]);
    // Reverse (b - a) to match triangle winding
    indices.eastIndices.sort((a, b) => position[3 * b + 1] - position[3 * a + 1]);
    indices.southIndices.sort((a, b) => position[3 * b] - position[3 * a]);
    // Reverse (b - a) to match triangle winding
    indices.northIndices.sort((a, b) => position[3 * a] - position[3 * b]);
    const edges = [];
    for (const index in indices) {
        const indexGroup = indices[index];
        for (let i = 0; i < indexGroup.length - 1; i++) {
            edges.push([indexGroup[i], indexGroup[i + 1]]);
        }
    }
    return edges;
}
/**
 * Get geometry edges that located on a border of the mesh
 * @param {object} args
 * @param {number[]} args.edge - edge indices in geometry
 * @param {number} args.edgeIndex - edge index in outsideEdges array
 * @param {object} args.attributes - POSITION and TEXCOORD_0 attributes
 * @param {number} args.skirtHeight - height of the skirt geometry
 * @param {TypedArray} args.newPosition - POSITION array for skirt data
 * @param {TypedArray} args.newTexcoord0 - TEXCOORD_0 array for skirt data
 * @param {TypedArray | Array} args.newTriangles - trinagle indices array for skirt data
 * @returns {void}
 */
function updateAttributesForNewEdge({ edge, edgeIndex, attributes, skirtHeight, newPosition, newTexcoord0, newTriangles }) {
    const positionsLength = attributes.POSITION.value.length;
    const vertex1Offset = edgeIndex * 2;
    const vertex2Offset = edgeIndex * 2 + 1;
    // Define POSITION for new 1st vertex
    newPosition.set(attributes.POSITION.value.subarray(edge[0] * 3, edge[0] * 3 + 3), vertex1Offset * 3);
    newPosition[vertex1Offset * 3 + 2] = newPosition[vertex1Offset * 3 + 2] - skirtHeight; // put down elevation on the skirt height
    // Define POSITION for new 2nd vertex
    newPosition.set(attributes.POSITION.value.subarray(edge[1] * 3, edge[1] * 3 + 3), vertex2Offset * 3);
    newPosition[vertex2Offset * 3 + 2] = newPosition[vertex2Offset * 3 + 2] - skirtHeight; // put down elevation on the skirt height
    // Use same TEXCOORDS for skirt vertices
    newTexcoord0.set(attributes.TEXCOORD_0.value.subarray(edge[0] * 2, edge[0] * 2 + 2), vertex1Offset * 2);
    newTexcoord0.set(attributes.TEXCOORD_0.value.subarray(edge[1] * 2, edge[1] * 2 + 2), vertex2Offset * 2);
    // Define new triangles
    const triangle1Offset = edgeIndex * 2 * 3;
    newTriangles[triangle1Offset] = edge[0];
    newTriangles[triangle1Offset + 1] = positionsLength / 3 + vertex2Offset;
    newTriangles[triangle1Offset + 2] = edge[1];
    newTriangles[triangle1Offset + 3] = positionsLength / 3 + vertex2Offset;
    newTriangles[triangle1Offset + 4] = edge[0];
    newTriangles[triangle1Offset + 5] = positionsLength / 3 + vertex1Offset;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/lib/parse-quantized-mesh.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/lib/parse-quantized-mesh.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseQuantizedMesh: () => (/* binding */ parseQuantizedMesh)
/* harmony export */ });
/* harmony import */ var _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/schema */ "./node_modules/@loaders.gl/schema/dist/lib/mesh/mesh-utils.js");
/* harmony import */ var _decode_quantized_mesh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode-quantized-mesh.js */ "./node_modules/@loaders.gl/terrain/dist/lib/decode-quantized-mesh.js");
/* harmony import */ var _helpers_skirt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/skirt.js */ "./node_modules/@loaders.gl/terrain/dist/lib/helpers/skirt.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



function parseQuantizedMesh(arrayBuffer, options = {}) {
    const { bounds } = options;
    // Don't parse edge indices or format extensions
    const { header, vertexData, triangleIndices: originalTriangleIndices, westIndices, northIndices, eastIndices, southIndices } = (0,_decode_quantized_mesh_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arrayBuffer, _decode_quantized_mesh_js__WEBPACK_IMPORTED_MODULE_0__.DECODING_STEPS.triangleIndices);
    let triangleIndices = originalTriangleIndices;
    let attributes = getMeshAttributes(vertexData, header, bounds);
    // Compute bounding box before adding skirt so that z values are not skewed
    // TODO: Find bounding box from header, instead of doing extra pass over
    // vertices.
    const boundingBox = (0,_loaders_gl_schema__WEBPACK_IMPORTED_MODULE_1__.getMeshBoundingBox)(attributes);
    if (options?.skirtHeight) {
        const { attributes: newAttributes, triangles: newTriangles } = (0,_helpers_skirt_js__WEBPACK_IMPORTED_MODULE_2__.addSkirt)(attributes, triangleIndices, options.skirtHeight, {
            westIndices,
            northIndices,
            eastIndices,
            southIndices
        });
        attributes = newAttributes;
        triangleIndices = newTriangles;
    }
    return {
        // Data return by this loader implementation
        loaderData: {
            header: {}
        },
        header: {
            // @ts-ignore
            vertexCount: triangleIndices.length,
            boundingBox
        },
        // TODO
        schema: undefined,
        topology: 'triangle-list',
        mode: 4, // TRIANGLES
        indices: { value: triangleIndices, size: 1 },
        attributes
    };
}
function getMeshAttributes(vertexData, header, bounds) {
    const { minHeight, maxHeight } = header;
    const [minX, minY, maxX, maxY] = bounds || [0, 0, 1, 1];
    const xScale = maxX - minX;
    const yScale = maxY - minY;
    const zScale = maxHeight - minHeight;
    const nCoords = vertexData.length / 3;
    // vec3. x, y defined by bounds, z in meters
    const positions = new Float32Array(nCoords * 3);
    // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.
    const texCoords = new Float32Array(nCoords * 2);
    // Data is not interleaved; all u, then all v, then all heights
    for (let i = 0; i < nCoords; i++) {
        const x = vertexData[i] / 32767;
        const y = vertexData[i + nCoords] / 32767;
        const z = vertexData[i + nCoords * 2] / 32767;
        positions[3 * i + 0] = x * xScale + minX;
        positions[3 * i + 1] = y * yScale + minY;
        positions[3 * i + 2] = z * zScale + minHeight;
        texCoords[2 * i + 0] = x;
        texCoords[2 * i + 1] = y;
    }
    return {
        POSITION: { value: positions, size: 3 },
        TEXCOORD_0: { value: texCoords, size: 2 }
        // TODO: Parse normals if they exist in the file
        // NORMAL: {}, - optional, but creates the high poly look with lighting
    };
}


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/lib/parse-terrain.js":
/*!********************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/lib/parse-terrain.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeTerrainMeshFromImage: () => (/* binding */ makeTerrainMeshFromImage)
/* harmony export */ });
/* harmony import */ var _loaders_gl_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @loaders.gl/schema */ "./node_modules/@loaders.gl/schema/dist/lib/mesh/mesh-utils.js");
/* harmony import */ var _mapbox_martini__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mapbox/martini */ "./node_modules/@mapbox/martini/index.js");
/* harmony import */ var _delatin_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delatin/index.js */ "./node_modules/@loaders.gl/terrain/dist/lib/delatin/index.js");
/* harmony import */ var _helpers_skirt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/skirt.js */ "./node_modules/@loaders.gl/terrain/dist/lib/helpers/skirt.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * Returns generated mesh object from image data
 *
 * @param terrainImage terrain image data
 * @param terrainOptions terrain options
 * @returns mesh object
 */
function makeTerrainMeshFromImage(terrainImage, terrainOptions) {
    const { meshMaxError, bounds, elevationDecoder } = terrainOptions;
    const { data, width, height } = terrainImage;
    let terrain;
    let mesh;
    switch (terrainOptions.tesselator) {
        case 'martini':
            terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);
            mesh = getMartiniTileMesh(meshMaxError, width, terrain);
            break;
        case 'delatin':
            terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);
            mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);
            break;
        // auto
        default:
            if (width === height && !(height & (width - 1))) {
                terrain = getTerrain(data, width, height, elevationDecoder, 'martini');
                mesh = getMartiniTileMesh(meshMaxError, width, terrain);
            }
            else {
                terrain = getTerrain(data, width, height, elevationDecoder, 'delatin');
                mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);
            }
            break;
    }
    const { vertices } = mesh;
    let { triangles } = mesh;
    let attributes = getMeshAttributes(vertices, terrain, width, height, bounds);
    // Compute bounding box before adding skirt so that z values are not skewed
    const boundingBox = (0,_loaders_gl_schema__WEBPACK_IMPORTED_MODULE_1__.getMeshBoundingBox)(attributes);
    if (terrainOptions.skirtHeight) {
        const { attributes: newAttributes, triangles: newTriangles } = (0,_helpers_skirt_js__WEBPACK_IMPORTED_MODULE_2__.addSkirt)(attributes, triangles, terrainOptions.skirtHeight);
        attributes = newAttributes;
        triangles = newTriangles;
    }
    return {
        // Data return by this loader implementation
        loaderData: {
            header: {}
        },
        header: {
            vertexCount: triangles.length,
            boundingBox
        },
        mode: 4, // TRIANGLES
        indices: { value: Uint32Array.from(triangles), size: 1 },
        attributes
    };
}
/**
 * Get Martini generated vertices and triangles
 *
 * @param {number} meshMaxError threshold for simplifying mesh
 * @param {number} width width of the input data
 * @param {number[] | Float32Array} terrain elevation data
 * @returns {{vertices: Uint16Array, triangles: Uint32Array}} vertices and triangles data
 */
function getMartiniTileMesh(meshMaxError, width, terrain) {
    const gridSize = width + 1;
    const martini = new _mapbox_martini__WEBPACK_IMPORTED_MODULE_0__["default"](gridSize);
    const tile = martini.createTile(terrain);
    const { vertices, triangles } = tile.getMesh(meshMaxError);
    return { vertices, triangles };
}
/**
 * Get Delatin generated vertices and triangles
 *
 * @param {number} meshMaxError threshold for simplifying mesh
 * @param {number} width width of the input data array
 * @param {number} height height of the input data array
 * @param {number[] | Float32Array} terrain elevation data
 * @returns {{vertices: number[], triangles: number[]}} vertices and triangles data
 */
function getDelatinTileMesh(meshMaxError, width, height, terrain) {
    const tin = new _delatin_index_js__WEBPACK_IMPORTED_MODULE_3__["default"](terrain, width + 1, height + 1);
    tin.run(meshMaxError);
    // @ts-expect-error
    const { coords, triangles } = tin;
    const vertices = coords;
    return { vertices, triangles };
}
function getTerrain(imageData, width, height, elevationDecoder, tesselator) {
    const { rScaler, bScaler, gScaler, offset } = elevationDecoder;
    // From Martini demo
    // https://observablehq.com/@mourner/martin-real-time-rtin-terrain-mesh
    const terrain = new Float32Array((width + 1) * (height + 1));
    // decode terrain values
    for (let i = 0, y = 0; y < height; y++) {
        for (let x = 0; x < width; x++, i++) {
            const k = i * 4;
            const r = imageData[k + 0];
            const g = imageData[k + 1];
            const b = imageData[k + 2];
            terrain[i + y] = r * rScaler + g * gScaler + b * bScaler + offset;
        }
    }
    if (tesselator === 'martini') {
        // backfill bottom border
        for (let i = (width + 1) * width, x = 0; x < width; x++, i++) {
            terrain[i] = terrain[i - width - 1];
        }
        // backfill right border
        for (let i = height, y = 0; y < height + 1; y++, i += height + 1) {
            terrain[i] = terrain[i - 1];
        }
    }
    return terrain;
}
function getMeshAttributes(vertices, terrain, width, height, bounds) {
    const gridSize = width + 1;
    const numOfVerticies = vertices.length / 2;
    // vec3. x, y in pixels, z in meters
    const positions = new Float32Array(numOfVerticies * 3);
    // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.
    const texCoords = new Float32Array(numOfVerticies * 2);
    const [minX, minY, maxX, maxY] = bounds || [0, 0, width, height];
    const xScale = (maxX - minX) / width;
    const yScale = (maxY - minY) / height;
    for (let i = 0; i < numOfVerticies; i++) {
        const x = vertices[i * 2];
        const y = vertices[i * 2 + 1];
        const pixelIdx = y * gridSize + x;
        positions[3 * i + 0] = x * xScale + minX;
        positions[3 * i + 1] = -y * yScale + maxY;
        positions[3 * i + 2] = terrain[pixelIdx];
        texCoords[2 * i + 0] = x / width;
        texCoords[2 * i + 1] = y / height;
    }
    return {
        POSITION: { value: positions, size: 3 },
        TEXCOORD_0: { value: texCoords, size: 2 }
        // NORMAL: {}, - optional, but creates the high poly look with lighting
    };
}


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/lib/utils/version.js":
/*!********************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/lib/utils/version.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Version constant cannot be imported, it needs to correspond to the build version of **this** module.
// __VERSION__ is injected by babel-plugin-version-inline
// @ts-ignore TS2304: Cannot find name '__VERSION__'.
const VERSION =  true ? "4.2.1" : 0;


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/quantized-mesh-loader.js":
/*!************************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/quantized-mesh-loader.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QuantizedMeshLoader: () => (/* binding */ QuantizedMeshLoader)
/* harmony export */ });
/* harmony import */ var _lib_utils_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/utils/version.js */ "./node_modules/@loaders.gl/terrain/dist/lib/utils/version.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Worker loader for quantized meshes
 */
const QuantizedMeshLoader = {
    dataType: null, // Mesh,
    batchType: null,
    name: 'Quantized Mesh',
    id: 'quantized-mesh',
    module: 'terrain',
    version: _lib_utils_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION,
    worker: true,
    extensions: ['terrain'],
    mimeTypes: ['application/vnd.quantized-mesh'],
    options: {
        'quantized-mesh': {
            bounds: [0, 0, 1, 1],
            skirtHeight: null
        }
    }
};


/***/ }),

/***/ "./node_modules/@loaders.gl/terrain/dist/terrain-loader.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@loaders.gl/terrain/dist/terrain-loader.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TerrainLoader: () => (/* binding */ TerrainLoader)
/* harmony export */ });
/* harmony import */ var _lib_utils_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/utils/version.js */ "./node_modules/@loaders.gl/terrain/dist/lib/utils/version.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Worker loader for image encoded terrain
 */
const TerrainLoader = {
    dataType: null,
    batchType: null,
    name: 'Terrain',
    id: 'terrain',
    module: 'terrain',
    version: _lib_utils_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION,
    worker: true,
    extensions: ['png', 'pngraw', 'jpg', 'jpeg', 'gif', 'webp', 'bmp'],
    mimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp'],
    options: {
        terrain: {
            tesselator: 'auto',
            bounds: undefined,
            meshMaxError: 10,
            elevationDecoder: {
                rScaler: 1,
                gScaler: 0,
                bScaler: 0,
                offset: 0
            },
            skirtHeight: undefined
        }
    }
};


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Replacement for the external assert method to reduce bundle size
// Note: We don't use the second "message" argument in calling code,
// so no need to support it here
/** Throws an `Error` with the optional `message` if `condition` is falsy */
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'loaders.gl assertion failed.');
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   document: () => (/* binding */ document_),
/* harmony export */   global: () => (/* binding */ global_),
/* harmony export */   isBrowser: () => (/* binding */ isBrowser),
/* harmony export */   isMobile: () => (/* binding */ isMobile),
/* harmony export */   isWorker: () => (/* binding */ isWorker),
/* harmony export */   nodeVersion: () => (/* binding */ nodeVersion),
/* harmony export */   self: () => (/* binding */ self_),
/* harmony export */   window: () => (/* binding */ window_)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Purpose: include this in your module to avoids adding dependencies on
// micro modules like 'global' and 'is-browser';
/* eslint-disable no-restricted-globals */
const globals = {
    self: typeof self !== 'undefined' && self,
    window: typeof window !== 'undefined' && window,
    global: typeof global !== 'undefined' && global,
    document: typeof document !== 'undefined' && document
};
const self_ = globals.self || globals.window || globals.global || {};
const window_ = globals.window || globals.self || globals.global || {};
const global_ = globals.global || globals.self || globals.window || {};
const document_ = globals.document || {};

/** true if running in the browser, false if running in Node.js */
const isBrowser = 
// @ts-ignore process.browser
typeof process !== 'object' || String(process) !== '[object process]' || process.browser;
/** true if running on a worker thread */
const isWorker = typeof importScripts === 'function';
/** true if running on a mobile device */
const isMobile = typeof window !== 'undefined' && typeof window.orientation !== 'undefined';
// Extract node major version
const matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);
/** Version of Node.js if running under Node, otherwise 0 */
const nodeVersion = (matches && parseFloat(matches[1])) || 0;


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/version.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/version.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NPM_TAG: () => (/* binding */ NPM_TAG),
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Version constant cannot be imported, it needs to correspond to the build version of **this** module.
/**
 * TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...
 * 'beta' on beta branch, 'latest' on prod branch
 */
const NPM_TAG = 'latest';
function getVersion() {
    if (!globalThis._loadersgl_?.version) {
        globalThis._loadersgl_ = globalThis._loadersgl_ || {};
        // __VERSION__ is injected by babel-plugin-version-inline
        if (false) {}
        else {
            globalThis._loadersgl_.version = "4.2.1";
        }
    }
    return globalThis._loadersgl_.version;
}
const VERSION = getVersion();


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/node/worker_threads-browser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/node/worker_threads-browser.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NodeWorker: () => (/* binding */ NodeWorker),
/* harmony export */   parentPort: () => (/* binding */ parentPort)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Browser polyfill for Node.js built-in `worker_threads` module.
 * These fills are non-functional, and just intended to ensure that
 * `import 'worker_threads` doesn't break browser builds.
 * The replacement is done in package.json browser field
 */
class NodeWorker {
    terminate() { }
}
const parentPort = null;


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/get-worker-url.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/get-worker-url.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWorkerName: () => (/* binding */ getWorkerName),
/* harmony export */   getWorkerURL: () => (/* binding */ getWorkerURL)
/* harmony export */ });
/* harmony import */ var _env_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../env-utils/assert.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js");
/* harmony import */ var _env_utils_globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../env-utils/globals.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js");
/* harmony import */ var _env_utils_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env-utils/version.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/version.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Gets worker object's name (for debugging in Chrome thread inspector window)
 */
function getWorkerName(worker) {
    const warning = worker.version !== _env_utils_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION ? ` (worker-utils@${_env_utils_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION})` : '';
    return `${worker.name}@${worker.version}${warning}`;
}
/**
 * Generate a worker URL based on worker object and options
 * @returns A URL to one of the following:
 * - a published worker on unpkg CDN
 * - a local test worker
 * - a URL provided by the user in options
 */
function getWorkerURL(worker, options = {}) {
    const workerOptions = options[worker.id] || {};
    const workerFile = _env_utils_globals_js__WEBPACK_IMPORTED_MODULE_1__.isBrowser ? `${worker.id}-worker.js` : `${worker.id}-worker-node.js`;
    let url = workerOptions.workerUrl;
    // HACK: Allow for non-nested workerUrl for the CompressionWorker.
    // For the compression worker, workerOptions is currently not nested correctly. For most loaders,
    // you'd have options within an object, i.e. `{mvt: {coordinates: ...}}` but the CompressionWorker
    // puts options at the top level, not within a `compression` key (its `id`). For this reason, the
    // above `workerOptions` will always be a string (i.e. `'gzip'`) for the CompressionWorker. To not
    // break backwards compatibility, we allow the CompressionWorker to have options at the top level.
    if (!url && worker.id === 'compression') {
        url = options.workerUrl;
    }
    // If URL is test, generate local loaders.gl url
    // @ts-ignore _workerType
    if (options._workerType === 'test') {
        if (_env_utils_globals_js__WEBPACK_IMPORTED_MODULE_1__.isBrowser) {
            url = `modules/${worker.module}/dist/${workerFile}`;
        }
        else {
            // In the test environment the ts-node loader requires TypeScript code
            url = `modules/${worker.module}/src/workers/${worker.id}-worker-node.ts`;
        }
    }
    // If url override is not provided, generate a URL to published version on npm CDN unpkg.com
    if (!url) {
        // GENERATE
        let version = worker.version;
        // On master we need to load npm alpha releases published with the `beta` tag
        if (version === 'latest') {
            // throw new Error('latest worker version specified');
            version = _env_utils_version_js__WEBPACK_IMPORTED_MODULE_0__.NPM_TAG;
        }
        const versionTag = version ? `@${version}` : '';
        url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;
    }
    (0,_env_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(url);
    // Allow user to override location
    return url;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/validate-worker-version.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/validate-worker-version.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   validateWorkerVersion: () => (/* binding */ validateWorkerVersion)
/* harmony export */ });
/* harmony import */ var _env_utils_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../env-utils/assert.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js");
/* harmony import */ var _env_utils_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env-utils/version.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/version.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Check if worker is compatible with this library version
 * @param worker
 * @param libVersion
 * @returns `true` if the two versions are compatible
 */
function validateWorkerVersion(worker, coreVersion = _env_utils_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION) {
    (0,_env_utils_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(worker, 'no worker provided');
    const workerVersion = worker.version;
    if (!coreVersion || !workerVersion) {
        return false;
    }
    // TODO enable when fix the __version__ injection
    // const coreVersions = parseVersion(coreVersion);
    // const workerVersions = parseVersion(workerVersion);
    // assert(
    //   coreVersion.major === workerVersion.major && coreVersion.minor <= workerVersion.minor,
    //   `worker: ${worker.name} is not compatible. ${coreVersion.major}.${
    //     coreVersion.minor
    //   }+ is required.`
    // );
    return true;
}
// @ts-ignore
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function parseVersion(version) {
    const parts = version.split('.').map(Number);
    return { major: parts[0], minor: parts[1] };
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-farm.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-farm.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WorkerFarm)
/* harmony export */ });
/* harmony import */ var _worker_pool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./worker-pool.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-pool.js");
/* harmony import */ var _worker_thread_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worker-thread.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


const DEFAULT_PROPS = {
    maxConcurrency: 3,
    maxMobileConcurrency: 1,
    reuseWorkers: true,
    onDebug: () => { }
};
/**
 * Process multiple jobs with a "farm" of different workers in worker pools.
 */
class WorkerFarm {
    props;
    workerPools = new Map();
    // singleton
    static _workerFarm;
    /** Checks if workers are supported on this platform */
    static isSupported() {
        return _worker_thread_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSupported();
    }
    /** Get the singleton instance of the global worker farm */
    static getWorkerFarm(props = {}) {
        WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});
        WorkerFarm._workerFarm.setProps(props);
        return WorkerFarm._workerFarm;
    }
    /** get global instance with WorkerFarm.getWorkerFarm() */
    constructor(props) {
        this.props = { ...DEFAULT_PROPS };
        this.setProps(props);
        /** @type Map<string, WorkerPool>} */
        this.workerPools = new Map();
    }
    /**
     * Terminate all workers in the farm
     * @note Can free up significant memory
     */
    destroy() {
        for (const workerPool of this.workerPools.values()) {
            workerPool.destroy();
        }
        this.workerPools = new Map();
    }
    /**
     * Set props used when initializing worker pools
     * @param props
     */
    setProps(props) {
        this.props = { ...this.props, ...props };
        // Update worker pool props
        for (const workerPool of this.workerPools.values()) {
            workerPool.setProps(this._getWorkerPoolProps());
        }
    }
    /**
     * Returns a worker pool for the specified worker
     * @param options - only used first time for a specific worker name
     * @param options.name - the name of the worker - used to identify worker pool
     * @param options.url -
     * @param options.source -
     * @example
     *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);
     */
    getWorkerPool(options) {
        const { name, source, url } = options;
        let workerPool = this.workerPools.get(name);
        if (!workerPool) {
            workerPool = new _worker_pool_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
                name,
                source,
                url
            });
            workerPool.setProps(this._getWorkerPoolProps());
            this.workerPools.set(name, workerPool);
        }
        return workerPool;
    }
    _getWorkerPoolProps() {
        return {
            maxConcurrency: this.props.maxConcurrency,
            maxMobileConcurrency: this.props.maxMobileConcurrency,
            reuseWorkers: this.props.reuseWorkers,
            onDebug: this.props.onDebug
        };
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-job.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-job.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WorkerJob)
/* harmony export */ });
/* harmony import */ var _env_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env-utils/assert.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Represents one Job handled by a WorkerPool or WorkerFarm
 */
class WorkerJob {
    name;
    workerThread;
    isRunning = true;
    /** Promise that resolves when Job is done */
    result;
    _resolve = () => { };
    _reject = () => { };
    constructor(jobName, workerThread) {
        this.name = jobName;
        this.workerThread = workerThread;
        this.result = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
    }
    /**
     * Send a message to the job's worker thread
     * @param data any data structure, ideally consisting mostly of transferrable objects
     */
    postMessage(type, payload) {
        this.workerThread.postMessage({
            source: 'loaders.gl', // Lets worker ignore unrelated messages
            type,
            payload
        });
    }
    /**
     * Call to resolve the `result` Promise with the supplied value
     */
    done(value) {
        (0,_env_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.isRunning);
        this.isRunning = false;
        this._resolve(value);
    }
    /**
     * Call to reject the `result` Promise with the supplied error
     */
    error(error) {
        (0,_env_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.isRunning);
        this.isRunning = false;
        this._reject(error);
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-pool.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-pool.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WorkerPool)
/* harmony export */ });
/* harmony import */ var _env_utils_globals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../env-utils/globals.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js");
/* harmony import */ var _worker_thread_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worker-thread.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js");
/* harmony import */ var _worker_job_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./worker-job.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-job.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Process multiple data messages with small pool of identical workers
 */
class WorkerPool {
    name = 'unnamed';
    source; // | Function;
    url;
    maxConcurrency = 1;
    maxMobileConcurrency = 1;
    onDebug = () => { };
    reuseWorkers = true;
    props = {};
    jobQueue = [];
    idleQueue = [];
    count = 0;
    isDestroyed = false;
    /** Checks if workers are supported on this platform */
    static isSupported() {
        return _worker_thread_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSupported();
    }
    /**
     * @param processor - worker function
     * @param maxConcurrency - max count of workers
     */
    constructor(props) {
        this.source = props.source;
        this.url = props.url;
        this.setProps(props);
    }
    /**
     * Terminates all workers in the pool
     * @note Can free up significant memory
     */
    destroy() {
        // Destroy idle workers, active Workers will be destroyed on completion
        this.idleQueue.forEach((worker) => worker.destroy());
        this.isDestroyed = true;
    }
    setProps(props) {
        this.props = { ...this.props, ...props };
        if (props.name !== undefined) {
            this.name = props.name;
        }
        if (props.maxConcurrency !== undefined) {
            this.maxConcurrency = props.maxConcurrency;
        }
        if (props.maxMobileConcurrency !== undefined) {
            this.maxMobileConcurrency = props.maxMobileConcurrency;
        }
        if (props.reuseWorkers !== undefined) {
            this.reuseWorkers = props.reuseWorkers;
        }
        if (props.onDebug !== undefined) {
            this.onDebug = props.onDebug;
        }
    }
    async startJob(name, onMessage = (job, type, data) => job.done(data), onError = (job, error) => job.error(error)) {
        // Promise resolves when thread starts working on this job
        const startPromise = new Promise((onStart) => {
            // Promise resolves when thread completes or fails working on this job
            this.jobQueue.push({ name, onMessage, onError, onStart });
            return this;
        });
        this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises
        return await startPromise;
    }
    // PRIVATE
    /**
     * Starts first queued job if worker is available or can be created
     * Called when job is started and whenever a worker returns to the idleQueue
     */
    async _startQueuedJob() {
        if (!this.jobQueue.length) {
            return;
        }
        const workerThread = this._getAvailableWorker();
        if (!workerThread) {
            return;
        }
        // We have a worker, dequeue and start the job
        const queuedJob = this.jobQueue.shift();
        if (queuedJob) {
            // Emit a debug event
            // @ts-ignore
            this.onDebug({
                message: 'Starting job',
                name: queuedJob.name,
                workerThread,
                backlog: this.jobQueue.length
            });
            // Create a worker job to let the app access thread and manage job completion
            const job = new _worker_job_js__WEBPACK_IMPORTED_MODULE_1__["default"](queuedJob.name, workerThread);
            // Set the worker thread's message handlers
            workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);
            workerThread.onError = (error) => queuedJob.onError(job, error);
            // Resolve the start promise so that the app can start sending messages to worker
            queuedJob.onStart(job);
            // Wait for the app to signal that the job is complete, then return worker to queue
            try {
                await job.result;
            }
            catch (error) {
                // eslint-disable-next-line no-console
                console.error(`Worker exception: ${error}`);
            }
            finally {
                this.returnWorkerToQueue(workerThread);
            }
        }
    }
    /**
     * Returns a worker to the idle queue
     * Destroys the worker if
     *  - pool is destroyed
     *  - if this pool doesn't reuse workers
     *  - if maxConcurrency has been lowered
     * @param worker
     */
    returnWorkerToQueue(worker) {
        const shouldDestroyWorker = 
        // Workers on Node.js prevent the process from exiting.
        // Until we figure out how to close them before exit, we always destroy them
        !_env_utils_globals_js__WEBPACK_IMPORTED_MODULE_2__.isBrowser ||
            // If the pool is destroyed, there is no reason to keep the worker around
            this.isDestroyed ||
            // If the app has disabled worker reuse, any completed workers should be destroyed
            !this.reuseWorkers ||
            // If concurrency has been lowered, this worker might be surplus to requirements
            this.count > this._getMaxConcurrency();
        if (shouldDestroyWorker) {
            worker.destroy();
            this.count--;
        }
        else {
            this.idleQueue.push(worker);
        }
        if (!this.isDestroyed) {
            this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises
        }
    }
    /**
     * Returns idle worker or creates new worker if maxConcurrency has not been reached
     */
    _getAvailableWorker() {
        // If a worker has completed and returned to the queue, it can be used
        if (this.idleQueue.length > 0) {
            return this.idleQueue.shift() || null;
        }
        // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source
        if (this.count < this._getMaxConcurrency()) {
            this.count++;
            const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;
            return new _worker_thread_js__WEBPACK_IMPORTED_MODULE_0__["default"]({ name, source: this.source, url: this.url });
        }
        // No worker available, have to wait
        return null;
    }
    _getMaxConcurrency() {
        return _env_utils_globals_js__WEBPACK_IMPORTED_MODULE_2__.isMobile ? this.maxMobileConcurrency : this.maxConcurrency;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WorkerThread)
/* harmony export */ });
/* harmony import */ var _node_worker_threads_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node/worker_threads.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/node/worker_threads-browser.js");
/* harmony import */ var _env_utils_globals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env-utils/globals.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js");
/* harmony import */ var _env_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../env-utils/assert.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js");
/* harmony import */ var _worker_utils_get_loadable_worker_url_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../worker-utils/get-loadable-worker-url.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-loadable-worker-url.js");
/* harmony import */ var _worker_utils_get_transfer_list_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../worker-utils/get-transfer-list.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-transfer-list.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors





const NOOP = () => { };
/**
 * Represents one worker thread
 */
class WorkerThread {
    name;
    source;
    url;
    terminated = false;
    worker;
    onMessage;
    onError;
    _loadableURL = '';
    /** Checks if workers are supported on this platform */
    static isSupported() {
        return ((typeof Worker !== 'undefined' && _env_utils_globals_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser) ||
            (typeof _node_worker_threads_js__WEBPACK_IMPORTED_MODULE_1__.NodeWorker !== 'undefined' && !_env_utils_globals_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser));
    }
    constructor(props) {
        const { name, source, url } = props;
        (0,_env_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(source || url); // Either source or url must be defined
        this.name = name;
        this.source = source;
        this.url = url;
        this.onMessage = NOOP;
        this.onError = (error) => console.log(error); // eslint-disable-line
        this.worker = _env_utils_globals_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser ? this._createBrowserWorker() : this._createNodeWorker();
    }
    /**
     * Terminate this worker thread
     * @note Can free up significant memory
     */
    destroy() {
        this.onMessage = NOOP;
        this.onError = NOOP;
        this.worker.terminate(); // eslint-disable-line @typescript-eslint/no-floating-promises
        this.terminated = true;
    }
    get isRunning() {
        return Boolean(this.onMessage);
    }
    /**
     * Send a message to this worker thread
     * @param data any data structure, ideally consisting mostly of transferrable objects
     * @param transferList If not supplied, calculated automatically by traversing data
     */
    postMessage(data, transferList) {
        transferList = transferList || (0,_worker_utils_get_transfer_list_js__WEBPACK_IMPORTED_MODULE_3__.getTransferList)(data);
        // @ts-ignore
        this.worker.postMessage(data, transferList);
    }
    // PRIVATE
    /**
     * Generate a standard Error from an ErrorEvent
     * @param event
     */
    _getErrorFromErrorEvent(event) {
        // Note Error object does not have the expected fields if loading failed completely
        // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers
        // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent
        let message = 'Failed to load ';
        message += `worker ${this.name} from ${this.url}. `;
        if (event.message) {
            message += `${event.message} in `;
        }
        // const hasFilename = event.filename && !event.filename.startsWith('blob:');
        // message += hasFilename ? event.filename : this.source.slice(0, 100);
        if (event.lineno) {
            message += `:${event.lineno}:${event.colno}`;
        }
        return new Error(message);
    }
    /**
     * Creates a worker thread on the browser
     */
    _createBrowserWorker() {
        this._loadableURL = (0,_worker_utils_get_loadable_worker_url_js__WEBPACK_IMPORTED_MODULE_4__.getLoadableWorkerURL)({ source: this.source, url: this.url });
        const worker = new Worker(this._loadableURL, { name: this.name });
        worker.onmessage = (event) => {
            if (!event.data) {
                this.onError(new Error('No data received'));
            }
            else {
                this.onMessage(event.data);
            }
        };
        // This callback represents an uncaught exception in the worker thread
        worker.onerror = (error) => {
            this.onError(this._getErrorFromErrorEvent(error));
            this.terminated = true;
        };
        // TODO - not clear when this would be called, for now just log in case it happens
        worker.onmessageerror = (event) => console.error(event); // eslint-disable-line
        return worker;
    }
    /**
     * Creates a worker thread in node.js
     * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool
     */
    _createNodeWorker() {
        let worker;
        if (this.url) {
            // Make sure relative URLs start with './'
            const absolute = this.url.includes(':/') || this.url.startsWith('/');
            const url = absolute ? this.url : `./${this.url}`;
            // console.log('Starting work from', url);
            worker = new _node_worker_threads_js__WEBPACK_IMPORTED_MODULE_1__.NodeWorker(url, { eval: false });
        }
        else if (this.source) {
            worker = new _node_worker_threads_js__WEBPACK_IMPORTED_MODULE_1__.NodeWorker(this.source, { eval: true });
        }
        else {
            throw new Error('no worker');
        }
        worker.on('message', (data) => {
            // console.error('message', data);
            this.onMessage(data);
        });
        worker.on('error', (error) => {
            // console.error('error', error);
            this.onError(error);
        });
        worker.on('exit', (code) => {
            // console.error('exit', code);
        });
        return worker;
    }
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-loadable-worker-url.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-loadable-worker-url.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLoadableWorkerURL: () => (/* binding */ getLoadableWorkerURL)
/* harmony export */ });
/* harmony import */ var _env_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env-utils/assert.js */ "./node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js");
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const workerURLCache = new Map();
/**
 * Creates a loadable URL from worker source or URL
 * that can be used to create `Worker` instances.
 * Due to CORS issues it may be necessary to wrap a URL in a small importScripts
 * @param props
 * @param props.source Worker source
 * @param props.url Worker URL
 * @returns loadable url
 */
function getLoadableWorkerURL(props) {
    (0,_env_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined
    let workerURL = workerURLCache.get(props.source || props.url);
    if (!workerURL) {
        // Differentiate worker urls from worker source code
        if (props.url) {
            workerURL = getLoadableWorkerURLFromURL(props.url);
            workerURLCache.set(props.url, workerURL);
        }
        if (props.source) {
            workerURL = getLoadableWorkerURLFromSource(props.source);
            workerURLCache.set(props.source, workerURL);
        }
    }
    (0,_env_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(workerURL);
    return workerURL;
}
/**
 * Build a loadable worker URL from worker URL
 * @param url
 * @returns loadable URL
 */
function getLoadableWorkerURLFromURL(url) {
    // A local script url, we can use it to initialize a Worker directly
    if (!url.startsWith('http')) {
        return url;
    }
    // A remote script, we need to use `importScripts` to load from different origin
    const workerSource = buildScriptSource(url);
    return getLoadableWorkerURLFromSource(workerSource);
}
/**
 * Build a loadable worker URL from worker source
 * @param workerSource
 * @returns loadable url
 */
function getLoadableWorkerURLFromSource(workerSource) {
    const blob = new Blob([workerSource], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}
/**
 * Per spec, worker cannot be initialized with a script from a different origin
 * However a local worker script can still import scripts from other origins,
 * so we simply build a wrapper script.
 *
 * @param workerUrl
 * @returns source
 */
function buildScriptSource(workerUrl) {
    return `\
try {
  importScripts('${workerUrl}');
} catch (error) {
  console.error(error);
  throw error;
}`;
}


/***/ }),

/***/ "./node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-transfer-list.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-transfer-list.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTransferList: () => (/* binding */ getTransferList),
/* harmony export */   getTransferListForWriter: () => (/* binding */ getTransferListForWriter)
/* harmony export */ });
// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// NOTE - there is a copy of this function is both in core and loader-utils
// core does not need all the utils in loader-utils, just this one.
/**
 * Returns an array of Transferrable objects that can be used with postMessage
 * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage
 * @param object data to be sent via postMessage
 * @param recursive - not for application use
 * @param transfers - not for application use
 * @returns a transfer list that can be passed to postMessage
 */
function getTransferList(object, recursive = true, transfers) {
    // Make sure that items in the transfer list is unique
    const transfersSet = transfers || new Set();
    if (!object) {
        // ignore
    }
    else if (isTransferable(object)) {
        transfersSet.add(object);
    }
    else if (isTransferable(object.buffer)) {
        // Typed array
        transfersSet.add(object.buffer);
    }
    else if (ArrayBuffer.isView(object)) {
        // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)
        // Do not iterate through the content in this case
    }
    else if (recursive && typeof object === 'object') {
        for (const key in object) {
            // Avoid perf hit - only go one level deep
            getTransferList(object[key], recursive, transfersSet);
        }
    }
    // If transfers is defined, is internal recursive call
    // Otherwise it's called by the user
    return transfers === undefined ? Array.from(transfersSet) : [];
}
// https://developer.mozilla.org/en-US/docs/Web/API/Transferable
function isTransferable(object) {
    if (!object) {
        return false;
    }
    if (object instanceof ArrayBuffer) {
        return true;
    }
    if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {
        return true;
    }
    if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {
        return true;
    }
    // @ts-ignore
    if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {
        return true;
    }
    return false;
}
/**
 * Recursively drop non serializable values like functions and regexps.
 * @param object
 */
function getTransferListForWriter(object) {
    if (object === null) {
        return {};
    }
    const clone = Object.assign({}, object);
    Object.keys(clone).forEach((key) => {
        // Typed Arrays and Arrays are passed with no change
        if (typeof object[key] === 'object' &&
            !ArrayBuffer.isView(object[key]) &&
            !(object[key] instanceof Array)) {
            clone[key] = getTransferListForWriter(object[key]);
        }
        else if (typeof clone[key] === 'function' || clone[key] instanceof RegExp) {
            clone[key] = {};
        }
        else {
            clone[key] = object[key];
        }
    });
    return clone;
}


/***/ }),

/***/ "./node_modules/@luma.gl/constants/dist/webgl-constants.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@luma.gl/constants/dist/webgl-constants.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GL: () => (/* binding */ GLEnum)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */
/**
 * Standard WebGL, WebGL2 and extension constants (OpenGL constants)
 * @note (Most) of these constants are also defined on the WebGLRenderingContext interface.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants
 * @privateRemarks Locally called `GLEnum` instead of `GL`, because `babel-plugin-inline-webl-constants`
 *  both depends on and processes this module, but shouldn't replace these declarations.
 */
var GLEnum;
(function (GLEnum) {
    // Clearing buffers
    // Constants passed to clear() to clear buffer masks.
    /** Passed to clear to clear the current depth buffer. */
    GLEnum[GLEnum["DEPTH_BUFFER_BIT"] = 256] = "DEPTH_BUFFER_BIT";
    /** Passed to clear to clear the current stencil buffer. */
    GLEnum[GLEnum["STENCIL_BUFFER_BIT"] = 1024] = "STENCIL_BUFFER_BIT";
    /** Passed to clear to clear the current color buffer. */
    GLEnum[GLEnum["COLOR_BUFFER_BIT"] = 16384] = "COLOR_BUFFER_BIT";
    // Rendering primitives
    // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.
    /** Passed to drawElements or drawArrays to draw single points. */
    GLEnum[GLEnum["POINTS"] = 0] = "POINTS";
    /** Passed to drawElements or drawArrays to draw lines. Each vertex connects to the one after it. */
    GLEnum[GLEnum["LINES"] = 1] = "LINES";
    /** Passed to drawElements or drawArrays to draw lines. Each set of two vertices is treated as a separate line segment. */
    GLEnum[GLEnum["LINE_LOOP"] = 2] = "LINE_LOOP";
    /** Passed to drawElements or drawArrays to draw a connected group of line segments from the first vertex to the last. */
    GLEnum[GLEnum["LINE_STRIP"] = 3] = "LINE_STRIP";
    /** Passed to drawElements or drawArrays to draw triangles. Each set of three vertices creates a separate triangle. */
    GLEnum[GLEnum["TRIANGLES"] = 4] = "TRIANGLES";
    /** Passed to drawElements or drawArrays to draw a connected group of triangles. */
    GLEnum[GLEnum["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
    /** Passed to drawElements or drawArrays to draw a connected group of triangles. Each vertex connects to the previous and the first vertex in the fan. */
    GLEnum[GLEnum["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
    // Blending modes
    // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).
    /** Passed to blendFunc or blendFuncSeparate to turn off a component. */
    GLEnum[GLEnum["ZERO"] = 0] = "ZERO";
    /** Passed to blendFunc or blendFuncSeparate to turn on a component. */
    GLEnum[GLEnum["ONE"] = 1] = "ONE";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the source elements color. */
    GLEnum[GLEnum["SRC_COLOR"] = 768] = "SRC_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source elements color. */
    GLEnum[GLEnum["ONE_MINUS_SRC_COLOR"] = 769] = "ONE_MINUS_SRC_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the source's alpha. */
    GLEnum[GLEnum["SRC_ALPHA"] = 770] = "SRC_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source's alpha. */
    GLEnum[GLEnum["ONE_MINUS_SRC_ALPHA"] = 771] = "ONE_MINUS_SRC_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's alpha. */
    GLEnum[GLEnum["DST_ALPHA"] = 772] = "DST_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's alpha. */
    GLEnum[GLEnum["ONE_MINUS_DST_ALPHA"] = 773] = "ONE_MINUS_DST_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's color. */
    GLEnum[GLEnum["DST_COLOR"] = 774] = "DST_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's color. */
    GLEnum[GLEnum["ONE_MINUS_DST_COLOR"] = 775] = "ONE_MINUS_DST_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the minimum of source's alpha or one minus the destination's alpha. */
    GLEnum[GLEnum["SRC_ALPHA_SATURATE"] = 776] = "SRC_ALPHA_SATURATE";
    /** Passed to blendFunc or blendFuncSeparate to specify a constant color blend function. */
    GLEnum[GLEnum["CONSTANT_COLOR"] = 32769] = "CONSTANT_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to specify one minus a constant color blend function. */
    GLEnum[GLEnum["ONE_MINUS_CONSTANT_COLOR"] = 32770] = "ONE_MINUS_CONSTANT_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to specify a constant alpha blend function. */
    GLEnum[GLEnum["CONSTANT_ALPHA"] = 32771] = "CONSTANT_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to specify one minus a constant alpha blend function. */
    GLEnum[GLEnum["ONE_MINUS_CONSTANT_ALPHA"] = 32772] = "ONE_MINUS_CONSTANT_ALPHA";
    // Blending equations
    // Constants passed to blendEquation() or blendEquationSeparate() to control
    // how the blending is calculated (for both, RBG and alpha, or separately).
    /** Passed to blendEquation or blendEquationSeparate to set an addition blend function. */
    /** Passed to blendEquation or blendEquationSeparate to specify a subtraction blend function (source - destination). */
    /** Passed to blendEquation or blendEquationSeparate to specify a reverse subtraction blend function (destination - source). */
    GLEnum[GLEnum["FUNC_ADD"] = 32774] = "FUNC_ADD";
    GLEnum[GLEnum["FUNC_SUBTRACT"] = 32778] = "FUNC_SUBTRACT";
    GLEnum[GLEnum["FUNC_REVERSE_SUBTRACT"] = 32779] = "FUNC_REVERSE_SUBTRACT";
    // Getting GL parameter information
    // Constants passed to getParameter() to specify what information to return.
    /** Passed to getParameter to get the current RGB blend function. */
    GLEnum[GLEnum["BLEND_EQUATION"] = 32777] = "BLEND_EQUATION";
    /** Passed to getParameter to get the current RGB blend function. Same as BLEND_EQUATION */
    GLEnum[GLEnum["BLEND_EQUATION_RGB"] = 32777] = "BLEND_EQUATION_RGB";
    /** Passed to getParameter to get the current alpha blend function. Same as BLEND_EQUATION */
    GLEnum[GLEnum["BLEND_EQUATION_ALPHA"] = 34877] = "BLEND_EQUATION_ALPHA";
    /** Passed to getParameter to get the current destination RGB blend function. */
    GLEnum[GLEnum["BLEND_DST_RGB"] = 32968] = "BLEND_DST_RGB";
    /** Passed to getParameter to get the current destination RGB blend function. */
    GLEnum[GLEnum["BLEND_SRC_RGB"] = 32969] = "BLEND_SRC_RGB";
    /** Passed to getParameter to get the current destination alpha blend function. */
    GLEnum[GLEnum["BLEND_DST_ALPHA"] = 32970] = "BLEND_DST_ALPHA";
    /** Passed to getParameter to get the current source alpha blend function. */
    GLEnum[GLEnum["BLEND_SRC_ALPHA"] = 32971] = "BLEND_SRC_ALPHA";
    /** Passed to getParameter to return a the current blend color. */
    GLEnum[GLEnum["BLEND_COLOR"] = 32773] = "BLEND_COLOR";
    /** Passed to getParameter to get the array buffer binding. */
    GLEnum[GLEnum["ARRAY_BUFFER_BINDING"] = 34964] = "ARRAY_BUFFER_BINDING";
    /** Passed to getParameter to get the current element array buffer. */
    GLEnum[GLEnum["ELEMENT_ARRAY_BUFFER_BINDING"] = 34965] = "ELEMENT_ARRAY_BUFFER_BINDING";
    /** Passed to getParameter to get the current lineWidth (set by the lineWidth method). */
    GLEnum[GLEnum["LINE_WIDTH"] = 2849] = "LINE_WIDTH";
    /** Passed to getParameter to get the current size of a point drawn with gl.POINTS */
    GLEnum[GLEnum["ALIASED_POINT_SIZE_RANGE"] = 33901] = "ALIASED_POINT_SIZE_RANGE";
    /** Passed to getParameter to get the range of available widths for a line. Returns a length-2 array with the lo value at 0, and hight at 1. */
    GLEnum[GLEnum["ALIASED_LINE_WIDTH_RANGE"] = 33902] = "ALIASED_LINE_WIDTH_RANGE";
    /** Passed to getParameter to get the current value of cullFace. Should return FRONT, BACK, or FRONT_AND_BACK */
    GLEnum[GLEnum["CULL_FACE_MODE"] = 2885] = "CULL_FACE_MODE";
    /** Passed to getParameter to determine the current value of frontFace. Should return CW or CCW. */
    GLEnum[GLEnum["FRONT_FACE"] = 2886] = "FRONT_FACE";
    /** Passed to getParameter to return a length-2 array of floats giving the current depth range. */
    GLEnum[GLEnum["DEPTH_RANGE"] = 2928] = "DEPTH_RANGE";
    /** Passed to getParameter to determine if the depth write mask is enabled. */
    GLEnum[GLEnum["DEPTH_WRITEMASK"] = 2930] = "DEPTH_WRITEMASK";
    /** Passed to getParameter to determine the current depth clear value. */
    GLEnum[GLEnum["DEPTH_CLEAR_VALUE"] = 2931] = "DEPTH_CLEAR_VALUE";
    /** Passed to getParameter to get the current depth function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL. */
    GLEnum[GLEnum["DEPTH_FUNC"] = 2932] = "DEPTH_FUNC";
    /** Passed to getParameter to get the value the stencil will be cleared to. */
    GLEnum[GLEnum["STENCIL_CLEAR_VALUE"] = 2961] = "STENCIL_CLEAR_VALUE";
    /** Passed to getParameter to get the current stencil function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL. */
    GLEnum[GLEnum["STENCIL_FUNC"] = 2962] = "STENCIL_FUNC";
    /** Passed to getParameter to get the current stencil fail function. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */
    GLEnum[GLEnum["STENCIL_FAIL"] = 2964] = "STENCIL_FAIL";
    /** Passed to getParameter to get the current stencil fail function should the depth buffer test fail. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */
    GLEnum[GLEnum["STENCIL_PASS_DEPTH_FAIL"] = 2965] = "STENCIL_PASS_DEPTH_FAIL";
    /** Passed to getParameter to get the current stencil fail function should the depth buffer test pass. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */
    GLEnum[GLEnum["STENCIL_PASS_DEPTH_PASS"] = 2966] = "STENCIL_PASS_DEPTH_PASS";
    /** Passed to getParameter to get the reference value used for stencil tests. */
    GLEnum[GLEnum["STENCIL_REF"] = 2967] = "STENCIL_REF";
    GLEnum[GLEnum["STENCIL_VALUE_MASK"] = 2963] = "STENCIL_VALUE_MASK";
    GLEnum[GLEnum["STENCIL_WRITEMASK"] = 2968] = "STENCIL_WRITEMASK";
    GLEnum[GLEnum["STENCIL_BACK_FUNC"] = 34816] = "STENCIL_BACK_FUNC";
    GLEnum[GLEnum["STENCIL_BACK_FAIL"] = 34817] = "STENCIL_BACK_FAIL";
    GLEnum[GLEnum["STENCIL_BACK_PASS_DEPTH_FAIL"] = 34818] = "STENCIL_BACK_PASS_DEPTH_FAIL";
    GLEnum[GLEnum["STENCIL_BACK_PASS_DEPTH_PASS"] = 34819] = "STENCIL_BACK_PASS_DEPTH_PASS";
    GLEnum[GLEnum["STENCIL_BACK_REF"] = 36003] = "STENCIL_BACK_REF";
    GLEnum[GLEnum["STENCIL_BACK_VALUE_MASK"] = 36004] = "STENCIL_BACK_VALUE_MASK";
    GLEnum[GLEnum["STENCIL_BACK_WRITEMASK"] = 36005] = "STENCIL_BACK_WRITEMASK";
    /** An Int32Array with four elements for the current viewport dimensions. */
    GLEnum[GLEnum["VIEWPORT"] = 2978] = "VIEWPORT";
    /** An Int32Array with four elements for the current scissor box dimensions. */
    GLEnum[GLEnum["SCISSOR_BOX"] = 3088] = "SCISSOR_BOX";
    GLEnum[GLEnum["COLOR_CLEAR_VALUE"] = 3106] = "COLOR_CLEAR_VALUE";
    GLEnum[GLEnum["COLOR_WRITEMASK"] = 3107] = "COLOR_WRITEMASK";
    GLEnum[GLEnum["UNPACK_ALIGNMENT"] = 3317] = "UNPACK_ALIGNMENT";
    GLEnum[GLEnum["PACK_ALIGNMENT"] = 3333] = "PACK_ALIGNMENT";
    GLEnum[GLEnum["MAX_TEXTURE_SIZE"] = 3379] = "MAX_TEXTURE_SIZE";
    GLEnum[GLEnum["MAX_VIEWPORT_DIMS"] = 3386] = "MAX_VIEWPORT_DIMS";
    GLEnum[GLEnum["SUBPIXEL_BITS"] = 3408] = "SUBPIXEL_BITS";
    GLEnum[GLEnum["RED_BITS"] = 3410] = "RED_BITS";
    GLEnum[GLEnum["GREEN_BITS"] = 3411] = "GREEN_BITS";
    GLEnum[GLEnum["BLUE_BITS"] = 3412] = "BLUE_BITS";
    GLEnum[GLEnum["ALPHA_BITS"] = 3413] = "ALPHA_BITS";
    GLEnum[GLEnum["DEPTH_BITS"] = 3414] = "DEPTH_BITS";
    GLEnum[GLEnum["STENCIL_BITS"] = 3415] = "STENCIL_BITS";
    GLEnum[GLEnum["POLYGON_OFFSET_UNITS"] = 10752] = "POLYGON_OFFSET_UNITS";
    GLEnum[GLEnum["POLYGON_OFFSET_FACTOR"] = 32824] = "POLYGON_OFFSET_FACTOR";
    GLEnum[GLEnum["TEXTURE_BINDING_2D"] = 32873] = "TEXTURE_BINDING_2D";
    GLEnum[GLEnum["SAMPLE_BUFFERS"] = 32936] = "SAMPLE_BUFFERS";
    GLEnum[GLEnum["SAMPLES"] = 32937] = "SAMPLES";
    GLEnum[GLEnum["SAMPLE_COVERAGE_VALUE"] = 32938] = "SAMPLE_COVERAGE_VALUE";
    GLEnum[GLEnum["SAMPLE_COVERAGE_INVERT"] = 32939] = "SAMPLE_COVERAGE_INVERT";
    GLEnum[GLEnum["COMPRESSED_TEXTURE_FORMATS"] = 34467] = "COMPRESSED_TEXTURE_FORMATS";
    GLEnum[GLEnum["VENDOR"] = 7936] = "VENDOR";
    GLEnum[GLEnum["RENDERER"] = 7937] = "RENDERER";
    GLEnum[GLEnum["VERSION"] = 7938] = "VERSION";
    GLEnum[GLEnum["IMPLEMENTATION_COLOR_READ_TYPE"] = 35738] = "IMPLEMENTATION_COLOR_READ_TYPE";
    GLEnum[GLEnum["IMPLEMENTATION_COLOR_READ_FORMAT"] = 35739] = "IMPLEMENTATION_COLOR_READ_FORMAT";
    GLEnum[GLEnum["BROWSER_DEFAULT_WEBGL"] = 37444] = "BROWSER_DEFAULT_WEBGL";
    // Buffers
    // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or
    // getBufferParameter().
    /** Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and not change often. */
    GLEnum[GLEnum["STATIC_DRAW"] = 35044] = "STATIC_DRAW";
    /** Passed to bufferData as a hint about whether the contents of the buffer are likely to not be used often. */
    GLEnum[GLEnum["STREAM_DRAW"] = 35040] = "STREAM_DRAW";
    /** Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and change often. */
    GLEnum[GLEnum["DYNAMIC_DRAW"] = 35048] = "DYNAMIC_DRAW";
    /** Passed to bindBuffer or bufferData to specify the type of buffer being used. */
    GLEnum[GLEnum["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER";
    /** Passed to bindBuffer or bufferData to specify the type of buffer being used. */
    GLEnum[GLEnum["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
    /** Passed to getBufferParameter to get a buffer's size. */
    GLEnum[GLEnum["BUFFER_SIZE"] = 34660] = "BUFFER_SIZE";
    /** Passed to getBufferParameter to get the hint for the buffer passed in when it was created. */
    GLEnum[GLEnum["BUFFER_USAGE"] = 34661] = "BUFFER_USAGE";
    // Vertex attributes
    // Constants passed to getVertexAttrib().
    /** Passed to getVertexAttrib to read back the current vertex attribute. */
    GLEnum[GLEnum["CURRENT_VERTEX_ATTRIB"] = 34342] = "CURRENT_VERTEX_ATTRIB";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_ENABLED"] = 34338] = "VERTEX_ATTRIB_ARRAY_ENABLED";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_SIZE"] = 34339] = "VERTEX_ATTRIB_ARRAY_SIZE";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_STRIDE"] = 34340] = "VERTEX_ATTRIB_ARRAY_STRIDE";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_TYPE"] = 34341] = "VERTEX_ATTRIB_ARRAY_TYPE";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_NORMALIZED"] = 34922] = "VERTEX_ATTRIB_ARRAY_NORMALIZED";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_POINTER"] = 34373] = "VERTEX_ATTRIB_ARRAY_POINTER";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"] = 34975] = "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING";
    // Culling
    // Constants passed to cullFace().
    /** Passed to enable/disable to turn on/off culling. Can also be used with getParameter to find the current culling method. */
    GLEnum[GLEnum["CULL_FACE"] = 2884] = "CULL_FACE";
    /** Passed to cullFace to specify that only front faces should be culled. */
    GLEnum[GLEnum["FRONT"] = 1028] = "FRONT";
    /** Passed to cullFace to specify that only back faces should be culled. */
    GLEnum[GLEnum["BACK"] = 1029] = "BACK";
    /** Passed to cullFace to specify that front and back faces should be culled. */
    GLEnum[GLEnum["FRONT_AND_BACK"] = 1032] = "FRONT_AND_BACK";
    // Enabling and disabling
    // Constants passed to enable() or disable().
    /** Passed to enable/disable to turn on/off blending. Can also be used with getParameter to find the current blending method. */
    GLEnum[GLEnum["BLEND"] = 3042] = "BLEND";
    /** Passed to enable/disable to turn on/off the depth test. Can also be used with getParameter to query the depth test. */
    GLEnum[GLEnum["DEPTH_TEST"] = 2929] = "DEPTH_TEST";
    /** Passed to enable/disable to turn on/off dithering. Can also be used with getParameter to find the current dithering method. */
    GLEnum[GLEnum["DITHER"] = 3024] = "DITHER";
    /** Passed to enable/disable to turn on/off the polygon offset. Useful for rendering hidden-line images, decals, and or solids with highlighted edges. Can also be used with getParameter to query the scissor test. */
    GLEnum[GLEnum["POLYGON_OFFSET_FILL"] = 32823] = "POLYGON_OFFSET_FILL";
    /** Passed to enable/disable to turn on/off the alpha to coverage. Used in multi-sampling alpha channels. */
    GLEnum[GLEnum["SAMPLE_ALPHA_TO_COVERAGE"] = 32926] = "SAMPLE_ALPHA_TO_COVERAGE";
    /** Passed to enable/disable to turn on/off the sample coverage. Used in multi-sampling. */
    GLEnum[GLEnum["SAMPLE_COVERAGE"] = 32928] = "SAMPLE_COVERAGE";
    /** Passed to enable/disable to turn on/off the scissor test. Can also be used with getParameter to query the scissor test. */
    GLEnum[GLEnum["SCISSOR_TEST"] = 3089] = "SCISSOR_TEST";
    /** Passed to enable/disable to turn on/off the stencil test. Can also be used with getParameter to query the stencil test. */
    GLEnum[GLEnum["STENCIL_TEST"] = 2960] = "STENCIL_TEST";
    // Errors
    // Constants returned from getError().
    /** Returned from getError(). */
    GLEnum[GLEnum["NO_ERROR"] = 0] = "NO_ERROR";
    /** Returned from getError(). */
    GLEnum[GLEnum["INVALID_ENUM"] = 1280] = "INVALID_ENUM";
    /** Returned from getError(). */
    GLEnum[GLEnum["INVALID_VALUE"] = 1281] = "INVALID_VALUE";
    /** Returned from getError(). */
    GLEnum[GLEnum["INVALID_OPERATION"] = 1282] = "INVALID_OPERATION";
    /** Returned from getError(). */
    GLEnum[GLEnum["OUT_OF_MEMORY"] = 1285] = "OUT_OF_MEMORY";
    /** Returned from getError(). */
    GLEnum[GLEnum["CONTEXT_LOST_WEBGL"] = 37442] = "CONTEXT_LOST_WEBGL";
    // Front face directions
    // Constants passed to frontFace().
    /** Passed to frontFace to specify the front face of a polygon is drawn in the clockwise direction */
    GLEnum[GLEnum["CW"] = 2304] = "CW";
    /** Passed to frontFace to specify the front face of a polygon is drawn in the counter clockwise direction */
    GLEnum[GLEnum["CCW"] = 2305] = "CCW";
    // Hints
    // Constants passed to hint()
    /** There is no preference for this behavior. */
    GLEnum[GLEnum["DONT_CARE"] = 4352] = "DONT_CARE";
    /** The most efficient behavior should be used. */
    GLEnum[GLEnum["FASTEST"] = 4353] = "FASTEST";
    /** The most correct or the highest quality option should be used. */
    GLEnum[GLEnum["NICEST"] = 4354] = "NICEST";
    /** Hint for the quality of filtering when generating mipmap images with WebGLRenderingContext.generateMipmap(). */
    GLEnum[GLEnum["GENERATE_MIPMAP_HINT"] = 33170] = "GENERATE_MIPMAP_HINT";
    // Data types
    GLEnum[GLEnum["BYTE"] = 5120] = "BYTE";
    GLEnum[GLEnum["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
    GLEnum[GLEnum["SHORT"] = 5122] = "SHORT";
    GLEnum[GLEnum["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
    GLEnum[GLEnum["INT"] = 5124] = "INT";
    GLEnum[GLEnum["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
    GLEnum[GLEnum["FLOAT"] = 5126] = "FLOAT";
    GLEnum[GLEnum["DOUBLE"] = 5130] = "DOUBLE";
    // Pixel formats
    GLEnum[GLEnum["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
    GLEnum[GLEnum["ALPHA"] = 6406] = "ALPHA";
    GLEnum[GLEnum["RGB"] = 6407] = "RGB";
    GLEnum[GLEnum["RGBA"] = 6408] = "RGBA";
    GLEnum[GLEnum["LUMINANCE"] = 6409] = "LUMINANCE";
    GLEnum[GLEnum["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
    // Pixel types
    // UNSIGNED_BYTE = 0x1401,
    GLEnum[GLEnum["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
    GLEnum[GLEnum["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
    GLEnum[GLEnum["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
    // Shaders
    // Constants passed to createShader() or getShaderParameter()
    /** Passed to createShader to define a fragment shader. */
    GLEnum[GLEnum["FRAGMENT_SHADER"] = 35632] = "FRAGMENT_SHADER";
    /** Passed to createShader to define a vertex shader */
    GLEnum[GLEnum["VERTEX_SHADER"] = 35633] = "VERTEX_SHADER";
    /** Passed to getShaderParameter to get the status of the compilation. Returns false if the shader was not compiled. You can then query getShaderInfoLog to find the exact error */
    GLEnum[GLEnum["COMPILE_STATUS"] = 35713] = "COMPILE_STATUS";
    /** Passed to getShaderParameter to determine if a shader was deleted via deleteShader. Returns true if it was, false otherwise. */
    GLEnum[GLEnum["DELETE_STATUS"] = 35712] = "DELETE_STATUS";
    /** Passed to getProgramParameter after calling linkProgram to determine if a program was linked correctly. Returns false if there were errors. Use getProgramInfoLog to find the exact error. */
    GLEnum[GLEnum["LINK_STATUS"] = 35714] = "LINK_STATUS";
    /** Passed to getProgramParameter after calling validateProgram to determine if it is valid. Returns false if errors were found. */
    GLEnum[GLEnum["VALIDATE_STATUS"] = 35715] = "VALIDATE_STATUS";
    /** Passed to getProgramParameter after calling attachShader to determine if the shader was attached correctly. Returns false if errors occurred. */
    GLEnum[GLEnum["ATTACHED_SHADERS"] = 35717] = "ATTACHED_SHADERS";
    /** Passed to getProgramParameter to get the number of attributes active in a program. */
    GLEnum[GLEnum["ACTIVE_ATTRIBUTES"] = 35721] = "ACTIVE_ATTRIBUTES";
    /** Passed to getProgramParameter to get the number of uniforms active in a program. */
    GLEnum[GLEnum["ACTIVE_UNIFORMS"] = 35718] = "ACTIVE_UNIFORMS";
    /** The maximum number of entries possible in the vertex attribute list. */
    GLEnum[GLEnum["MAX_VERTEX_ATTRIBS"] = 34921] = "MAX_VERTEX_ATTRIBS";
    GLEnum[GLEnum["MAX_VERTEX_UNIFORM_VECTORS"] = 36347] = "MAX_VERTEX_UNIFORM_VECTORS";
    GLEnum[GLEnum["MAX_VARYING_VECTORS"] = 36348] = "MAX_VARYING_VECTORS";
    GLEnum[GLEnum["MAX_COMBINED_TEXTURE_IMAGE_UNITS"] = 35661] = "MAX_COMBINED_TEXTURE_IMAGE_UNITS";
    GLEnum[GLEnum["MAX_VERTEX_TEXTURE_IMAGE_UNITS"] = 35660] = "MAX_VERTEX_TEXTURE_IMAGE_UNITS";
    /** Implementation dependent number of maximum texture units. At least 8. */
    GLEnum[GLEnum["MAX_TEXTURE_IMAGE_UNITS"] = 34930] = "MAX_TEXTURE_IMAGE_UNITS";
    GLEnum[GLEnum["MAX_FRAGMENT_UNIFORM_VECTORS"] = 36349] = "MAX_FRAGMENT_UNIFORM_VECTORS";
    GLEnum[GLEnum["SHADER_TYPE"] = 35663] = "SHADER_TYPE";
    GLEnum[GLEnum["SHADING_LANGUAGE_VERSION"] = 35724] = "SHADING_LANGUAGE_VERSION";
    GLEnum[GLEnum["CURRENT_PROGRAM"] = 35725] = "CURRENT_PROGRAM";
    // Depth or stencil tests
    // Constants passed to depthFunc() or stencilFunc().
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass, i.e., nothing will be drawn. */
    GLEnum[GLEnum["NEVER"] = 512] = "NEVER";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value. */
    GLEnum[GLEnum["LESS"] = 513] = "LESS";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value. */
    GLEnum[GLEnum["EQUAL"] = 514] = "EQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value. */
    GLEnum[GLEnum["LEQUAL"] = 515] = "LEQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value. */
    GLEnum[GLEnum["GREATER"] = 516] = "GREATER";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value. */
    GLEnum[GLEnum["NOTEQUAL"] = 517] = "NOTEQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value. */
    GLEnum[GLEnum["GEQUAL"] = 518] = "GEQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass, i.e., pixels will be drawn in the order they are drawn. */
    GLEnum[GLEnum["ALWAYS"] = 519] = "ALWAYS";
    // Stencil actions
    // Constants passed to stencilOp().
    GLEnum[GLEnum["KEEP"] = 7680] = "KEEP";
    GLEnum[GLEnum["REPLACE"] = 7681] = "REPLACE";
    GLEnum[GLEnum["INCR"] = 7682] = "INCR";
    GLEnum[GLEnum["DECR"] = 7683] = "DECR";
    GLEnum[GLEnum["INVERT"] = 5386] = "INVERT";
    GLEnum[GLEnum["INCR_WRAP"] = 34055] = "INCR_WRAP";
    GLEnum[GLEnum["DECR_WRAP"] = 34056] = "DECR_WRAP";
    // Textures
    // Constants passed to texParameteri(),
    // texParameterf(), bindTexture(), texImage2D(), and others.
    GLEnum[GLEnum["NEAREST"] = 9728] = "NEAREST";
    GLEnum[GLEnum["LINEAR"] = 9729] = "LINEAR";
    GLEnum[GLEnum["NEAREST_MIPMAP_NEAREST"] = 9984] = "NEAREST_MIPMAP_NEAREST";
    GLEnum[GLEnum["LINEAR_MIPMAP_NEAREST"] = 9985] = "LINEAR_MIPMAP_NEAREST";
    GLEnum[GLEnum["NEAREST_MIPMAP_LINEAR"] = 9986] = "NEAREST_MIPMAP_LINEAR";
    GLEnum[GLEnum["LINEAR_MIPMAP_LINEAR"] = 9987] = "LINEAR_MIPMAP_LINEAR";
    /** The texture magnification function is used when the pixel being textured maps to an area less than or equal to one texture element. It sets the texture magnification function to either GL_NEAREST or GL_LINEAR (see below). GL_NEAREST is generally faster than GL_LINEAR, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. Default: GL_LINEAR.  */
    GLEnum[GLEnum["TEXTURE_MAG_FILTER"] = 10240] = "TEXTURE_MAG_FILTER";
    /** The texture minifying function is used whenever the pixel being textured maps to an area greater than one texture element. There are six defined minifying functions. Two of them use the nearest one or nearest four texture elements to compute the texture value. The other four use mipmaps. Default: GL_NEAREST_MIPMAP_LINEAR */
    GLEnum[GLEnum["TEXTURE_MIN_FILTER"] = 10241] = "TEXTURE_MIN_FILTER";
    /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */
    GLEnum[GLEnum["TEXTURE_WRAP_S"] = 10242] = "TEXTURE_WRAP_S";
    /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */
    GLEnum[GLEnum["TEXTURE_WRAP_T"] = 10243] = "TEXTURE_WRAP_T";
    GLEnum[GLEnum["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
    GLEnum[GLEnum["TEXTURE"] = 5890] = "TEXTURE";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
    GLEnum[GLEnum["TEXTURE_BINDING_CUBE_MAP"] = 34068] = "TEXTURE_BINDING_CUBE_MAP";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
    GLEnum[GLEnum["MAX_CUBE_MAP_TEXTURE_SIZE"] = 34076] = "MAX_CUBE_MAP_TEXTURE_SIZE";
    // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.
    GLEnum[GLEnum["TEXTURE0"] = 33984] = "TEXTURE0";
    GLEnum[GLEnum["ACTIVE_TEXTURE"] = 34016] = "ACTIVE_TEXTURE";
    GLEnum[GLEnum["REPEAT"] = 10497] = "REPEAT";
    GLEnum[GLEnum["CLAMP_TO_EDGE"] = 33071] = "CLAMP_TO_EDGE";
    GLEnum[GLEnum["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
    // Emulation
    GLEnum[GLEnum["TEXTURE_WIDTH"] = 4096] = "TEXTURE_WIDTH";
    GLEnum[GLEnum["TEXTURE_HEIGHT"] = 4097] = "TEXTURE_HEIGHT";
    // Uniform types
    GLEnum[GLEnum["FLOAT_VEC2"] = 35664] = "FLOAT_VEC2";
    GLEnum[GLEnum["FLOAT_VEC3"] = 35665] = "FLOAT_VEC3";
    GLEnum[GLEnum["FLOAT_VEC4"] = 35666] = "FLOAT_VEC4";
    GLEnum[GLEnum["INT_VEC2"] = 35667] = "INT_VEC2";
    GLEnum[GLEnum["INT_VEC3"] = 35668] = "INT_VEC3";
    GLEnum[GLEnum["INT_VEC4"] = 35669] = "INT_VEC4";
    GLEnum[GLEnum["BOOL"] = 35670] = "BOOL";
    GLEnum[GLEnum["BOOL_VEC2"] = 35671] = "BOOL_VEC2";
    GLEnum[GLEnum["BOOL_VEC3"] = 35672] = "BOOL_VEC3";
    GLEnum[GLEnum["BOOL_VEC4"] = 35673] = "BOOL_VEC4";
    GLEnum[GLEnum["FLOAT_MAT2"] = 35674] = "FLOAT_MAT2";
    GLEnum[GLEnum["FLOAT_MAT3"] = 35675] = "FLOAT_MAT3";
    GLEnum[GLEnum["FLOAT_MAT4"] = 35676] = "FLOAT_MAT4";
    GLEnum[GLEnum["SAMPLER_2D"] = 35678] = "SAMPLER_2D";
    GLEnum[GLEnum["SAMPLER_CUBE"] = 35680] = "SAMPLER_CUBE";
    // Shader precision-specified types
    GLEnum[GLEnum["LOW_FLOAT"] = 36336] = "LOW_FLOAT";
    GLEnum[GLEnum["MEDIUM_FLOAT"] = 36337] = "MEDIUM_FLOAT";
    GLEnum[GLEnum["HIGH_FLOAT"] = 36338] = "HIGH_FLOAT";
    GLEnum[GLEnum["LOW_INT"] = 36339] = "LOW_INT";
    GLEnum[GLEnum["MEDIUM_INT"] = 36340] = "MEDIUM_INT";
    GLEnum[GLEnum["HIGH_INT"] = 36341] = "HIGH_INT";
    // Framebuffers and renderbuffers
    GLEnum[GLEnum["FRAMEBUFFER"] = 36160] = "FRAMEBUFFER";
    GLEnum[GLEnum["RENDERBUFFER"] = 36161] = "RENDERBUFFER";
    GLEnum[GLEnum["RGBA4"] = 32854] = "RGBA4";
    GLEnum[GLEnum["RGB5_A1"] = 32855] = "RGB5_A1";
    GLEnum[GLEnum["RGB565"] = 36194] = "RGB565";
    GLEnum[GLEnum["DEPTH_COMPONENT16"] = 33189] = "DEPTH_COMPONENT16";
    GLEnum[GLEnum["STENCIL_INDEX"] = 6401] = "STENCIL_INDEX";
    GLEnum[GLEnum["STENCIL_INDEX8"] = 36168] = "STENCIL_INDEX8";
    GLEnum[GLEnum["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
    GLEnum[GLEnum["RENDERBUFFER_WIDTH"] = 36162] = "RENDERBUFFER_WIDTH";
    GLEnum[GLEnum["RENDERBUFFER_HEIGHT"] = 36163] = "RENDERBUFFER_HEIGHT";
    GLEnum[GLEnum["RENDERBUFFER_INTERNAL_FORMAT"] = 36164] = "RENDERBUFFER_INTERNAL_FORMAT";
    GLEnum[GLEnum["RENDERBUFFER_RED_SIZE"] = 36176] = "RENDERBUFFER_RED_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_GREEN_SIZE"] = 36177] = "RENDERBUFFER_GREEN_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_BLUE_SIZE"] = 36178] = "RENDERBUFFER_BLUE_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_ALPHA_SIZE"] = 36179] = "RENDERBUFFER_ALPHA_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_DEPTH_SIZE"] = 36180] = "RENDERBUFFER_DEPTH_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_STENCIL_SIZE"] = 36181] = "RENDERBUFFER_STENCIL_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"] = 36048] = "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"] = 36049] = "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"] = 36050] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"] = 36051] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE";
    GLEnum[GLEnum["COLOR_ATTACHMENT0"] = 36064] = "COLOR_ATTACHMENT0";
    GLEnum[GLEnum["DEPTH_ATTACHMENT"] = 36096] = "DEPTH_ATTACHMENT";
    GLEnum[GLEnum["STENCIL_ATTACHMENT"] = 36128] = "STENCIL_ATTACHMENT";
    GLEnum[GLEnum["DEPTH_STENCIL_ATTACHMENT"] = 33306] = "DEPTH_STENCIL_ATTACHMENT";
    GLEnum[GLEnum["NONE"] = 0] = "NONE";
    GLEnum[GLEnum["FRAMEBUFFER_COMPLETE"] = 36053] = "FRAMEBUFFER_COMPLETE";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_ATTACHMENT"] = 36054] = "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"] = 36055] = "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_DIMENSIONS"] = 36057] = "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    GLEnum[GLEnum["FRAMEBUFFER_UNSUPPORTED"] = 36061] = "FRAMEBUFFER_UNSUPPORTED";
    GLEnum[GLEnum["FRAMEBUFFER_BINDING"] = 36006] = "FRAMEBUFFER_BINDING";
    GLEnum[GLEnum["RENDERBUFFER_BINDING"] = 36007] = "RENDERBUFFER_BINDING";
    GLEnum[GLEnum["READ_FRAMEBUFFER"] = 36008] = "READ_FRAMEBUFFER";
    GLEnum[GLEnum["DRAW_FRAMEBUFFER"] = 36009] = "DRAW_FRAMEBUFFER";
    GLEnum[GLEnum["MAX_RENDERBUFFER_SIZE"] = 34024] = "MAX_RENDERBUFFER_SIZE";
    GLEnum[GLEnum["INVALID_FRAMEBUFFER_OPERATION"] = 1286] = "INVALID_FRAMEBUFFER_OPERATION";
    // Pixel storage modes
    // Constants passed to pixelStorei().
    GLEnum[GLEnum["UNPACK_FLIP_Y_WEBGL"] = 37440] = "UNPACK_FLIP_Y_WEBGL";
    GLEnum[GLEnum["UNPACK_PREMULTIPLY_ALPHA_WEBGL"] = 37441] = "UNPACK_PREMULTIPLY_ALPHA_WEBGL";
    GLEnum[GLEnum["UNPACK_COLORSPACE_CONVERSION_WEBGL"] = 37443] = "UNPACK_COLORSPACE_CONVERSION_WEBGL";
    // Additional constants defined WebGL 2
    // These constants are defined on the WebGL2RenderingContext interface.
    // All WebGL 1 constants are also available in a WebGL 2 context.
    // Getting GL parameter information
    // Constants passed to getParameter()
    // to specify what information to return.
    GLEnum[GLEnum["READ_BUFFER"] = 3074] = "READ_BUFFER";
    GLEnum[GLEnum["UNPACK_ROW_LENGTH"] = 3314] = "UNPACK_ROW_LENGTH";
    GLEnum[GLEnum["UNPACK_SKIP_ROWS"] = 3315] = "UNPACK_SKIP_ROWS";
    GLEnum[GLEnum["UNPACK_SKIP_PIXELS"] = 3316] = "UNPACK_SKIP_PIXELS";
    GLEnum[GLEnum["PACK_ROW_LENGTH"] = 3330] = "PACK_ROW_LENGTH";
    GLEnum[GLEnum["PACK_SKIP_ROWS"] = 3331] = "PACK_SKIP_ROWS";
    GLEnum[GLEnum["PACK_SKIP_PIXELS"] = 3332] = "PACK_SKIP_PIXELS";
    GLEnum[GLEnum["TEXTURE_BINDING_3D"] = 32874] = "TEXTURE_BINDING_3D";
    GLEnum[GLEnum["UNPACK_SKIP_IMAGES"] = 32877] = "UNPACK_SKIP_IMAGES";
    GLEnum[GLEnum["UNPACK_IMAGE_HEIGHT"] = 32878] = "UNPACK_IMAGE_HEIGHT";
    GLEnum[GLEnum["MAX_3D_TEXTURE_SIZE"] = 32883] = "MAX_3D_TEXTURE_SIZE";
    GLEnum[GLEnum["MAX_ELEMENTS_VERTICES"] = 33000] = "MAX_ELEMENTS_VERTICES";
    GLEnum[GLEnum["MAX_ELEMENTS_INDICES"] = 33001] = "MAX_ELEMENTS_INDICES";
    GLEnum[GLEnum["MAX_TEXTURE_LOD_BIAS"] = 34045] = "MAX_TEXTURE_LOD_BIAS";
    GLEnum[GLEnum["MAX_FRAGMENT_UNIFORM_COMPONENTS"] = 35657] = "MAX_FRAGMENT_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["MAX_VERTEX_UNIFORM_COMPONENTS"] = 35658] = "MAX_VERTEX_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["MAX_ARRAY_TEXTURE_LAYERS"] = 35071] = "MAX_ARRAY_TEXTURE_LAYERS";
    GLEnum[GLEnum["MIN_PROGRAM_TEXEL_OFFSET"] = 35076] = "MIN_PROGRAM_TEXEL_OFFSET";
    GLEnum[GLEnum["MAX_PROGRAM_TEXEL_OFFSET"] = 35077] = "MAX_PROGRAM_TEXEL_OFFSET";
    GLEnum[GLEnum["MAX_VARYING_COMPONENTS"] = 35659] = "MAX_VARYING_COMPONENTS";
    GLEnum[GLEnum["FRAGMENT_SHADER_DERIVATIVE_HINT"] = 35723] = "FRAGMENT_SHADER_DERIVATIVE_HINT";
    GLEnum[GLEnum["RASTERIZER_DISCARD"] = 35977] = "RASTERIZER_DISCARD";
    GLEnum[GLEnum["VERTEX_ARRAY_BINDING"] = 34229] = "VERTEX_ARRAY_BINDING";
    GLEnum[GLEnum["MAX_VERTEX_OUTPUT_COMPONENTS"] = 37154] = "MAX_VERTEX_OUTPUT_COMPONENTS";
    GLEnum[GLEnum["MAX_FRAGMENT_INPUT_COMPONENTS"] = 37157] = "MAX_FRAGMENT_INPUT_COMPONENTS";
    GLEnum[GLEnum["MAX_SERVER_WAIT_TIMEOUT"] = 37137] = "MAX_SERVER_WAIT_TIMEOUT";
    GLEnum[GLEnum["MAX_ELEMENT_INDEX"] = 36203] = "MAX_ELEMENT_INDEX";
    // Textures
    // Constants passed to texParameteri(),
    // texParameterf(), bindTexture(), texImage2D(), and others.
    GLEnum[GLEnum["RED"] = 6403] = "RED";
    GLEnum[GLEnum["RGB8"] = 32849] = "RGB8";
    GLEnum[GLEnum["RGBA8"] = 32856] = "RGBA8";
    GLEnum[GLEnum["RGB10_A2"] = 32857] = "RGB10_A2";
    GLEnum[GLEnum["TEXTURE_3D"] = 32879] = "TEXTURE_3D";
    /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */
    GLEnum[GLEnum["TEXTURE_WRAP_R"] = 32882] = "TEXTURE_WRAP_R";
    GLEnum[GLEnum["TEXTURE_MIN_LOD"] = 33082] = "TEXTURE_MIN_LOD";
    GLEnum[GLEnum["TEXTURE_MAX_LOD"] = 33083] = "TEXTURE_MAX_LOD";
    GLEnum[GLEnum["TEXTURE_BASE_LEVEL"] = 33084] = "TEXTURE_BASE_LEVEL";
    GLEnum[GLEnum["TEXTURE_MAX_LEVEL"] = 33085] = "TEXTURE_MAX_LEVEL";
    GLEnum[GLEnum["TEXTURE_COMPARE_MODE"] = 34892] = "TEXTURE_COMPARE_MODE";
    GLEnum[GLEnum["TEXTURE_COMPARE_FUNC"] = 34893] = "TEXTURE_COMPARE_FUNC";
    GLEnum[GLEnum["SRGB"] = 35904] = "SRGB";
    GLEnum[GLEnum["SRGB8"] = 35905] = "SRGB8";
    GLEnum[GLEnum["SRGB8_ALPHA8"] = 35907] = "SRGB8_ALPHA8";
    GLEnum[GLEnum["COMPARE_REF_TO_TEXTURE"] = 34894] = "COMPARE_REF_TO_TEXTURE";
    GLEnum[GLEnum["RGBA32F"] = 34836] = "RGBA32F";
    GLEnum[GLEnum["RGB32F"] = 34837] = "RGB32F";
    GLEnum[GLEnum["RGBA16F"] = 34842] = "RGBA16F";
    GLEnum[GLEnum["RGB16F"] = 34843] = "RGB16F";
    GLEnum[GLEnum["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
    GLEnum[GLEnum["TEXTURE_BINDING_2D_ARRAY"] = 35869] = "TEXTURE_BINDING_2D_ARRAY";
    GLEnum[GLEnum["R11F_G11F_B10F"] = 35898] = "R11F_G11F_B10F";
    GLEnum[GLEnum["RGB9_E5"] = 35901] = "RGB9_E5";
    GLEnum[GLEnum["RGBA32UI"] = 36208] = "RGBA32UI";
    GLEnum[GLEnum["RGB32UI"] = 36209] = "RGB32UI";
    GLEnum[GLEnum["RGBA16UI"] = 36214] = "RGBA16UI";
    GLEnum[GLEnum["RGB16UI"] = 36215] = "RGB16UI";
    GLEnum[GLEnum["RGBA8UI"] = 36220] = "RGBA8UI";
    GLEnum[GLEnum["RGB8UI"] = 36221] = "RGB8UI";
    GLEnum[GLEnum["RGBA32I"] = 36226] = "RGBA32I";
    GLEnum[GLEnum["RGB32I"] = 36227] = "RGB32I";
    GLEnum[GLEnum["RGBA16I"] = 36232] = "RGBA16I";
    GLEnum[GLEnum["RGB16I"] = 36233] = "RGB16I";
    GLEnum[GLEnum["RGBA8I"] = 36238] = "RGBA8I";
    GLEnum[GLEnum["RGB8I"] = 36239] = "RGB8I";
    GLEnum[GLEnum["RED_INTEGER"] = 36244] = "RED_INTEGER";
    GLEnum[GLEnum["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
    GLEnum[GLEnum["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
    GLEnum[GLEnum["R8"] = 33321] = "R8";
    GLEnum[GLEnum["RG8"] = 33323] = "RG8";
    GLEnum[GLEnum["R16F"] = 33325] = "R16F";
    GLEnum[GLEnum["R32F"] = 33326] = "R32F";
    GLEnum[GLEnum["RG16F"] = 33327] = "RG16F";
    GLEnum[GLEnum["RG32F"] = 33328] = "RG32F";
    GLEnum[GLEnum["R8I"] = 33329] = "R8I";
    GLEnum[GLEnum["R8UI"] = 33330] = "R8UI";
    GLEnum[GLEnum["R16I"] = 33331] = "R16I";
    GLEnum[GLEnum["R16UI"] = 33332] = "R16UI";
    GLEnum[GLEnum["R32I"] = 33333] = "R32I";
    GLEnum[GLEnum["R32UI"] = 33334] = "R32UI";
    GLEnum[GLEnum["RG8I"] = 33335] = "RG8I";
    GLEnum[GLEnum["RG8UI"] = 33336] = "RG8UI";
    GLEnum[GLEnum["RG16I"] = 33337] = "RG16I";
    GLEnum[GLEnum["RG16UI"] = 33338] = "RG16UI";
    GLEnum[GLEnum["RG32I"] = 33339] = "RG32I";
    GLEnum[GLEnum["RG32UI"] = 33340] = "RG32UI";
    GLEnum[GLEnum["R8_SNORM"] = 36756] = "R8_SNORM";
    GLEnum[GLEnum["RG8_SNORM"] = 36757] = "RG8_SNORM";
    GLEnum[GLEnum["RGB8_SNORM"] = 36758] = "RGB8_SNORM";
    GLEnum[GLEnum["RGBA8_SNORM"] = 36759] = "RGBA8_SNORM";
    GLEnum[GLEnum["RGB10_A2UI"] = 36975] = "RGB10_A2UI";
    /* covered by extension
    COMPRESSED_R11_EAC  = 0x9270,
    COMPRESSED_SIGNED_R11_EAC = 0x9271,
    COMPRESSED_RG11_EAC = 0x9272,
    COMPRESSED_SIGNED_RG11_EAC  = 0x9273,
    COMPRESSED_RGB8_ETC2  = 0x9274,
    COMPRESSED_SRGB8_ETC2 = 0x9275,
    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2  = 0x9276,
    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC  = 0x9277,
    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,
    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC  = 0x9279,
    */
    GLEnum[GLEnum["TEXTURE_IMMUTABLE_FORMAT"] = 37167] = "TEXTURE_IMMUTABLE_FORMAT";
    GLEnum[GLEnum["TEXTURE_IMMUTABLE_LEVELS"] = 33503] = "TEXTURE_IMMUTABLE_LEVELS";
    // Pixel types
    GLEnum[GLEnum["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
    GLEnum[GLEnum["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
    GLEnum[GLEnum["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
    GLEnum[GLEnum["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
    GLEnum[GLEnum["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
    GLEnum[GLEnum["HALF_FLOAT"] = 5131] = "HALF_FLOAT";
    GLEnum[GLEnum["RG"] = 33319] = "RG";
    GLEnum[GLEnum["RG_INTEGER"] = 33320] = "RG_INTEGER";
    GLEnum[GLEnum["INT_2_10_10_10_REV"] = 36255] = "INT_2_10_10_10_REV";
    // Queries
    GLEnum[GLEnum["CURRENT_QUERY"] = 34917] = "CURRENT_QUERY";
    /** Returns a GLuint containing the query result. */
    GLEnum[GLEnum["QUERY_RESULT"] = 34918] = "QUERY_RESULT";
    /** Whether query result is available. */
    GLEnum[GLEnum["QUERY_RESULT_AVAILABLE"] = 34919] = "QUERY_RESULT_AVAILABLE";
    /** Occlusion query (if drawing passed depth test)  */
    GLEnum[GLEnum["ANY_SAMPLES_PASSED"] = 35887] = "ANY_SAMPLES_PASSED";
    /** Occlusion query less accurate/faster version */
    GLEnum[GLEnum["ANY_SAMPLES_PASSED_CONSERVATIVE"] = 36202] = "ANY_SAMPLES_PASSED_CONSERVATIVE";
    // Draw buffers
    GLEnum[GLEnum["MAX_DRAW_BUFFERS"] = 34852] = "MAX_DRAW_BUFFERS";
    GLEnum[GLEnum["DRAW_BUFFER0"] = 34853] = "DRAW_BUFFER0";
    GLEnum[GLEnum["DRAW_BUFFER1"] = 34854] = "DRAW_BUFFER1";
    GLEnum[GLEnum["DRAW_BUFFER2"] = 34855] = "DRAW_BUFFER2";
    GLEnum[GLEnum["DRAW_BUFFER3"] = 34856] = "DRAW_BUFFER3";
    GLEnum[GLEnum["DRAW_BUFFER4"] = 34857] = "DRAW_BUFFER4";
    GLEnum[GLEnum["DRAW_BUFFER5"] = 34858] = "DRAW_BUFFER5";
    GLEnum[GLEnum["DRAW_BUFFER6"] = 34859] = "DRAW_BUFFER6";
    GLEnum[GLEnum["DRAW_BUFFER7"] = 34860] = "DRAW_BUFFER7";
    GLEnum[GLEnum["DRAW_BUFFER8"] = 34861] = "DRAW_BUFFER8";
    GLEnum[GLEnum["DRAW_BUFFER9"] = 34862] = "DRAW_BUFFER9";
    GLEnum[GLEnum["DRAW_BUFFER10"] = 34863] = "DRAW_BUFFER10";
    GLEnum[GLEnum["DRAW_BUFFER11"] = 34864] = "DRAW_BUFFER11";
    GLEnum[GLEnum["DRAW_BUFFER12"] = 34865] = "DRAW_BUFFER12";
    GLEnum[GLEnum["DRAW_BUFFER13"] = 34866] = "DRAW_BUFFER13";
    GLEnum[GLEnum["DRAW_BUFFER14"] = 34867] = "DRAW_BUFFER14";
    GLEnum[GLEnum["DRAW_BUFFER15"] = 34868] = "DRAW_BUFFER15";
    GLEnum[GLEnum["MAX_COLOR_ATTACHMENTS"] = 36063] = "MAX_COLOR_ATTACHMENTS";
    GLEnum[GLEnum["COLOR_ATTACHMENT1"] = 36065] = "COLOR_ATTACHMENT1";
    GLEnum[GLEnum["COLOR_ATTACHMENT2"] = 36066] = "COLOR_ATTACHMENT2";
    GLEnum[GLEnum["COLOR_ATTACHMENT3"] = 36067] = "COLOR_ATTACHMENT3";
    GLEnum[GLEnum["COLOR_ATTACHMENT4"] = 36068] = "COLOR_ATTACHMENT4";
    GLEnum[GLEnum["COLOR_ATTACHMENT5"] = 36069] = "COLOR_ATTACHMENT5";
    GLEnum[GLEnum["COLOR_ATTACHMENT6"] = 36070] = "COLOR_ATTACHMENT6";
    GLEnum[GLEnum["COLOR_ATTACHMENT7"] = 36071] = "COLOR_ATTACHMENT7";
    GLEnum[GLEnum["COLOR_ATTACHMENT8"] = 36072] = "COLOR_ATTACHMENT8";
    GLEnum[GLEnum["COLOR_ATTACHMENT9"] = 36073] = "COLOR_ATTACHMENT9";
    GLEnum[GLEnum["COLOR_ATTACHMENT10"] = 36074] = "COLOR_ATTACHMENT10";
    GLEnum[GLEnum["COLOR_ATTACHMENT11"] = 36075] = "COLOR_ATTACHMENT11";
    GLEnum[GLEnum["COLOR_ATTACHMENT12"] = 36076] = "COLOR_ATTACHMENT12";
    GLEnum[GLEnum["COLOR_ATTACHMENT13"] = 36077] = "COLOR_ATTACHMENT13";
    GLEnum[GLEnum["COLOR_ATTACHMENT14"] = 36078] = "COLOR_ATTACHMENT14";
    GLEnum[GLEnum["COLOR_ATTACHMENT15"] = 36079] = "COLOR_ATTACHMENT15";
    // Samplers
    GLEnum[GLEnum["SAMPLER_3D"] = 35679] = "SAMPLER_3D";
    GLEnum[GLEnum["SAMPLER_2D_SHADOW"] = 35682] = "SAMPLER_2D_SHADOW";
    GLEnum[GLEnum["SAMPLER_2D_ARRAY"] = 36289] = "SAMPLER_2D_ARRAY";
    GLEnum[GLEnum["SAMPLER_2D_ARRAY_SHADOW"] = 36292] = "SAMPLER_2D_ARRAY_SHADOW";
    GLEnum[GLEnum["SAMPLER_CUBE_SHADOW"] = 36293] = "SAMPLER_CUBE_SHADOW";
    GLEnum[GLEnum["INT_SAMPLER_2D"] = 36298] = "INT_SAMPLER_2D";
    GLEnum[GLEnum["INT_SAMPLER_3D"] = 36299] = "INT_SAMPLER_3D";
    GLEnum[GLEnum["INT_SAMPLER_CUBE"] = 36300] = "INT_SAMPLER_CUBE";
    GLEnum[GLEnum["INT_SAMPLER_2D_ARRAY"] = 36303] = "INT_SAMPLER_2D_ARRAY";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_2D"] = 36306] = "UNSIGNED_INT_SAMPLER_2D";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_3D"] = 36307] = "UNSIGNED_INT_SAMPLER_3D";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_CUBE"] = 36308] = "UNSIGNED_INT_SAMPLER_CUBE";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_2D_ARRAY"] = 36311] = "UNSIGNED_INT_SAMPLER_2D_ARRAY";
    GLEnum[GLEnum["MAX_SAMPLES"] = 36183] = "MAX_SAMPLES";
    GLEnum[GLEnum["SAMPLER_BINDING"] = 35097] = "SAMPLER_BINDING";
    // Buffers
    GLEnum[GLEnum["PIXEL_PACK_BUFFER"] = 35051] = "PIXEL_PACK_BUFFER";
    GLEnum[GLEnum["PIXEL_UNPACK_BUFFER"] = 35052] = "PIXEL_UNPACK_BUFFER";
    GLEnum[GLEnum["PIXEL_PACK_BUFFER_BINDING"] = 35053] = "PIXEL_PACK_BUFFER_BINDING";
    GLEnum[GLEnum["PIXEL_UNPACK_BUFFER_BINDING"] = 35055] = "PIXEL_UNPACK_BUFFER_BINDING";
    GLEnum[GLEnum["COPY_READ_BUFFER"] = 36662] = "COPY_READ_BUFFER";
    GLEnum[GLEnum["COPY_WRITE_BUFFER"] = 36663] = "COPY_WRITE_BUFFER";
    GLEnum[GLEnum["COPY_READ_BUFFER_BINDING"] = 36662] = "COPY_READ_BUFFER_BINDING";
    GLEnum[GLEnum["COPY_WRITE_BUFFER_BINDING"] = 36663] = "COPY_WRITE_BUFFER_BINDING";
    // Data types
    GLEnum[GLEnum["FLOAT_MAT2x3"] = 35685] = "FLOAT_MAT2x3";
    GLEnum[GLEnum["FLOAT_MAT2x4"] = 35686] = "FLOAT_MAT2x4";
    GLEnum[GLEnum["FLOAT_MAT3x2"] = 35687] = "FLOAT_MAT3x2";
    GLEnum[GLEnum["FLOAT_MAT3x4"] = 35688] = "FLOAT_MAT3x4";
    GLEnum[GLEnum["FLOAT_MAT4x2"] = 35689] = "FLOAT_MAT4x2";
    GLEnum[GLEnum["FLOAT_MAT4x3"] = 35690] = "FLOAT_MAT4x3";
    GLEnum[GLEnum["UNSIGNED_INT_VEC2"] = 36294] = "UNSIGNED_INT_VEC2";
    GLEnum[GLEnum["UNSIGNED_INT_VEC3"] = 36295] = "UNSIGNED_INT_VEC3";
    GLEnum[GLEnum["UNSIGNED_INT_VEC4"] = 36296] = "UNSIGNED_INT_VEC4";
    GLEnum[GLEnum["UNSIGNED_NORMALIZED"] = 35863] = "UNSIGNED_NORMALIZED";
    GLEnum[GLEnum["SIGNED_NORMALIZED"] = 36764] = "SIGNED_NORMALIZED";
    // Vertex attributes
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_INTEGER"] = 35069] = "VERTEX_ATTRIB_ARRAY_INTEGER";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_DIVISOR"] = 35070] = "VERTEX_ATTRIB_ARRAY_DIVISOR";
    // Transform feedback
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_MODE"] = 35967] = "TRANSFORM_FEEDBACK_BUFFER_MODE";
    GLEnum[GLEnum["MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"] = 35968] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_VARYINGS"] = 35971] = "TRANSFORM_FEEDBACK_VARYINGS";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_START"] = 35972] = "TRANSFORM_FEEDBACK_BUFFER_START";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_SIZE"] = 35973] = "TRANSFORM_FEEDBACK_BUFFER_SIZE";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"] = 35976] = "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN";
    GLEnum[GLEnum["MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"] = 35978] = "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS";
    GLEnum[GLEnum["MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"] = 35979] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS";
    GLEnum[GLEnum["INTERLEAVED_ATTRIBS"] = 35980] = "INTERLEAVED_ATTRIBS";
    GLEnum[GLEnum["SEPARATE_ATTRIBS"] = 35981] = "SEPARATE_ATTRIBS";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER"] = 35982] = "TRANSFORM_FEEDBACK_BUFFER";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_BINDING"] = 35983] = "TRANSFORM_FEEDBACK_BUFFER_BINDING";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK"] = 36386] = "TRANSFORM_FEEDBACK";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_PAUSED"] = 36387] = "TRANSFORM_FEEDBACK_PAUSED";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_ACTIVE"] = 36388] = "TRANSFORM_FEEDBACK_ACTIVE";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BINDING"] = 36389] = "TRANSFORM_FEEDBACK_BINDING";
    // Framebuffers and renderbuffers
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"] = 33296] = "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"] = 33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_RED_SIZE"] = 33298] = "FRAMEBUFFER_ATTACHMENT_RED_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"] = 33299] = "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"] = 33300] = "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"] = 33301] = "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"] = 33302] = "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"] = 33303] = "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_DEFAULT"] = 33304] = "FRAMEBUFFER_DEFAULT";
    // DEPTH_STENCIL_ATTACHMENT  = 0x821A,
    // DEPTH_STENCIL = 0x84F9,
    GLEnum[GLEnum["DEPTH24_STENCIL8"] = 35056] = "DEPTH24_STENCIL8";
    GLEnum[GLEnum["DRAW_FRAMEBUFFER_BINDING"] = 36006] = "DRAW_FRAMEBUFFER_BINDING";
    GLEnum[GLEnum["READ_FRAMEBUFFER_BINDING"] = 36010] = "READ_FRAMEBUFFER_BINDING";
    GLEnum[GLEnum["RENDERBUFFER_SAMPLES"] = 36011] = "RENDERBUFFER_SAMPLES";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"] = 36052] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"] = 36182] = "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE";
    // Uniforms
    GLEnum[GLEnum["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
    GLEnum[GLEnum["UNIFORM_BUFFER_BINDING"] = 35368] = "UNIFORM_BUFFER_BINDING";
    GLEnum[GLEnum["UNIFORM_BUFFER_START"] = 35369] = "UNIFORM_BUFFER_START";
    GLEnum[GLEnum["UNIFORM_BUFFER_SIZE"] = 35370] = "UNIFORM_BUFFER_SIZE";
    GLEnum[GLEnum["MAX_VERTEX_UNIFORM_BLOCKS"] = 35371] = "MAX_VERTEX_UNIFORM_BLOCKS";
    GLEnum[GLEnum["MAX_FRAGMENT_UNIFORM_BLOCKS"] = 35373] = "MAX_FRAGMENT_UNIFORM_BLOCKS";
    GLEnum[GLEnum["MAX_COMBINED_UNIFORM_BLOCKS"] = 35374] = "MAX_COMBINED_UNIFORM_BLOCKS";
    GLEnum[GLEnum["MAX_UNIFORM_BUFFER_BINDINGS"] = 35375] = "MAX_UNIFORM_BUFFER_BINDINGS";
    GLEnum[GLEnum["MAX_UNIFORM_BLOCK_SIZE"] = 35376] = "MAX_UNIFORM_BLOCK_SIZE";
    GLEnum[GLEnum["MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"] = 35377] = "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"] = 35379] = "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["UNIFORM_BUFFER_OFFSET_ALIGNMENT"] = 35380] = "UNIFORM_BUFFER_OFFSET_ALIGNMENT";
    GLEnum[GLEnum["ACTIVE_UNIFORM_BLOCKS"] = 35382] = "ACTIVE_UNIFORM_BLOCKS";
    GLEnum[GLEnum["UNIFORM_TYPE"] = 35383] = "UNIFORM_TYPE";
    GLEnum[GLEnum["UNIFORM_SIZE"] = 35384] = "UNIFORM_SIZE";
    GLEnum[GLEnum["UNIFORM_BLOCK_INDEX"] = 35386] = "UNIFORM_BLOCK_INDEX";
    GLEnum[GLEnum["UNIFORM_OFFSET"] = 35387] = "UNIFORM_OFFSET";
    GLEnum[GLEnum["UNIFORM_ARRAY_STRIDE"] = 35388] = "UNIFORM_ARRAY_STRIDE";
    GLEnum[GLEnum["UNIFORM_MATRIX_STRIDE"] = 35389] = "UNIFORM_MATRIX_STRIDE";
    GLEnum[GLEnum["UNIFORM_IS_ROW_MAJOR"] = 35390] = "UNIFORM_IS_ROW_MAJOR";
    GLEnum[GLEnum["UNIFORM_BLOCK_BINDING"] = 35391] = "UNIFORM_BLOCK_BINDING";
    GLEnum[GLEnum["UNIFORM_BLOCK_DATA_SIZE"] = 35392] = "UNIFORM_BLOCK_DATA_SIZE";
    GLEnum[GLEnum["UNIFORM_BLOCK_ACTIVE_UNIFORMS"] = 35394] = "UNIFORM_BLOCK_ACTIVE_UNIFORMS";
    GLEnum[GLEnum["UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"] = 35395] = "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES";
    GLEnum[GLEnum["UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"] = 35396] = "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER";
    GLEnum[GLEnum["UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"] = 35398] = "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER";
    // Sync objects
    GLEnum[GLEnum["OBJECT_TYPE"] = 37138] = "OBJECT_TYPE";
    GLEnum[GLEnum["SYNC_CONDITION"] = 37139] = "SYNC_CONDITION";
    GLEnum[GLEnum["SYNC_STATUS"] = 37140] = "SYNC_STATUS";
    GLEnum[GLEnum["SYNC_FLAGS"] = 37141] = "SYNC_FLAGS";
    GLEnum[GLEnum["SYNC_FENCE"] = 37142] = "SYNC_FENCE";
    GLEnum[GLEnum["SYNC_GPU_COMMANDS_COMPLETE"] = 37143] = "SYNC_GPU_COMMANDS_COMPLETE";
    GLEnum[GLEnum["UNSIGNALED"] = 37144] = "UNSIGNALED";
    GLEnum[GLEnum["SIGNALED"] = 37145] = "SIGNALED";
    GLEnum[GLEnum["ALREADY_SIGNALED"] = 37146] = "ALREADY_SIGNALED";
    GLEnum[GLEnum["TIMEOUT_EXPIRED"] = 37147] = "TIMEOUT_EXPIRED";
    GLEnum[GLEnum["CONDITION_SATISFIED"] = 37148] = "CONDITION_SATISFIED";
    GLEnum[GLEnum["WAIT_FAILED"] = 37149] = "WAIT_FAILED";
    GLEnum[GLEnum["SYNC_FLUSH_COMMANDS_BIT"] = 1] = "SYNC_FLUSH_COMMANDS_BIT";
    // Miscellaneous constants
    GLEnum[GLEnum["COLOR"] = 6144] = "COLOR";
    GLEnum[GLEnum["DEPTH"] = 6145] = "DEPTH";
    GLEnum[GLEnum["STENCIL"] = 6146] = "STENCIL";
    GLEnum[GLEnum["MIN"] = 32775] = "MIN";
    GLEnum[GLEnum["MAX"] = 32776] = "MAX";
    GLEnum[GLEnum["DEPTH_COMPONENT24"] = 33190] = "DEPTH_COMPONENT24";
    GLEnum[GLEnum["STREAM_READ"] = 35041] = "STREAM_READ";
    GLEnum[GLEnum["STREAM_COPY"] = 35042] = "STREAM_COPY";
    GLEnum[GLEnum["STATIC_READ"] = 35045] = "STATIC_READ";
    GLEnum[GLEnum["STATIC_COPY"] = 35046] = "STATIC_COPY";
    GLEnum[GLEnum["DYNAMIC_READ"] = 35049] = "DYNAMIC_READ";
    GLEnum[GLEnum["DYNAMIC_COPY"] = 35050] = "DYNAMIC_COPY";
    GLEnum[GLEnum["DEPTH_COMPONENT32F"] = 36012] = "DEPTH_COMPONENT32F";
    GLEnum[GLEnum["DEPTH32F_STENCIL8"] = 36013] = "DEPTH32F_STENCIL8";
    GLEnum[GLEnum["INVALID_INDEX"] = 4294967295] = "INVALID_INDEX";
    GLEnum[GLEnum["TIMEOUT_IGNORED"] = -1] = "TIMEOUT_IGNORED";
    GLEnum[GLEnum["MAX_CLIENT_WAIT_TIMEOUT_WEBGL"] = 37447] = "MAX_CLIENT_WAIT_TIMEOUT_WEBGL";
    // Constants defined in WebGL extensions
    // WEBGL_debug_renderer_info
    /** Passed to getParameter to get the vendor string of the graphics driver. */
    GLEnum[GLEnum["UNMASKED_VENDOR_WEBGL"] = 37445] = "UNMASKED_VENDOR_WEBGL";
    /** Passed to getParameter to get the renderer string of the graphics driver. */
    GLEnum[GLEnum["UNMASKED_RENDERER_WEBGL"] = 37446] = "UNMASKED_RENDERER_WEBGL";
    // EXT_texture_filter_anisotropic
    /** Returns the maximum available anisotropy. */
    GLEnum[GLEnum["MAX_TEXTURE_MAX_ANISOTROPY_EXT"] = 34047] = "MAX_TEXTURE_MAX_ANISOTROPY_EXT";
    /** Passed to texParameter to set the desired maximum anisotropy for a texture. */
    GLEnum[GLEnum["TEXTURE_MAX_ANISOTROPY_EXT"] = 34046] = "TEXTURE_MAX_ANISOTROPY_EXT";
    // EXT_texture_norm16 - https://khronos.org/registry/webgl/extensions/EXT_texture_norm16/
    GLEnum[GLEnum["R16_EXT"] = 33322] = "R16_EXT";
    GLEnum[GLEnum["RG16_EXT"] = 33324] = "RG16_EXT";
    GLEnum[GLEnum["RGB16_EXT"] = 32852] = "RGB16_EXT";
    GLEnum[GLEnum["RGBA16_EXT"] = 32859] = "RGBA16_EXT";
    GLEnum[GLEnum["R16_SNORM_EXT"] = 36760] = "R16_SNORM_EXT";
    GLEnum[GLEnum["RG16_SNORM_EXT"] = 36761] = "RG16_SNORM_EXT";
    GLEnum[GLEnum["RGB16_SNORM_EXT"] = 36762] = "RGB16_SNORM_EXT";
    GLEnum[GLEnum["RGBA16_SNORM_EXT"] = 36763] = "RGBA16_SNORM_EXT";
    // WEBGL_compressed_texture_s3tc (BC1, BC2, BC3)
    /** A DXT1-compressed image in an RGB image format. */
    GLEnum[GLEnum["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
    /** A DXT1-compressed image in an RGB image format with a simple on/off alpha value. */
    GLEnum[GLEnum["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
    /** A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression. */
    GLEnum[GLEnum["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
    /** A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done. */
    GLEnum[GLEnum["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
    // WEBGL_compressed_texture_s3tc_srgb (BC1, BC2, BC3 -  SRGB)
    GLEnum[GLEnum["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
    // WEBGL_compressed_texture_rgtc (BC4, BC5)
    GLEnum[GLEnum["COMPRESSED_RED_RGTC1_EXT"] = 36283] = "COMPRESSED_RED_RGTC1_EXT";
    GLEnum[GLEnum["COMPRESSED_SIGNED_RED_RGTC1_EXT"] = 36284] = "COMPRESSED_SIGNED_RED_RGTC1_EXT";
    GLEnum[GLEnum["COMPRESSED_RED_GREEN_RGTC2_EXT"] = 36285] = "COMPRESSED_RED_GREEN_RGTC2_EXT";
    GLEnum[GLEnum["COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"] = 36286] = "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT";
    // WEBGL_compressed_texture_bptc (BC6, BC7)
    GLEnum[GLEnum["COMPRESSED_RGBA_BPTC_UNORM_EXT"] = 36492] = "COMPRESSED_RGBA_BPTC_UNORM_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"] = 36493] = "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT";
    GLEnum[GLEnum["COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"] = 36494] = "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT";
    GLEnum[GLEnum["COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"] = 36495] = "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT";
    // WEBGL_compressed_texture_es3
    /** One-channel (red) unsigned format compression. */
    GLEnum[GLEnum["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
    /** One-channel (red) signed format compression. */
    GLEnum[GLEnum["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
    /** Two-channel (red and green) unsigned format compression. */
    GLEnum[GLEnum["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
    /** Two-channel (red and green) signed format compression. */
    GLEnum[GLEnum["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
    /** Compresses RGB8 data with no alpha channel. */
    GLEnum[GLEnum["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
    /** Compresses RGBA8 data. The RGB part is encoded the same as RGB_ETC2, but the alpha part is encoded separately. */
    GLEnum[GLEnum["COMPRESSED_RGBA8_ETC2_EAC"] = 37493] = "COMPRESSED_RGBA8_ETC2_EAC";
    /** Compresses sRGB8 data with no alpha channel. */
    GLEnum[GLEnum["COMPRESSED_SRGB8_ETC2"] = 37494] = "COMPRESSED_SRGB8_ETC2";
    /** Compresses sRGBA8 data. The sRGB part is encoded the same as SRGB_ETC2, but the alpha part is encoded separately. */
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37495] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
    /** Similar to RGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent. */
    GLEnum[GLEnum["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37496] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
    /** Similar to SRGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent. */
    GLEnum[GLEnum["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37497] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
    // WEBGL_compressed_texture_pvrtc
    /** RGB compression in 4-bit mode. One block for each 4×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
    /** RGBA compression in 4-bit mode. One block for each 4×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
    /** RGB compression in 2-bit mode. One block for each 8×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
    /** RGBA compression in 2-bit mode. One block for each 8×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
    // WEBGL_compressed_texture_etc1
    /** Compresses 24-bit RGB data with no alpha channel. */
    GLEnum[GLEnum["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
    // WEBGL_compressed_texture_atc
    GLEnum[GLEnum["COMPRESSED_RGB_ATC_WEBGL"] = 35986] = "COMPRESSED_RGB_ATC_WEBGL";
    GLEnum[GLEnum["COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL"] = 35986] = "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL";
    GLEnum[GLEnum["COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL"] = 34798] = "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL";
    // WEBGL_compressed_texture_astc
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
    // EXT_disjoint_timer_query
    /** The number of bits used to hold the query result for the given target. */
    GLEnum[GLEnum["QUERY_COUNTER_BITS_EXT"] = 34916] = "QUERY_COUNTER_BITS_EXT";
    /** The currently active query. */
    GLEnum[GLEnum["CURRENT_QUERY_EXT"] = 34917] = "CURRENT_QUERY_EXT";
    /** The query result. */
    GLEnum[GLEnum["QUERY_RESULT_EXT"] = 34918] = "QUERY_RESULT_EXT";
    /** A Boolean indicating whether or not a query result is available. */
    GLEnum[GLEnum["QUERY_RESULT_AVAILABLE_EXT"] = 34919] = "QUERY_RESULT_AVAILABLE_EXT";
    /** Elapsed time (in nanoseconds). */
    GLEnum[GLEnum["TIME_ELAPSED_EXT"] = 35007] = "TIME_ELAPSED_EXT";
    /** The current time. */
    GLEnum[GLEnum["TIMESTAMP_EXT"] = 36392] = "TIMESTAMP_EXT";
    /** A Boolean indicating whether or not the GPU performed any disjoint operation (lost context) */
    GLEnum[GLEnum["GPU_DISJOINT_EXT"] = 36795] = "GPU_DISJOINT_EXT";
    // KHR_parallel_shader_compile https://registry.khronos.org/webgl/extensions/KHR_parallel_shader_compile
    /** a non-blocking poll operation, so that compile/link status availability can be queried without potentially incurring stalls */
    GLEnum[GLEnum["COMPLETION_STATUS_KHR"] = 37297] = "COMPLETION_STATUS_KHR";
    // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/
    /** Disables depth clipping */
    GLEnum[GLEnum["DEPTH_CLAMP_EXT"] = 34383] = "DEPTH_CLAMP_EXT";
    // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/
    /** Values of first vertex in primitive are used for flat shading */
    GLEnum[GLEnum["FIRST_VERTEX_CONVENTION_WEBGL"] = 36429] = "FIRST_VERTEX_CONVENTION_WEBGL";
    /** Values of first vertex in primitive are used for flat shading */
    GLEnum[GLEnum["LAST_VERTEX_CONVENTION_WEBGL"] = 36430] = "LAST_VERTEX_CONVENTION_WEBGL";
    /** Controls which vertex in primitive is used for flat shading */
    GLEnum[GLEnum["PROVOKING_VERTEX_WEBL"] = 36431] = "PROVOKING_VERTEX_WEBL";
    // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/
    GLEnum[GLEnum["POLYGON_MODE_WEBGL"] = 2880] = "POLYGON_MODE_WEBGL";
    GLEnum[GLEnum["POLYGON_OFFSET_LINE_WEBGL"] = 10754] = "POLYGON_OFFSET_LINE_WEBGL";
    GLEnum[GLEnum["LINE_WEBGL"] = 6913] = "LINE_WEBGL";
    GLEnum[GLEnum["FILL_WEBGL"] = 6914] = "FILL_WEBGL";
    // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/
    /** Max clip distances */
    GLEnum[GLEnum["MAX_CLIP_DISTANCES_WEBGL"] = 3378] = "MAX_CLIP_DISTANCES_WEBGL";
    /** Max cull distances */
    GLEnum[GLEnum["MAX_CULL_DISTANCES_WEBGL"] = 33529] = "MAX_CULL_DISTANCES_WEBGL";
    /** Max clip and cull distances */
    GLEnum[GLEnum["MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL"] = 33530] = "MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL";
    /** Enable gl_ClipDistance[0] and gl_CullDistance[0] */
    GLEnum[GLEnum["CLIP_DISTANCE0_WEBGL"] = 12288] = "CLIP_DISTANCE0_WEBGL";
    /** Enable gl_ClipDistance[1] and gl_CullDistance[1] */
    GLEnum[GLEnum["CLIP_DISTANCE1_WEBGL"] = 12289] = "CLIP_DISTANCE1_WEBGL";
    /** Enable gl_ClipDistance[2] and gl_CullDistance[2] */
    GLEnum[GLEnum["CLIP_DISTANCE2_WEBGL"] = 12290] = "CLIP_DISTANCE2_WEBGL";
    /** Enable gl_ClipDistance[3] and gl_CullDistance[3] */
    GLEnum[GLEnum["CLIP_DISTANCE3_WEBGL"] = 12291] = "CLIP_DISTANCE3_WEBGL";
    /** Enable gl_ClipDistance[4] and gl_CullDistance[4] */
    GLEnum[GLEnum["CLIP_DISTANCE4_WEBGL"] = 12292] = "CLIP_DISTANCE4_WEBGL";
    /** Enable gl_ClipDistance[5] and gl_CullDistance[5] */
    GLEnum[GLEnum["CLIP_DISTANCE5_WEBGL"] = 12293] = "CLIP_DISTANCE5_WEBGL";
    /** Enable gl_ClipDistance[6] and gl_CullDistance[6] */
    GLEnum[GLEnum["CLIP_DISTANCE6_WEBGL"] = 12294] = "CLIP_DISTANCE6_WEBGL";
    /** Enable gl_ClipDistance[7] and gl_CullDistance[7] */
    GLEnum[GLEnum["CLIP_DISTANCE7_WEBGL"] = 12295] = "CLIP_DISTANCE7_WEBGL";
    /** EXT_polygon_offset_clamp https://registry.khronos.org/webgl/extensions/EXT_polygon_offset_clamp/ */
    GLEnum[GLEnum["POLYGON_OFFSET_CLAMP_EXT"] = 36379] = "POLYGON_OFFSET_CLAMP_EXT";
    /** EXT_clip_control https://registry.khronos.org/webgl/extensions/EXT_clip_control/ */
    GLEnum[GLEnum["LOWER_LEFT_EXT"] = 36001] = "LOWER_LEFT_EXT";
    GLEnum[GLEnum["UPPER_LEFT_EXT"] = 36002] = "UPPER_LEFT_EXT";
    GLEnum[GLEnum["NEGATIVE_ONE_TO_ONE_EXT"] = 37726] = "NEGATIVE_ONE_TO_ONE_EXT";
    GLEnum[GLEnum["ZERO_TO_ONE_EXT"] = 37727] = "ZERO_TO_ONE_EXT";
    GLEnum[GLEnum["CLIP_ORIGIN_EXT"] = 37724] = "CLIP_ORIGIN_EXT";
    GLEnum[GLEnum["CLIP_DEPTH_MODE_EXT"] = 37725] = "CLIP_DEPTH_MODE_EXT";
    /** WEBGL_blend_func_extended https://registry.khronos.org/webgl/extensions/WEBGL_blend_func_extended/ */
    GLEnum[GLEnum["SRC1_COLOR_WEBGL"] = 35065] = "SRC1_COLOR_WEBGL";
    GLEnum[GLEnum["SRC1_ALPHA_WEBGL"] = 34185] = "SRC1_ALPHA_WEBGL";
    GLEnum[GLEnum["ONE_MINUS_SRC1_COLOR_WEBGL"] = 35066] = "ONE_MINUS_SRC1_COLOR_WEBGL";
    GLEnum[GLEnum["ONE_MINUS_SRC1_ALPHA_WEBGL"] = 35067] = "ONE_MINUS_SRC1_ALPHA_WEBGL";
    GLEnum[GLEnum["MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL"] = 35068] = "MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL";
    /** EXT_texture_mirror_clamp_to_edge https://registry.khronos.org/webgl/extensions/EXT_texture_mirror_clamp_to_edge/ */
    GLEnum[GLEnum["MIRROR_CLAMP_TO_EDGE_EXT"] = 34627] = "MIRROR_CLAMP_TO_EDGE_EXT";
})(GLEnum || (GLEnum = {}));



/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAttributeInfosByLocation: () => (/* binding */ getAttributeInfosByLocation),
/* harmony export */   getAttributeInfosFromLayouts: () => (/* binding */ getAttributeInfosFromLayouts),
/* harmony export */   mergeShaderLayout: () => (/* binding */ mergeShaderLayout)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _type_utils_decode_attribute_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../type-utils/decode-attribute-type.js */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-attribute-type.js");
/* harmony import */ var _type_utils_decode_vertex_format_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type-utils/decode-vertex-format.js */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-vertex-format.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Map from "attribute names" to "resolved attribute infos"
 * containing information about both buffer layouts and shader attribute declarations
 */
function getAttributeInfosFromLayouts(shaderLayout, bufferLayout) {
    const attributeInfos = {};
    for (const attribute of shaderLayout.attributes) {
        attributeInfos[attribute.name] = getAttributeInfoFromLayouts(shaderLayout, bufferLayout, attribute.name);
    }
    return attributeInfos;
}
/**
 * Array indexed by "location" holding "resolved attribute infos"
 */
function getAttributeInfosByLocation(shaderLayout, bufferLayout, maxVertexAttributes = 16) {
    const attributeInfos = getAttributeInfosFromLayouts(shaderLayout, bufferLayout);
    const locationInfos = new Array(maxVertexAttributes).fill(null);
    for (const attributeInfo of Object.values(attributeInfos)) {
        locationInfos[attributeInfo.location] = attributeInfo;
    }
    return locationInfos;
}
/**
 * Get the combined information from a shader layout and a buffer layout for a specific attribute
 */
function getAttributeInfoFromLayouts(shaderLayout, bufferLayout, name) {
    const shaderDeclaration = getAttributeFromShaderLayout(shaderLayout, name);
    const bufferMapping = getAttributeFromBufferLayout(bufferLayout, name);
    // TODO should no longer happen
    if (!shaderDeclaration) {
        //  || !bufferMapping
        return null;
    }
    const attributeTypeInfo = (0,_type_utils_decode_attribute_type_js__WEBPACK_IMPORTED_MODULE_0__.decodeShaderAttributeType)(shaderDeclaration.type);
    const vertexFormat = bufferMapping?.vertexFormat || attributeTypeInfo.defaultVertexFormat;
    const vertexFormatInfo = (0,_type_utils_decode_vertex_format_js__WEBPACK_IMPORTED_MODULE_1__.decodeVertexFormat)(vertexFormat);
    return {
        attributeName: bufferMapping?.attributeName || shaderDeclaration.name,
        bufferName: bufferMapping?.bufferName || shaderDeclaration.name,
        location: shaderDeclaration.location,
        shaderType: shaderDeclaration.type,
        shaderDataType: attributeTypeInfo.dataType,
        shaderComponents: attributeTypeInfo.components,
        vertexFormat,
        bufferDataType: vertexFormatInfo.type,
        bufferComponents: vertexFormatInfo.components,
        // normalized is a property of the buffer's vertex format
        normalized: vertexFormatInfo.normalized,
        // integer is a property of the shader declaration
        integer: attributeTypeInfo.integer,
        stepMode: bufferMapping?.stepMode || shaderDeclaration.stepMode,
        byteOffset: bufferMapping?.byteOffset || 0,
        byteStride: bufferMapping?.byteStride || 0
    };
}
function getAttributeFromShaderLayout(shaderLayout, name) {
    const attribute = shaderLayout.attributes.find(attr => attr.name === name);
    if (!attribute) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`shader layout attribute "${name}" not present in shader`);
    }
    return attribute || null;
}
function getAttributeFromBufferLayout(bufferLayouts, name) {
    // Check that bufferLayouts are valid (each either has format or attribute)
    checkBufferLayouts(bufferLayouts);
    let bufferLayoutInfo = getAttributeFromShortHand(bufferLayouts, name);
    if (bufferLayoutInfo) {
        return bufferLayoutInfo;
    }
    bufferLayoutInfo = getAttributeFromAttributesList(bufferLayouts, name);
    if (bufferLayoutInfo) {
        return bufferLayoutInfo;
    }
    // Didn't find...
    _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`layout for attribute "${name}" not present in buffer layout`);
    return null;
}
/** Check that bufferLayouts are valid (each either has format or attribute) */
function checkBufferLayouts(bufferLayouts) {
    for (const bufferLayout of bufferLayouts) {
        if ((bufferLayout.attributes && bufferLayout.format) ||
            (!bufferLayout.attributes && !bufferLayout.format)) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`BufferLayout ${name} must have either 'attributes' or 'format' field`);
        }
    }
}
/** Get attribute from format shorthand if specified */
function getAttributeFromShortHand(bufferLayouts, name) {
    for (const bufferLayout of bufferLayouts) {
        if (bufferLayout.format && bufferLayout.name === name) {
            return {
                attributeName: bufferLayout.name,
                bufferName: name,
                stepMode: bufferLayout.stepMode,
                vertexFormat: bufferLayout.format,
                // If offset is needed, use `attributes` field.
                byteOffset: 0,
                byteStride: bufferLayout.byteStride || 0
            };
        }
    }
    return null;
}
/**
 * Search attribute mappings (e.g. interleaved attributes) for buffer mapping.
 * Not the name of the buffer might be the same as one of the interleaved attributes.
 */
function getAttributeFromAttributesList(bufferLayouts, name) {
    for (const bufferLayout of bufferLayouts) {
        let byteStride = bufferLayout.byteStride;
        // Calculate a default byte stride if not provided
        if (typeof bufferLayout.byteStride !== 'number') {
            for (const attributeMapping of bufferLayout.attributes || []) {
                const info = (0,_type_utils_decode_vertex_format_js__WEBPACK_IMPORTED_MODULE_1__.decodeVertexFormat)(attributeMapping.format);
                byteStride += info.byteLength;
            }
        }
        const attributeMapping = bufferLayout.attributes?.find(mapping => mapping.attribute === name);
        if (attributeMapping) {
            return {
                attributeName: attributeMapping.attribute,
                bufferName: bufferLayout.name,
                stepMode: bufferLayout.stepMode,
                vertexFormat: attributeMapping.format,
                byteOffset: attributeMapping.byteOffset,
                byteStride
            };
        }
    }
    return null;
}
/**
 * Merges an provided shader layout into a base shader layout
 * In WebGL, this allows the auto generated shader layout to be overridden by the application
 * Typically to change the format of the vertex attributes (from float32x4 to uint8x4 etc).
 * @todo Drop this? Aren't all use cases covered by mergeBufferLayout()?
 */
function mergeShaderLayout(baseLayout, overrideLayout) {
    // Deep clone the base layout
    const mergedLayout = {
        ...baseLayout,
        attributes: baseLayout.attributes.map(attribute => ({ ...attribute }))
    };
    // Merge the attributes
    for (const attribute of overrideLayout?.attributes || []) {
        const baseAttribute = mergedLayout.attributes.find(attr => attr.name === attribute.name);
        if (!baseAttribute) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`shader layout attribute ${attribute.name} not present in shader`);
        }
        else {
            baseAttribute.type = attribute.type || baseAttribute.type;
            baseAttribute.stepMode = attribute.stepMode || baseAttribute.stepMode;
        }
    }
    return mergedLayout;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/canvas-context.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/canvas-context.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CanvasContext: () => (/* binding */ CanvasContext)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


const isPage = (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() && typeof document !== 'undefined';
const isPageLoaded = () => isPage && document.readyState === 'complete';
const DEFAULT_CANVAS_CONTEXT_PROPS = {
    canvas: null,
    width: 800, // width are height are only used by headless gl
    height: 600,
    useDevicePixels: true,
    autoResize: true,
    container: null,
    visible: true,
    colorSpace: 'srgb',
    alphaMode: 'opaque'
};
/**
 * Manages a canvas. Supports both HTML or offscreen canvas
 * - Creates a new canvas or looks up a canvas from the DOM
 * - Provides check for DOM loaded
 * @todo commit(): https://github.com/w3ctag/design-reviews/issues/288
 * @todo transferControlToOffscreen: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen
 */
class CanvasContext {
    id;
    props;
    canvas;
    htmlCanvas;
    offscreenCanvas;
    type;
    width = 1;
    height = 1;
    resizeObserver;
    /** State used by luma.gl classes: TODO - move to canvasContext*/
    _canvasSizeInfo = { clientWidth: 0, clientHeight: 0, devicePixelRatio: 1 };
    /** Check if the DOM is loaded */
    static get isPageLoaded() {
        return isPageLoaded();
    }
    /**
     * Get a 'lazy' promise that resolves when the DOM is loaded.
     * @note Since there may be limitations on number of `load` event listeners,
     * it is recommended avoid calling this function until actually needed.
     * I.e. don't call it until you know that you will be looking up a string in the DOM.
     */
    static pageLoaded = getPageLoadPromise();
    constructor(props) {
        this.props = { ...DEFAULT_CANVAS_CONTEXT_PROPS, ...props };
        props = this.props;
        if (!(0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)()) {
            this.id = 'node-canvas-context';
            this.type = 'node';
            this.width = this.props.width;
            this.height = this.props.height;
            // TODO - does this prevent app from using jsdom style polyfills?
            this.canvas = null;
            return;
        }
        if (!props.canvas) {
            const canvas = createCanvas(props);
            const container = getContainer(props?.container || null);
            container.insertBefore(canvas, container.firstChild);
            this.canvas = canvas;
            if (!props?.visible) {
                this.canvas.style.visibility = 'hidden';
            }
        }
        else if (typeof props.canvas === 'string') {
            this.canvas = getCanvasFromDOM(props.canvas);
        }
        else {
            this.canvas = props.canvas;
        }
        if (this.canvas instanceof HTMLCanvasElement) {
            this.id = this.canvas.id;
            this.type = 'html-canvas';
            this.htmlCanvas = this.canvas;
        }
        else {
            this.id = 'offscreen-canvas';
            this.type = 'offscreen-canvas';
            this.offscreenCanvas = this.canvas;
        }
        // React to size changes
        if (this.canvas instanceof HTMLCanvasElement && props.autoResize) {
            this.resizeObserver = new ResizeObserver(entries => {
                for (const entry of entries) {
                    if (entry.target === this.canvas) {
                        this.update();
                    }
                }
            });
            this.resizeObserver.observe(this.canvas);
        }
    }
    /**
     * Returns the current DPR, if props.useDevicePixels is true
     * Device refers to physical
     */
    getDevicePixelRatio(useDevicePixels) {
        if (typeof OffscreenCanvas !== 'undefined' && this.canvas instanceof OffscreenCanvas) {
            return 1;
        }
        useDevicePixels = useDevicePixels === undefined ? this.props.useDevicePixels : useDevicePixels;
        if (!useDevicePixels || useDevicePixels <= 0) {
            return 1;
        }
        // The param was mainly provide to support the test cases, could be removed
        if (useDevicePixels === true) {
            const dpr = typeof window !== 'undefined' && window.devicePixelRatio;
            return dpr || 1;
        }
        return useDevicePixels;
    }
    /**
     * Returns the size of drawing buffer in device pixels.
     * @note This can be different from the 'CSS' size of a canvas, and also from the
     * canvas' internal drawing buffer size (.width, .height).
     * This is the size required to cover the canvas, adjusted for DPR
     */
    getPixelSize() {
        switch (this.type) {
            case 'node':
                return [this.width, this.height];
            case 'offscreen-canvas':
                return [this.canvas.width, this.canvas.height];
            case 'html-canvas':
                const dpr = this.getDevicePixelRatio();
                const canvas = this.canvas;
                // If not attached to DOM client size can be 0
                return canvas.parentElement
                    ? [canvas.clientWidth * dpr, canvas.clientHeight * dpr]
                    : [this.canvas.width, this.canvas.height];
            default:
                throw new Error(this.type);
        }
    }
    getAspect() {
        const [width, height] = this.getPixelSize();
        return width / height;
    }
    /**
     * Returns multiplier need to convert CSS size to Device size
     */
    cssToDeviceRatio() {
        try {
            // For headless gl we might have used custom width and height
            // hence use cached clientWidth
            const [drawingBufferWidth] = this.getDrawingBufferSize();
            const { clientWidth } = this._canvasSizeInfo;
            return clientWidth ? drawingBufferWidth / clientWidth : 1;
        }
        catch {
            return 1;
        }
    }
    /**
     * Maps CSS pixel position to device pixel position
     */
    cssToDevicePixels(cssPixel, yInvert = true) {
        const ratio = this.cssToDeviceRatio();
        const [width, height] = this.getDrawingBufferSize();
        return scalePixels(cssPixel, ratio, width, height, yInvert);
    }
    /**
     * Use devicePixelRatio to set canvas width and height
     * @note this is a raw port of luma.gl v8 code. Might be worth a review
     */
    setDevicePixelRatio(devicePixelRatio, options = {}) {
        if (!this.htmlCanvas) {
            return;
        }
        // NOTE: if options.width and options.height not used remove in v8
        let clientWidth = 'width' in options ? options.width : this.htmlCanvas.clientWidth;
        let clientHeight = 'height' in options ? options.height : this.htmlCanvas.clientHeight;
        if (!clientWidth || !clientHeight) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.log(1, 'Canvas clientWidth/clientHeight is 0')();
            // by forcing devicePixel ratio to 1, we do not scale canvas.width and height in each frame.
            devicePixelRatio = 1;
            clientWidth = this.htmlCanvas.width || 1;
            clientHeight = this.htmlCanvas.height || 1;
        }
        const cachedSize = this._canvasSizeInfo;
        // Check if canvas needs to be resized
        if (cachedSize.clientWidth !== clientWidth ||
            cachedSize.clientHeight !== clientHeight ||
            cachedSize.devicePixelRatio !== devicePixelRatio) {
            let clampedPixelRatio = devicePixelRatio;
            const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);
            const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);
            this.htmlCanvas.width = canvasWidth;
            this.htmlCanvas.height = canvasHeight;
            // Note: when devicePixelRatio is too high, it is possible we might hit system limit for
            // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained
            // for those cases, reduce devicePixelRatio.
            const [drawingBufferWidth, drawingBufferHeight] = this.getDrawingBufferSize();
            if (drawingBufferWidth !== canvasWidth || drawingBufferHeight !== canvasHeight) {
                clampedPixelRatio = Math.min(drawingBufferWidth / clientWidth, drawingBufferHeight / clientHeight);
                this.htmlCanvas.width = Math.floor(clientWidth * clampedPixelRatio);
                this.htmlCanvas.height = Math.floor(clientHeight * clampedPixelRatio);
                _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.warn('Device pixel ratio clamped')();
            }
            this._canvasSizeInfo.clientWidth = clientWidth;
            this._canvasSizeInfo.clientHeight = clientHeight;
            this._canvasSizeInfo.devicePixelRatio = devicePixelRatio;
        }
    }
    // PRIVATE
    /** @todo Major hack done to port the CSS methods above, base canvas context should not depend on WebGL */
    getDrawingBufferSize() {
        // @ts-expect-error This only works for WebGL
        const gl = this.device.gl;
        if (!gl) {
            // use default device pixel ratio
            throw new Error('canvas size');
        }
        return [gl.drawingBufferWidth, gl.drawingBufferHeight];
    }
    /**
     * Allows subclass constructor to override the canvas id for auto created canvases.
     * This can really help when debugging DOM in apps that create multiple devices
     */
    _setAutoCreatedCanvasId(id) {
        if (this.htmlCanvas?.id === 'lumagl-auto-created-canvas') {
            this.htmlCanvas.id = id;
        }
    }
}
// HELPER FUNCTIONS
/** Returns a promise that resolves when the page is loaded */
function getPageLoadPromise() {
    if (isPageLoaded() || typeof window === 'undefined') {
        return Promise.resolve();
    }
    return new Promise(resolve => {
        window.addEventListener('load', () => resolve());
    });
}
function getContainer(container) {
    if (typeof container === 'string') {
        const element = document.getElementById(container);
        if (!element && !isPageLoaded()) {
            throw new Error(`Accessing '${container}' before page was loaded`);
        }
        if (!element) {
            throw new Error(`${container} is not an HTML element`);
        }
        return element;
    }
    else if (container) {
        return container;
    }
    return document.body;
}
/** Get a Canvas element from DOM id */
function getCanvasFromDOM(canvasId) {
    const canvas = document.getElementById(canvasId);
    if (!canvas && !isPageLoaded()) {
        throw new Error(`Accessing '${canvasId}' before page was loaded`);
    }
    if (!(canvas instanceof HTMLCanvasElement)) {
        throw new Error('Object is not a canvas element');
    }
    return canvas;
}
/** Create a new canvas */
function createCanvas(props) {
    const { width, height } = props;
    const targetCanvas = document.createElement('canvas');
    targetCanvas.id = 'lumagl-auto-created-canvas';
    targetCanvas.width = width || 1;
    targetCanvas.height = height || 1;
    targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';
    targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';
    return targetCanvas;
}
/**
 *
 * @param pixel
 * @param ratio
 * @param width
 * @param height
 * @param yInvert
 * @returns
 */
function scalePixels(pixel, ratio, width, height, yInvert) {
    const point = pixel;
    const x = scaleX(point[0], ratio, width);
    let y = scaleY(point[1], ratio, height, yInvert);
    // Find boundaries of next pixel to provide valid range of device pixel locations
    let t = scaleX(point[0] + 1, ratio, width);
    // If next pixel's position is clamped to boundary, use it as is, otherwise subtract 1 for current pixel boundary
    const xHigh = t === width - 1 ? t : t - 1;
    t = scaleY(point[1] + 1, ratio, height, yInvert);
    let yHigh;
    if (yInvert) {
        // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range
        t = t === 0 ? t : t + 1;
        // swap y and yHigh
        yHigh = y;
        y = t;
    }
    else {
        // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range
        yHigh = t === height - 1 ? t : t - 1;
        // y remains same
    }
    return {
        x,
        y,
        // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.
        width: Math.max(xHigh - x + 1, 1),
        height: Math.max(yHigh - y + 1, 1)
    };
}
function scaleX(x, ratio, width) {
    // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit
    const r = Math.min(Math.round(x * ratio), width - 1);
    return r;
}
function scaleY(y, ratio, height, yInvert) {
    // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit
    return yInvert
        ? Math.max(0, height - 1 - Math.round(y * ratio))
        : Math.min(Math.round(y * ratio), height - 1);
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/device.js":
/*!***********************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/device.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Device: () => (/* binding */ Device),
/* harmony export */   DeviceFeatures: () => (/* binding */ DeviceFeatures),
/* harmony export */   DeviceLimits: () => (/* binding */ DeviceLimits)
/* harmony export */ });
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../init.js */ "./node_modules/@luma.gl/core/dist/init.js");
/* harmony import */ var _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stats-manager.js */ "./node_modules/@luma.gl/core/dist/utils/stats-manager.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _resources_buffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resources/buffer.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _type_utils_decode_texture_format_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type-utils/decode-texture-format.js */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-texture-format.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors






/** Limits for a device (max supported sizes of resources, max number of bindings etc) */
class DeviceLimits {
}
/** Set-like class for features (lets apps check for WebGL / WebGPU extensions) */
class DeviceFeatures {
    features;
    disabledFeatures;
    constructor(features = [], disabledFeatures) {
        this.features = new Set(features);
        this.disabledFeatures = disabledFeatures || {};
    }
    *[Symbol.iterator]() {
        yield* this.features;
    }
    has(feature) {
        return !this.disabledFeatures[feature] && this.features.has(feature);
    }
}
/**
 * WebGPU Device/WebGL context abstraction
 */
class Device {
    static defaultProps = {
        id: null,
        canvas: null,
        container: null,
        manageState: true,
        width: 800, // width are height are only used by headless gl
        height: 600,
        requestMaxLimits: true,
        debug: Boolean(_utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.get('debug')), // Instrument context (at the expense of performance)
        spector: Boolean(_utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.get('spector') || _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.get('spectorjs')), // Initialize the SpectorJS WebGL debugger
        break: [],
        // TODO - Change these after confirming things work as expected
        initalizeFeatures: true,
        disabledFeatures: {
            'compilation-status-async-webgl': true
        },
        // alpha: undefined,
        // depth: undefined,
        // stencil: undefined,
        // antialias: undefined,
        // premultipliedAlpha: undefined,
        // preserveDrawingBuffer: undefined,
        // failIfMajorPerformanceCaveat: undefined
        gl: null,
        // Callbacks
        onError: (error) => _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error.message)
    };
    get [Symbol.toStringTag]() {
        return 'Device';
    }
    static VERSION = _init_js__WEBPACK_IMPORTED_MODULE_1__.VERSION;
    constructor(props) {
        this.props = { ...Device.defaultProps, ...props };
        this.id = this.props.id || (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.uid)(this[Symbol.toStringTag].toLowerCase());
    }
    /** id of this device, primarily for debugging */
    id;
    /** A copy of the device props  */
    props;
    /** Available for the application to store data on the device */
    userData = {};
    /** stats */
    statsManager = _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_3__.lumaStats;
    /** Used by other luma.gl modules to store data on the device */
    _lumaData = {};
    /** Check if a specific texture format is GPU compressed */
    isTextureFormatCompressed(format) {
        return (0,_type_utils_decode_texture_format_js__WEBPACK_IMPORTED_MODULE_4__.isTextureFormatCompressed)(format);
    }
    /**
     * Trigger device loss.
     * @returns `true` if context loss could actually be triggered.
     * @note primarily intended for testing how application reacts to device loss
     */
    loseDevice() {
        return false;
    }
    /** Returns the default / primary canvas context. Throws an error if no canvas context is available (a WebGPU compute device) */
    getCanvasContext() {
        if (!this.canvasContext) {
            throw new Error('Device has no CanvasContext');
        }
        return this.canvasContext;
    }
    createTexture(props) {
        // Signature: new Texture2D(gl, url | Promise)
        if (props instanceof Promise || typeof props === 'string') {
            props = { data: props };
        }
        return this._createTexture(props);
    }
    createCommandEncoder(props = {}) {
        throw new Error('not implemented');
    }
    // WebGL specific HACKS - enables app to remove webgl import
    // Use until we have a better way to handle these
    /** @deprecated - will be removed - should use command encoder */
    readPixelsToArrayWebGL(source, options) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use command encoder */
    readPixelsToBufferWebGL(source, options) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
    setParametersWebGL(parameters) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
    getParametersWebGL(parameters) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
    withParametersWebGL(parameters, func) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use clear arguments in RenderPass */
    clearWebGL(options) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use for debugging only */
    resetWebGL() {
        throw new Error('not implemented');
    }
    timestamp = 0;
    /** A monotonic counter for tracking buffer and texture updates */
    incrementTimestamp() {
        return this.timestamp++;
    }
    // Error Handling
    /** Report unhandled device errors */
    onError(error) {
        this.props.onError(error);
    }
    // IMPLEMENTATION
    _getBufferProps(props) {
        if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {
            props = { data: props };
        }
        // TODO - fragile, as this is done before we merge with default options
        // inside the Buffer constructor
        const newProps = { ...props };
        // Deduce indexType
        if ((props.usage || 0) & _resources_buffer_js__WEBPACK_IMPORTED_MODULE_5__.Buffer.INDEX && !props.indexType) {
            if (props.data instanceof Uint32Array) {
                newProps.indexType = 'uint32';
            }
            else if (props.data instanceof Uint16Array) {
                newProps.indexType = 'uint16';
            }
            else {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.warn('indices buffer content must be of integer type')();
            }
        }
        return newProps;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Buffer: () => (/* binding */ Buffer)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Abstract GPU buffer */
class Buffer extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        usage: 0, // Buffer.COPY_DST | Buffer.COPY_SRC
        byteLength: 0,
        byteOffset: 0,
        data: null,
        indexType: 'uint16',
        mappedAtCreation: false
    };
    // Usage Flags
    static MAP_READ = 0x01;
    static MAP_WRITE = 0x02;
    static COPY_SRC = 0x0004;
    static COPY_DST = 0x0008;
    /** Index buffer */
    static INDEX = 0x0010;
    /** Vertex buffer */
    static VERTEX = 0x0020;
    /** Uniform buffer */
    static UNIFORM = 0x0040;
    /** Storage buffer */
    static STORAGE = 0x0080;
    static INDIRECT = 0x0100;
    static QUERY_RESOLVE = 0x0200;
    get [Symbol.toStringTag]() {
        return 'Buffer';
    }
    /** The usage with which this buffer was created */
    usage;
    /** For index buffers, whether indices are 16 or 32 bit */
    indexType;
    /** "Time" of last update */
    updateTimestamp;
    constructor(device, props) {
        const deducedProps = { ...props };
        // Deduce indexType
        if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {
            if (props.data instanceof Uint32Array) {
                deducedProps.indexType = 'uint32';
            }
            else if (props.data instanceof Uint16Array) {
                deducedProps.indexType = 'uint16';
            }
        }
        super(device, deducedProps, Buffer.defaultProps);
        this.usage = props.usage || 0;
        this.indexType = deducedProps.indexType;
        // TODO - perhaps this should be set on async write completion?
        this.updateTimestamp = device.incrementTimestamp();
    }
    /** Read data synchronously. @note WebGL2 only */
    readSyncWebGL(byteOffset, byteLength) {
        throw new Error('not implemented');
    }
    // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)
    /** Max amount of debug data saved. Two vec4's */
    static DEBUG_DATA_MAX_LENGTH = 32;
    /** A partial CPU-side copy of the data in this buffer, for debugging purposes */
    debugData = new ArrayBuffer(0);
    /** This doesn't handle partial non-zero offset updates correctly */
    _setDebugData(data, byteOffset, byteLength) {
        const buffer = ArrayBuffer.isView(data) ? data.buffer : data;
        const debugDataLength = Math.min(data ? data.byteLength : byteLength, Buffer.DEBUG_DATA_MAX_LENGTH);
        if (data === null) {
            this.debugData = new ArrayBuffer(debugDataLength);
        }
        else if (byteOffset === 0 && byteLength === data.byteLength) {
            this.debugData = buffer.slice(0, debugDataLength);
        }
        else {
            this.debugData = buffer.slice(byteOffset, byteOffset + debugDataLength);
        }
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommandBuffer: () => (/* binding */ CommandBuffer)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Encodes commands to queue that can be executed later
 */
class CommandBuffer extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps
    };
    get [Symbol.toStringTag]() {
        return 'CommandBuffer';
    }
    constructor(device, props) {
        super(device, props, CommandBuffer.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommandEncoder: () => (/* binding */ CommandEncoder)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Encodes commands to queue that can be executed later
 */
class CommandEncoder extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        measureExecutionTime: undefined
    };
    get [Symbol.toStringTag]() {
        return 'CommandEncoder';
    }
    constructor(device, props) {
        super(device, props, CommandEncoder.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ComputePipeline: () => (/* binding */ ComputePipeline)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * A compiled and linked shader program for compute
 */
class ComputePipeline extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        shader: undefined,
        entryPoint: undefined,
        constants: {},
        shaderLayout: undefined
    };
    get [Symbol.toStringTag]() {
        return 'ComputePipeline';
    }
    hash = '';
    constructor(device, props) {
        super(device, props, ComputePipeline.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Framebuffer: () => (/* binding */ Framebuffer)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
/* harmony import */ var _texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./texture.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Create new textures with correct size for all attachments.
 * @note resize() destroys existing textures (if size has changed).
 */
class Framebuffer extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        width: 1,
        height: 1,
        colorAttachments: [], // ['rgba8unorm'],
        depthStencilAttachment: null // 'depth24plus-stencil8'
    };
    get [Symbol.toStringTag]() {
        return 'Framebuffer';
    }
    /** Width of all attachments in this framebuffer */
    width;
    /** Height of all attachments in this framebuffer */
    height;
    /** Color attachments */
    colorAttachments = [];
    /** Depth-stencil attachment, if provided */
    depthStencilAttachment = null;
    constructor(device, props = {}) {
        super(device, props, Framebuffer.defaultProps);
        this.width = this.props.width;
        this.height = this.props.height;
        // NOTE: call from subclass constructor as we cannot call overridden methods here (subclass not yet constructed)
        // this.autoCreateAttachmentTextures();
    }
    resize(size) {
        let updateSize = !size;
        if (size) {
            const [width, height] = Array.isArray(size) ? size : [size.width, size.height];
            updateSize = updateSize || height !== this.height || width !== this.width;
            this.width = width;
            this.height = height;
        }
        if (updateSize) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();
            this.resizeAttachments(this.width, this.height);
        }
    }
    /** Auto creates any textures */
    autoCreateAttachmentTextures() {
        if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {
            throw new Error('Framebuffer has noattachments');
        }
        this.colorAttachments = this.props.colorAttachments.map(attachment => {
            if (typeof attachment === 'string') {
                const texture = this.createColorTexture(attachment);
                this.attachResource(texture);
                return texture.view;
            }
            if (attachment instanceof _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture) {
                return attachment.view;
            }
            return attachment;
        });
        const attachment = this.props.depthStencilAttachment;
        if (attachment) {
            if (typeof attachment === 'string') {
                const texture = this.createDepthStencilTexture(attachment);
                this.attachResource(texture);
                this.depthStencilAttachment = texture.view;
            }
            else if (attachment instanceof _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture) {
                this.depthStencilAttachment = attachment.view;
            }
            else {
                this.depthStencilAttachment = attachment;
            }
        }
    }
    /** Create a color texture */
    createColorTexture(format) {
        return this.device.createTexture({
            id: 'color-attachment',
            usage: _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture.RENDER_ATTACHMENT,
            format,
            width: this.width,
            height: this.height
        });
    }
    /** Create depth stencil texture */
    createDepthStencilTexture(format) {
        return this.device.createTexture({
            id: 'depth-stencil-attachment',
            usage: _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture.RENDER_ATTACHMENT,
            format,
            width: this.width,
            height: this.height
        });
    }
    /**
     * Default implementation of resize
     * Creates new textures with correct size for all attachments.
     * and destroys existing textures if owned
     */
    resizeAttachments(width, height) {
        for (let i = 0; i < this.colorAttachments.length; ++i) {
            if (this.colorAttachments[i]) {
                const resizedTexture = this.device._createTexture({
                    ...this.colorAttachments[i].props,
                    width,
                    height
                });
                this.destroyAttachedResource(this.colorAttachments[i]);
                this.colorAttachments[i] = resizedTexture.view;
                this.attachResource(resizedTexture.view);
            }
        }
        if (this.depthStencilAttachment) {
            const resizedTexture = this.device._createTexture({
                ...this.depthStencilAttachment.props,
                width,
                height
            });
            this.destroyAttachedResource(this.depthStencilAttachment);
            this.depthStencilAttachment = resizedTexture.view;
            this.attachResource(resizedTexture);
        }
    }
}
// TODO - remove if not needed
// Create a color attachment for WebGL *
// protected override createColorTexture(colorAttachment: Required<ColorAttachment>): Required<ColorAttachment> {
//   return this.device._createTexture({
//     id: `${this.id}-color`,
//     data: null, // reserves texture memory, but texels are undefined
//     format,
//     // type: GL.UNSIGNED_BYTE,
//     width: this.width,
//     height: this.height,
//     // Note: Mipmapping can be disabled by texture resource when we resize the texture
//     // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant
//     // behavior we always disable mipmaps.
//     mipmaps: false,
//     // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.
//     // Use LINEAR so subpixel algos like fxaa work.
//     // Set WRAP modes that support NPOT textures too.
//     sampler: {
//       minFilter: 'linear',
//       magFilter: 'linear',
//       addressModeU: 'clamp-to-edge',
//       addressModeV: 'clamp-to-edge'
//     }
//     // parameters: {
//     //   [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,
//     //   [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,
//     //   [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,
//     //   [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE
//     // }
//   });
// }
// /** Returns fully populated attachment object. */
// protected normalizeColorAttachment(
//   attachment: Texture | ColorTextureFormat
// ): Required<ColorAttachment> {
//   const COLOR_ATTACHMENT_DEFAULTS: Required<ColorAttachment> = {
//     texture: undefined!,
//     format: undefined!,
//     clearValue: [0.0, 0.0, 0.0, 0.0],
//     loadOp: 'clear',
//     storeOp: 'store'
//   };
//   if (attachment instanceof Texture) {
//     return {...COLOR_ATTACHMENT_DEFAULTS, texture: attachment};
//   }
//   if (typeof attachment === 'string') {
//     return {...COLOR_ATTACHMENT_DEFAULTS, format: attachment};
//   }
//   return {...COLOR_ATTACHMENT_DEFAULTS, ...attachment};
// }
// /** Wraps texture inside fully populated attachment object. */
// protected normalizeDepthStencilAttachment(
//   attachment: DepthStencilAttachment | Texture | DepthStencilTextureFormat
// ): Required<DepthStencilAttachment> {
//   const DEPTH_STENCIL_ATTACHMENT_DEFAULTS: Required<DepthStencilAttachment> = {
//     texture: undefined!,
//     format: undefined!,
//     depthClearValue: 1.0,
//     depthLoadOp: 'clear',
//     depthStoreOp: 'store',
//     depthReadOnly: false,
//     stencilClearValue: 0,
//     stencilLoadOp: 'clear',
//     stencilStoreOp: 'store',
//     stencilReadOnly: false
//   };
//   if (typeof attachment === 'string') {
//     return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, format: attachment};
//   }
//   // @ts-expect-error attachment instanceof Texture doesn't cover Renderbuffer
//   if (attachment.handle || attachment instanceof Texture) {
//     return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, texture: attachment as Texture};
//   }
//   return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, ...attachment};
// }


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/query-set.js":
/*!************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/query-set.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QuerySet: () => (/* binding */ QuerySet)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Immutable QuerySet object */
class QuerySet extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        type: undefined,
        count: undefined
    };
    get [Symbol.toStringTag]() {
        return 'QuerySet';
    }
    constructor(device, props) {
        super(device, props, QuerySet.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RenderPass: () => (/* binding */ RenderPass)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// import {Binding} from '../types/shader-layout';

/**
 * A RenderPass instance is a required parameter to all draw calls.
 *
 * It holds a combination of
 * - render targets (specified via a framebuffer)
 * - clear colors, read/write, discard information for the framebuffer attachments
 * - a couple of mutable parameters ()
 */
class RenderPass extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    /** Default properties for RenderPass */
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        framebuffer: null,
        parameters: undefined,
        clearColor: [0, 0, 0, 0],
        clearDepth: 1,
        clearStencil: 0,
        depthReadOnly: false,
        stencilReadOnly: false,
        discard: false,
        occlusionQuerySet: undefined,
        timestampQuerySet: undefined,
        beginTimestampIndex: undefined,
        endTimestampIndex: undefined
    };
    get [Symbol.toStringTag]() {
        return 'RenderPass';
    }
    constructor(device, props) {
        super(device, props, RenderPass.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RenderPipeline: () => (/* binding */ RenderPipeline)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// import {normalizeAttributeMap} from '../helpers/attribute-bindings';

/**
 * A compiled and linked shader program
 */
class RenderPipeline extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        vs: null,
        vertexEntryPoint: 'vertexMain',
        vsConstants: {},
        fs: null,
        fragmentEntryPoint: 'fragmentMain',
        fsConstants: {},
        shaderLayout: null,
        bufferLayout: [],
        topology: 'triangle-list',
        parameters: {},
        // isInstanced: false,
        // instanceCount: 0,
        // vertexCount: 0,
        bindings: {},
        uniforms: {}
    };
    get [Symbol.toStringTag]() {
        return 'RenderPipeline';
    }
    /** The merged layout */
    shaderLayout;
    /** Buffer map describing buffer interleaving etc */
    bufferLayout;
    /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */
    linkStatus = 'pending';
    /** The hash of the pipeline */
    hash = '';
    constructor(device, props) {
        super(device, props, RenderPipeline.defaultProps);
        this.shaderLayout = this.props.shaderLayout;
        this.bufferLayout = this.props.bufferLayout || [];
    }
    // DEPRECATED METHODS
    /**
     * Uniforms
     * @deprecated Use uniforms buffers
     * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.
     * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.
     */
    setUniformsWebGL(uniforms) {
        throw new Error('Use uniform blocks');
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/resource.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resource: () => (/* binding */ Resource)
/* harmony export */ });
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils.js */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Base class for GPU (WebGPU/WebGL) Resources
 */
class Resource {
    /** Default properties for resource */
    static defaultProps = {
        id: 'undefined',
        handle: undefined,
        userData: undefined
    };
    /** props.id, for debugging. */
    id;
    props;
    userData = {};
    _device;
    /** Whether this resource has been destroyed */
    destroyed = false;
    /** For resources that allocate GPU memory */
    allocatedBytes = 0;
    /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created "sub" resources. */
    _attachedResources = new Set();
    /**
     * Create a new Resource. Called from Subclass
     */
    constructor(device, props, defaultProps) {
        if (!device) {
            throw new Error('no device');
        }
        this._device = device;
        this.props = selectivelyMerge(props, defaultProps);
        const id = this.props.id !== 'undefined' ? this.props.id : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.uid)(this[Symbol.toStringTag]);
        this.props.id = id;
        this.id = id;
        this.userData = this.props.userData || {};
        this.addStats();
    }
    /**
     * destroy can be called on any resource to release it before it is garbage collected.
     */
    destroy() {
        this.destroyResource();
    }
    /** @deprecated Use destroy() */
    delete() {
        this.destroy();
        return this;
    }
    toString() {
        return `${this[Symbol.toStringTag] || this.constructor.name}(${this.id})`;
    }
    /**
     * Combines a map of user props and default props, only including props from defaultProps
     * @returns returns a map of overridden default props
     */
    getProps() {
        return this.props;
    }
    // ATTACHED RESOURCES
    /**
     * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed
     * Called automatically when sub resources are auto created but can be called by application
     */
    attachResource(resource) {
        this._attachedResources.add(resource);
    }
    /**
     * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.
     */
    detachResource(resource) {
        this._attachedResources.delete(resource);
    }
    /**
     * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.
     */
    destroyAttachedResource(resource) {
        if (this._attachedResources.delete(resource)) {
            resource.destroy();
        }
    }
    /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */
    destroyAttachedResources() {
        for (const resource of Object.values(this._attachedResources)) {
            resource.destroy();
        }
        // don't remove while we are iterating
        this._attachedResources = new Set();
    }
    // PROTECTED METHODS
    /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */
    destroyResource() {
        this.destroyAttachedResources();
        this.removeStats();
        this.destroyed = true;
    }
    /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */
    removeStats() {
        const stats = this._device.statsManager.getStats('Resource Counts');
        const name = this[Symbol.toStringTag];
        stats.get(`${name}s Active`).decrementCount();
    }
    /** Called by subclass to track memory allocations */
    trackAllocatedMemory(bytes, name = this[Symbol.toStringTag]) {
        const stats = this._device.statsManager.getStats('Resource Counts');
        stats.get('GPU Memory').addCount(bytes);
        stats.get(`${name} Memory`).addCount(bytes);
        this.allocatedBytes = bytes;
    }
    /** Called by subclass to track memory deallocations */
    trackDeallocatedMemory(name = this[Symbol.toStringTag]) {
        const stats = this._device.statsManager.getStats('Resource Counts');
        stats.get('GPU Memory').subtractCount(this.allocatedBytes);
        stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);
        this.allocatedBytes = 0;
    }
    /** Called by resource constructor to track object creation */
    addStats() {
        const stats = this._device.statsManager.getStats('Resource Counts');
        const name = this[Symbol.toStringTag];
        stats.get('Resources Created').incrementCount();
        stats.get(`${name}s Created`).incrementCount();
        stats.get(`${name}s Active`).incrementCount();
    }
}
/**
 * Combines a map of user props and default props, only including props from defaultProps
 * @param props
 * @param defaultProps
 * @returns returns a map of overridden default props
 */
function selectivelyMerge(props, defaultProps) {
    const mergedProps = { ...defaultProps };
    for (const key in props) {
        if (props[key] !== undefined) {
            mergedProps[key] = props[key];
        }
    }
    return mergedProps;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/sampler.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/sampler.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Sampler: () => (/* binding */ Sampler)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Immutable Sampler object */
class Sampler extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        type: 'color-sampler',
        addressModeU: 'clamp-to-edge',
        addressModeV: 'clamp-to-edge',
        addressModeW: 'clamp-to-edge',
        magFilter: 'nearest',
        minFilter: 'nearest',
        mipmapFilter: 'nearest',
        lodMinClamp: 0,
        lodMaxClamp: 32, // Per WebGPU spec
        compare: 'less-equal',
        maxAnisotropy: 1
    };
    get [Symbol.toStringTag]() {
        return 'Sampler';
    }
    constructor(device, props) {
        super(device, props, Sampler.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/shader.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/shader.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Shader: () => (/* binding */ Shader)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/utils.js */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _lib_compiler_log_format_compiler_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/compiler-log/format-compiler-log.js */ "./node_modules/@luma.gl/core/dist/lib/compiler-log/format-compiler-log.js");
/* harmony import */ var _lib_compiler_log_get_shader_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/compiler-log/get-shader-info.js */ "./node_modules/@luma.gl/core/dist/lib/compiler-log/get-shader-info.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// import { log } from '../../utils/log';



/**
 * Immutable Shader object
 * In WebGPU the handle can be copied between threads
 */
class Shader extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        language: 'auto',
        stage: undefined,
        source: '',
        sourceMap: null,
        entryPoint: 'main',
        debug: 'errors'
    };
    get [Symbol.toStringTag]() {
        return 'Shader';
    }
    /** The stage of this shader */
    stage;
    /** The source code of this shader */
    source;
    /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */
    compilationStatus = 'pending';
    /** Create a new Shader instance */
    constructor(device, props) {
        super(device, { id: getShaderIdFromProps(props), ...props }, Shader.defaultProps);
        this.stage = this.props.stage;
        this.source = this.props.source;
    }
    /** Get compiler log synchronously (WebGL only) */
    getCompilationInfoSync() {
        return null;
    }
    /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */
    getTranslatedSource() {
        return null;
    }
    // PORTABLE HELPERS
    /** In browser logging of errors */
    async debugShader(trigger = this.props.debug) {
        switch (trigger) {
            case 'never':
                return;
            case 'errors':
                // On WebGL - Don't extract the log unless errors
                if (this.compilationStatus === 'success') {
                    return;
                }
                break;
            case 'warnings':
            case 'always':
                break;
        }
        const messages = await this.getCompilationInfo();
        if (this.props.debug === 'warnings' && messages?.length === 0) {
            return;
        }
        this._displayShaderLog(messages);
    }
    // PRIVATE
    /** In-browser UI logging of errors */
    _displayShaderLog(messages) {
        // Return if under Node.js / incomplete `document` polyfills
        if (typeof document === 'undefined' || !document?.createElement) {
            return;
        }
        const shaderName = (0,_lib_compiler_log_get_shader_info_js__WEBPACK_IMPORTED_MODULE_1__.getShaderInfo)(this.source).name;
        const shaderTitle = `${this.stage} ${shaderName}`;
        let htmlLog = (0,_lib_compiler_log_format_compiler_log_js__WEBPACK_IMPORTED_MODULE_2__.formatCompilerLog)(messages, this.source, { showSourceCode: 'all', html: true });
        // Show translated source if available
        const translatedSource = this.getTranslatedSource();
        if (translatedSource) {
            htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style="user-select:text;"><pre>${translatedSource}</pre></code>`;
        }
        // Make it clickable so we can copy to clipboard
        const button = document.createElement('Button');
        button.innerHTML = `
<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />
<code style="user-select:text;"><pre>
${htmlLog}
</pre></code>`;
        button.style.top = '10px';
        button.style.left = '10px';
        button.style.position = 'absolute';
        button.style.zIndex = '9999';
        button.style.width = '100%';
        button.style.textAlign = 'left';
        document.body.appendChild(button);
        const errors = document.getElementsByClassName('luma-compiler-log-error');
        if (errors[0]?.scrollIntoView) {
            errors[0].scrollIntoView();
        }
        // TODO - add a small embedded copy button (instead of main button)
        button.onclick = () => {
            // const source = this.source.replaceAll('\n', '<br />');
            const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;
            navigator.clipboard.writeText(dataURI);
        };
        // TODO - add a small embedded close button
    }
}
// HELPERS
/** Deduce an id, from shader source, or supplied id, or shader type */
function getShaderIdFromProps(props) {
    return (0,_lib_compiler_log_get_shader_info_js__WEBPACK_IMPORTED_MODULE_1__.getShaderInfo)(props.source).name || props.id || (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.uid)(`unnamed ${props.stage}-shader`);
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextureView: () => (/* binding */ TextureView)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Immutable TextureView object */
class TextureView extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        format: undefined,
        dimension: undefined,
        aspect: 'all',
        baseMipLevel: 0,
        mipLevelCount: undefined,
        baseArrayLayer: 0,
        arrayLayerCount: undefined
    };
    get [Symbol.toStringTag]() {
        return 'TextureView';
    }
    /** Should not be constructed directly. Use `texture.createView(props)` */
    constructor(device, props) {
        super(device, props, TextureView.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/texture.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Texture: () => (/* binding */ Texture)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Abstract Texture interface
 * Texture Object
 * https://gpuweb.github.io/gpuweb/#gputexture
 */
class Texture extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        data: null,
        dimension: '2d',
        format: 'rgba8unorm',
        width: undefined,
        height: undefined,
        depth: 1,
        mipmaps: true,
        // type: undefined,
        compressed: false,
        // mipLevels: 1,
        usage: 0,
        // usage: GPUTextureUsage.COPY_DST
        mipLevels: undefined,
        samples: undefined,
        type: undefined,
        sampler: {},
        view: undefined
    };
    static COPY_SRC = 0x01;
    static COPY_DST = 0x02;
    static TEXTURE_BINDING = 0x04;
    static STORAGE_BINDING = 0x08;
    static RENDER_ATTACHMENT = 0x10;
    get [Symbol.toStringTag]() {
        return 'Texture';
    }
    /** dimension of this texture */
    dimension;
    /** format of this texture */
    format;
    /** width in pixels of this texture */
    width;
    /** height in pixels of this texture */
    height;
    /** depth of this texture */
    depth;
    /** "Time" of last update. Monotonically increasing timestamp */
    updateTimestamp;
    /** Do not use directly. Create with device.createTexture() */
    constructor(device, props, defaultProps = Texture.defaultProps) {
        super(device, props, defaultProps);
        this.dimension = this.props.dimension;
        this.format = this.props.format;
        this.width = this.props.width;
        this.height = this.props.height;
        this.depth = this.props.depth;
        // TODO - perhaps this should be set on async write completion?
        this.updateTimestamp = device.incrementTimestamp();
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TransformFeedback: () => (/* binding */ TransformFeedback)
/* harmony export */ });
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Holds a set of output buffers for pipeline (WebGL only) */
class TransformFeedback extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        layout: undefined,
        buffers: {}
    };
    get [Symbol.toStringTag]() {
        return 'TransformFeedback';
    }
    constructor(device, props) {
        super(device, props, TransformFeedback.defaultProps);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VertexArray: () => (/* binding */ VertexArray)
/* harmony export */ });
/* harmony import */ var _attribute_utils_get_attribute_from_layouts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../attribute-utils/get-attribute-from-layouts.js */ "./node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js");
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Stores attribute bindings.
 * Makes it easy to share a render pipeline and use separate vertex arrays.
 * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance
 * reducing the number of WebGL calls per draw call.
 * @note On WebGPU this is just a convenience class that collects the bindings.
 */
class VertexArray extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        renderPipeline: null
    };
    get [Symbol.toStringTag]() {
        return 'VertexArray';
    }
    /** Max number of vertex attributes */
    maxVertexAttributes;
    /** Attribute infos indexed by location - TODO only needed by webgl module? */
    attributeInfos;
    /** Index buffer */
    indexBuffer = null;
    /** Attributes indexed by buffer slot */
    attributes;
    constructor(device, props) {
        super(device, props, VertexArray.defaultProps);
        this.maxVertexAttributes = device.limits.maxVertexAttributes;
        this.attributes = new Array(this.maxVertexAttributes).fill(null);
        this.attributeInfos = (0,_attribute_utils_get_attribute_from_layouts_js__WEBPACK_IMPORTED_MODULE_1__.getAttributeInfosByLocation)(props.renderPipeline.shaderLayout, props.renderPipeline.bufferLayout, this.maxVertexAttributes);
    }
    // DEPRECATED METHODS
    /** @deprecated Set constant attributes (WebGL only) */
    setConstantWebGL(location, value) {
        throw new Error('constant attributes not supported');
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-attribute-type.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-attribute-type.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeShaderAttributeType: () => (/* binding */ decodeShaderAttributeType)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */
function decodeShaderAttributeType(attributeType) {
    const [dataType, components] = TYPE_INFO[attributeType];
    const integer = dataType === 'i32' || dataType === 'u32';
    const signed = dataType !== 'u32';
    const byteLength = TYPE_SIZES[dataType] * components;
    const defaultVertexFormat = getCompatibleVertexFormat(dataType, components);
    return {
        dataType,
        components,
        defaultVertexFormat,
        byteLength,
        integer,
        signed
    };
}
/** Get the "default" vertex format for a certain shader data type */
function getCompatibleVertexFormat(dataType, components) {
    let vertexType;
    switch (dataType) {
        case 'f32':
            vertexType = 'float32';
            break;
        case 'i32':
            vertexType = 'sint32';
            break;
        case 'u32':
            vertexType = 'uint32';
            break;
        case 'f16':
            return components <= 2 ? 'float16x2' : 'float16x4';
    }
    // TODO logic does not work for float16
    if (components === 1) {
        return vertexType;
    }
    return `${vertexType}x${components}`;
}
/** All valid shader attribute types. A table guarantees exhaustive list and fast execution */
const TYPE_INFO = {
    f32: ['f32', 1],
    'vec2<f32>': ['f32', 2],
    'vec3<f32>': ['f32', 3],
    'vec4<f32>': ['f32', 4],
    f16: ['f16', 1],
    'vec2<f16>': ['f16', 2],
    'vec3<f16>': ['f16', 3],
    'vec4<f16>': ['f16', 4],
    i32: ['i32', 1],
    'vec2<i32>': ['i32', 2],
    'vec3<i32>': ['i32', 3],
    'vec4<i32>': ['i32', 4],
    u32: ['u32', 1],
    'vec2<u32>': ['u32', 2],
    'vec3<u32>': ['u32', 3],
    'vec4<u32>': ['u32', 4]
};
const TYPE_SIZES = {
    f32: 4,
    f16: 2,
    i32: 4,
    u32: 4
    // 'bool-webgl': 4,
};


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-data-type.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-data-type.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeVertexType: () => (/* binding */ decodeVertexType)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */
function decodeVertexType(type) {
    const dataType = TYPE_MAP[type];
    const bytes = getDataTypeBytes(dataType);
    const normalized = type.includes('norm');
    const integer = !normalized && !type.startsWith('float');
    const signed = type.startsWith('s');
    return {
        dataType: TYPE_MAP[type],
        byteLength: bytes,
        integer,
        signed,
        normalized
    };
}
function getDataTypeBytes(type) {
    const bytes = TYPE_SIZES[type];
    // assert(bytes);
    return bytes;
}
const TYPE_MAP = {
    uint8: 'uint8',
    sint8: 'sint8',
    unorm8: 'uint8',
    snorm8: 'sint8',
    uint16: 'uint16',
    sint16: 'sint16',
    unorm16: 'uint16',
    snorm16: 'sint16',
    float16: 'float16',
    float32: 'float32',
    uint32: 'uint32',
    sint32: 'sint32'
};
const TYPE_SIZES = {
    uint8: 1,
    sint8: 1,
    uint16: 2,
    sint16: 2,
    float16: 2,
    float32: 4,
    uint32: 4,
    sint32: 4
};


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-shader-types.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-shader-types.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   alignTo: () => (/* binding */ alignTo),
/* harmony export */   decodeShaderUniformType: () => (/* binding */ decodeShaderUniformType)
/* harmony export */ });
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/assert.js */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const UNIFORM_FORMATS = {
    f32: { type: 'f32', components: 1 },
    i32: { type: 'i32', components: 1 },
    u32: { type: 'u32', components: 1 },
    // 'bool-webgl': {type: 'bool-webgl', components: 1},
    'vec2<f32>': { type: 'f32', components: 2 },
    'vec3<f32>': { type: 'f32', components: 3 },
    'vec4<f32>': { type: 'f32', components: 4 },
    'vec2<i32>': { type: 'i32', components: 2 },
    'vec3<i32>': { type: 'i32', components: 3 },
    'vec4<i32>': { type: 'i32', components: 4 },
    'vec2<u32>': { type: 'u32', components: 2 },
    'vec3<u32>': { type: 'u32', components: 3 },
    'vec4<u32>': { type: 'u32', components: 4 },
    'mat2x2<f32>': { type: 'f32', components: 4 },
    'mat2x3<f32>': { type: 'f32', components: 6 },
    'mat2x4<f32>': { type: 'f32', components: 8 },
    'mat3x2<f32>': { type: 'f32', components: 6 },
    'mat3x3<f32>': { type: 'f32', components: 9 },
    'mat3x4<f32>': { type: 'f32', components: 12 },
    'mat4x2<f32>': { type: 'f32', components: 8 },
    'mat4x3<f32>': { type: 'f32', components: 12 },
    'mat4x4<f32>': { type: 'f32', components: 16 }
};
/** Split a uniform type string into type and components */
function decodeShaderUniformType(format) {
    const decoded = UNIFORM_FORMATS[format];
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(format);
    return decoded;
}
/** Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes) */
function alignTo(size, count) {
    // prettier-ignore
    switch (count) {
        case 1: return size; // Pad upwards to even multiple of 2
        case 2: return size + (size % 2); // Pad upwards to even multiple of 2
        default: return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-texture-format.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-texture-format.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeTextureFormat: () => (/* binding */ decodeTextureFormat),
/* harmony export */   isTextureFormatCompressed: () => (/* binding */ isTextureFormatCompressed)
/* harmony export */ });
/* harmony import */ var _decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode-data-type.js */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-data-type.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// prettier-ignore
const COMPRESSED_TEXTURE_FORMAT_PREFIXES = [
    'bc1', 'bc2', 'bc3', 'bc4', 'bc5', 'bc6', 'bc7', 'etc1', 'etc2', 'eac', 'atc', 'astc', 'pvrtc'
];
const REGEX = /^(rg?b?a?)([0-9]*)([a-z]*)(-srgb)?(-webgl|-unsized)?$/;
/**
 * Returns true if a texture format is GPU compressed
 */
function isTextureFormatCompressed(textureFormat) {
    return COMPRESSED_TEXTURE_FORMAT_PREFIXES.some(prefix => textureFormat.startsWith(prefix));
}
/**
 * Decodes a vertex format, returning type, components, byte length and flags (integer, signed, normalized)
 */
function decodeTextureFormat(format) {
    const matches = REGEX.exec(format);
    if (matches) {
        const [, format, length, type, srgb, suffix] = matches;
        if (format) {
            const dataType = `${type}${length}`;
            const decodedType = (0,_decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__.decodeVertexType)(dataType);
            return {
                format: format,
                components: format.length,
                // dataType - overwritten by decodedType
                srgb: srgb === '-srgb',
                unsized: suffix === '-unsized',
                webgl: suffix === '-webgl',
                ...decodedType
            };
        }
    }
    return decodeNonStandardFormat(format);
}
// https://www.w3.org/TR/webgpu/#texture-format-caps
const EXCEPTIONS = {
    // Packed 16 bit formats
    'rgba4unorm-webgl': { format: 'rgba', bpp: 2 },
    'rgb565unorm-webgl': { format: 'rgb', bpp: 2 },
    'rgb5a1unorm-webgl': { format: 'rgba', bbp: 2 },
    // Packed 32 bit formats
    rgb9e5ufloat: { format: 'rgb', bbp: 4 },
    rg11b10ufloat: { format: 'rgb', bbp: 4 },
    rgb10a2unorm: { format: 'rgba', bbp: 4 },
    'rgb10a2uint-webgl': { format: 'rgba', bbp: 4 },
    // Depth/stencil
    stencil8: { components: 1, bpp: 1, a: 'stencil' },
    depth16unorm: { components: 1, bpp: 2, a: 'depth' },
    depth24plus: { components: 1, bpp: 3, a: 'depth' },
    depth32float: { components: 1, bpp: 4, a: 'depth' },
    'depth24plus-stencil8': { components: 2, bpp: 4, a: 'depth-stencil' },
    // "depth24unorm-stencil8" feature
    'depth24unorm-stencil8': { components: 2, bpp: 4, a: 'depth-stencil' },
    // "depth32float-stencil8" feature
    'depth32float-stencil8': { components: 2, bpp: 4, a: 'depth-stencil' }
};
function decodeNonStandardFormat(format) {
    const data = EXCEPTIONS[format];
    if (!data) {
        throw new Error(`Unknown format ${format}`);
    }
    return {
        format: data.format || '',
        components: data.components || data.format?.length || 1,
        byteLength: data.bpp || 1,
        srgb: false,
        unsized: false
    };
}
/*
'r8unorm':	{s: "float"}, // 	✓	✓	✓	},
'r8snorm':	{s: "float"}, // 		✓		},
'r8uint':	{s: "uint"}, // 	✓	✓		},
'r8sint':	{s: "sint"}, // 	✓	✓		},
'rg8unorm':	{s: "float"}, // 	✓	✓	✓	},
'rg8snorm':	{s: "float"}, // 		✓		},
'rg8uint':	{s: "uint"}, // 	✓	✓		},
'rg8sint':	{s: "sint"}, // 	✓	✓		},
'rgba8unorm':	{s: "float"}, // 	✓	✓	✓	✓},
'rgba8unorm-srgb': {s: "float"}, // 	✓	✓	✓	},
'rgba8snorm':	{s: "float"}, // 		✓		✓},
'rgba8uint':	{s: "uint"}, // 	✓	✓		✓},
'rgba8sint':	{s: "sint"}, // 	✓	✓		✓},
'bgra8unorm':	{s: "float"}, // 	✓	✓	✓	},
'bgra8unorm-srgb': {s: "float"}, // 	✓	✓	✓	},
// 16-bit per component
'r16uint': {s: "uint"}, // 	✓	✓		},
'r16sint': {s: "sint"}, // 	✓	✓		},
'r16float': {s: "float"}, // 	✓	✓	✓	},
'rg16uint': {s: "uint"}, // 	✓	✓		},
'rg16sint': {s: "sint"}, // 	✓	✓		},
'rg16float': {s: "float"}, // 	✓	✓	✓	},
'rgba16uint': {s: "uint"}, // 	✓	✓		✓},
'rgba16sint': {s: "sint"}, // 	✓	✓		✓},
'rgba16float': {s: "float"}, // 	✓	✓	✓	✓},
// 32-bit per component
'r32uint': {s: "uint"}, // 	✓			✓},
'r32sint': {s: "sint"}, // 	✓			✓},
'r32float': {"unfilterable-float"	✓	✓		✓},
'rg32uint': {s: "uint"}, // 	✓			✓},
'rg32sint': {s: "sint"}, // 	✓			✓},
'rg32float': {"unfilterable-float"	✓			✓},
'rgba32uint': {s: "uint"}, // 	✓			✓},
'rgba32sint': {s: "sint"}, // 	✓			✓},
'rgba32float': {"unfilterable-float"	✓			✓},
// mixed component width
'rgb10a2unorm': {s: "float"}, // 	✓	✓	✓	}
'rg11b10ufloat': {s: "float"}, // 		✓		}
// Format	Bytes per texel	Aspect	GPUTextureSampleType	Valid image copy source	Valid image copy destination
'stencil8': {1 − 4	stencil	"uint"	✓}
'depth16unorm': {2	depth	"depth"	✓}
'depth24plus': {4	depth	"depth"	✗}
'depth24plus': {stencil8	4 − 8	depth	"depth"	✗}
'stencil': {s: "uint"}, // 	✓}
'depth32float': {4	depth	"depth"	✓	✗}
'depth24unorm': {stencil8	4	depth	"depth"	✗}
'stencil': {s: "uint"}, // 	✓}
'depth32float': {stencil8}

// Format	Bytes per block	GPUTextureSampleType	Block Size	Feature
'rgb9e5ufloat': {c: 4, s: "float",	bpp: 4/(1*1)},

'bc1-rgba-unorm': {c: 4. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc1-rgba-unorm-srgb': {c: 4. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc2-rgba-unorm': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc2-rgba-unorm-srgb': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc3-rgba-unorm': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc3-rgba-unorm-srgb': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc4-r-unorm': {c: 1. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc4-r-snorm': {c: 1. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc5-rg-unorm': {c: 2. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc5-rg-snorm': { },
'bc6h-rgb-ufloat': {	16 },
'bc6h-rgb-float': { },
'bc7-rgba-unorm': {	16 },
'bc7-rgba-unorm-srgb': { },

'etc2-rgb8unorm': {	8	"float"	4 × 4	texture-compression-etc2 },
'etc2-rgb8unorm-srgb': { },
'etc2-rgb8a1unorm': {	8 },
'etc2-rgb8a1unorm-srgb': { },
'etc2-rgba8unorm': {	16 },
'etc2-rgba8unorm-srgb': { },

'eac-r11unorm': {	8 },
'eac-r11snorm': { },
'eac-rg11unorm': {	16 },
'eac-rg11snorm': { },

'astc-4x4-unorm': {	16	"float"	4 × 4	texture-compression-astc },
'astc-4x4-unorm-srgb': { },
'astc-5x4-unorm': {	16	5 × 4 },
'astc-5x4-unorm-srgb': { },
'astc-5x5-unorm': {	16	5 × 5 },
'astc-5x5-unorm-srgb': { },
'astc-6x5-unorm': {	16	6 × 5 },
'astc-6x5-unorm-srgb': { },
'astc-6x6-unorm': {	16	6 × 6 },
'astc-6x6-unorm-srgb': { },
'astc-8x5-unorm': {	16	8 × 5 },
'astc-8x5-unorm-srgb': { },
'astc-8x6-unorm': {	16	8 × 6 },
'astc-8x6-unorm-srgb': { },
'astc-8x8-unorm': {	16	8 × 8 },
'astc-8x8-unorm-srgb': { },
'astc-10x5-unorm': {	16	10 × 5 },
'astc-10x5-unorm-srgb': { },
'astc-10x6-unorm': {	16	10 × 6 },
'astc-10x6-unorm-srgb': { },
'astc-10x8-unorm': {	16	10 × 8 },
'astc-10x8-unorm-srgb': { },
'astc-10x10-unorm': {	16	10 × 10 },
'astc-10x10-unorm-srgb': { },
'astc-12x10-unorm': {	16	12 × 10 },
'astc-12x10-unorm-srgb': { },
'astc-12x12-unorm': {	16 },
*/


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-vertex-format.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-vertex-format.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeVertexFormat: () => (/* binding */ decodeVertexFormat)
/* harmony export */ });
/* harmony import */ var _decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode-data-type.js */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-data-type.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Decodes a vertex format, returning type, components, byte  length and flags (integer, signed, normalized)
 */
function decodeVertexFormat(format) {
    // Strip the -webgl ending if present
    let webglOnly;
    if (format.endsWith('-webgl')) {
        format.replace('-webgl', '');
        webglOnly = true;
    }
    // split components from type
    const [type_, count] = format.split('x');
    const type = type_;
    const components = (count ? parseInt(count) : 1);
    // decode the type
    const decodedType = (0,_decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__.decodeVertexType)(type);
    const result = {
        type,
        components,
        byteLength: decodedType.byteLength * components,
        integer: decodedType.integer,
        signed: decodedType.signed,
        normalized: decodedType.normalized
    };
    if (webglOnly) {
        result.webglOnly = true;
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDataTypeFromTypedArray: () => (/* binding */ getDataTypeFromTypedArray),
/* harmony export */   getTypedArrayFromDataType: () => (/* binding */ getTypedArrayFromDataType),
/* harmony export */   getVertexFormatFromAttribute: () => (/* binding */ getVertexFormatFromAttribute)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
function getDataTypeFromTypedArray(arrayOrType) {
    const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
    switch (type) {
        case Float32Array:
            return 'float32';
        case Uint16Array:
            return 'uint16';
        case Uint32Array:
            return 'uint32';
        case Uint8Array:
        case Uint8ClampedArray:
            return 'uint8';
        case Int8Array:
            return 'sint8';
        case Int16Array:
            return 'sint16';
        case Int32Array:
            return 'sint32';
        default:
            // Failed to deduce data type from typed array
            throw new Error(type.constructor.name);
    }
}
function getTypedArrayFromDataType(dataType) {
    switch (dataType) {
        case 'float32':
            return Float32Array;
        case 'uint32':
            return Uint32Array;
        case 'sint32':
            return Int32Array;
        case 'uint16':
        case 'unorm16':
            return Uint16Array;
        case 'sint16':
        case 'snorm16':
            return Int16Array;
        case 'uint8':
        case 'unorm8':
            return Uint8Array;
        case 'sint8':
        case 'snorm8':
            return Int8Array;
        default:
            // Failed to deduce typed array from data type
            throw new Error(dataType);
    }
}
/** Get the vertex format for an attribute with TypedArray and size */
function getVertexFormatFromAttribute(typedArray, size, normalized) {
    if (!size || size > 4) {
        throw new Error(`size ${size}`);
    }
    const components = size;
    let dataType = getDataTypeFromTypedArray(typedArray);
    if (dataType === 'uint8' || dataType === 'sint8') {
        if (components === 1 || components === 3) {
            // WebGPU 8 bit formats must be aligned to 16 bit boundaries');
            throw new Error(`size: ${size}`);
        }
        if (normalized) {
            dataType = dataType.replace('int', 'norm');
        }
        return `${dataType}x${components}`;
    }
    if (dataType === 'uint16' || dataType === 'sint16') {
        if (components === 1 || components === 3) {
            // WebGPU 16 bit formats must be aligned to 32 bit boundaries
            throw new Error(`size: ${size}`);
        }
        if (normalized) {
            dataType = dataType.replace('int', 'norm');
        }
        return `${dataType}x${components}`;
    }
    if (components === 1) {
        return dataType;
    }
    return `${dataType}x${components}`;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/init.js":
/*!*************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/init.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/stats-manager.js */ "./node_modules/@luma.gl/core/dist/utils/stats-manager.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * By adding the result of init() to Device.VERSION we guarantee it will be called
 * @returns version
 */
function initializeLuma() {
    // Version detection using babel plugin
    // @ts-expect-error
    const VERSION =  true ? "9.0.16" : 0;
    const STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';
    // Assign luma.log.level in console to control logging: \
    // 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs
    // luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;
    if (globalThis.luma && globalThis.luma.VERSION !== VERSION) {
        throw new Error(`luma.gl - multiple VERSIONs detected: ${globalThis.luma.VERSION} vs ${VERSION}`);
    }
    if (!globalThis.luma) {
        if ((0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)()) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.log(1, `${VERSION} - ${STARTUP_MESSAGE}`)();
        }
        globalThis.luma = globalThis.luma || {
            VERSION,
            version: VERSION,
            log: _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log,
            // A global stats object that various components can add information to
            // E.g. see webgl/resource.js
            stats: _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_2__.lumaStats
        };
    }
    return VERSION;
}
const VERSION = initializeLuma();


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/lib/compiler-log/format-compiler-log.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/lib/compiler-log/format-compiler-log.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatCompilerLog: () => (/* binding */ formatCompilerLog)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** @returns annotated errors or warnings */
function formatCompilerLog(shaderLog, source, options) {
    let formattedLog = '';
    const lines = source.split(/\r?\n/);
    const log = shaderLog.slice().sort((a, b) => a.lineNum - b.lineNum);
    switch (options?.showSourceCode || 'no') {
        case 'all':
            // Parse the error - note: browser and driver dependent
            let currentMessage = 0;
            for (let lineNum = 1; lineNum <= lines.length; lineNum++) {
                formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);
                while (log.length > currentMessage && log[currentMessage].lineNum === lineNum) {
                    const message = log[currentMessage++];
                    formattedLog += formatCompilerMessage(message, lines, message.lineNum, {
                        ...options,
                        inlineSource: false
                    });
                }
            }
            return formattedLog;
        case 'issues':
        case 'no':
            // Parse the error - note: browser and driver dependent
            for (const message of shaderLog) {
                formattedLog += formatCompilerMessage(message, lines, message.lineNum, {
                    inlineSource: options?.showSourceCode !== 'no'
                });
            }
            return formattedLog;
    }
}
// Helpers
/** Format one message */
function formatCompilerMessage(message, lines, lineNum, options) {
    if (options?.inlineSource) {
        const numberedLines = getNumberedLines(lines, lineNum);
        // If we got error position on line add a `^^^` indicator on next line
        const positionIndicator = message.linePos > 0 ? `${' '.repeat(message.linePos + 5)}^^^\n` : '';
        return `
${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}

`;
    }
    return options?.html
        ? `<div class='luma-compiler-log-error' style="color:red;"><b> ${message.type.toUpperCase()}: ${message.message}</b></div>`
        : `${message.type.toUpperCase()}: ${message.message}`;
}
function getNumberedLines(lines, lineNum, options) {
    let numberedLines = '';
    for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {
        const sourceLine = lines[lineIndex - 1];
        if (sourceLine !== undefined) {
            numberedLines += getNumberedLine(sourceLine, lineNum, options);
        }
    }
    return numberedLines;
}
function getNumberedLine(line, lineNum, options) {
    const escapedLine = options?.html ? escapeHTML(line) : line;
    return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? '<br/>' : '\n'}`;
}
/**
 * Pads a string with a number of spaces (space characters) to the left
 * @param {String} string - string to pad
 * @param {Number} digits - number of spaces to add
 * @return {String} string - The padded string
 */
function padLeft(string, paddedLength) {
    let result = '';
    for (let i = string.length; i < paddedLength; ++i) {
        result += ' ';
    }
    return result + string;
}
function escapeHTML(unsafe) {
    return unsafe
        .replaceAll('&', '&amp;')
        .replaceAll('<', '&lt;')
        .replaceAll('>', '&gt;')
        .replaceAll('"', '&quot;')
        .replaceAll("'", '&#039;');
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/lib/compiler-log/get-shader-info.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/lib/compiler-log/get-shader-info.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShaderInfo: () => (/* binding */ getShaderInfo)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Extracts information from shader source code */
function getShaderInfo(source, defaultName) {
    return {
        name: getShaderName(source, defaultName),
        language: 'glsl',
        version: getShaderVersion(source)
    };
}
/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */
function getShaderName(shader, defaultName = 'unnamed') {
    const SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
    const match = SHADER_NAME_REGEXP.exec(shader);
    return match ? match[1] : defaultName;
}
/** returns GLSL shader version of given shader string */
function getShaderVersion(source) {
    let version = 100;
    const words = source.match(/[^\s]+/g);
    if (words && words.length >= 2 && words[0] === '#version') {
        const v = parseInt(words[1], 10);
        if (Number.isFinite(v)) {
            version = v;
        }
    }
    return version;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/lib/luma.js":
/*!*****************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/lib/luma.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   luma: () => (/* binding */ luma)
/* harmony export */ });
/* harmony import */ var _adapter_device_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../adapter/device.js */ "./node_modules/@luma.gl/core/dist/adapter/device.js");
/* harmony import */ var _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/stats-manager.js */ "./node_modules/@luma.gl/core/dist/utils/stats-manager.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




const deviceMap = new Map();
/**
 * Entry point to the luma.gl GPU abstraction
 * Register WebGPU and/or WebGL devices (controls application bundle size)
 * Run-time selection of the first available Device
 */
class luma {
    static defaultProps = {
        ..._adapter_device_js__WEBPACK_IMPORTED_MODULE_0__.Device.defaultProps,
        type: 'best-available',
        devices: undefined
    };
    /** Global stats for all devices */
    static stats = _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_1__.lumaStats;
    /** Global log */
    static log = _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log;
    static registerDevices(deviceClasses /* : typeof Device */) {
        for (const deviceClass of deviceClasses) {
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_3__.assert)(deviceClass.type && deviceClass.isSupported && deviceClass.create);
            deviceMap.set(deviceClass.type, deviceClass);
        }
    }
    static getAvailableDevices() {
        // @ts-expect-error
        return Array.from(deviceMap).map(Device => Device.type);
    }
    static getSupportedDevices() {
        return (Array.from(deviceMap)
            // @ts-expect-error
            .filter(Device => Device.isSupported())
            // @ts-expect-error
            .map(Device => Device.type));
    }
    static setDefaultDeviceProps(props) {
        Object.assign(_adapter_device_js__WEBPACK_IMPORTED_MODULE_0__.Device.defaultProps, props);
    }
    /** Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice). */
    static async attachDevice(props) {
        const devices = getDeviceMap(props.devices) || deviceMap;
        // WebGL
        if (props.handle instanceof WebGL2RenderingContext) {
            const WebGLDevice = devices.get('webgl');
            if (WebGLDevice) {
                return (await WebGLDevice.attach(props.handle));
            }
        }
        // TODO - WebGPU does not yet have a stable API
        // if (props.handle instanceof GPUDevice) {
        //   const WebGPUDevice = devices.get('webgpu') as any;
        //   if (WebGPUDevice) {
        //     return (await WebGPUDevice.attach(props.handle)) as Device;
        //   }
        // }
        // null
        if (props.handle === null) {
            const UnknownDevice = devices.get('unknown');
            if (UnknownDevice) {
                return (await UnknownDevice.attach(null));
            }
        }
        throw new Error('Failed to attach device. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.');
    }
    /** Creates a device. Asynchronously. */
    static async createDevice(props = {}) {
        props = { ...luma.defaultProps, ...props };
        if (props.gl) {
            props.type = 'webgl';
        }
        const devices = getDeviceMap(props.devices) || deviceMap;
        switch (props.type) {
            case 'webgpu':
                let WebGPUDevice = devices.get('webgpu');
                if (WebGPUDevice) {
                    return await WebGPUDevice.create(props);
                }
                break;
            case 'webgl':
                let WebGLDevice = devices.get('webgl');
                if (WebGLDevice) {
                    return await WebGLDevice.create(props);
                }
                break;
            case 'unknown':
                const UnknownDevice = devices.get('unknown');
                if (UnknownDevice) {
                    return await UnknownDevice.create(props);
                }
                break;
            case 'best-available':
                WebGPUDevice = devices.get('webgpu');
                if (WebGPUDevice?.isSupported?.()) {
                    return await WebGPUDevice.create(props);
                }
                WebGLDevice = devices.get('webgl');
                if (WebGLDevice?.isSupported?.()) {
                    return await WebGLDevice.create(props);
                }
                break;
        }
        throw new Error('No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.');
    }
    static enforceWebGL2(enforce = true) {
        const prototype = HTMLCanvasElement.prototype;
        if (!enforce && prototype.originalGetContext) {
            // Reset the original getContext function
            prototype.getContext = prototype.originalGetContext;
            prototype.originalGetContext = undefined;
            return;
        }
        // Store the original getContext function
        prototype.originalGetContext = prototype.getContext;
        // Override the getContext function
        prototype.getContext = function (contextId, options) {
            // Attempt to force WebGL2 for all WebGL1 contexts
            if (contextId === 'webgl' || contextId === 'experimental-webgl') {
                return this.originalGetContext('webgl2', options);
            }
            // For any other type, return the original context
            return this.originalGetContext(contextId, options);
        };
    }
}
/** Convert a list of devices to a map */
function getDeviceMap(deviceClasses /* : typeof Device */) {
    if (!deviceClasses || deviceClasses?.length === 0) {
        return null;
    }
    const map = new Map();
    for (const deviceClass of deviceClasses) {
        // assert(deviceClass.type && deviceClass.isSupported && deviceClass.create);
        map.set(deviceClass.type, deviceClass);
    }
    return map;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-block.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-block.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UniformBlock: () => (/* binding */ UniformBlock)
/* harmony export */ });
/* harmony import */ var _utils_array_equal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/array-equal.js */ "./node_modules/@luma.gl/core/dist/utils/array-equal.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * A uniform block holds values of the of uniform values for one uniform block / buffer.
 * It also does some book keeping on what has changed, to minimize unnecessary writes to uniform buffers.
 */
class UniformBlock {
    name;
    uniforms = {};
    modifiedUniforms = {};
    modified = true;
    bindingLayout = {};
    needsRedraw = 'initialized';
    constructor(props) {
        this.name = props?.name;
        // TODO - Extract uniform layout from the shaderLayout object
        if (props?.name && props?.shaderLayout) {
            const binding = props?.shaderLayout.bindings?.find(binding => binding.type === 'uniform' && binding.name === props?.name);
            if (!binding) {
                throw new Error(props?.name);
            }
            const uniformBlock = binding;
            for (const uniform of uniformBlock.uniforms || []) {
                this.bindingLayout[uniform.name] = uniform;
            }
        }
    }
    /** Set a map of uniforms */
    setUniforms(uniforms) {
        for (const [key, value] of Object.entries(uniforms)) {
            this._setUniform(key, value);
            if (!this.needsRedraw) {
                this.setNeedsRedraw(`${this.name}.${key}=${value}`);
            }
        }
    }
    setNeedsRedraw(reason) {
        this.needsRedraw = this.needsRedraw || reason;
    }
    /** Returns all uniforms */
    getAllUniforms() {
        // @ts-expect-error
        this.modifiedUniforms = {};
        this.needsRedraw = false;
        return (this.uniforms || {});
    }
    /** Set a single uniform */
    _setUniform(key, value) {
        if ((0,_utils_array_equal_js__WEBPACK_IMPORTED_MODULE_0__.arrayEqual)(this.uniforms[key], value)) {
            return;
        }
        this.uniforms[key] = (0,_utils_array_equal_js__WEBPACK_IMPORTED_MODULE_0__.arrayCopy)(value);
        this.modifiedUniforms[key] = true;
        this.modified = true;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-buffer-layout.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-buffer-layout.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UniformBufferLayout: () => (/* binding */ UniformBufferLayout)
/* harmony export */ });
/* harmony import */ var _adapter_type_utils_decode_shader_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../adapter/type-utils/decode-shader-types.js */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-shader-types.js");
/* harmony import */ var _utils_array_utils_flat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array-utils-flat.js */ "./node_modules/@luma.gl/core/dist/utils/array-utils-flat.js");
/* harmony import */ var _utils_is_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is-array.js */ "./node_modules/@luma.gl/core/dist/utils/is-array.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * Smallest buffer size that can be used for uniform buffers.
 * TODO - does this depend on device?
 */
const minBufferSize = 1024;
/**
 * Std140 layout for uniform buffers
 * Supports manual listing of uniforms
 */
class UniformBufferLayout {
    layout = {};
    /** number of bytes needed for buffer allocation */
    byteLength;
    /** Create a new UniformBufferLayout given a map of attributes. */
    constructor(uniformTypes) {
        /** number of 4 byte slots taken */
        let size = 0;
        // Add layout (type, size and offset) definitions for each uniform in the layout
        for (const [key, uniformType] of Object.entries(uniformTypes)) {
            const typeAndComponents = (0,_adapter_type_utils_decode_shader_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeShaderUniformType)(uniformType);
            const { type, components: count } = typeAndComponents;
            // First, align (bump) current offset to an even multiple of current object (1, 2, 4)
            size = (0,_adapter_type_utils_decode_shader_types_js__WEBPACK_IMPORTED_MODULE_0__.alignTo)(size, count);
            // Use the aligned size as the offset of the current uniform.
            const offset = size;
            // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset
            size += count;
            this.layout[key] = { type, size: count, offset };
        }
        size += (4 - (size % 4)) % 4;
        const actualByteLength = size * 4;
        this.byteLength = Math.max(actualByteLength, minBufferSize);
    }
    /** Get the data for the complete buffer */
    getData(uniformValues) {
        const bufferSize = Math.max(this.byteLength, minBufferSize);
        // Allocate three typed arrays pointing at same memory
        const arrayBuffer = (0,_utils_array_utils_flat_js__WEBPACK_IMPORTED_MODULE_1__.getScratchArrayBuffer)(bufferSize);
        const typedArrays = {
            i32: new Int32Array(arrayBuffer),
            u32: new Uint32Array(arrayBuffer),
            f32: new Float32Array(arrayBuffer),
            // TODO not implemented
            f16: new Uint16Array(arrayBuffer)
        };
        // TODO is this needed?
        // typedArrays.i32.fill(0);
        for (const [name, value] of Object.entries(uniformValues)) {
            const uniformLayout = this.layout[name];
            if (!uniformLayout) {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Supplied uniform value ${name} not present in uniform block layout`)();
                // eslint-disable-next-line no-continue
                continue;
            }
            const { type, size, offset } = uniformLayout;
            const typedArray = typedArrays[type];
            if (size === 1) {
                if (typeof value !== 'number' && typeof value !== 'boolean') {
                    _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Supplied value for single component uniform ${name} is not a number: ${value}`)();
                    // eslint-disable-next-line no-continue
                    continue;
                }
                // single value -> just set it
                typedArray[offset] = Number(value);
            }
            else {
                const numericArray = (0,_utils_is_array_js__WEBPACK_IMPORTED_MODULE_3__.isNumberArray)(value);
                if (!numericArray) {
                    _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Supplied value for multi component / array uniform ${name} is not a numeric array: ${value}`)();
                    // eslint-disable-next-line no-continue
                    continue;
                }
                // vector/matrix -> copy the supplied (typed) array, starting from offset
                // TODO: we should limit or check size in case the supplied data overflows
                typedArray.set(numericArray, offset);
            }
        }
        return new Uint8Array(arrayBuffer);
    }
    /** Does this layout have a field with specified name */
    has(name) {
        return Boolean(this.layout[name]);
    }
    /** Get offset and size for a field with specified name */
    get(name) {
        const layout = this.layout[name];
        return layout;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-store.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-store.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UniformStore: () => (/* binding */ UniformStore)
/* harmony export */ });
/* harmony import */ var _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../adapter/resources/buffer.js */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _uniform_block_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uniform-block.js */ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-block.js");
/* harmony import */ var _uniform_buffer_layout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uniform-buffer-layout.js */ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-buffer-layout.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * A uniform store holds a uniform values for one or more uniform blocks,
 * - It can generate binary data for any uniform buffer
 * - It can manage a uniform buffer for each block
 * - It can update managed uniform buffers with a single call
 * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.
 */
class UniformStore {
    /** Stores the uniform values for each uniform block */
    uniformBlocks = new Map();
    /** Can generate data for a uniform buffer for each block from data */
    uniformBufferLayouts = new Map();
    /** Actual buffer for the blocks */
    uniformBuffers = new Map();
    /**
     * Create a new UniformStore instance
     * @param blocks
     */
    constructor(blocks) {
        for (const [bufferName, block] of Object.entries(blocks)) {
            const uniformBufferName = bufferName;
            // Create a layout object to help us generate correctly formatted binary uniform buffers
            const uniformBufferLayout = new _uniform_buffer_layout_js__WEBPACK_IMPORTED_MODULE_0__.UniformBufferLayout(block.uniformTypes || {});
            this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);
            // Create a Uniform block to store the uniforms for each buffer.
            const uniformBlock = new _uniform_block_js__WEBPACK_IMPORTED_MODULE_1__.UniformBlock({ name: bufferName });
            uniformBlock.setUniforms(block.defaultUniforms || {});
            this.uniformBlocks.set(uniformBufferName, uniformBlock);
        }
    }
    /** Destroy any managed uniform buffers */
    destroy() {
        for (const uniformBuffer of this.uniformBuffers.values()) {
            uniformBuffer.destroy();
        }
    }
    /**
     * Set uniforms
     * Makes all properties partial
     */
    setUniforms(uniforms) {
        for (const [blockName, uniformValues] of Object.entries(uniforms)) {
            this.uniformBlocks.get(blockName).setUniforms(uniformValues);
            // We leverage logging in updateUniformBuffers(), even though slightly less efficient
            // this.updateUniformBuffer(blockName);
        }
        this.updateUniformBuffers();
    }
    /** Get the required minimum length of the uniform buffer */
    getUniformBufferByteLength(uniformBufferName) {
        return this.uniformBufferLayouts.get(uniformBufferName).byteLength;
    }
    /** Get formatted binary memory that can be uploaded to a buffer */
    getUniformBufferData(uniformBufferName) {
        const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();
        return this.uniformBufferLayouts.get(uniformBufferName).getData(uniformValues);
    }
    /**
     * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)
     * The new buffer is initialized with current / supplied values
     */
    createUniformBuffer(device, uniformBufferName, uniforms) {
        if (uniforms) {
            this.setUniforms(uniforms);
        }
        const byteLength = this.getUniformBufferByteLength(uniformBufferName);
        const uniformBuffer = device.createBuffer({
            usage: _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.UNIFORM | _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.COPY_DST,
            byteLength
        });
        // Note that this clears the needs redraw flag
        const uniformBufferData = this.getUniformBufferData(uniformBufferName);
        uniformBuffer.write(uniformBufferData);
        return uniformBuffer;
    }
    /** Get the managed uniform buffer. "managed" resources are destroyed when the uniformStore is destroyed. */
    getManagedUniformBuffer(device, uniformBufferName) {
        if (!this.uniformBuffers.get(uniformBufferName)) {
            const byteLength = this.getUniformBufferByteLength(uniformBufferName);
            const uniformBuffer = device.createBuffer({
                usage: _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.UNIFORM | _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.COPY_DST,
                byteLength
            });
            this.uniformBuffers.set(uniformBufferName, uniformBuffer);
        }
        // this.updateUniformBuffers();
        return this.uniformBuffers.get(uniformBufferName);
    }
    /** Updates all uniform buffers where values have changed */
    updateUniformBuffers() {
        let reason = false;
        for (const uniformBufferName of this.uniformBlocks.keys()) {
            const bufferReason = this.updateUniformBuffer(uniformBufferName);
            reason ||= bufferReason;
        }
        if (reason) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_3__.log.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();
        }
        return reason;
    }
    /** Update one uniform buffer. Only updates if values have changed */
    updateUniformBuffer(uniformBufferName) {
        const uniformBlock = this.uniformBlocks.get(uniformBufferName);
        const uniformBuffer = this.uniformBuffers.get(uniformBufferName);
        let reason = false;
        if (uniformBuffer && uniformBlock.needsRedraw) {
            reason ||= uniformBlock.needsRedraw;
            // This clears the needs redraw flag
            const uniformBufferData = this.getUniformBufferData(uniformBufferName);
            const uniformBuffer = this.uniformBuffers.get(uniformBufferName);
            uniformBuffer.write(uniformBufferData);
            // logging - TODO - don't query the values unnecessarily
            const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();
            _utils_log_js__WEBPACK_IMPORTED_MODULE_3__.log.log(4, `Writing to uniform buffer ${String(uniformBufferName)}`, uniformBufferData, uniformValues)();
        }
        return reason;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isUniformValue: () => (/* binding */ isUniformValue),
/* harmony export */   splitUniformsAndBindings: () => (/* binding */ splitUniformsAndBindings)
/* harmony export */ });
/* harmony import */ var _utils_is_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/is-array.js */ "./node_modules/@luma.gl/core/dist/utils/is-array.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

function isUniformValue(value) {
    return (0,_utils_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(value) !== null || typeof value === 'number' || typeof value === 'boolean';
}
function splitUniformsAndBindings(uniforms) {
    const result = { bindings: {}, uniforms: {} };
    Object.keys(uniforms).forEach(name => {
        const uniform = uniforms[name];
        if (isUniformValue(uniform)) {
            result.uniforms[name] = uniform;
        }
        else {
            result.bindings[name] = uniform;
        }
    });
    return result;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/array-equal.js":
/*!**************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/array-equal.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayCopy: () => (/* binding */ arrayCopy),
/* harmony export */   arrayEqual: () => (/* binding */ arrayEqual)
/* harmony export */ });
/* harmony import */ var _is_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-array.js */ "./node_modules/@luma.gl/core/dist/utils/is-array.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Test if two arrays are deep equal, with a length limit that defaults to 16 */
function arrayEqual(a, b, limit = 16) {
    if (a !== b) {
        return false;
    }
    const arrayA = (0,_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(a);
    if (!arrayA) {
        return false;
    }
    const arrayB = (0,_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(b);
    if (arrayB && arrayA.length === arrayB.length) {
        for (let i = 0; i < arrayA.length; ++i) {
            if (arrayB[i] !== arrayA[i]) {
                return false;
            }
        }
    }
    return true;
}
/** Copy a value */
function arrayCopy(a) {
    const numberArray = (0,_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(a);
    if (numberArray) {
        return numberArray.slice();
    }
    return a;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/array-utils-flat.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/array-utils-flat.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fillArray: () => (/* binding */ fillArray),
/* harmony export */   getScratchArray: () => (/* binding */ getScratchArray),
/* harmony export */   getScratchArrayBuffer: () => (/* binding */ getScratchArrayBuffer)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
let arrayBuffer;
function getScratchArrayBuffer(byteLength) {
    if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {
        arrayBuffer = new ArrayBuffer(byteLength);
    }
    return arrayBuffer;
}
function getScratchArray(Type, length) {
    const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);
    return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)
}
// Uses copyWithin to significantly speed up typed array value filling
function fillArray(options) {
    const { target, source, start = 0, count = 1 } = options;
    const length = source.length;
    const total = count * length;
    let copied = 0;
    for (let i = start; copied < length; copied++) {
        target[i++] = source[copied];
    }
    while (copied < total) {
        // If we have copied less than half, copy everything we got
        // else copy remaining in one operation
        if (copied < total - copied) {
            target.copyWithin(start + copied, start, start + copied);
            copied *= 2;
        }
        else {
            target.copyWithin(start + copied, start, start + total - copied);
            copied = total;
        }
    }
    return options.target;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/assert.js":
/*!*********************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/assert.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Recommendation is to ignore message but current test suite checks agains the
// message so keep it for now.
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'luma.gl: assertion failed.');
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/cast.js":
/*!*******************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/cast.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cast: () => (/* binding */ cast)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Helper for type downcasts, e.g. Buffer -> WebGPUBuffer */
function cast(value) {
    return value;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/check-props.js":
/*!**************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/check-props.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkProps: () => (/* binding */ checkProps)
/* harmony export */ });
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ "./node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

function checkProps(className, props, propChecks) {
    const { removedProps = {}, deprecatedProps = {}, replacedProps = {} } = propChecks;
    // removedProps: Removed props no longer supported
    // print error and link to upgrade guide
    for (const propName in removedProps) {
        if (propName in props) {
            const replacementProp = removedProps[propName];
            const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';
            _log_js__WEBPACK_IMPORTED_MODULE_0__.log.removed(`${className}.${propName}`, replacement)();
        }
    }
    // deprecatedProps: Deprecated props that can not be autosubstituted
    // print warning and rely on caller to substitute
    for (const propName in deprecatedProps) {
        if (propName in props) {
            const replacementProp = deprecatedProps[propName];
            _log_js__WEBPACK_IMPORTED_MODULE_0__.log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();
        }
    }
    // replacedProps: Deprecated props that can be autosubstituted
    // print warning and return updated props object
    let newProps = null;
    for (const [propName, replacementProp] of Object.entries(replacedProps)) {
        if (propName in props) {
            _log_js__WEBPACK_IMPORTED_MODULE_0__.log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();
            newProps = newProps || Object.assign({}, props);
            newProps[replacementProp] = props[propName];
            delete newProps[propName];
        }
    }
    return newProps || props;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/deep-equal.js":
/*!*************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/deep-equal.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepEqual: () => (/* binding */ deepEqual)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Fast partial deep equal for prop.
 *
 * @param a Prop
 * @param b Prop to compare against `a`
 * @param depth Depth to which to recurse in nested Objects/Arrays. Use 0 (default) for shallow comparison, -1 for infinite depth
 */
/* eslint-disable complexity */
function deepEqual(a, b, depth) {
    if (a === b) {
        return true;
    }
    if (!depth || !a || !b) {
        return false;
    }
    if (Array.isArray(a)) {
        if (!Array.isArray(b) || a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!deepEqual(a[i], b[i], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    if (Array.isArray(b)) {
        return false;
    }
    if (typeof a === 'object' && typeof b === 'object') {
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
            return false;
        }
        for (const key of aKeys) {
            if (!b.hasOwnProperty(key)) {
                return false;
            }
            if (!deepEqual(a[key], b[key], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/is-array.js":
/*!***********************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/is-array.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isNumberArray: () => (/* binding */ isNumberArray),
/* harmony export */   isTypedArray: () => (/* binding */ isTypedArray)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Check is an array is a typed array
 * @param value value to be tested
 * @returns input as TypedArray, or null
 * @todo this should be provided by @math.gl/types
 */
function isTypedArray(value) {
    return ArrayBuffer.isView(value) && !(value instanceof DataView) ? value : null;
}
/**
 * Check is an array is a numeric array (typed array or array of numbers)
 * @param value value to be tested
 * @returns input as NumberArray, or null
 * @todo this should be provided by @math.gl/types
 */
function isNumberArray(value) {
    if (Array.isArray(value)) {
        return value.length === 0 || typeof value[0] === 'number' ? value : null;
    }
    return isTypedArray(value);
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/load-file.js":
/*!************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/load-file.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadFile: () => (/* binding */ loadFile),
/* harmony export */   loadImage: () => (/* binding */ loadImage),
/* harmony export */   loadImageBitmap: () => (/* binding */ loadImageBitmap),
/* harmony export */   loadScript: () => (/* binding */ loadScript),
/* harmony export */   setPathPrefix: () => (/* binding */ setPathPrefix)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
let pathPrefix = '';
/**
 * Set a relative path prefix
 */
function setPathPrefix(prefix) {
    pathPrefix = prefix;
}
/**
 * Reads raw file data. Respects setPathPrefix.
 */
async function loadFile(url, options) {
    url = url.startsWith('http') ? url : pathPrefix + url;
    const dataType = options?.dataType || 'text';
    const response = await fetch(url, options);
    return await response[dataType]();
}
/**
 * Loads ImageBitmap asynchronously. Respects setPathPrefix.
 * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'
 * @returns a promise tracking the load
 */
async function loadImageBitmap(url, opts) {
    const image = new Image();
    image.crossOrigin = opts?.crossOrigin || 'anonymous';
    image.src = url.startsWith('http') ? url : pathPrefix + url;
    await image.decode();
    return await createImageBitmap(image);
}
/**
 * Loads image asynchronously. Respects setPathPrefix.
 * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'
 * @returns a promise tracking the load
 * @deprecated Use `loadImageBitmap()` unless you are supporting old versions of Safari.
 */
async function loadImage(url, opts) {
    return await new Promise((resolve, reject) => {
        try {
            const image = new Image();
            image.onload = () => resolve(image);
            image.onerror = () => reject(new Error(`Could not load image ${url}.`));
            image.crossOrigin = opts?.crossOrigin || 'anonymous';
            image.src = url.startsWith('http') ? url : pathPrefix + url;
        }
        catch (error) {
            reject(error);
        }
    });
}
/**
 * Load a script (identified by an url). When the url returns, the
 * content of this file is added into a new script element, attached to the DOM (body element)
 * @param scriptUrl defines the url of the script to laod
 * @param scriptId defines the id of the script element
 */
async function loadScript(scriptUrl, scriptId) {
    const head = document.getElementsByTagName('head')[0];
    if (!head) {
        throw new Error('loadScript');
    }
    const script = document.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', scriptUrl);
    if (scriptId) {
        script.id = scriptId;
    }
    return new Promise((resolve, reject) => {
        script.onload = resolve;
        script.onerror = error => reject(new Error(`Unable to load script '${scriptUrl}': ${error}`));
        head.appendChild(script);
    });
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/log.js":
/*!******************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/log.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   log: () => (/* binding */ log)
/* harmony export */ });
/* harmony import */ var _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/log */ "./node_modules/@probe.gl/log/dist/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Global log instance */
const log = new _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__.Log({ id: 'luma.gl' });


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/request-animation-frame.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/request-animation-frame.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cancelAnimationFrame: () => (/* binding */ cancelAnimationFrame),
/* harmony export */   requestAnimationFrame: () => (/* binding */ requestAnimationFrame)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame
/* global window, setTimeout, clearTimeout */
// / <reference types="@types/node" />
function requestAnimationFrame(callback) {
    return typeof window !== 'undefined' && window.requestAnimationFrame
        ? window.requestAnimationFrame(callback)
        : setTimeout(callback, 1000 / 60);
}
function cancelAnimationFrame(timerId) {
    return typeof window !== 'undefined' && window.cancelAnimationFrame
        ? window.cancelAnimationFrame(timerId)
        : clearTimeout(timerId);
}


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/stats-manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/stats-manager.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StatsManager: () => (/* binding */ StatsManager),
/* harmony export */   lumaStats: () => (/* binding */ lumaStats)
/* harmony export */ });
/* harmony import */ var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/stats */ "./node_modules/@probe.gl/stats/dist/index.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Helper class managing a collection of probe.gl stats objects
 */
class StatsManager {
    stats = new Map();
    getStats(name) {
        return this.get(name);
    }
    get(name) {
        if (!this.stats.has(name)) {
            this.stats.set(name, new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__.Stats({ id: name }));
        }
        return this.stats.get(name);
    }
}
/** Global stats for all luma.gl devices */
const lumaStats = new StatsManager();


/***/ }),

/***/ "./node_modules/@luma.gl/core/dist/utils/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@luma.gl/core/dist/utils/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isObjectEmpty: () => (/* binding */ isObjectEmpty),
/* harmony export */   uid: () => (/* binding */ uid)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const uidCounters = {};
/**
 * Returns a UID.
 * @param id= - Identifier base name
 * @return uid
 **/
function uid(id = 'id') {
    uidCounters[id] = uidCounters[id] || 1;
    const count = uidCounters[id]++;
    return `${id}-${count}`;
}
/** Returns true if given object is empty, false otherwise. */
function isObjectEmpty(obj) {
    let isEmpty = true;
    // @ts-ignore key is unused
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    for (const key in obj) {
        isEmpty = false;
        break;
    }
    return isEmpty;
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnimationLoop: () => (/* binding */ AnimationLoop)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/lib/luma.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/request-animation-frame.js");
/* harmony import */ var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/stats */ "./node_modules/@probe.gl/stats/dist/index.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



let statIdCounter = 0;
const DEFAULT_ANIMATION_LOOP_PROPS = {
    device: null,
    onAddHTML: () => '',
    onInitialize: async () => {
        return null;
    },
    onRender: () => { },
    onFinalize: () => { },
    onError: error => console.error(error), // eslint-disable-line no-console
    stats: _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.luma.stats.get(`animation-loop-${statIdCounter++}`),
    // view parameters
    useDevicePixels: true,
    autoResizeViewport: false,
    autoResizeDrawingBuffer: false
};
/** Convenient animation loop */
class AnimationLoop {
    device = null;
    canvas = null;
    props;
    animationProps = null;
    timeline = null;
    stats;
    cpuTime;
    gpuTime;
    frameRate;
    display;
    needsRedraw = 'initialized';
    _initialized = false;
    _running = false;
    _animationFrameId = null;
    _nextFramePromise = null;
    _resolveNextFrame = null;
    _cpuStartTime = 0;
    // _gpuTimeQuery: Query | null = null;
    /*
     * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
     */
    constructor(props) {
        this.props = { ...DEFAULT_ANIMATION_LOOP_PROPS, ...props };
        props = this.props;
        if (!props.device) {
            throw new Error('No device provided');
        }
        const { useDevicePixels = true } = this.props;
        // state
        this.stats = props.stats || new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__.Stats({ id: 'animation-loop-stats' });
        this.cpuTime = this.stats.get('CPU Time');
        this.gpuTime = this.stats.get('GPU Time');
        this.frameRate = this.stats.get('Frame Rate');
        this.setProps({
            autoResizeViewport: props.autoResizeViewport,
            autoResizeDrawingBuffer: props.autoResizeDrawingBuffer,
            useDevicePixels
        });
        // Bind methods
        this.start = this.start.bind(this);
        this.stop = this.stop.bind(this);
        this._onMousemove = this._onMousemove.bind(this);
        this._onMouseleave = this._onMouseleave.bind(this);
    }
    destroy() {
        this.stop();
        this._setDisplay(null);
    }
    /** @deprecated Use .destroy() */
    delete() {
        this.destroy();
    }
    /** Flags this animation loop as needing redraw */
    setNeedsRedraw(reason) {
        this.needsRedraw = this.needsRedraw || reason;
        return this;
    }
    /** TODO - move these props to CanvasContext? */
    setProps(props) {
        if ('autoResizeViewport' in props) {
            this.props.autoResizeViewport = props.autoResizeViewport || false;
        }
        if ('autoResizeDrawingBuffer' in props) {
            this.props.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer || false;
        }
        if ('useDevicePixels' in props) {
            this.props.useDevicePixels = props.useDevicePixels || false;
        }
        return this;
    }
    /** Starts a render loop if not already running */
    async start() {
        if (this._running) {
            return this;
        }
        this._running = true;
        try {
            let appContext;
            if (!this._initialized) {
                this._initialized = true;
                // Create the WebGL context
                await this._initDevice();
                this._initialize();
                // Note: onIntialize can return a promise (e.g. in case app needs to load resources)
                await this.props.onInitialize(this._getAnimationProps());
            }
            // check that we haven't been stopped
            if (!this._running) {
                return null;
            }
            // Start the loop
            if (appContext !== false) {
                // cancel any pending renders to ensure only one loop can ever run
                this._cancelAnimationFrame();
                this._requestAnimationFrame();
            }
            return this;
        }
        catch (err) {
            const error = err instanceof Error ? err : new Error('Unknown error');
            this.props.onError(error);
            // this._running = false; // TODO
            throw error;
        }
    }
    /** Stops a render loop if already running, finalizing */
    stop() {
        // console.debug(`Stopping ${this.constructor.name}`);
        if (this._running) {
            // call callback
            // If stop is called immediately, we can end up in a state where props haven't been initialized...
            if (this.animationProps) {
                this.props.onFinalize(this.animationProps);
            }
            this._cancelAnimationFrame();
            this._nextFramePromise = null;
            this._resolveNextFrame = null;
            this._running = false;
        }
        return this;
    }
    /** Explicitly draw a frame */
    redraw() {
        if (this.device?.isLost) {
            return this;
        }
        this._beginFrameTimers();
        this._setupFrame();
        this._updateAnimationProps();
        this._renderFrame(this._getAnimationProps());
        // clear needsRedraw flag
        this._clearNeedsRedraw();
        if (this._resolveNextFrame) {
            this._resolveNextFrame(this);
            this._nextFramePromise = null;
            this._resolveNextFrame = null;
        }
        this._endFrameTimers();
        return this;
    }
    /** Add a timeline, it will be automatically updated by the animation loop. */
    attachTimeline(timeline) {
        this.timeline = timeline;
        return this.timeline;
    }
    /** Remove a timeline */
    detachTimeline() {
        this.timeline = null;
    }
    /** Wait until a render completes */
    waitForRender() {
        this.setNeedsRedraw('waitForRender');
        if (!this._nextFramePromise) {
            this._nextFramePromise = new Promise(resolve => {
                this._resolveNextFrame = resolve;
            });
        }
        return this._nextFramePromise;
    }
    /** TODO - should use device.deviceContext */
    async toDataURL() {
        this.setNeedsRedraw('toDataURL');
        await this.waitForRender();
        if (this.canvas instanceof HTMLCanvasElement) {
            return this.canvas.toDataURL();
        }
        throw new Error('OffscreenCanvas');
    }
    // PRIVATE METHODS
    _initialize() {
        this._startEventHandling();
        // Initialize the callback data
        this._initializeAnimationProps();
        this._updateAnimationProps();
        // Default viewport setup, in case onInitialize wants to render
        this._resizeCanvasDrawingBuffer();
        this._resizeViewport();
        // this._gpuTimeQuery = Query.isSupported(this.gl, ['timers']) ? new Query(this.gl) : null;
    }
    _setDisplay(display) {
        if (this.display) {
            this.display.destroy();
            this.display.animationLoop = null;
        }
        // store animation loop on the display
        if (display) {
            display.animationLoop = this;
        }
        this.display = display;
    }
    _requestAnimationFrame() {
        if (!this._running) {
            return;
        }
        // VR display has a separate animation frame to sync with headset
        // TODO WebVR API discontinued, replaced by WebXR: https://immersive-web.github.io/webxr/
        // See https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestAnimationFrame
        // if (this.display && this.display.requestAnimationFrame) {
        //   this._animationFrameId = this.display.requestAnimationFrame(this._animationFrame.bind(this));
        // }
        this._animationFrameId = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.requestAnimationFrame)(this._animationFrame.bind(this));
    }
    _cancelAnimationFrame() {
        if (this._animationFrameId === null) {
            return;
        }
        // VR display has a separate animation frame to sync with headset
        // TODO WebVR API discontinued, replaced by WebXR: https://immersive-web.github.io/webxr/
        // See https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestAnimationFrame
        // if (this.display && this.display.cancelAnimationFrame) {
        //   this.display.cancelAnimationFrame(this._animationFrameId);
        // }
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.cancelAnimationFrame)(this._animationFrameId);
        this._animationFrameId = null;
    }
    _animationFrame() {
        if (!this._running) {
            return;
        }
        this.redraw();
        this._requestAnimationFrame();
    }
    // Called on each frame, can be overridden to call onRender multiple times
    // to support e.g. stereoscopic rendering
    _renderFrame(animationProps) {
        // Allow e.g. VR display to render multiple frames.
        if (this.display) {
            this.display._renderFrame(animationProps);
            return;
        }
        // call callback
        this.props.onRender(this._getAnimationProps());
        // end callback
        // Submit commands (necessary on WebGPU)
        this.device.submit();
    }
    _clearNeedsRedraw() {
        this.needsRedraw = false;
    }
    _setupFrame() {
        this._resizeCanvasDrawingBuffer();
        this._resizeViewport();
    }
    // Initialize the  object that will be passed to app callbacks
    _initializeAnimationProps() {
        if (!this.device) {
            throw new Error('loop');
        }
        this.animationProps = {
            animationLoop: this,
            device: this.device,
            canvas: this.device?.canvasContext?.canvas,
            timeline: this.timeline,
            // Initial values
            useDevicePixels: this.props.useDevicePixels,
            needsRedraw: false,
            // Placeholders
            width: 1,
            height: 1,
            aspect: 1,
            // Animation props
            time: 0,
            startTime: Date.now(),
            engineTime: 0,
            tick: 0,
            tock: 0,
            // Experimental
            _mousePosition: null // Event props
        };
    }
    _getAnimationProps() {
        if (!this.animationProps) {
            throw new Error('animationProps');
        }
        return this.animationProps;
    }
    // Update the context object that will be passed to app callbacks
    _updateAnimationProps() {
        if (!this.animationProps) {
            return;
        }
        // Can this be replaced with canvas context?
        const { width, height, aspect } = this._getSizeAndAspect();
        if (width !== this.animationProps.width || height !== this.animationProps.height) {
            this.setNeedsRedraw('drawing buffer resized');
        }
        if (aspect !== this.animationProps.aspect) {
            this.setNeedsRedraw('drawing buffer aspect changed');
        }
        this.animationProps.width = width;
        this.animationProps.height = height;
        this.animationProps.aspect = aspect;
        this.animationProps.needsRedraw = this.needsRedraw;
        // Update time properties
        this.animationProps.engineTime = Date.now() - this.animationProps.startTime;
        if (this.timeline) {
            this.timeline.update(this.animationProps.engineTime);
        }
        this.animationProps.tick = Math.floor((this.animationProps.time / 1000) * 60);
        this.animationProps.tock++;
        // For back compatibility
        this.animationProps.time = this.timeline
            ? this.timeline.getTime()
            : this.animationProps.engineTime;
    }
    /** Wait for supplied device */
    async _initDevice() {
        this.device = await this.props.device;
        if (!this.device) {
            throw new Error('No device provided');
        }
        this.canvas = this.device.canvasContext?.canvas || null;
        // this._createInfoDiv();
    }
    _createInfoDiv() {
        if (this.canvas && this.props.onAddHTML) {
            const wrapperDiv = document.createElement('div');
            document.body.appendChild(wrapperDiv);
            wrapperDiv.style.position = 'relative';
            const div = document.createElement('div');
            div.style.position = 'absolute';
            div.style.left = '10px';
            div.style.bottom = '10px';
            div.style.width = '300px';
            div.style.background = 'white';
            if (this.canvas instanceof HTMLCanvasElement) {
                wrapperDiv.appendChild(this.canvas);
            }
            wrapperDiv.appendChild(div);
            const html = this.props.onAddHTML(div);
            if (html) {
                div.innerHTML = html;
            }
        }
    }
    _getSizeAndAspect() {
        if (!this.device) {
            return { width: 1, height: 1, aspect: 1 };
        }
        // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
        const [width, height] = this.device?.canvasContext?.getPixelSize() || [1, 1];
        // https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html
        let aspect = 1;
        const canvas = this.device?.canvasContext?.canvas;
        // @ts-expect-error
        if (canvas && canvas.clientHeight) {
            // @ts-expect-error
            aspect = canvas.clientWidth / canvas.clientHeight;
        }
        else if (width > 0 && height > 0) {
            aspect = width / height;
        }
        return { width, height, aspect };
    }
    /** Default viewport setup */
    _resizeViewport() {
        // TODO can we use canvas context to code this in a portable way?
        // @ts-expect-error Expose on canvasContext
        if (this.props.autoResizeViewport && this.device.gl) {
            // @ts-expect-error Expose canvasContext
            this.device.gl.viewport(0, 0, 
            // @ts-expect-error Expose canvasContext
            this.device.gl.drawingBufferWidth, 
            // @ts-expect-error Expose canvasContext
            this.device.gl.drawingBufferHeight);
        }
    }
    /**
     * Resize the render buffer of the canvas to match canvas client size
     * Optionally multiplying with devicePixel ratio
     */
    _resizeCanvasDrawingBuffer() {
        if (this.props.autoResizeDrawingBuffer) {
            this.device?.canvasContext?.resize({ useDevicePixels: this.props.useDevicePixels });
        }
    }
    _beginFrameTimers() {
        this.frameRate.timeEnd();
        this.frameRate.timeStart();
        // Check if timer for last frame has completed.
        // GPU timer results are never available in the same
        // frame they are captured.
        // if (
        //   this._gpuTimeQuery &&
        //   this._gpuTimeQuery.isResultAvailable() &&
        //   !this._gpuTimeQuery.isTimerDisjoint()
        // ) {
        //   this.stats.get('GPU Time').addTime(this._gpuTimeQuery.getTimerMilliseconds());
        // }
        // if (this._gpuTimeQuery) {
        //   // GPU time query start
        //   this._gpuTimeQuery.beginTimeElapsedQuery();
        // }
        this.cpuTime.timeStart();
    }
    _endFrameTimers() {
        this.cpuTime.timeEnd();
        // if (this._gpuTimeQuery) {
        //   // GPU time query end. Results will be available on next frame.
        //   this._gpuTimeQuery.end();
        // }
    }
    // Event handling
    _startEventHandling() {
        if (this.canvas) {
            this.canvas.addEventListener('mousemove', this._onMousemove.bind(this));
            this.canvas.addEventListener('mouseleave', this._onMouseleave.bind(this));
        }
    }
    _onMousemove(event) {
        if (event instanceof MouseEvent) {
            this._getAnimationProps()._mousePosition = [event.offsetX, event.offsetY];
        }
    }
    _onMouseleave(event) {
        this._getAnimationProps()._mousePosition = null;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/animation/timeline.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/animation/timeline.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Timeline: () => (/* binding */ Timeline)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
let channelHandles = 1;
let animationHandles = 1;
class Timeline {
    time = 0;
    channels = new Map();
    animations = new Map();
    playing = false;
    lastEngineTime = -1;
    constructor() { }
    addChannel(props) {
        const { delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1 } = props;
        const channelId = channelHandles++;
        const channel = {
            time: 0,
            delay,
            duration,
            rate,
            repeat
        };
        this._setChannelTime(channel, this.time);
        this.channels.set(channelId, channel);
        return channelId;
    }
    removeChannel(channelId) {
        this.channels.delete(channelId);
        for (const [animationHandle, animation] of this.animations) {
            if (animation.channel === channelId) {
                this.detachAnimation(animationHandle);
            }
        }
    }
    isFinished(channelId) {
        const channel = this.channels.get(channelId);
        if (channel === undefined) {
            return false;
        }
        return this.time >= channel.delay + channel.duration * channel.repeat;
    }
    getTime(channelId) {
        if (channelId === undefined) {
            return this.time;
        }
        const channel = this.channels.get(channelId);
        if (channel === undefined) {
            return -1;
        }
        return channel.time;
    }
    setTime(time) {
        this.time = Math.max(0, time);
        const channels = this.channels.values();
        for (const channel of channels) {
            this._setChannelTime(channel, this.time);
        }
        const animations = this.animations.values();
        for (const animationData of animations) {
            const { animation, channel } = animationData;
            animation.setTime(this.getTime(channel));
        }
    }
    play() {
        this.playing = true;
    }
    pause() {
        this.playing = false;
        this.lastEngineTime = -1;
    }
    reset() {
        this.setTime(0);
    }
    attachAnimation(animation, channelHandle) {
        const animationHandle = animationHandles++;
        this.animations.set(animationHandle, {
            animation,
            channel: channelHandle
        });
        animation.setTime(this.getTime(channelHandle));
        return animationHandle;
    }
    detachAnimation(channelId) {
        this.animations.delete(channelId);
    }
    update(engineTime) {
        if (this.playing) {
            if (this.lastEngineTime === -1) {
                this.lastEngineTime = engineTime;
            }
            this.setTime(this.time + (engineTime - this.lastEngineTime));
            this.lastEngineTime = engineTime;
        }
    }
    _setChannelTime(channel, time) {
        const offsetTime = time - channel.delay;
        const totalDuration = channel.duration * channel.repeat;
        // Note(Tarek): Don't loop on final repeat.
        if (offsetTime >= totalDuration) {
            channel.time = channel.duration * channel.rate;
        }
        else {
            channel.time = Math.max(0, offsetTime) % channel.duration;
            channel.time *= channel.rate;
        }
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debugFramebuffer: () => (/* binding */ debugFramebuffer)
/* harmony export */ });
// import {copyTextureToImage} from '../debug/copy-texture-to-image';
/** Only works with 1st device? */
let canvas = null;
let ctx = null;
// let targetImage: HTMLImageElement | null = null;
/** Debug utility to draw FBO contents onto screen */
// eslint-disable-next-line
function debugFramebuffer(fbo, { id, minimap, opaque, top = '0', left = '0', rgbaScale = 1 }) {
    if (!canvas) {
        canvas = document.createElement('canvas');
        canvas.id = id;
        canvas.title = id;
        canvas.style.zIndex = '100';
        canvas.style.position = 'absolute';
        canvas.style.top = top; // ⚠️
        canvas.style.left = left; // ⚠️
        canvas.style.border = 'blue 1px solid';
        canvas.style.transform = 'scaleY(-1)';
        document.body.appendChild(canvas);
        ctx = canvas.getContext('2d');
        // targetImage = new Image();
    }
    // const canvasHeight = (minimap ? 2 : 1) * fbo.height;
    if (canvas.width !== fbo.width || canvas.height !== fbo.height) {
        canvas.width = fbo.width / 2;
        canvas.height = fbo.height / 2;
        canvas.style.width = '400px';
        canvas.style.height = '400px';
    }
    // const image = copyTextureToImage(fbo, {targetMaxHeight: 100, targetImage});
    // ctx.drawImage(image, 0, 0);
    const color = fbo.device.readPixelsToArrayWebGL(fbo);
    const imageData = ctx.createImageData(fbo.width, fbo.height);
    // Full map
    const offset = 0;
    // if (color.some((v) => v > 0)) {
    //   console.error('THERE IS NON-ZERO DATA IN THE FBO!');
    // }
    for (let i = 0; i < color.length; i += 4) {
        imageData.data[offset + i + 0] = color[i + 0] * rgbaScale;
        imageData.data[offset + i + 1] = color[i + 1] * rgbaScale;
        imageData.data[offset + i + 2] = color[i + 2] * rgbaScale;
        imageData.data[offset + i + 3] = opaque ? 255 : color[i + 3] * rgbaScale;
    }
    ctx.putImageData(imageData, 0, 0);
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js":
/*!************************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDebugTableForShaderLayout: () => (/* binding */ getDebugTableForShaderLayout)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Extracts a table suitable for `console.table()` from a shader layout to assist in debugging.
 * @param layout shader layout
 * @param name app should provide the most meaningful name, usually the model or pipeline name / id.
 * @returns
 */
function getDebugTableForShaderLayout(layout, name) {
    const table = {};
    const header = 'Values'; // '`Shader Layout for ${name}`;
    if (layout.attributes.length === 0 && !layout.varyings?.length) {
        return { 'No attributes or varyings': { [header]: 'N/A' } };
    }
    for (const attributeDeclaration of layout.attributes) {
        if (attributeDeclaration) {
            const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;
            table[`in ${glslDeclaration}`] = { [header]: attributeDeclaration.stepMode || 'vertex' };
        }
    }
    for (const varyingDeclaration of layout.varyings || []) {
        const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;
        table[`out ${glslDeclaration}`] = { [header]: JSON.stringify(varyingDeclaration.accessor) };
    }
    return table;
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js":
/*!****************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/geometry/geometry.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Geometry: () => (/* binding */ Geometry)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

class Geometry {
    id;
    /** Determines how vertices are read from the 'vertex' attributes */
    topology;
    vertexCount;
    indices;
    attributes;
    userData = {};
    constructor(props) {
        const { attributes = {}, indices = null, vertexCount = null } = props;
        this.id = props.id || (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.uid)('geometry');
        this.topology = props.topology;
        if (indices) {
            this.indices = ArrayBuffer.isView(indices) ? { value: indices, size: 1 } : indices;
        }
        // @ts-expect-error
        this.attributes = {};
        for (const [attributeName, attributeValue] of Object.entries(attributes)) {
            // Wrap "unwrapped" arrays and try to autodetect their type
            const attribute = ArrayBuffer.isView(attributeValue)
                ? { value: attributeValue }
                : attributeValue;
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(ArrayBuffer.isView(attribute.value), `${this._print(attributeName)}: must be typed array or object with value as typed array`);
            if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {
                attribute.size = 3;
            }
            // Move indices to separate field
            if (attributeName === 'indices') {
                (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(!this.indices);
                this.indices = attribute;
            }
            else {
                this.attributes[attributeName] = attribute;
            }
        }
        if (this.indices && this.indices.isIndexed !== undefined) {
            this.indices = Object.assign({}, this.indices);
            delete this.indices.isIndexed;
        }
        this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);
    }
    getVertexCount() {
        return this.vertexCount;
    }
    /**
     * Return an object with all attributes plus indices added as a field.
     * TODO Geometry types are a mess
     */
    getAttributes() {
        return this.indices ? { indices: this.indices, ...this.attributes } : this.attributes;
    }
    // PRIVATE
    _print(attributeName) {
        return `Geometry ${this.id} attribute ${attributeName}`;
    }
    /**
     * GeometryAttribute
     * value: typed array
     * type: indices, vertices, uvs
     * size: elements per vertex
     * target: WebGL buffer type (string or constant)
     *
     * @param attributes
     * @param indices
     * @returns
     */
    _setAttributes(attributes, indices) {
        return this;
    }
    _calculateVertexCount(attributes, indices) {
        if (indices) {
            return indices.value.length;
        }
        let vertexCount = Infinity;
        for (const attribute of Object.values(attributes)) {
            const { value, size, constant } = attribute;
            if (!constant && value && size >= 1) {
                vertexCount = Math.min(vertexCount, value.length / size);
            }
        }
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(vertexCount));
        return vertexCount;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js":
/*!********************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GPUGeometry: () => (/* binding */ GPUGeometry),
/* harmony export */   getAttributeBuffersFromGeometry: () => (/* binding */ getAttributeBuffersFromGeometry),
/* harmony export */   getIndexBufferFromGeometry: () => (/* binding */ getIndexBufferFromGeometry),
/* harmony export */   makeGPUGeometry: () => (/* binding */ makeGPUGeometry)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js");

class GPUGeometry {
    id;
    userData = {};
    /** Determines how vertices are read from the 'vertex' attributes */
    topology;
    bufferLayout = [];
    vertexCount;
    indices;
    attributes;
    constructor(props) {
        this.id = props.id || (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.uid)('geometry');
        this.topology = props.topology;
        this.indices = props.indices || null;
        this.attributes = props.attributes;
        this.vertexCount = props.vertexCount;
        this.bufferLayout = props.bufferLayout || [];
        if (this.indices) {
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(this.indices.usage === _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.Buffer.INDEX);
        }
    }
    destroy() {
        this.indices?.destroy();
        for (const attribute of Object.values(this.attributes)) {
            attribute.destroy();
        }
    }
    getVertexCount() {
        return this.vertexCount;
    }
    getAttributes() {
        return this.attributes;
    }
    getIndexes() {
        return this.indices;
    }
    _calculateVertexCount(positions) {
        // Assume that positions is a fully packed float32x3 buffer
        const vertexCount = positions.byteLength / 12;
        return vertexCount;
    }
}
function makeGPUGeometry(device, geometry) {
    if (geometry instanceof GPUGeometry) {
        return geometry;
    }
    const indices = getIndexBufferFromGeometry(device, geometry);
    const { attributes, bufferLayout } = getAttributeBuffersFromGeometry(device, geometry);
    return new GPUGeometry({
        topology: geometry.topology || 'triangle-list',
        bufferLayout,
        vertexCount: geometry.vertexCount,
        indices,
        attributes
    });
}
function getIndexBufferFromGeometry(device, geometry) {
    if (!geometry.indices) {
        return undefined;
    }
    const data = geometry.indices.value;
    return device.createBuffer({ usage: _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.Buffer.INDEX, data });
}
function getAttributeBuffersFromGeometry(device, geometry) {
    const bufferLayout = [];
    const attributes = {};
    for (const [attributeName, attribute] of Object.entries(geometry.attributes)) {
        let name = attributeName;
        // TODO Map some GLTF attribute names (is this still needed?)
        switch (attributeName) {
            case 'POSITION':
                name = 'positions';
                break;
            case 'NORMAL':
                name = 'normals';
                break;
            case 'TEXCOORD_0':
                name = 'texCoords';
                break;
            case 'COLOR_0':
                name = 'colors';
                break;
        }
        attributes[name] = device.createBuffer({ data: attribute.value, id: `${attributeName}-buffer` });
        const { value, size, normalized } = attribute;
        bufferLayout.push({ name, format: (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.getVertexFormatFromAttribute)(value, size, normalized) });
    }
    const vertexCount = geometry._calculateVertexCount(geometry.attributes, geometry.indices);
    return { attributes, bufferLayout, vertexCount };
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/lib/pipeline-factory.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/lib/pipeline-factory.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PipelineFactory: () => (/* binding */ PipelineFactory)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Efficiently creates / caches pipelines
 */
class PipelineFactory {
    static defaultProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline.defaultProps };
    device;
    _hashCounter = 0;
    _hashes = {};
    _renderPipelineCache = {};
    _computePipelineCache = {};
    /** Get the singleton default pipeline factory for the specified device */
    static getDefaultPipelineFactory(device) {
        device._lumaData.defaultPipelineFactory =
            device._lumaData.defaultPipelineFactory || new PipelineFactory(device);
        return device._lumaData.defaultPipelineFactory;
    }
    constructor(device) {
        this.device = device;
    }
    /** Return a RenderPipeline matching props. Reuses a similar pipeline if already created. */
    createRenderPipeline(props) {
        const allProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline.defaultProps, ...props };
        const hash = this._hashRenderPipeline(allProps);
        if (!this._renderPipelineCache[hash]) {
            const pipeline = this.device.createRenderPipeline({
                ...allProps,
                id: allProps.id ? `${allProps.id}-cached` : undefined
            });
            pipeline.hash = hash;
            this._renderPipelineCache[hash] = { pipeline, useCount: 0 };
        }
        this._renderPipelineCache[hash].useCount++;
        return this._renderPipelineCache[hash].pipeline;
    }
    createComputePipeline(props) {
        const allProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.ComputePipeline.defaultProps, ...props };
        const hash = this._hashComputePipeline(allProps);
        if (!this._computePipelineCache[hash]) {
            const pipeline = this.device.createComputePipeline({
                ...allProps,
                id: allProps.id ? `${allProps.id}-cached` : undefined
            });
            pipeline.hash = hash;
            this._computePipelineCache[hash] = { pipeline, useCount: 0 };
        }
        this._computePipelineCache[hash].useCount++;
        return this._computePipelineCache[hash].pipeline;
    }
    release(pipeline) {
        const hash = pipeline.hash;
        const cache = pipeline instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.ComputePipeline ? this._computePipelineCache : this._renderPipelineCache;
        cache[hash].useCount--;
        if (cache[hash].useCount === 0) {
            cache[hash].pipeline.destroy();
            delete cache[hash];
        }
    }
    // PRIVATE
    _hashComputePipeline(props) {
        const shaderHash = this._getHash(props.shader.source);
        return `${shaderHash}`;
    }
    /** Calculate a hash based on all the inputs for a render pipeline */
    _hashRenderPipeline(props) {
        const vsHash = this._getHash(props.vs.source);
        const fsHash = props.fs ? this._getHash(props.fs.source) : 0;
        // WebGL specific
        // const {varyings = [], bufferMode = {}} = props;
        // const varyingHashes = varyings.map((v) => this._getHash(v));
        const varyingHash = '-'; // `${varyingHashes.join('/')}B${bufferMode}`
        const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));
        switch (this.device.type) {
            case 'webgl':
                // WebGL is more dynamic
                return `${vsHash}/${fsHash}V${varyingHash}BL${bufferLayoutHash}`;
            default:
                // On WebGPU we need to rebuild the pipeline if topology, parameters or bufferLayout change
                const parameterHash = this._getHash(JSON.stringify(props.parameters));
                // TODO - Can json.stringify() generate different strings for equivalent objects if order of params is different?
                // create a deepHash() to deduplicate?
                return `${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}`;
        }
    }
    _getHash(key) {
        if (this._hashes[key] === undefined) {
            this._hashes[key] = this._hashCounter++;
        }
        return this._hashes[key];
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/lib/shader-factory.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/lib/shader-factory.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ShaderFactory: () => (/* binding */ ShaderFactory)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/shader.js");

/** Manages a cached pool of Shaders for reuse. */
class ShaderFactory {
    static defaultProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Shader.defaultProps };
    device;
    _cache = {};
    /** Returns the default ShaderFactory for the given {@link Device}, creating one if necessary. */
    static getDefaultShaderFactory(device) {
        device._lumaData.defaultShaderFactory ||= new ShaderFactory(device);
        return device._lumaData.defaultShaderFactory;
    }
    /** @internal */
    constructor(device) {
        this.device = device;
    }
    /** Requests a {@link Shader} from the cache, creating a new Shader only if necessary. */
    createShader(props) {
        const key = this._hashShader(props);
        let cacheEntry = this._cache[key];
        if (!cacheEntry) {
            const shader = this.device.createShader({
                ...props,
                id: props.id ? `${props.id}-cached` : undefined
            });
            this._cache[key] = cacheEntry = { shader, useCount: 0 };
        }
        cacheEntry.useCount++;
        return cacheEntry.shader;
    }
    /** Releases a previously-requested {@link Shader}, destroying it if no users remain. */
    release(shader) {
        const key = this._hashShader(shader);
        const cacheEntry = this._cache[key];
        if (cacheEntry) {
            cacheEntry.useCount--;
            if (cacheEntry.useCount === 0) {
                delete this._cache[key];
                cacheEntry.shader.destroy();
            }
        }
    }
    // PRIVATE
    _hashShader(value) {
        return `${value.stage}:${value.source}`;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/model/model.js":
/*!**********************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/model/model.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Model: () => (/* binding */ Model),
/* harmony export */   getPlatformInfo: () => (/* binding */ getPlatformInfo)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/sampler.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform-store.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/deep-equal.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js");
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js");
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js");
/* harmony import */ var _geometry_gpu_geometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../geometry/gpu-geometry.js */ "./node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js");
/* harmony import */ var _shader_inputs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shader-inputs.js */ "./node_modules/@luma.gl/engine/dist/shader-inputs.js");
/* harmony import */ var _lib_pipeline_factory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/pipeline-factory.js */ "./node_modules/@luma.gl/engine/dist/lib/pipeline-factory.js");
/* harmony import */ var _lib_shader_factory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/shader-factory.js */ "./node_modules/@luma.gl/engine/dist/lib/shader-factory.js");
/* harmony import */ var _debug_debug_shader_layout_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../debug/debug-shader-layout.js */ "./node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js");
/* harmony import */ var _debug_debug_framebuffer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../debug/debug-framebuffer.js */ "./node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors











const LOG_DRAW_PRIORITY = 2;
const LOG_DRAW_TIMEOUT = 10000;
/**
 * v9 Model API
 * A model
 * - automatically reuses pipelines (programs) when possible
 * - automatically rebuilds pipelines if necessary to accommodate changed settings
 * shadertools integration
 * - accepts modules and performs shader transpilation
 */
class Model {
    static defaultProps = {
        ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline.defaultProps,
        source: null,
        vs: null,
        fs: null,
        id: 'unnamed',
        handle: undefined,
        userData: {},
        defines: {},
        modules: [],
        moduleSettings: undefined,
        geometry: null,
        indexBuffer: null,
        attributes: {},
        constantAttributes: {},
        varyings: [],
        isInstanced: undefined,
        instanceCount: 0,
        vertexCount: 0,
        shaderInputs: undefined,
        pipelineFactory: undefined,
        shaderFactory: undefined,
        transformFeedback: undefined,
        shaderAssembler: _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__.ShaderAssembler.getDefaultShaderAssembler(),
        debugShaders: undefined,
        disableWarnings: undefined
    };
    device;
    id;
    source;
    vs;
    fs;
    pipelineFactory;
    shaderFactory;
    userData = {};
    // Fixed properties (change can trigger pipeline rebuild)
    /** The render pipeline GPU parameters, depth testing etc */
    parameters;
    /** The primitive topology */
    topology;
    /** Buffer layout */
    bufferLayout;
    // Dynamic properties
    /** Use instanced rendering */
    isInstanced = undefined;
    /** instance count. `undefined` means not instanced */
    instanceCount = 0;
    /** Vertex count */
    vertexCount;
    /** Index buffer */
    indexBuffer = null;
    /** Buffer-valued attributes */
    bufferAttributes = {};
    /** Constant-valued attributes */
    constantAttributes = {};
    /** Bindings (textures, samplers, uniform buffers) */
    bindings = {};
    /** Sets uniforms @deprecated Use uniform buffers and setBindings() for portability*/
    uniforms = {};
    /**
     * VertexArray
     * @note not implemented: if bufferLayout is updated, vertex array has to be rebuilt!
     * @todo - allow application to define multiple vertex arrays?
     * */
    vertexArray;
    /** TransformFeedback, WebGL 2 only. */
    transformFeedback = null;
    /** The underlying GPU "program". @note May be recreated if parameters change */
    pipeline;
    /** ShaderInputs instance */
    shaderInputs;
    _uniformStore;
    _attributeInfos = {};
    _gpuGeometry = null;
    _getModuleUniforms;
    props;
    _pipelineNeedsUpdate = 'newly created';
    _needsRedraw = 'initializing';
    _destroyed = false;
    /** "Time" of last draw. Monotonically increasing timestamp */
    _lastDrawTimestamp = -1;
    constructor(device, props) {
        this.props = { ...Model.defaultProps, ...props };
        props = this.props;
        this.id = props.id || (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.uid)('model');
        this.device = device;
        Object.assign(this.userData, props.userData);
        // Setup shader module inputs
        const moduleMap = Object.fromEntries(this.props.modules?.map(module => [module.name, module]) || []);
        this.setShaderInputs(props.shaderInputs || new _shader_inputs_js__WEBPACK_IMPORTED_MODULE_3__.ShaderInputs(moduleMap));
        // Setup shader assembler
        const platformInfo = getPlatformInfo(device);
        // Extract modules from shader inputs if not supplied
        const modules = (this.props.modules?.length > 0 ? this.props.modules : this.shaderInputs?.getModules()) || [];
        const isWebGPU = this.device.type === 'webgpu';
        // WebGPU
        // TODO - hack to support unified WGSL shader
        // TODO - this is wrong, compile a single shader
        if (isWebGPU && this.props.source) {
            // WGSL
            this.props.shaderLayout ||= (0,_luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_4__.getShaderLayoutFromWGSL)(this.props.source);
            const { source, getUniforms } = this.props.shaderAssembler.assembleShader({
                platformInfo,
                ...this.props,
                modules
            });
            this.source = source;
            this._getModuleUniforms = getUniforms;
        }
        else {
            // GLSL
            const { vs, fs, getUniforms } = this.props.shaderAssembler.assembleShaderPair({
                platformInfo,
                ...this.props,
                modules
            });
            this.vs = vs;
            this.fs = fs;
            this._getModuleUniforms = getUniforms;
        }
        this.vertexCount = this.props.vertexCount;
        this.instanceCount = this.props.instanceCount;
        this.topology = this.props.topology;
        this.bufferLayout = this.props.bufferLayout;
        this.parameters = this.props.parameters;
        // Geometry, if provided, sets topology and vertex cound
        if (props.geometry) {
            this.setGeometry(props.geometry);
        }
        this.pipelineFactory =
            props.pipelineFactory || _lib_pipeline_factory_js__WEBPACK_IMPORTED_MODULE_5__.PipelineFactory.getDefaultPipelineFactory(this.device);
        this.shaderFactory = props.shaderFactory || _lib_shader_factory_js__WEBPACK_IMPORTED_MODULE_6__.ShaderFactory.getDefaultShaderFactory(this.device);
        // Create the pipeline
        // @note order is important
        this.pipeline = this._updatePipeline();
        this.vertexArray = device.createVertexArray({
            renderPipeline: this.pipeline
        });
        // Now we can apply geometry attributes
        if (this._gpuGeometry) {
            this._setGeometryAttributes(this._gpuGeometry);
        }
        // Apply any dynamic settings that will not trigger pipeline change
        if ('isInstanced' in props) {
            this.isInstanced = props.isInstanced;
        }
        if (props.instanceCount) {
            this.setInstanceCount(props.instanceCount);
        }
        if (props.vertexCount) {
            this.setVertexCount(props.vertexCount);
        }
        if (props.indexBuffer) {
            this.setIndexBuffer(props.indexBuffer);
        }
        if (props.attributes) {
            this.setAttributes(props.attributes);
        }
        if (props.constantAttributes) {
            this.setConstantAttributes(props.constantAttributes);
        }
        if (props.bindings) {
            this.setBindings(props.bindings);
        }
        if (props.uniforms) {
            this.setUniforms(props.uniforms);
        }
        if (props.moduleSettings) {
            // log.warn('Model.props.moduleSettings is deprecated. Use Model.shaderInputs.setProps()')();
            this.updateModuleSettings(props.moduleSettings);
        }
        if (props.transformFeedback) {
            this.transformFeedback = props.transformFeedback;
        }
        // Catch any access to non-standard props
        Object.seal(this);
    }
    destroy() {
        if (this._destroyed)
            return;
        this.pipelineFactory.release(this.pipeline);
        this.shaderFactory.release(this.pipeline.vs);
        if (this.pipeline.fs) {
            this.shaderFactory.release(this.pipeline.fs);
        }
        this._uniformStore.destroy();
        // TODO - mark resource as managed and destroyIfManaged() ?
        this._gpuGeometry?.destroy();
        this._destroyed = true;
    }
    // Draw call
    /** Query redraw status. Clears the status. */
    needsRedraw() {
        // Catch any writes to already bound resources
        if (this._getBindingsUpdateTimestamp() > this._lastDrawTimestamp) {
            this.setNeedsRedraw('contents of bound textures or buffers updated');
        }
        const needsRedraw = this._needsRedraw;
        this._needsRedraw = false;
        return needsRedraw;
    }
    /** Mark the model as needing a redraw */
    setNeedsRedraw(reason) {
        this._needsRedraw ||= reason;
    }
    predraw() {
        // Update uniform buffers if needed
        this.updateShaderInputs();
        // Check if the pipeline is invalidated
        this.pipeline = this._updatePipeline();
    }
    draw(renderPass) {
        this.predraw();
        let drawSuccess;
        try {
            this._logDrawCallStart();
            // Update the pipeline if invalidated
            // TODO - inside RenderPass is likely the worst place to do this from performance perspective.
            // Application can call Model.predraw() to avoid this.
            this.pipeline = this._updatePipeline();
            // Set pipeline state, we may be sharing a pipeline so we need to set all state on every draw
            // Any caching needs to be done inside the pipeline functions
            this.pipeline.setBindings(this.bindings, { disableWarnings: this.props.disableWarnings });
            if (!(0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.isObjectEmpty)(this.uniforms)) {
                this.pipeline.setUniformsWebGL(this.uniforms);
            }
            const { indexBuffer } = this.vertexArray;
            const indexCount = indexBuffer
                ? indexBuffer.byteLength / (indexBuffer.indexType === 'uint32' ? 4 : 2)
                : undefined;
            drawSuccess = this.pipeline.draw({
                renderPass,
                vertexArray: this.vertexArray,
                isInstanced: this.isInstanced,
                vertexCount: this.vertexCount,
                instanceCount: this.instanceCount,
                indexCount,
                transformFeedback: this.transformFeedback || undefined,
                // WebGL shares underlying cached pipelines even for models that have different parameters and topology,
                // so we must provide our unique parameters to each draw
                // (In WebGPU most parameters are encoded in the pipeline and cannot be changed per draw call)
                parameters: this.parameters,
                topology: this.topology
            });
        }
        finally {
            this._logDrawCallEnd();
        }
        this._logFramebuffer(renderPass);
        // Update needsRedraw flag
        if (drawSuccess) {
            this._lastDrawTimestamp = this.device.timestamp;
            this._needsRedraw = false;
        }
        else {
            this._needsRedraw = 'waiting for resource initialization';
        }
        return drawSuccess;
    }
    // Update fixed fields (can trigger pipeline rebuild)
    /**
     * Updates the optional geometry
     * Geometry, set topology and bufferLayout
     * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    setGeometry(geometry) {
        this._gpuGeometry?.destroy();
        const gpuGeometry = geometry && (0,_geometry_gpu_geometry_js__WEBPACK_IMPORTED_MODULE_7__.makeGPUGeometry)(this.device, geometry);
        if (gpuGeometry) {
            this.setTopology(gpuGeometry.topology || 'triangle-list');
            this.bufferLayout = mergeBufferLayouts(gpuGeometry.bufferLayout, this.bufferLayout);
            if (this.vertexArray) {
                this._setGeometryAttributes(gpuGeometry);
            }
        }
        this._gpuGeometry = gpuGeometry;
    }
    /**
     * Updates the primitive topology ('triangle-list', 'triangle-strip' etc).
     * @note Triggers a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    setTopology(topology) {
        if (topology !== this.topology) {
            this.topology = topology;
            this._setPipelineNeedsUpdate('topology');
        }
    }
    /**
     * Updates the buffer layout.
     * @note Triggers a pipeline rebuild / pipeline cache fetch
     */
    setBufferLayout(bufferLayout) {
        this.bufferLayout = this._gpuGeometry
            ? mergeBufferLayouts(bufferLayout, this._gpuGeometry.bufferLayout)
            : bufferLayout;
        this._setPipelineNeedsUpdate('bufferLayout');
        // Recreate the pipeline
        this.pipeline = this._updatePipeline();
        // vertex array needs to be updated if we update buffer layout,
        // but not if we update parameters
        this.vertexArray = this.device.createVertexArray({
            renderPipeline: this.pipeline
        });
        // Reapply geometry attributes to the new vertex array
        if (this._gpuGeometry) {
            this._setGeometryAttributes(this._gpuGeometry);
        }
    }
    /**
     * Set GPU parameters.
     * @note Can trigger a pipeline rebuild / pipeline cache fetch.
     * @param parameters
     */
    setParameters(parameters) {
        if (!(0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_8__.deepEqual)(parameters, this.parameters, 2)) {
            this.parameters = parameters;
            this._setPipelineNeedsUpdate('parameters');
        }
    }
    // Update dynamic fields
    /**
     * Updates the instance count (used in draw calls)
     * @note Any attributes with stepMode=instance need to be at least this big
     */
    setInstanceCount(instanceCount) {
        this.instanceCount = instanceCount;
        // luma.gl examples don't set props.isInstanced and rely on auto-detection
        // but deck.gl sets instanceCount even for models that are not instanced.
        if (this.isInstanced === undefined && instanceCount > 0) {
            this.isInstanced = true;
        }
        this.setNeedsRedraw('instanceCount');
    }
    /**
     * Updates the vertex count (used in draw calls)
     * @note Any attributes with stepMode=vertex need to be at least this big
     */
    setVertexCount(vertexCount) {
        this.vertexCount = vertexCount;
        this.setNeedsRedraw('vertexCount');
    }
    /** Set the shader inputs */
    setShaderInputs(shaderInputs) {
        this.shaderInputs = shaderInputs;
        this._uniformStore = new _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.UniformStore(this.shaderInputs.modules);
        // Create uniform buffer bindings for all modules
        for (const moduleName of Object.keys(this.shaderInputs.modules)) {
            const uniformBuffer = this._uniformStore.getManagedUniformBuffer(this.device, moduleName);
            this.bindings[`${moduleName}Uniforms`] = uniformBuffer;
        }
        this.setNeedsRedraw('shaderInputs');
    }
    /** Update uniform buffers from the model's shader inputs */
    updateShaderInputs() {
        this._uniformStore.setUniforms(this.shaderInputs.getUniformValues());
        this.setBindings(this.shaderInputs.getBindings());
        // TODO - this is already tracked through buffer/texture update times?
        this.setNeedsRedraw('shaderInputs');
    }
    /**
     * Sets bindings (textures, samplers, uniform buffers)
     */
    setBindings(bindings) {
        Object.assign(this.bindings, bindings);
        this.setNeedsRedraw('bindings');
    }
    /**
     * Updates optional transform feedback. WebGL only.
     */
    setTransformFeedback(transformFeedback) {
        this.transformFeedback = transformFeedback;
        this.setNeedsRedraw('transformFeedback');
    }
    /**
     * Sets the index buffer
     * @todo - how to unset it if we change geometry?
     */
    setIndexBuffer(indexBuffer) {
        this.vertexArray.setIndexBuffer(indexBuffer);
        this.setNeedsRedraw('indexBuffer');
    }
    /**
     * Sets attributes (buffers)
     * @note Overrides any attributes previously set with the same name
     */
    setAttributes(buffers, options) {
        if (buffers.indices) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model:${this.id} setAttributes() - indexBuffer should be set using setIndexBuffer()`)();
        }
        for (const [bufferName, buffer] of Object.entries(buffers)) {
            const bufferLayout = this.bufferLayout.find(layout => getAttributeNames(layout).includes(bufferName));
            if (!bufferLayout) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model(${this.id}): Missing layout for buffer "${bufferName}".`)();
                continue; // eslint-disable-line no-continue
            }
            // For an interleaved attribute we may need to set multiple attributes
            const attributeNames = getAttributeNames(bufferLayout);
            let set = false;
            for (const attributeName of attributeNames) {
                const attributeInfo = this._attributeInfos[attributeName];
                if (attributeInfo) {
                    this.vertexArray.setBuffer(attributeInfo.location, buffer);
                    set = true;
                }
            }
            if (!set && !(options?.disableWarnings ?? this.props.disableWarnings)) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model(${this.id}): Ignoring buffer "${buffer.id}" for unknown attribute "${bufferName}"`)();
            }
        }
        this.setNeedsRedraw('attributes');
    }
    /**
     * Sets constant attributes
     * @note Overrides any attributes previously set with the same name
     * Constant attributes are only supported in WebGL, not in WebGPU
     * Any attribute that is disabled in the current vertex array object
     * is read from the context's global constant value for that attribute location.
     * @param constantAttributes
     */
    setConstantAttributes(attributes, options) {
        for (const [attributeName, value] of Object.entries(attributes)) {
            const attributeInfo = this._attributeInfos[attributeName];
            if (attributeInfo) {
                this.vertexArray.setConstantWebGL(attributeInfo.location, value);
            }
            else if (!(options?.disableWarnings ?? this.props.disableWarnings)) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model "${this.id}: Ignoring constant supplied for unknown attribute "${attributeName}"`)();
            }
        }
        this.setNeedsRedraw('constants');
    }
    // DEPRECATED METHODS
    /**
     * Sets individual uniforms
     * @deprecated WebGL only, use uniform buffers for portability
     * @param uniforms
     */
    setUniforms(uniforms) {
        if (!(0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.isObjectEmpty)(uniforms)) {
            this.pipeline.setUniformsWebGL(uniforms);
            Object.assign(this.uniforms, uniforms);
        }
        this.setNeedsRedraw('uniforms');
    }
    /**
     * @deprecated Updates shader module settings (which results in uniforms being set)
     */
    updateModuleSettings(props) {
        // log.warn('Model.updateModuleSettings is deprecated. Use Model.shaderInputs.setProps()')();
        const { bindings, uniforms } = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_11__.splitUniformsAndBindings)(this._getModuleUniforms(props));
        Object.assign(this.bindings, bindings);
        Object.assign(this.uniforms, uniforms);
        this.setNeedsRedraw('moduleSettings');
    }
    // Internal methods
    /** Get the timestamp of the latest updated bound GPU memory resource (buffer/texture). */
    _getBindingsUpdateTimestamp() {
        let timestamp = 0;
        for (const binding of Object.values(this.bindings)) {
            if (binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_12__.TextureView) {
                timestamp = Math.max(timestamp, binding.texture.updateTimestamp);
            }
            else if (binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_13__.Buffer || binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_14__.Texture) {
                timestamp = Math.max(timestamp, binding.updateTimestamp);
            }
            else if (!(binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_15__.Sampler)) {
                timestamp = Math.max(timestamp, binding.buffer.updateTimestamp);
            }
        }
        return timestamp;
    }
    /**
     * Updates the optional geometry attributes
     * Geometry, sets several attributes, indexBuffer, and also vertex count
     * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    _setGeometryAttributes(gpuGeometry) {
        // Filter geometry attribute so that we don't issue warnings for unused attributes
        const attributes = { ...gpuGeometry.attributes };
        for (const [attributeName] of Object.entries(attributes)) {
            if (!this.pipeline.shaderLayout.attributes.find(layout => layout.name === attributeName) &&
                attributeName !== 'positions') {
                delete attributes[attributeName];
            }
        }
        // TODO - delete previous geometry?
        this.vertexCount = gpuGeometry.vertexCount;
        this.setIndexBuffer(gpuGeometry.indices || null);
        this.setAttributes(gpuGeometry.attributes, { disableWarnings: true });
        this.setAttributes(attributes, { disableWarnings: this.props.disableWarnings });
        this.setNeedsRedraw('geometry attributes');
    }
    /** Mark pipeline as needing update */
    _setPipelineNeedsUpdate(reason) {
        this._pipelineNeedsUpdate ||= reason;
        this.setNeedsRedraw(reason);
    }
    /** Update pipeline if needed */
    _updatePipeline() {
        if (this._pipelineNeedsUpdate) {
            let prevShaderVs = null;
            let prevShaderFs = null;
            if (this.pipeline) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.log(1, `Model ${this.id}: Recreating pipeline because "${this._pipelineNeedsUpdate}".`)();
                prevShaderVs = this.pipeline.vs;
                prevShaderFs = this.pipeline.fs;
            }
            this._pipelineNeedsUpdate = false;
            const vs = this.shaderFactory.createShader({
                id: `${this.id}-vertex`,
                stage: 'vertex',
                source: this.source || this.vs,
                debug: this.props.debugShaders
            });
            let fs = null;
            if (this.source) {
                fs = vs;
            }
            else if (this.fs) {
                fs = this.shaderFactory.createShader({
                    id: `${this.id}-fragment`,
                    stage: 'fragment',
                    source: this.source || this.fs,
                    debug: this.props.debugShaders
                });
            }
            this.pipeline = this.pipelineFactory.createRenderPipeline({
                ...this.props,
                bufferLayout: this.bufferLayout,
                topology: this.topology,
                parameters: this.parameters,
                vs,
                fs
            });
            this._attributeInfos = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_16__.getAttributeInfosFromLayouts)(this.pipeline.shaderLayout, this.bufferLayout);
            if (prevShaderVs)
                this.shaderFactory.release(prevShaderVs);
            if (prevShaderFs)
                this.shaderFactory.release(prevShaderFs);
        }
        return this.pipeline;
    }
    /** Throttle draw call logging */
    _lastLogTime = 0;
    _logOpen = false;
    _logDrawCallStart() {
        // IF level is 4 or higher, log every frame.
        const logDrawTimeout = _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.level > 3 ? 0 : LOG_DRAW_TIMEOUT;
        if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.level < 2 || Date.now() - this._lastLogTime < logDrawTimeout) {
            return;
        }
        this._lastLogTime = Date.now();
        this._logOpen = true;
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, { collapsed: _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.level <= 2 })();
    }
    _logDrawCallEnd() {
        if (this._logOpen) {
            const shaderLayoutTable = (0,_debug_debug_shader_layout_js__WEBPACK_IMPORTED_MODULE_17__.getDebugTableForShaderLayout)(this.pipeline.shaderLayout, this.id);
            // log.table(logLevel, attributeTable)();
            // log.table(logLevel, uniformTable)();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, shaderLayoutTable)();
            const uniformTable = this.shaderInputs.getDebugTable();
            // Add any global uniforms
            for (const [name, value] of Object.entries(this.uniforms)) {
                uniformTable[name] = { value };
            }
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, uniformTable)();
            const attributeTable = this._getAttributeDebugTable();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, this._attributeInfos)();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, attributeTable)();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.groupEnd(LOG_DRAW_PRIORITY)();
            this._logOpen = false;
        }
    }
    _drawCount = 0;
    _logFramebuffer(renderPass) {
        const debugFramebuffers = _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.get('framebuffer');
        this._drawCount++;
        // Update first 3 frames and then every 60 frames
        if (!debugFramebuffers || (this._drawCount++ > 3 && this._drawCount % 60)) {
            return;
        }
        // TODO - display framebuffer output in debug window
        const framebuffer = renderPass.props.framebuffer;
        if (framebuffer) {
            (0,_debug_debug_framebuffer_js__WEBPACK_IMPORTED_MODULE_18__.debugFramebuffer)(framebuffer, { id: framebuffer.id, minimap: true });
            // log.image({logLevel: LOG_DRAW_PRIORITY, message: `${framebuffer.id} %c sup?`, image})();
        }
    }
    _getAttributeDebugTable() {
        const table = {};
        for (const [name, attributeInfo] of Object.entries(this._attributeInfos)) {
            table[attributeInfo.location] = {
                name,
                type: attributeInfo.shaderType,
                values: this._getBufferOrConstantValues(this.vertexArray.attributes[attributeInfo.location], attributeInfo.bufferDataType)
            };
        }
        if (this.vertexArray.indexBuffer) {
            const { indexBuffer } = this.vertexArray;
            const values = indexBuffer.indexType === 'uint32'
                ? new Uint32Array(indexBuffer.debugData)
                : new Uint16Array(indexBuffer.debugData);
            table.indices = {
                name: 'indices',
                type: indexBuffer.indexType,
                values: values.toString()
            };
        }
        return table;
    }
    // TODO - fix typing of luma data types
    _getBufferOrConstantValues(attribute, dataType) {
        const TypedArrayConstructor = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_19__.getTypedArrayFromDataType)(dataType);
        const typedArray = attribute instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_13__.Buffer ? new TypedArrayConstructor(attribute.debugData) : attribute;
        return typedArray.toString();
    }
}
// HELPERS
/** TODO - move to core, document add tests */
function mergeBufferLayouts(layouts1, layouts2) {
    const layouts = [...layouts1];
    for (const attribute of layouts2) {
        const index = layouts.findIndex(attribute2 => attribute2.name === attribute.name);
        if (index < 0) {
            layouts.push(attribute);
        }
        else {
            layouts[index] = attribute;
        }
    }
    return layouts;
}
/** Create a shadertools platform info from the Device */
function getPlatformInfo(device) {
    return {
        type: device.type,
        shaderLanguage: device.info.shadingLanguage,
        shaderLanguageVersion: device.info.shadingLanguageVersion,
        gpu: device.info.gpu,
        // HACK - we pretend that the DeviceFeatures is a Set, it has a similar API
        features: device.features
    };
}
/** Get attribute names from a BufferLayout */
function getAttributeNames(bufferLayout) {
    return bufferLayout.attributes
        ? bufferLayout.attributes?.map(layout => layout.attribute)
        : [bufferLayout.name];
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/shader-inputs.js":
/*!************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/shader-inputs.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ShaderInputs: () => (/* binding */ ShaderInputs)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js");
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/resolve-modules.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// import type {ShaderUniformType, UniformValue, UniformFormat, UniformInfoDevice, Texture, Sampler} from '@luma.gl/core';

/**
 * ShaderInputs holds uniform and binding values for one or more shader modules,
 * - It can generate binary data for any uniform buffer
 * - It can manage a uniform buffer for each block
 * - It can update managed uniform buffers with a single call
 * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.
 */
class ShaderInputs {
    /**
     * The map of modules
     * @todo should should this include the resolved dependencies?
     */
    modules;
    /** Stores the uniform values for each module */
    moduleUniforms;
    /** Stores the uniform bindings for each module  */
    moduleBindings;
    /** Tracks if uniforms have changed */
    moduleUniformsChanged;
    /**
     * Create a new UniformStore instance
     * @param modules
     */
    constructor(modules) {
        // Extract modules with dependencies
        const resolvedModules = (0,_luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_0__.resolveModules)(Object.values(modules).filter(module => module.dependencies));
        for (const resolvedModule of resolvedModules) {
            // @ts-ignore
            modules[resolvedModule.name] = resolvedModule;
        }
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.log(1, 'Creating ShaderInputs with modules', Object.keys(modules))();
        // Store the module definitions and create storage for uniform values and binding values, per module
        this.modules = modules;
        this.moduleUniforms = {};
        this.moduleBindings = {};
        // Initialize the modules
        for (const [name, module] of Object.entries(modules)) {
            const moduleName = name;
            // Get default uniforms from module
            this.moduleUniforms[moduleName] = module.defaultUniforms || {};
            this.moduleBindings[moduleName] = {};
        }
    }
    /** Destroy */
    destroy() { }
    /**
     * Set module props
     */
    setProps(props) {
        for (const name of Object.keys(props)) {
            const moduleName = name;
            const moduleProps = props[moduleName];
            const module = this.modules[moduleName];
            if (!module) {
                // Ignore props for unregistered modules
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(`Module ${name} not found`)();
                continue; // eslint-disable-line no-continue
            }
            const oldUniforms = this.moduleUniforms[moduleName];
            const oldBindings = this.moduleBindings[moduleName];
            const uniformsAndBindings = module.getUniforms?.(moduleProps, this.moduleUniforms[moduleName]) || moduleProps;
            const { uniforms, bindings } = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.splitUniformsAndBindings)(uniformsAndBindings);
            this.moduleUniforms[moduleName] = { ...oldUniforms, ...uniforms };
            this.moduleBindings[moduleName] = { ...oldBindings, ...bindings };
            // this.moduleUniformsChanged ||= moduleName;
            // console.log(`setProps(${String(moduleName)}`, moduleName, this.moduleUniforms[moduleName])
        }
    }
    /** Merges all bindings for the shader (from the various modules) */
    // getUniformBlocks(): Record<string, Texture | Sampler> {
    //   return this.moduleUniforms;
    // }
    /**
     * Return the map of modules
     * @todo should should this include the resolved dependencies?
     */
    getModules() {
        return Object.values(this.modules);
    }
    /** Get all uniform values for all modules */
    getUniformValues() {
        return this.moduleUniforms;
    }
    /** Merges all bindings for the shader (from the various modules) */
    getBindings() {
        const bindings = {};
        for (const moduleBindings of Object.values(this.moduleBindings)) {
            Object.assign(bindings, moduleBindings);
        }
        return bindings;
    }
    getDebugTable() {
        const table = {};
        for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {
            for (const [key, value] of Object.entries(module)) {
                table[`${moduleName}.${key}`] = {
                    type: this.modules[moduleName].uniformTypes?.[key],
                    value: String(value)
                };
            }
        }
        return table;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/engine/dist/transform/buffer-transform.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@luma.gl/engine/dist/transform/buffer-transform.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BufferTransform: () => (/* binding */ BufferTransform)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/shadertools */ "./node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/shader-utils.js");
/* harmony import */ var _model_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/model.js */ "./node_modules/@luma.gl/engine/dist/model/model.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Creates a pipeline for buffer→buffer transforms.
 * @deprecated
 */
class BufferTransform {
    device;
    model;
    transformFeedback;
    /** @deprecated Use device feature test. */
    static isSupported(device) {
        return device?.info?.type === 'webgl';
    }
    constructor(device, props = _model_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.defaultProps) {
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(BufferTransform.isSupported(device), 'BufferTransform not yet implemented on WebGPU');
        this.device = device;
        this.model = new _model_model_js__WEBPACK_IMPORTED_MODULE_0__.Model(this.device, {
            id: props.id || 'buffer-transform-model',
            fs: props.fs || (0,_luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_2__.getPassthroughFS)(),
            topology: props.topology || 'point-list',
            ...props
        });
        this.transformFeedback = this.device.createTransformFeedback({
            layout: this.model.pipeline.shaderLayout,
            buffers: props.feedbackBuffers
        });
        this.model.setTransformFeedback(this.transformFeedback);
        Object.seal(this);
    }
    /** Destroy owned resources. */
    destroy() {
        if (this.model) {
            this.model.destroy();
        }
    }
    /** @deprecated Use {@link destroy}. */
    delete() {
        this.destroy();
    }
    /** Run one transform loop. */
    run(options) {
        const renderPass = this.device.beginRenderPass(options);
        this.model.draw(renderPass);
        renderPass.end();
    }
    /** @deprecated */
    update(...args) {
        // TODO(v9): Method should likely be removed for v9. Keeping a method stub
        // to assist with migrating DeckGL usage.
        // eslint-disable-next-line no-console
        console.warn('TextureTransform#update() not implemented');
    }
    /** Returns the {@link Buffer} or {@link BufferRange} for given varying name. */
    getBuffer(varyingName) {
        return this.transformFeedback.getBuffer(varyingName);
    }
    readAsync(varyingName) {
        const result = this.getBuffer(varyingName);
        if (result instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Buffer) {
            return result.readAsync();
        }
        const { buffer, byteOffset = 0, byteLength = buffer.byteLength } = result;
        return buffer.readAsync(byteOffset, byteLength);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getValidatedProperties: () => (/* binding */ getValidatedProperties),
/* harmony export */   makePropValidators: () => (/* binding */ makePropValidators)
/* harmony export */ });
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Minimal validators for number and array types */
const DEFAULT_PROP_VALIDATORS = {
    number: {
        type: 'number',
        validate(value, propType) {
            return (Number.isFinite(value) &&
                typeof propType === 'object' &&
                (propType.max === undefined || value <= propType.max) &&
                (propType.min === undefined || value >= propType.min));
        }
    },
    array: {
        type: 'array',
        validate(value, propType) {
            return Array.isArray(value) || ArrayBuffer.isView(value);
        }
    }
};
/**
 * Parse a list of property types into property definitions that can be used to validate
 * values passed in by applications.
 * @param propTypes
 * @returns
 */
function makePropValidators(propTypes) {
    const propValidators = {};
    for (const [name, propType] of Object.entries(propTypes)) {
        propValidators[name] = makePropValidator(propType);
    }
    return propValidators;
}
/**
 * Validate a map of user supplied properties against a map of validators
 * Inject default values when user doesn't supply a property
 * @param properties
 * @param propValidators
 * @returns
 */
function getValidatedProperties(properties, propValidators, errorMessage) {
    const validated = {};
    for (const [key, propsValidator] of Object.entries(propValidators)) {
        if (properties && key in properties && !propsValidator.private) {
            if (propsValidator.validate) {
                (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(propsValidator.validate(properties[key], propsValidator), `${errorMessage}: invalid ${key}`);
            }
            validated[key] = properties[key];
        }
        else {
            // property not supplied - use default value
            validated[key] = propsValidator.value;
        }
    }
    // TODO - warn for unused properties that don't match a validator?
    return validated;
}
/**
 * Creates a property validator for a prop type. Either contains:
 * - a valid prop type object ({type, ...})
 * - or just a default value, in which case type and name inference is used
 */
function makePropValidator(propType) {
    let type = getTypeOf(propType);
    if (type !== 'object') {
        return { value: propType, ...DEFAULT_PROP_VALIDATORS[type], type };
    }
    // Special handling for objects
    if (typeof propType === 'object') {
        if (!propType) {
            return { type: 'object', value: null };
        }
        if (propType.type !== undefined) {
            return { ...propType, ...DEFAULT_PROP_VALIDATORS[propType.type], type: propType.type };
        }
        // If no type and value this object is likely the value
        if (propType.value === undefined) {
            return { type: 'object', value: propType };
        }
        type = getTypeOf(propType.value);
        return { ...propType, ...DEFAULT_PROP_VALIDATORS[type], type };
    }
    throw new Error('props');
}
/**
 * "improved" version of javascript typeof that can distinguish arrays and null values
 */
function getTypeOf(value) {
    if (Array.isArray(value) || ArrayBuffer.isView(value)) {
        return 'array';
    }
    return typeof value;
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShaderInfo: () => (/* binding */ getShaderInfo)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Extracts information from shader source code */
function getShaderInfo(source, defaultName) {
    return {
        name: getShaderName(source, defaultName),
        language: 'glsl',
        version: getShaderVersion(source)
    };
}
/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */
function getShaderName(shader, defaultName = 'unnamed') {
    const SHADER_NAME_REGEXP = /#define[^\S\r\n]*SHADER_NAME[^\S\r\n]*([A-Za-z0-9_-]+)\s*/;
    const match = SHADER_NAME_REGEXP.exec(shader);
    return match ? match[1] : defaultName;
}
/** returns GLSL shader version of given shader string */
function getShaderVersion(source) {
    let version = 100;
    const words = source.match(/[^\s]+/g);
    if (words && words.length >= 2 && words[0] === '#version') {
        const parsedVersion = parseInt(words[1], 10);
        if (Number.isFinite(parsedVersion)) {
            version = parsedVersion;
        }
    }
    if (version !== 100 && version !== 300) {
        throw new Error(`Invalid GLSL version ${version}`);
    }
    return version;
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/shader-utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/shader-utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertToVec4: () => (/* binding */ convertToVec4),
/* harmony export */   getPassthroughFS: () => (/* binding */ getPassthroughFS),
/* harmony export */   getQualifierDetails: () => (/* binding */ getQualifierDetails),
/* harmony export */   typeToChannelCount: () => (/* binding */ typeToChannelCount),
/* harmony export */   typeToChannelSuffix: () => (/* binding */ typeToChannelSuffix)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const FS_GLES = `\
out vec4 transform_output;
void main() {
transform_output = vec4(0);
}`;
const FS300 = `#version 300 es\n${FS_GLES}`;
// Prase given glsl line and return qualifier details or null
function getQualifierDetails(line, qualifiers) {
    qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];
    const words = line.replace(/^\s+/, '').split(/\s+/);
    // TODO add support for precession qualifiers (highp, mediump and lowp)
    const [qualifier, type, definition] = words;
    if (!qualifiers.includes(qualifier) || !type || !definition) {
        return null;
    }
    const name = definition.split(';')[0];
    return { qualifier, type, name };
}
/**
 * Given the shader input and output variable names,
 * builds and return a pass through fragment shader.
 */
function getPassthroughFS(options) {
    const { input, inputChannels, output } = options || {};
    if (!input) {
        // Default shader
        return FS300;
    }
    if (!inputChannels) {
        throw new Error('inputChannels');
    }
    const inputType = channelCountToType(inputChannels);
    const outputValue = convertToVec4(input, inputChannels);
    return `\
#version 300 es
in ${inputType} ${input};
out vec4 ${output};
void main() {
  ${output} = ${outputValue};
}`;
}
/** convert glsl type to suffix */
function typeToChannelSuffix(type) {
    // prettier-ignore
    switch (type) {
        case 'float': return 'x';
        case 'vec2': return 'xy';
        case 'vec3': return 'xyz';
        case 'vec4': return 'xyzw';
        default:
            throw new Error(type);
    }
}
/** convert glsl type to channel count */
function typeToChannelCount(type) {
    // prettier-ignore
    switch (type) {
        case 'float': return 1;
        case 'vec2': return 2;
        case 'vec3': return 3;
        case 'vec4': return 4;
        default:
            throw new Error(type);
    }
}
function channelCountToType(channels) {
    // prettier-ignore
    switch (channels) {
        case 1: return 'float';
        case 2: return 'vec2';
        case 3: return 'vec3';
        case 4: return 'vec4';
        default:
            throw new Error(`invalid channels: ${channels}`);
    }
}
/** Returns glsl instruction for converting to vec4 */
function convertToVec4(variable, channels) {
    // prettier-ignore
    switch (channels) {
        case 1: return `vec4(${variable}, 0.0, 0.0, 1.0)`;
        case 2: return `vec4(${variable}, 0.0, 1.0)`;
        case 3: return `vec4(${variable}, 1.0)`;
        case 4: return variable;
        default:
            throw new Error(`invalid channels: ${channels}`);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js":
/*!************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ShaderAssembler: () => (/* binding */ ShaderAssembler)
/* harmony export */ });
/* harmony import */ var _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader-module/shader-module-instance.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-instance.js");
/* harmony import */ var _shader_assembly_select_shaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader-assembly/select-shaders.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/select-shaders.js");
/* harmony import */ var _shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader-assembly/assemble-shaders.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * A stateful version of `assembleShaders` that can be used to assemble shaders.
 * Supports setting of default modules and hooks.
 */
class ShaderAssembler {
    /** Default ShaderAssembler instance */
    static defaultShaderAssembler;
    /** Hook functions */
    _hookFunctions = [];
    /** Shader modules */
    _defaultModules = [];
    /**
     * A default shader assembler instance - the natural place to register default modules and hooks
     * @returns
     */
    static getDefaultShaderAssembler() {
        ShaderAssembler.defaultShaderAssembler =
            ShaderAssembler.defaultShaderAssembler || new ShaderAssembler();
        return ShaderAssembler.defaultShaderAssembler;
    }
    /**
     * Add a default module that does not have to be provided with every call to assembleShaders()
     */
    addDefaultModule(module) {
        if (!this._defaultModules.find(m => m.name === (typeof module === 'string' ? module : module.name))) {
            this._defaultModules.push(module);
        }
    }
    /**
     * Remove a default module
     */
    removeDefaultModule(module) {
        const moduleName = typeof module === 'string' ? module : module.name;
        this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);
    }
    /**
     * Register a shader hook
     * @param hook
     * @param opts
     */
    addShaderHook(hook, opts) {
        if (opts) {
            hook = Object.assign(opts, { hook });
        }
        this._hookFunctions.push(hook);
    }
    /**
     * Assemble a pair of shaders into a single shader program
     * @param platformInfo
     * @param props
     * @returns
     */
    assembleShader(props) {
        const modules = this._getModuleList(props.modules); // Combine with default modules
        const hookFunctions = this._hookFunctions; // TODO - combine with default hook functions
        const options = (0,_shader_assembly_select_shaders_js__WEBPACK_IMPORTED_MODULE_0__.selectShaders)(props);
        const assembled = (0,_shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__.assembleShaderWGSL)({
            platformInfo: props.platformInfo,
            ...options,
            modules,
            hookFunctions
        });
        return { ...assembled, modules };
    }
    /**
     * Assemble a pair of shaders into a single shader program
     * @param platformInfo
     * @param props
     * @returns
     */
    assembleShaderPair(props) {
        const options = (0,_shader_assembly_select_shaders_js__WEBPACK_IMPORTED_MODULE_0__.selectShaders)(props);
        const modules = this._getModuleList(props.modules); // Combine with default modules
        const hookFunctions = this._hookFunctions; // TODO - combine with default hook functions
        const { platformInfo } = props;
        const isWGSL = props.platformInfo.shaderLanguage === 'wgsl';
        const assembled = isWGSL
            ? (0,_shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__.assembleShaderPairWGSL)({ platformInfo, ...options, modules, hookFunctions })
            : (0,_shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__.assembleShaderPairGLSL)({ platformInfo, ...options, modules, hookFunctions });
        return { ...assembled, modules };
    }
    /**
     * Dedupe and combine with default modules
     */
    _getModuleList(appModules = []) {
        const modules = new Array(this._defaultModules.length + appModules.length);
        const seen = {};
        let count = 0;
        for (let i = 0, len = this._defaultModules.length; i < len; ++i) {
            const module = this._defaultModules[i];
            const name = module.name;
            modules[count++] = module;
            seen[name] = true;
        }
        for (let i = 0, len = appModules.length; i < len; ++i) {
            const module = appModules[i];
            const name = module.name;
            if (!seen[name]) {
                modules[count++] = module;
                seen[name] = true;
            }
        }
        modules.length = count;
        return _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_2__.ShaderModuleInstance.instantiateModules(modules);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assembleGetUniforms: () => (/* binding */ assembleGetUniforms),
/* harmony export */   assembleShaderPairGLSL: () => (/* binding */ assembleShaderPairGLSL),
/* harmony export */   assembleShaderPairWGSL: () => (/* binding */ assembleShaderPairWGSL),
/* harmony export */   assembleShaderWGSL: () => (/* binding */ assembleShaderWGSL),
/* harmony export */   assembleWGSLShader: () => (/* binding */ assembleWGSLShader)
/* harmony export */ });
/* harmony import */ var _resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolve-modules.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/resolve-modules.js");
/* harmony import */ var _platform_defines_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./platform-defines.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js");
/* harmony import */ var _shader_injections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader-injections.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js");
/* harmony import */ var _shader_transpiler_transpile_glsl_shader_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shader-transpiler/transpile-glsl-shader.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js");
/* harmony import */ var _shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shader-hooks.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
/* harmony import */ var _glsl_utils_get_shader_info_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../glsl-utils/get-shader-info.js */ "./node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors








const INJECT_SHADER_DECLARATIONS = `\n\n${_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.DECLARATION_INJECT_MARKER}\n`;
/**
 * Precision prologue to inject before functions are injected in shader
 * TODO - extract any existing prologue in the fragment source and move it up...
 */
const FRAGMENT_SHADER_PROLOGUE = `\
precision highp float;
`;
/**
 * Inject a list of shader modules into a single shader source for WGSL
 */
function assembleShaderWGSL(options) {
    const modules = (0,_resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__.resolveModules)(options.modules || []);
    return {
        source: assembleWGSLShader(options.platformInfo, {
            ...options,
            source: options.source,
            stage: 'vertex',
            modules
        }),
        getUniforms: assembleGetUniforms(modules)
    };
}
/**
 * Injects dependent shader module sources into pair of main vertex/fragment shader sources for WGSL
 */
function assembleShaderPairWGSL(options) {
    const modules = (0,_resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__.resolveModules)(options.modules || []);
    return {
        vs: assembleWGSLShader(options.platformInfo, {
            ...options,
            source: options.vs,
            stage: 'vertex',
            modules
        }),
        fs: assembleWGSLShader(options.platformInfo, {
            ...options,
            source: options.fs,
            stage: 'fragment',
            modules
        }),
        getUniforms: assembleGetUniforms(modules)
    };
}
/**
 * Injects dependent shader module sources into pair of main vertex/fragment shader sources for GLSL
 */
function assembleShaderPairGLSL(options) {
    const { vs, fs } = options;
    const modules = (0,_resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__.resolveModules)(options.modules || []);
    return {
        vs: assembleGLSLShader(options.platformInfo, {
            ...options,
            source: vs,
            stage: 'vertex',
            modules
        }),
        fs: assembleGLSLShader(options.platformInfo, {
            ...options,
            source: fs,
            stage: 'fragment',
            modules
        }),
        getUniforms: assembleGetUniforms(modules)
    };
}
/**
 * Pulls together complete source code for either a vertex or a fragment shader
 * adding prologues, requested module chunks, and any final injections.
 * @param gl
 * @param options
 * @returns
 */
function assembleWGSLShader(platformInfo, options) {
    const { 
    // id,
    source, stage, modules, 
    // defines = {},
    hookFunctions = [], inject = {}, log } = options;
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof source === 'string', 'shader source must be a string');
    // const isVertex = type === 'vs';
    // const sourceLines = source.split('\n');
    const coreSource = source;
    // Combine Module and Application Defines
    // const allDefines = {};
    // modules.forEach(module => {
    //   Object.assign(allDefines, module.getDefines());
    // });
    // Object.assign(allDefines, defines);
    // Add platform defines (use these to work around platform-specific bugs and limitations)
    // Add common defines (GLSL version compatibility, feature detection)
    // Add precision declaration for fragment shaders
    let assembledSource = '';
    //   prologue
    //     ? `\
    // ${getShaderNameDefine({id, source, type})}
    // ${getShaderType(type)}
    // ${getPlatformShaderDefines(platformInfo)}
    // ${getApplicationDefines(allDefines)}
    // ${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}
    // `
    // `;
    const hookFunctionMap = (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.normalizeShaderHooks)(hookFunctions);
    // Add source of dependent modules in resolved order
    const hookInjections = {};
    const declInjections = {};
    const mainInjections = {};
    for (const key in inject) {
        const injection = typeof inject[key] === 'string' ? { injection: inject[key], order: 0 } : inject[key];
        const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
        if (match) {
            const hash = match[2];
            const name = match[3];
            if (hash) {
                if (name === 'decl') {
                    declInjections[key] = [injection];
                }
                else {
                    mainInjections[key] = [injection];
                }
            }
            else {
                hookInjections[key] = [injection];
            }
        }
        else {
            // Regex injection
            mainInjections[key] = [injection];
        }
    }
    // TODO - hack until shadertool modules support WebGPU
    const modulesToInject = platformInfo.type !== 'webgpu' ? modules : [];
    for (const module of modulesToInject) {
        if (log) {
            module.checkDeprecations(coreSource, log);
        }
        const moduleSource = module.getModuleSource(stage, 'wgsl');
        // Add the module source, and a #define that declares it presence
        assembledSource += moduleSource;
        const injections = module.injections[stage];
        for (const key in injections) {
            const match = /^(v|f)s:#([\w-]+)$/.exec(key);
            if (match) {
                const name = match[2];
                const injectionType = name === 'decl' ? declInjections : mainInjections;
                injectionType[key] = injectionType[key] || [];
                injectionType[key].push(injections[key]);
            }
            else {
                hookInjections[key] = hookInjections[key] || [];
                hookInjections[key].push(injections[key]);
            }
        }
    }
    // For injectShader
    assembledSource += INJECT_SHADER_DECLARATIONS;
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, declInjections);
    assembledSource += (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.getShaderHooks)(hookFunctionMap[stage], hookInjections);
    // Add the version directive and actual source of this shader
    assembledSource += coreSource;
    // Apply any requested shader injections
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, mainInjections);
    return assembledSource;
}
/**
 * Pulls together complete source code for either a vertex or a fragment shader
 * adding prologues, requested module chunks, and any final injections.
 * @param gl
 * @param options
 * @returns
 */
function assembleGLSLShader(platformInfo, options) {
    const { id, source, stage, language = 'glsl', modules, defines = {}, hookFunctions = [], inject = {}, prologue = true, log } = options;
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof source === 'string', 'shader source must be a string');
    const sourceVersion = language === 'glsl' ? (0,_glsl_utils_get_shader_info_js__WEBPACK_IMPORTED_MODULE_4__.getShaderInfo)(source).version : -1;
    const targetVersion = platformInfo.shaderLanguageVersion;
    const sourceVersionDirective = sourceVersion === 100 ? '#version 100' : '#version 300 es';
    const sourceLines = source.split('\n');
    // TODO : keep all pre-processor statements at the beginning of the shader.
    const coreSource = sourceLines.slice(1).join('\n');
    // Combine Module and Application Defines
    const allDefines = {};
    modules.forEach(module => {
        Object.assign(allDefines, module.getDefines());
    });
    Object.assign(allDefines, defines);
    // Add platform defines (use these to work around platform-specific bugs and limitations)
    // Add common defines (GLSL version compatibility, feature detection)
    // Add precision declaration for fragment shaders
    let assembledSource = '';
    switch (language) {
        case 'wgsl':
            break;
        case 'glsl':
            assembledSource = prologue
                ? `\
${sourceVersionDirective}

// ----- PROLOGUE -------------------------
${getShaderNameDefine({ id, source, stage })}
${`#define SHADER_TYPE_${stage.toUpperCase()}`}
${(0,_platform_defines_js__WEBPACK_IMPORTED_MODULE_5__.getPlatformShaderDefines)(platformInfo)}
${stage === 'fragment' ? FRAGMENT_SHADER_PROLOGUE : ''}

// ----- APPLICATION DEFINES -------------------------

${getApplicationDefines(allDefines)}

`
                : `${sourceVersionDirective}
`;
            break;
    }
    const hookFunctionMap = (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.normalizeShaderHooks)(hookFunctions);
    // Add source of dependent modules in resolved order
    const hookInjections = {};
    const declInjections = {};
    const mainInjections = {};
    for (const key in inject) {
        // @ts-expect-error
        const injection = typeof inject[key] === 'string' ? { injection: inject[key], order: 0 } : inject[key];
        const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
        if (match) {
            const hash = match[2];
            const name = match[3];
            if (hash) {
                if (name === 'decl') {
                    declInjections[key] = [injection];
                }
                else {
                    mainInjections[key] = [injection];
                }
            }
            else {
                hookInjections[key] = [injection];
            }
        }
        else {
            // Regex injection
            mainInjections[key] = [injection];
        }
    }
    for (const module of modules) {
        if (log) {
            module.checkDeprecations(coreSource, log);
        }
        const moduleSource = module.getModuleSource(stage);
        // Add the module source, and a #define that declares it presence
        assembledSource += moduleSource;
        const injections = module.injections[stage];
        for (const key in injections) {
            const match = /^(v|f)s:#([\w-]+)$/.exec(key);
            if (match) {
                const name = match[2];
                const injectionType = name === 'decl' ? declInjections : mainInjections;
                injectionType[key] = injectionType[key] || [];
                injectionType[key].push(injections[key]);
            }
            else {
                hookInjections[key] = hookInjections[key] || [];
                hookInjections[key].push(injections[key]);
            }
        }
    }
    assembledSource += '// ----- MAIN SHADER SOURCE -------------------------';
    // For injectShader
    assembledSource += INJECT_SHADER_DECLARATIONS;
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, declInjections);
    assembledSource += (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.getShaderHooks)(hookFunctionMap[stage], hookInjections);
    // Add the version directive and actual source of this shader
    assembledSource += coreSource;
    // Apply any requested shader injections
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, mainInjections);
    if (language === 'glsl' && sourceVersion !== targetVersion) {
        assembledSource = (0,_shader_transpiler_transpile_glsl_shader_js__WEBPACK_IMPORTED_MODULE_6__.transpileGLSLShader)(assembledSource, stage);
    }
    return assembledSource.trim();
}
/**
 * Returns a combined `getUniforms` covering the options for all the modules,
 * the created function will pass on options to the inidividual `getUniforms`
 * function of each shader module and combine the results into one object that
 * can be passed to setUniforms.
 * @param modules
 * @returns
 */
function assembleGetUniforms(modules) {
    return function getUniforms(opts) {
        const uniforms = {};
        for (const module of modules) {
            // `modules` is already sorted by dependency level. This guarantees that
            // modules have access to the uniforms that are generated by their dependencies.
            const moduleUniforms = module.getUniforms(opts, uniforms);
            Object.assign(uniforms, moduleUniforms);
        }
        return uniforms;
    };
}
/**
 * Generate "glslify-compatible" SHADER_NAME defines
 * These are understood by the GLSL error parsing function
 * If id is provided and no SHADER_NAME constant is present in source, create one
 */
function getShaderNameDefine(options) {
    const { id, source, stage } = options;
    const injectShaderName = id && source.indexOf('SHADER_NAME') === -1;
    return injectShaderName
        ? `
#define SHADER_NAME ${id}_${stage}

`
        : '';
}
/** Generates application defines from an object of key value pairs */
function getApplicationDefines(defines = {}) {
    let sourceText = '';
    for (const define in defines) {
        const value = defines[define];
        if (value || Number.isFinite(value)) {
            sourceText += `#define ${define.toUpperCase()} ${defines[define]}\n`;
        }
    }
    return sourceText;
}
/*
function getHookFunctions(
  hookFunctions: Record<string, HookFunction>,
  hookInjections: Record<string, Injection[]>
): string {
  let result = '';
  for (const hookName in hookFunctions) {
    const hookFunction = hookFunctions[hookName];
    result += `void ${hookFunction.signature} {\n`;
    if (hookFunction.header) {
      result += `  ${hookFunction.header}`;
    }
    if (hookInjections[hookName]) {
      const injections = hookInjections[hookName];
      injections.sort((a: {order: number}, b: {order: number}): number => a.order - b.order);
      for (const injection of injections) {
        result += `  ${injection.injection}\n`;
      }
    }
    if (hookFunction.footer) {
      result += `  ${hookFunction.footer}`;
    }
    result += '}\n';
  }

  return result;
}

function normalizeHookFunctions(hookFunctions: (string | HookFunction)[]): {
  vs: Record<string, HookFunction>;
  fs: Record<string, HookFunction>;
} {
  const result: {vs: Record<string, any>; fs: Record<string, any>} = {
    vs: {},
    fs: {}
  };

  hookFunctions.forEach((hookFunction: string | HookFunction) => {
    let opts: HookFunction;
    let hook: string;
    if (typeof hookFunction !== 'string') {
      opts = hookFunction;
      hook = opts.hook;
    } else {
      opts = {} as HookFunction;
      hook = hookFunction;
    }
    hook = hook.trim();
    const [stage, signature] = hook.split(':');
    const name = hook.replace(/\(.+/, '');
    if (stage !== 'vs' && stage !== 'fs') {
      throw new Error(stage);
    }
    result[stage][name] = Object.assign(opts, {signature});
  });

  return result;
}
*/


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getPlatformShaderDefines: () => (/* binding */ getPlatformShaderDefines)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Adds defines to help identify GPU architecture / platform */
function getPlatformShaderDefines(platformInfo) {
    switch (platformInfo?.gpu.toLowerCase()) {
        case 'apple':
            return `\
#define APPLE_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`;
        case 'nvidia':
            return `\
#define NVIDIA_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
`;
        case 'intel':
            return `\
#define INTEL_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`;
        case 'amd':
            // AMD Does not eliminate fp64 code
            return `\
#define AMD_GPU
`;
        default:
            // We don't know what GPU it is, could be that the GPU driver or
            // browser is not implementing UNMASKED_RENDERER constant and not
            // reporting a correct name
            return `\
#define DEFAULT_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/resolve-modules.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/resolve-modules.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TEST_EXPORTS: () => (/* binding */ TEST_EXPORTS),
/* harmony export */   getDependencyGraph: () => (/* binding */ getDependencyGraph),
/* harmony export */   resolveModules: () => (/* binding */ resolveModules)
/* harmony export */ });
/* harmony import */ var _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shader-module/shader-module-instance.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-instance.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Instantiate shader modules and esolve any dependencies
 */
function resolveModules(modules) {
    const instances = _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_0__.ShaderModuleInstance.instantiateModules(modules);
    return getShaderDependencies(instances);
}
/**
 * Takes a list of shader module names and returns a new list of
 * shader module names that includes all dependencies, sorted so
 * that modules that are dependencies of other modules come first.
 *
 * If the shader glsl code from the returned modules is concatenated
 * in the reverse order, it is guaranteed that all functions be resolved and
 * that all function and variable definitions come before use.
 *
 * @param modules - Array of modules (inline modules or module names)
 * @return - Array of modules
 */
function getShaderDependencies(modules) {
    const moduleMap = {};
    const moduleDepth = {};
    getDependencyGraph({ modules, level: 0, moduleMap, moduleDepth });
    // Return a reverse sort so that dependencies come before the modules that use them
    return Object.keys(moduleDepth)
        .sort((a, b) => moduleDepth[b] - moduleDepth[a])
        .map(name => moduleMap[name]);
}
/**
 * Recursively checks module dependencies to calculate dependency level of each module.
 *
 * @param options.modules - Array of modules
 * @param options.level - Current level
 * @param options.moduleMap -
 * @param options.moduleDepth - Current level
 * @return - Map of module name to its level
 */
// Adds another level of dependencies to the result map
function getDependencyGraph(options) {
    const { modules, level, moduleMap, moduleDepth } = options;
    if (level >= 5) {
        throw new Error('Possible loop in shader dependency graph');
    }
    // Update level on all current modules
    for (const module of modules) {
        moduleMap[module.name] = module;
        if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {
            moduleDepth[module.name] = level;
        }
    }
    // Recurse
    for (const module of modules) {
        if (module.dependencies) {
            getDependencyGraph({ modules: module.dependencies, level: level + 1, moduleMap, moduleDepth });
        }
    }
}
const TEST_EXPORTS = {
    getShaderDependencies,
    getDependencyGraph
};


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/select-shaders.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/select-shaders.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectShaders: () => (/* binding */ selectShaders)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Shader selection
 * @param device
 * @param props
 * @returns
 */
function selectShaders(props) {
    // If we have a source field, we have a single unified shader source
    if (props.source && props.platformInfo.type === 'webgpu') {
        const propsCopy = { ...props, vs: undefined, fs: undefined };
        return propsCopy;
    }
    if (!props.vs) {
        throw new Error('no vertex shader');
    }
    // Resolve WGSL vs GLSL
    const vs = getShaderSource(props.platformInfo, props.vs);
    let fs;
    if (props.fs) {
        fs = getShaderSource(props.platformInfo, props.fs);
    }
    return { ...props, vs, fs };
}
/** Create a shader from the different overloads */
function getShaderSource(platformInfo, shader) {
    // TODO - detect WGSL/GLSL and throw an error if not supported
    if (typeof shader === 'string') {
        return shader;
    }
    switch (platformInfo.type) {
        case 'webgpu':
            if (shader?.wgsl) {
                return shader.wgsl;
            }
            throw new Error('WebGPU does not support GLSL shaders');
        default:
            if (shader?.glsl) {
                return shader.glsl;
            }
            throw new Error('WebGL does not support WGSL shaders');
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShaderHooks: () => (/* binding */ getShaderHooks),
/* harmony export */   normalizeShaderHooks: () => (/* binding */ normalizeShaderHooks)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Generate hook source code */
function getShaderHooks(hookFunctions, hookInjections) {
    let result = '';
    for (const hookName in hookFunctions) {
        const hookFunction = hookFunctions[hookName];
        result += `void ${hookFunction.signature} {\n`;
        if (hookFunction.header) {
            result += `  ${hookFunction.header}`;
        }
        if (hookInjections[hookName]) {
            const injections = hookInjections[hookName];
            injections.sort((a, b) => a.order - b.order);
            for (const injection of injections) {
                result += `  ${injection.injection}\n`;
            }
        }
        if (hookFunction.footer) {
            result += `  ${hookFunction.footer}`;
        }
        result += '}\n';
    }
    return result;
}
/**
 * Parse string based hook functions
 * And split per shader
 */
function normalizeShaderHooks(hookFunctions) {
    const result = { vertex: {}, fragment: {} };
    for (const hookFunction of hookFunctions) {
        let opts;
        let hook;
        if (typeof hookFunction !== 'string') {
            opts = hookFunction;
            hook = opts.hook;
        }
        else {
            opts = {};
            hook = hookFunction;
        }
        hook = hook.trim();
        const [shaderStage, signature] = hook.split(':');
        const name = hook.replace(/\(.+/, '');
        const normalizedHook = Object.assign(opts, { signature });
        switch (shaderStage) {
            case 'vs':
                result.vertex[name] = normalizedHook;
                break;
            case 'fs':
                result.fragment[name] = normalizedHook;
                break;
            default:
                throw new Error(shaderStage);
        }
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DECLARATION_INJECT_MARKER: () => (/* binding */ DECLARATION_INJECT_MARKER),
/* harmony export */   combineInjects: () => (/* binding */ combineInjects),
/* harmony export */   injectShader: () => (/* binding */ injectShader),
/* harmony export */   normalizeInjections: () => (/* binding */ normalizeInjections)
/* harmony export */ });
/* harmony import */ var _module_injectors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../module-injectors.js */ "./node_modules/@luma.gl/shadertools/dist/module-injectors.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// TODO - experimental
const MODULE_INJECTORS = {
    vertex: _module_injectors_js__WEBPACK_IMPORTED_MODULE_0__.MODULE_INJECTORS_VS,
    fragment: _module_injectors_js__WEBPACK_IMPORTED_MODULE_0__.MODULE_INJECTORS_FS
};
const REGEX_START_OF_MAIN = /void\s+main\s*\([^)]*\)\s*\{\n?/; // Beginning of main
const REGEX_END_OF_MAIN = /}\n?[^{}]*$/; // End of main, assumes main is last function
const fragments = [];
const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';
/**
 *
 */
function normalizeInjections(injections) {
    const result = { vertex: {}, fragment: {} };
    for (const hook in injections) {
        let injection = injections[hook];
        const stage = getHookStage(hook);
        if (typeof injection === 'string') {
            injection = {
                order: 0,
                injection
            };
        }
        result[stage][hook] = injection;
    }
    return result;
}
function getHookStage(hook) {
    const type = hook.slice(0, 2);
    switch (type) {
        case 'vs':
            return 'vertex';
        case 'fs':
            return 'fragment';
        default:
            throw new Error(type);
    }
}
/**
// A minimal shader injection/templating system.
// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md
 * @param source
 * @param type
 * @param inject
 * @param injectStandardStubs
 * @returns
 */
// eslint-disable-next-line complexity
function injectShader(source, stage, inject, injectStandardStubs = false) {
    const isVertex = stage === 'vertex';
    for (const key in inject) {
        const fragmentData = inject[key];
        fragmentData.sort((a, b) => a.order - b.order);
        fragments.length = fragmentData.length;
        for (let i = 0, len = fragmentData.length; i < len; ++i) {
            fragments[i] = fragmentData[i].injection;
        }
        const fragmentString = `${fragments.join('\n')}\n`;
        switch (key) {
            // declarations are injected before the main function
            case 'vs:#decl':
                if (isVertex) {
                    source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);
                }
                break;
            // inject code at the beginning of the main function
            case 'vs:#main-start':
                if (isVertex) {
                    source = source.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
                }
                break;
            // inject code at the end of main function
            case 'vs:#main-end':
                if (isVertex) {
                    source = source.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
                }
                break;
            // declarations are injected before the main function
            case 'fs:#decl':
                if (!isVertex) {
                    source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);
                }
                break;
            // inject code at the beginning of the main function
            case 'fs:#main-start':
                if (!isVertex) {
                    source = source.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
                }
                break;
            // inject code at the end of main function
            case 'fs:#main-end':
                if (!isVertex) {
                    source = source.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
                }
                break;
            default:
                // TODO(Tarek): I think this usage should be deprecated.
                // inject code after key, leaving key in place
                source = source.replace(key, (match) => match + fragmentString);
        }
    }
    // Remove if it hasn't already been replaced
    source = source.replace(DECLARATION_INJECT_MARKER, '');
    // Finally, if requested, insert an automatic module injector chunk
    if (injectStandardStubs) {
        source = source.replace(/\}\s*$/, (match) => match + MODULE_INJECTORS[stage]);
    }
    return source;
}
// Takes an array of inject objects and combines them into one
function combineInjects(injects) {
    const result = {};
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Array.isArray(injects) && injects.length > 1);
    injects.forEach(inject => {
        for (const key in inject) {
            result[key] = result[key] ? `${result[key]}\n${inject[key]}` : inject[key];
        }
    });
    return result;
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-instance.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-instance.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ShaderModuleInstance: () => (/* binding */ ShaderModuleInstance)
/* harmony export */ });
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/assert.js */ "./node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
/* harmony import */ var _filters_prop_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../filters/prop-types.js */ "./node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js");
/* harmony import */ var _shader_assembly_shader_injections_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shader-assembly/shader-injections.js */ "./node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



let index = 1;
/** An initialized ShaderModule, ready to use with `assembleShaders()` */
class ShaderModuleInstance {
    name;
    vs;
    fs;
    getModuleUniforms;
    dependencies;
    deprecations;
    defines;
    injections;
    uniforms = {};
    uniformTypes = {};
    static instantiateModules(modules) {
        return modules.map((module) => {
            if (module instanceof ShaderModuleInstance) {
                return module;
            }
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(typeof module !== 'string', `Shader module use by name is deprecated. Import shader module '${JSON.stringify(module)}' and use it directly.`);
            if (!module.name) {
                // eslint-disable-next-line no-console
                console.warn('shader module has no name');
                module.name = `shader-module-${index++}`;
            }
            const moduleObject = new ShaderModuleInstance(module);
            moduleObject.dependencies = ShaderModuleInstance.instantiateModules(module.dependencies || []);
            return moduleObject;
        });
    }
    constructor(props) {
        const { name, vs, fs, dependencies = [], uniformTypes = {}, uniformPropTypes = {}, getUniforms, deprecations = [], defines = {}, inject = {} } = props;
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(typeof name === 'string');
        this.name = name;
        this.vs = vs;
        this.fs = fs;
        this.getModuleUniforms = getUniforms;
        this.dependencies = ShaderModuleInstance.instantiateModules(dependencies);
        this.deprecations = this._parseDeprecationDefinitions(deprecations);
        this.defines = defines;
        this.injections = (0,_shader_assembly_shader_injections_js__WEBPACK_IMPORTED_MODULE_1__.normalizeInjections)(inject);
        this.uniformTypes = uniformTypes;
        if (uniformPropTypes) {
            this.uniforms = (0,_filters_prop_types_js__WEBPACK_IMPORTED_MODULE_2__.makePropValidators)(uniformPropTypes);
        }
    }
    // Extracts the source code chunk for the specified shader type from the named shader module
    getModuleSource(stage) {
        let moduleSource;
        switch (stage) {
            case 'vertex':
                moduleSource = this.vs || '';
                break;
            case 'fragment':
                moduleSource = this.fs || '';
                break;
            default:
                (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
        }
        const moduleName = this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_');
        return `\
// ----- MODULE ${this.name} ---------------

#define MODULE_${moduleName}
${moduleSource}\


`;
    }
    getUniforms(userProps, uniforms) {
        if (this.getModuleUniforms) {
            return this.getModuleUniforms(userProps, uniforms);
        }
        // Build uniforms from the uniforms array
        return (0,_filters_prop_types_js__WEBPACK_IMPORTED_MODULE_2__.getValidatedProperties)(userProps, this.uniforms, this.name);
    }
    getDefines() {
        return this.defines;
    }
    // Warn about deprecated uniforms or functions
    checkDeprecations(shaderSource, log) {
        this.deprecations.forEach(def => {
            if (def.regex?.test(shaderSource)) {
                if (def.deprecated) {
                    log.deprecated(def.old, def.new)();
                }
                else {
                    log.removed(def.old, def.new)();
                }
            }
        });
    }
    _parseDeprecationDefinitions(deprecations) {
        deprecations.forEach(def => {
            switch (def.type) {
                case 'function':
                    def.regex = new RegExp(`\\b${def.old}\\(`);
                    break;
                default:
                    def.regex = new RegExp(`${def.type} ${def.old};`);
            }
        });
        return deprecations;
    }
    _defaultGetUniforms(opts = {}) {
        const uniforms = {};
        const propTypes = this.uniforms;
        for (const key in propTypes) {
            const propDef = propTypes[key];
            if (key in opts && !propDef.private) {
                if (propDef.validate) {
                    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);
                }
                uniforms[key] = opts[key];
            }
            else {
                uniforms[key] = propDef.value;
            }
        }
        return uniforms;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   transpileGLSLShader: () => (/* binding */ transpileGLSLShader)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// TRANSPILATION TABLES
/**
 * Transpiles GLSL 3.00 shader source code to target GLSL version (3.00 or 1.00)
 *
 * @note We always run transpiler even if same version e.g. 3.00 => 3.00
 * @note For texture sampling transpilation, apps need to use non-standard texture* calls in GLSL 3.00 source
 * RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md
 */
function transpileGLSLShader(source, stage) {
    const sourceGLSLVersion = Number(source.match(/^#version[ \t]+(\d+)/m)?.[1] || 100);
    if (sourceGLSLVersion !== 300) {
        // TODO - we splurge on a longer error message to help deck.gl custom layer developers
        throw new Error('luma.gl v9 only supports GLSL 3.00 shader sources');
    }
    switch (stage) {
        case 'vertex':
            source = convertShader(source, ES300_VERTEX_REPLACEMENTS);
            return source;
        case 'fragment':
            source = convertShader(source, ES300_FRAGMENT_REPLACEMENTS);
            return source;
        default:
            // Unknown shader stage
            throw new Error(stage);
    }
}
/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */
const ES300_REPLACEMENTS = [
    // Fix poorly formatted version directive
    [/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/, '#version 300 es\n'],
    // The individual `texture...()` functions were replaced with `texture()` overloads
    [/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g, 'textureLod('],
    [/\btexture(2D|2DProj|Cube)(EXT)?\(/g, 'texture(']
];
const ES300_VERTEX_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    // `attribute` keyword replaced with `in`
    [makeVariableTextRegExp('attribute'), 'in $1'],
    // `varying` keyword replaced with `out`
    [makeVariableTextRegExp('varying'), 'out $1']
];
/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */
const ES300_FRAGMENT_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    // `varying` keyword replaced with `in`
    [makeVariableTextRegExp('varying'), 'in $1']
];
function convertShader(source, replacements) {
    for (const [pattern, replacement] of replacements) {
        source = source.replace(pattern, replacement);
    }
    return source;
}
/**
 * Creates a regexp that tests for a specific variable type
 * @example
 *   should match:
 *     in float weight;
 *     out vec4 positions[2];
 *   should not match:
 *     void f(out float a, in float b) {}
 */
function makeVariableTextRegExp(qualifier) {
    return new RegExp(`\\b${qualifier}[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)`, 'g');
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js":
/*!********************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Recommendation is to ignore message but current test suite checks agains the
// message so keep it for now.
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'shadertools: assertion failed.');
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShaderLayoutFromWGSL: () => (/* binding */ getShaderLayoutFromWGSL)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var wgsl_reflect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wgsl_reflect */ "./node_modules/wgsl_reflect/wgsl_reflect.module.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Parse a ShaderLayout from WGSL shader source code.
 * @param source WGSL source code (can contain both @vertex and @fragment entry points)
 * @returns
 */
function getShaderLayoutFromWGSL(source) {
    const shaderLayout = { attributes: [], bindings: [] };
    let parsedWGSL;
    try {
        parsedWGSL = parseWGSL(source);
    }
    catch (error) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.error(error.message)();
        return shaderLayout;
    }
    for (const uniform of parsedWGSL.uniforms) {
        const members = [];
        for (const attribute of uniform.type?.members || []) {
            members.push({
                name: attribute.name,
                type: getType(attribute.type)
            });
        }
        shaderLayout.bindings.push({
            type: 'uniform',
            name: uniform.name,
            location: uniform.binding,
            // @ts-expect-error
            group: uniform.group,
            members
        });
    }
    const vertex = parsedWGSL.entry.vertex[0]; // "main"
    // Vertex shader inputs
    const attributeCount = vertex?.inputs.length || 0; // inputs to "main"
    for (let i = 0; i < attributeCount; i++) {
        const wgslAttribute = vertex.inputs[i];
        // locationType can be "builtin"
        if (wgslAttribute.locationType === 'location') {
            const type = getType(wgslAttribute.type);
            shaderLayout.attributes.push({
                name: wgslAttribute.name,
                location: Number(wgslAttribute.location),
                type
            });
        }
    }
    return shaderLayout;
}
/** Get a valid shader attribute type string from a wgsl-reflect type */
function getType(type) {
    return type.format ? `${type.name}<${type.format.name}>` : type.name;
}
function parseWGSL(source) {
    try {
        return new wgsl_reflect__WEBPACK_IMPORTED_MODULE_1__.WgslReflect(source);
    }
    catch (error) {
        if (error instanceof Error) {
            throw error;
        }
        let message = 'WGSL parse error';
        if (typeof error === 'object' && error?.message) {
            message += `: ${error.message} `;
        }
        if (typeof error === 'object' && error?.token) {
            message += error.token.line || '';
        }
        throw new Error(message, { cause: error });
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/module-injectors.js":
/*!********************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/module-injectors.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MODULE_INJECTORS_FS: () => (/* binding */ MODULE_INJECTORS_FS),
/* harmony export */   MODULE_INJECTORS_VS: () => (/* binding */ MODULE_INJECTORS_VS)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const MODULE_INJECTORS_VS = `\
#ifdef MODULE_LOGDEPTH
logdepth_adjustPosition(gl_Position);
#endif
`;
const MODULE_INJECTORS_FS = `\
#ifdef MODULE_MATERIAL
gl_FragColor = material_filterColor(gl_FragColor);
#endif
#ifdef MODULE_LIGHTING
gl_FragColor = lighting_filterColor(gl_FragColor);
#endif
#ifdef MODULE_FOG
gl_FragColor = fog_filterColor(gl_FragColor);
#endif
#ifdef MODULE_PICKING
gl_FragColor = picking_filterHighlightColor(gl_FragColor);
gl_FragColor = picking_filterPickingColor(gl_FragColor);
#endif
#ifdef MODULE_LOGDEPTH
logdepth_setFragDepth();
#endif
`;


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/lights/lights-glsl.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/lights/lights-glsl.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lightingShader: () => (/* binding */ lightingShader)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const lightingShader = `\
#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
vec3 color;
};
struct PointLight {
vec3 color;
vec3 position;
vec3 attenuation;
};
struct DirectionalLight {
vec3 color;
vec3 direction;
};
uniform AmbientLight lighting_uAmbientLight;
uniform PointLight lighting_uPointLight[MAX_LIGHTS];
uniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];
uniform int lighting_uPointLightCount;
uniform int lighting_uDirectionalLightCount;
uniform bool lighting_uEnabled;
float getPointLightAttenuation(PointLight pointLight, float distance) {
return pointLight.attenuation.x
+ pointLight.attenuation.y * distance
+ pointLight.attenuation.z * distance * distance;
}
#endif
`;


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/lights/lights.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/lights/lights.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lights: () => (/* binding */ lights)
/* harmony export */ });
/* harmony import */ var _lights_glsl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lights-glsl.js */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/lights/lights-glsl.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const INITIAL_MODULE_OPTIONS = {
    lightSources: {}
};
// Take color 0-255 and intensity as input and output 0.0-1.0 range
function convertColor(colorDef = {}) {
    const { color = [0, 0, 0], intensity = 1.0 } = colorDef;
    return color.map(component => (component * intensity) / 255.0);
}
function getLightSourceUniforms({ ambientLight, pointLights = [], directionalLights = [] }) {
    const lightSourceUniforms = {};
    if (ambientLight) {
        lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);
    }
    else {
        lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];
    }
    pointLights.forEach((pointLight, index) => {
        lightSourceUniforms[`lighting_uPointLight[${index}].color`] = convertColor(pointLight);
        lightSourceUniforms[`lighting_uPointLight[${index}].position`] = pointLight.position;
        lightSourceUniforms[`lighting_uPointLight[${index}].attenuation`] = pointLight.attenuation || [
            1, 0, 0
        ];
    });
    lightSourceUniforms.lighting_uPointLightCount = pointLights.length;
    directionalLights.forEach((directionalLight, index) => {
        lightSourceUniforms[`lighting_uDirectionalLight[${index}].color`] =
            convertColor(directionalLight);
        lightSourceUniforms[`lighting_uDirectionalLight[${index}].direction`] =
            directionalLight.direction;
    });
    lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;
    return lightSourceUniforms;
}
// eslint-disable-next-line complexity
function getUniforms(opts = INITIAL_MODULE_OPTIONS) {
    // Specify lights separately
    if ('lightSources' in opts) {
        const { ambientLight, pointLights, directionalLights } = opts.lightSources || {};
        const hasLights = ambientLight ||
            (pointLights && pointLights.length > 0) ||
            (directionalLights && directionalLights.length > 0);
        if (!hasLights) {
            return { lighting_uEnabled: false };
        }
        return Object.assign({}, getLightSourceUniforms({ ambientLight, pointLights, directionalLights }), {
            lighting_uEnabled: true
        });
    }
    // Support for array of lights. Type of light is detected by type field
    if ('lights' in opts) {
        const lightSources = { pointLights: [], directionalLights: [] };
        // @ts-expect-error
        for (const light of opts.lights || []) {
            switch (light.type) {
                case 'ambient':
                    // Note: Only uses last ambient light
                    // TODO - add ambient light sources on CPU?
                    lightSources.ambientLight = light;
                    break;
                case 'directional':
                    lightSources.directionalLights?.push(light);
                    break;
                case 'point':
                    lightSources.pointLights?.push(light);
                    break;
                default:
                // eslint-disable-next-line
                // console.warn(light.type);
            }
        }
        // Call the `opts.lightSources`` version
        return getUniforms({ lightSources });
    }
    return {};
}
/**
 * An implementation of PBR (Physically-Based Rendering).
 * Physically Based Shading of a microfacet surface defined by a glTF material.
 */
const lights = {
    name: 'lights',
    vs: _lights_glsl_js__WEBPACK_IMPORTED_MODULE_0__.lightingShader,
    fs: _lights_glsl_js__WEBPACK_IMPORTED_MODULE_0__.lightingShader,
    getUniforms,
    defines: {
        MAX_LIGHTS: 3
    }
};


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting-glsl.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting-glsl.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lightingShader: () => (/* binding */ lightingShader)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const lightingShader = `\
uniform float lighting_uAmbient;
uniform float lighting_uDiffuse;
uniform float lighting_uShininess;
uniform vec3  lighting_uSpecularColor;
vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
vec3 halfway_direction = normalize(light_direction + view_direction);
float lambertian = dot(light_direction, normal_worldspace);
float specular = 0.0;
if (lambertian > 0.0) {
float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
specular = pow(specular_angle, lighting_uShininess);
}
lambertian = max(lambertian, 0.0);
return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;
}
vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
vec3 lightColor = surfaceColor;
if (lighting_uEnabled) {
vec3 view_direction = normalize(cameraPosition - position_worldspace);
lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;
for (int i = 0; i < MAX_LIGHTS; i++) {
if (i >= lighting_uPointLightCount) {
break;
}
PointLight pointLight = lighting_uPointLight[i];
vec3 light_position_worldspace = pointLight.position;
vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
}
for (int i = 0; i < MAX_LIGHTS; i++) {
if (i >= lighting_uDirectionalLightCount) {
break;
}
DirectionalLight directionalLight = lighting_uDirectionalLight[i];
lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
}
}
return lightColor;
}
vec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
vec3 lightColor = vec3(0, 0, 0);
vec3 surfaceColor = vec3(0, 0, 0);
if (lighting_uEnabled) {
vec3 view_direction = normalize(cameraPosition - position_worldspace);
for (int i = 0; i < MAX_LIGHTS; i++) {
if (i >= lighting_uPointLightCount) {
break;
}
PointLight pointLight = lighting_uPointLight[i];
vec3 light_position_worldspace = pointLight.position;
vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
}
for (int i = 0; i < MAX_LIGHTS; i++) {
if (i >= lighting_uDirectionalLightCount) {
break;
}
DirectionalLight directionalLight = lighting_uDirectionalLight[i];
lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
}
}
return lightColor;
}
`;


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   gouraudLighting: () => (/* binding */ gouraudLighting),
/* harmony export */   phongLighting: () => (/* binding */ phongLighting)
/* harmony export */ });
/* harmony import */ var _lights_lights_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lights/lights.js */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/lights/lights.js");
/* harmony import */ var _phong_lighting_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./phong-lighting-glsl.js */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/phong-lighting/phong-lighting-glsl.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


const INITIAL_MODULE_OPTIONS = {};
function getMaterialUniforms(material) {
    const { ambient = 0.35, diffuse = 0.6, shininess = 32, specularColor = [30, 30, 30] } = material;
    return {
        lighting_uAmbient: ambient,
        lighting_uDiffuse: diffuse,
        lighting_uShininess: shininess,
        lighting_uSpecularColor: specularColor.map(x => x / 255)
    };
}
function getUniforms(opts = INITIAL_MODULE_OPTIONS) {
    if (!('material' in opts)) {
        return {};
    }
    const { material } = opts;
    if (!material) {
        return { lighting_uEnabled: false };
    }
    return getMaterialUniforms(material);
}
const gouraudLighting = {
    name: 'gouraud-lighting',
    dependencies: [_lights_lights_js__WEBPACK_IMPORTED_MODULE_0__.lights],
    vs: _phong_lighting_glsl_js__WEBPACK_IMPORTED_MODULE_1__.lightingShader,
    defines: {
        LIGHTING_VERTEX: 1
    },
    getUniforms
};
const phongLighting = {
    name: 'phong-lighting',
    dependencies: [_lights_lights_js__WEBPACK_IMPORTED_MODULE_0__.lights],
    fs: _phong_lighting_glsl_js__WEBPACK_IMPORTED_MODULE_1__.lightingShader,
    defines: {
        LIGHTING_FRAGMENT: 1
    },
    getUniforms
};


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-arithmetic-glsl.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-arithmetic-glsl.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fp64arithmeticShader: () => (/* binding */ fp64arithmeticShader)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const fp64arithmeticShader = `\
uniform float ONE;
vec2 split(float a) {
const float SPLIT = 4097.0;
float t = a * SPLIT;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
float a_hi = t * ONE - (t - a);
float a_lo = a * ONE - a_hi;
#else
float a_hi = t - (t - a);
float a_lo = a - a_hi;
#endif
return vec2(a_hi, a_lo);
}
vec2 split2(vec2 a) {
vec2 b = split(a.x);
b.y += a.y;
return b;
}
vec2 quickTwoSum(float a, float b) {
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
float sum = (a + b) * ONE;
float err = b - (sum - a) * ONE;
#else
float sum = a + b;
float err = b - (sum - a);
#endif
return vec2(sum, err);
}
vec2 twoSum(float a, float b) {
float s = (a + b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
float v = (s * ONE - a) * ONE;
float err = (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);
#else
float v = s - a;
float err = (a - (s - v)) + (b - v);
#endif
return vec2(s, err);
}
vec2 twoSub(float a, float b) {
float s = (a - b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
float v = (s * ONE - a) * ONE;
float err = (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);
#else
float v = s - a;
float err = (a - (s - v)) - (b + v);
#endif
return vec2(s, err);
}
vec2 twoSqr(float a) {
float prod = a * a;
vec2 a_fp64 = split(a);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
float err = ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *
a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;
#else
float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;
#endif
return vec2(prod, err);
}
vec2 twoProd(float a, float b) {
float prod = a * b;
vec2 a_fp64 = split(a);
vec2 b_fp64 = split(b);
float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +
a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;
return vec2(prod, err);
}
vec2 sum_fp64(vec2 a, vec2 b) {
vec2 s, t;
s = twoSum(a.x, b.x);
t = twoSum(a.y, b.y);
s.y += t.x;
s = quickTwoSum(s.x, s.y);
s.y += t.y;
s = quickTwoSum(s.x, s.y);
return s;
}
vec2 sub_fp64(vec2 a, vec2 b) {
vec2 s, t;
s = twoSub(a.x, b.x);
t = twoSub(a.y, b.y);
s.y += t.x;
s = quickTwoSum(s.x, s.y);
s.y += t.y;
s = quickTwoSum(s.x, s.y);
return s;
}
vec2 mul_fp64(vec2 a, vec2 b) {
vec2 prod = twoProd(a.x, b.x);
prod.y += a.x * b.y;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
prod = split2(prod);
#endif
prod = quickTwoSum(prod.x, prod.y);
prod.y += a.y * b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
prod = split2(prod);
#endif
prod = quickTwoSum(prod.x, prod.y);
return prod;
}
vec2 div_fp64(vec2 a, vec2 b) {
float xn = 1.0 / b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
vec2 yn = mul_fp64(a, vec2(xn, 0));
#else
vec2 yn = a * xn;
#endif
float diff = (sub_fp64(a, mul_fp64(b, yn))).x;
vec2 prod = twoProd(xn, diff);
return sum_fp64(yn, prod);
}
vec2 sqrt_fp64(vec2 a) {
if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);
if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);
float x = 1.0 / sqrt(a.x);
float yn = a.x * x;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
vec2 yn_sqr = twoSqr(yn) * ONE;
#else
vec2 yn_sqr = twoSqr(yn);
#endif
float diff = sub_fp64(a, yn_sqr).x;
vec2 prod = twoProd(x * 0.5, diff);
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
return sum_fp64(split(yn), prod);
#else
return sum_fp64(vec2(yn, 0.0), prod);
#endif
}
`;


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-functions-glsl.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-functions-glsl.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fp64functionShader: () => (/* binding */ fp64functionShader)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const fp64functionShader = `\
const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);
const vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);
const vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);
const vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);
const vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);
const vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);
const vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);
const vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);
const vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);
const vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);
const vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);
const vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);
const vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);
const vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);
const vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);
const vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);
const vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);
const vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);
const vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09);
const vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09);
const vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10);
const vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11);
const vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12);
const vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13);
const vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14);
const vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15);
float nint(float d) {
if (d == floor(d)) return d;
return floor(d + 0.5);
}
vec2 nint_fp64(vec2 a) {
float hi = nint(a.x);
float lo;
vec2 tmp;
if (hi == a.x) {
lo = nint(a.y);
tmp = quickTwoSum(hi, lo);
} else {
lo = 0.0;
if (abs(hi - a.x) == 0.5 && a.y < 0.0) {
hi -= 1.0;
}
tmp = vec2(hi, lo);
}
return tmp;
}
vec2 exp_fp64(vec2 a) {
const int k_power = 4;
const float k = 16.0;
const float inv_k = 1.0 / k;
if (a.x <= -88.0) return vec2(0.0, 0.0);
if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);
if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);
if (a.x == 1.0 && a.y == 0.0) return E_FP64;
float m = floor(a.x / LOG2_FP64.x + 0.5);
vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;
vec2 s, t, p;
p = mul_fp64(r, r);
s = sum_fp64(r, p * 0.5);
p = mul_fp64(p, r);
t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);
s = sum_fp64(s, t);
p = mul_fp64(p, r);
t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);
s = sum_fp64(s, t);
p = mul_fp64(p, r);
t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);
s = sum_fp64(s, t);
for (int i = 0; i < k_power; i++) {
s = sum_fp64(s * 2.0, mul_fp64(s, s));
}
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
s = sum_fp64(s, vec2(ONE, 0.0));
#else
s = sum_fp64(s, vec2(1.0, 0.0));
#endif
return s * pow(2.0, m);
}
vec2 log_fp64(vec2 a)
{
if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);
if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);
vec2 x = vec2(log(a.x), 0.0);
vec2 s;
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
s = vec2(ONE, 0.0);
#else
s = vec2(1.0, 0.0);
#endif
x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);
return x;
}
vec2 sin_taylor_fp64(vec2 a) {
vec2 r, s, t, x;
if (a.x == 0.0 && a.y == 0.0) {
return vec2(0.0, 0.0);
}
x = -mul_fp64(a, a);
s = a;
r = a;
r = mul_fp64(r, x);
t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);
s = sum_fp64(s, t);
r = mul_fp64(r, x);
t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);
s = sum_fp64(s, t);
return s;
}
vec2 cos_taylor_fp64(vec2 a) {
vec2 r, s, t, x;
if (a.x == 0.0 && a.y == 0.0) {
return vec2(1.0, 0.0);
}
x = -mul_fp64(a, a);
r = x;
s = sum_fp64(vec2(1.0, 0.0), r * 0.5);
r = mul_fp64(r, x);
t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);
s = sum_fp64(s, t);
r = mul_fp64(r, x);
t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);
s = sum_fp64(s, t);
return s;
}
void sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {
if (a.x == 0.0 && a.y == 0.0) {
sin_t = vec2(0.0, 0.0);
cos_t = vec2(1.0, 0.0);
}
sin_t = sin_taylor_fp64(a);
cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));
}
vec2 sin_fp64(vec2 a) {
if (a.x == 0.0 && a.y == 0.0) {
return vec2(0.0, 0.0);
}
vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));
vec2 t;
float q = floor(r.x / PI_2_FP64.x + 0.5);
int j = int(q);
if (j < -2 || j > 2) {
return vec2(0.0 / 0.0, 0.0 / 0.0);
}
t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));
q = floor(t.x / PI_16_FP64.x + 0.5);
int k = int(q);
if (k == 0) {
if (j == 0) {
return sin_taylor_fp64(t);
} else if (j == 1) {
return cos_taylor_fp64(t);
} else if (j == -1) {
return -cos_taylor_fp64(t);
} else {
return -sin_taylor_fp64(t);
}
}
int abs_k = int(abs(float(k)));
if (abs_k > 4) {
return vec2(0.0 / 0.0, 0.0 / 0.0);
} else {
t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
}
vec2 u = vec2(0.0, 0.0);
vec2 v = vec2(0.0, 0.0);
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
if (abs(float(abs_k) - 1.0) < 0.5) {
u = COS_TABLE_0_FP64;
v = SIN_TABLE_0_FP64;
} else if (abs(float(abs_k) - 2.0) < 0.5) {
u = COS_TABLE_1_FP64;
v = SIN_TABLE_1_FP64;
} else if (abs(float(abs_k) - 3.0) < 0.5) {
u = COS_TABLE_2_FP64;
v = SIN_TABLE_2_FP64;
} else if (abs(float(abs_k) - 4.0) < 0.5) {
u = COS_TABLE_3_FP64;
v = SIN_TABLE_3_FP64;
}
#else
if (abs_k == 1) {
u = COS_TABLE_0_FP64;
v = SIN_TABLE_0_FP64;
} else if (abs_k == 2) {
u = COS_TABLE_1_FP64;
v = SIN_TABLE_1_FP64;
} else if (abs_k == 3) {
u = COS_TABLE_2_FP64;
v = SIN_TABLE_2_FP64;
} else if (abs_k == 4) {
u = COS_TABLE_3_FP64;
v = SIN_TABLE_3_FP64;
}
#endif
vec2 sin_t, cos_t;
sincos_taylor_fp64(t, sin_t, cos_t);
vec2 result = vec2(0.0, 0.0);
if (j == 0) {
if (k > 0) {
result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
} else {
result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
}
} else if (j == 1) {
if (k > 0) {
result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
} else {
result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
}
} else if (j == -1) {
if (k > 0) {
result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
} else {
result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
}
} else {
if (k > 0) {
result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
} else {
result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
}
}
return result;
}
vec2 cos_fp64(vec2 a) {
if (a.x == 0.0 && a.y == 0.0) {
return vec2(1.0, 0.0);
}
vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));
vec2 t;
float q = floor(r.x / PI_2_FP64.x + 0.5);
int j = int(q);
if (j < -2 || j > 2) {
return vec2(0.0 / 0.0, 0.0 / 0.0);
}
t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));
q = floor(t.x / PI_16_FP64.x + 0.5);
int k = int(q);
if (k == 0) {
if (j == 0) {
return cos_taylor_fp64(t);
} else if (j == 1) {
return -sin_taylor_fp64(t);
} else if (j == -1) {
return sin_taylor_fp64(t);
} else {
return -cos_taylor_fp64(t);
}
}
int abs_k = int(abs(float(k)));
if (abs_k > 4) {
return vec2(0.0 / 0.0, 0.0 / 0.0);
} else {
t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
}
vec2 u = vec2(0.0, 0.0);
vec2 v = vec2(0.0, 0.0);
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
if (abs(float(abs_k) - 1.0) < 0.5) {
u = COS_TABLE_0_FP64;
v = SIN_TABLE_0_FP64;
} else if (abs(float(abs_k) - 2.0) < 0.5) {
u = COS_TABLE_1_FP64;
v = SIN_TABLE_1_FP64;
} else if (abs(float(abs_k) - 3.0) < 0.5) {
u = COS_TABLE_2_FP64;
v = SIN_TABLE_2_FP64;
} else if (abs(float(abs_k) - 4.0) < 0.5) {
u = COS_TABLE_3_FP64;
v = SIN_TABLE_3_FP64;
}
#else
if (abs_k == 1) {
u = COS_TABLE_0_FP64;
v = SIN_TABLE_0_FP64;
} else if (abs_k == 2) {
u = COS_TABLE_1_FP64;
v = SIN_TABLE_1_FP64;
} else if (abs_k == 3) {
u = COS_TABLE_2_FP64;
v = SIN_TABLE_2_FP64;
} else if (abs_k == 4) {
u = COS_TABLE_3_FP64;
v = SIN_TABLE_3_FP64;
}
#endif
vec2 sin_t, cos_t;
sincos_taylor_fp64(t, sin_t, cos_t);
vec2 result = vec2(0.0, 0.0);
if (j == 0) {
if (k > 0) {
result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
} else {
result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
}
} else if (j == 1) {
if (k > 0) {
result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
} else {
result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
}
} else if (j == -1) {
if (k > 0) {
result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
} else {
result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
}
} else {
if (k > 0) {
result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
} else {
result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
}
}
return result;
}
vec2 tan_fp64(vec2 a) {
vec2 sin_a;
vec2 cos_a;
if (a.x == 0.0 && a.y == 0.0) {
return vec2(0.0, 0.0);
}
vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));
vec2 t;
float q = floor(r.x / PI_2_FP64.x + 0.5);
int j = int(q);
if (j < -2 || j > 2) {
return vec2(0.0 / 0.0, 0.0 / 0.0);
}
t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));
q = floor(t.x / PI_16_FP64.x + 0.5);
int k = int(q);
int abs_k = int(abs(float(k)));
if (abs_k > 4) {
return vec2(0.0 / 0.0, 0.0 / 0.0);
} else {
t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
}
vec2 u = vec2(0.0, 0.0);
vec2 v = vec2(0.0, 0.0);
vec2 sin_t, cos_t;
vec2 s, c;
sincos_taylor_fp64(t, sin_t, cos_t);
if (k == 0) {
s = sin_t;
c = cos_t;
} else {
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
if (abs(float(abs_k) - 1.0) < 0.5) {
u = COS_TABLE_0_FP64;
v = SIN_TABLE_0_FP64;
} else if (abs(float(abs_k) - 2.0) < 0.5) {
u = COS_TABLE_1_FP64;
v = SIN_TABLE_1_FP64;
} else if (abs(float(abs_k) - 3.0) < 0.5) {
u = COS_TABLE_2_FP64;
v = SIN_TABLE_2_FP64;
} else if (abs(float(abs_k) - 4.0) < 0.5) {
u = COS_TABLE_3_FP64;
v = SIN_TABLE_3_FP64;
}
#else
if (abs_k == 1) {
u = COS_TABLE_0_FP64;
v = SIN_TABLE_0_FP64;
} else if (abs_k == 2) {
u = COS_TABLE_1_FP64;
v = SIN_TABLE_1_FP64;
} else if (abs_k == 3) {
u = COS_TABLE_2_FP64;
v = SIN_TABLE_2_FP64;
} else if (abs_k == 4) {
u = COS_TABLE_3_FP64;
v = SIN_TABLE_3_FP64;
}
#endif
if (k > 0) {
s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
} else {
s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
}
}
if (j == 0) {
sin_a = s;
cos_a = c;
} else if (j == 1) {
sin_a = c;
cos_a = -s;
} else if (j == -1) {
sin_a = -c;
cos_a = s;
} else {
sin_a = -s;
cos_a = -c;
}
return div_fp64(sin_a, cos_a);
}
vec2 radians_fp64(vec2 degree) {
return mul_fp64(degree, PI_180_FP64);
}
vec2 mix_fp64(vec2 a, vec2 b, float x) {
vec2 range = sub_fp64(b, a);
return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}
void vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
out_val[0] = sum_fp64(a[0], b[0]);
out_val[1] = sum_fp64(a[1], b[1]);
}
void vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
out_val[0] = sub_fp64(a[0], b[0]);
out_val[1] = sub_fp64(a[1], b[1]);
}
void vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
out_val[0] = mul_fp64(a[0], b[0]);
out_val[1] = mul_fp64(a[1], b[1]);
}
void vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
out_val[0] = div_fp64(a[0], b[0]);
out_val[1] = div_fp64(a[1], b[1]);
}
void vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {
vec2 range[2];
vec2_sub_fp64(y, x, range);
vec2 portion[2];
portion[0] = range[0] * a;
portion[1] = range[1] * a;
vec2_sum_fp64(x, portion, out_val);
}
vec2 vec2_length_fp64(vec2 x[2]) {
return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));
}
void vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {
vec2 length = vec2_length_fp64(x);
vec2 length_vec2[2];
length_vec2[0] = length;
length_vec2[1] = length;
vec2_div_fp64(x, length_vec2, out_val);
}
vec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {
vec2 diff[2];
vec2_sub_fp64(x, y, diff);
return vec2_length_fp64(diff);
}
vec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {
vec2 v[2];
v[0] = mul_fp64(a[0], b[0]);
v[1] = mul_fp64(a[1], b[1]);
return sum_fp64(v[0], v[1]);
}
void vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
for (int i = 0; i < 3; i++) {
out_val[i] = sum_fp64(a[i], b[i]);
}
}
void vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
for (int i = 0; i < 3; i++) {
out_val[i] = sum_fp64(a[i], b[i]);
}
}
vec2 vec3_length_fp64(vec2 x[3]) {
return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),
mul_fp64(x[2], x[2])));
}
vec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {
vec2 diff[3];
vec3_sub_fp64(x, y, diff);
return vec3_length_fp64(diff);
}
void vec4_fp64(vec4 a, out vec2 out_val[4]) {
out_val[0].x = a[0];
out_val[0].y = 0.0;
out_val[1].x = a[1];
out_val[1].y = 0.0;
out_val[2].x = a[2];
out_val[2].y = 0.0;
out_val[3].x = a[3];
out_val[3].y = 0.0;
}
void vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {
out_val[0] = mul_fp64(a[0], b);
out_val[1] = mul_fp64(a[1], b);
out_val[2] = mul_fp64(a[2], b);
out_val[3] = mul_fp64(a[3], b);
}
void vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {
for (int i = 0; i < 4; i++) {
out_val[i] = sum_fp64(a[i], b[i]);
}
}
void vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {
vec2 v[4];
v[0] = mul_fp64(a[0], b[0]);
v[1] = mul_fp64(a[1], b[1]);
v[2] = mul_fp64(a[2], b[2]);
v[3] = mul_fp64(a[3], b[3]);
out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));
}
void mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {
vec2 tmp[4];
for (int i = 0; i < 4; i++)
{
for (int j = 0; j < 4; j++)
{
tmp[j] = b[j + i * 4];
}
vec4_dot_fp64(a, tmp, out_val[i]);
}
}
`;


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-utils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fp64LowPart: () => (/* binding */ fp64LowPart),
/* harmony export */   fp64ify: () => (/* binding */ fp64ify),
/* harmony export */   fp64ifyMatrix4: () => (/* binding */ fp64ifyMatrix4)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Calculate WebGL 64 bit float
 * @param a  - the input float number
 * @param out - the output array. If not supplied, a new array is created.
 * @param startIndex - the index in the output array to fill from. Default 0.
 * @returns - the fp64 representation of the input number
 */
function fp64ify(a, out = [], startIndex = 0) {
    const hiPart = Math.fround(a);
    const loPart = a - hiPart;
    out[startIndex] = hiPart;
    out[startIndex + 1] = loPart;
    return out;
}
/**
 * Calculate the low part of a WebGL 64 bit float
 * @param a the input float number
 * @returns the lower 32 bit of the number
 */
function fp64LowPart(a) {
    return a - Math.fround(a);
}
/**
 * Calculate WebGL 64 bit matrix (transposed "Float64Array")
 * @param matrix  the input matrix
 * @returns the fp64 representation of the input matrix
 */
function fp64ifyMatrix4(matrix) {
    // Transpose the projection matrix to column major for GLSL.
    const matrixFP64 = new Float32Array(32);
    for (let i = 0; i < 4; ++i) {
        for (let j = 0; j < 4; ++j) {
            const index = i * 4 + j;
            fp64ify(matrix[j * 4 + i], matrixFP64, index * 2);
        }
    }
    return matrixFP64;
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fp64: () => (/* binding */ fp64),
/* harmony export */   fp64LowPart: () => (/* reexport safe */ _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64LowPart),
/* harmony export */   fp64arithmetic: () => (/* binding */ fp64arithmetic),
/* harmony export */   fp64ify: () => (/* reexport safe */ _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64ify),
/* harmony export */   fp64ifyMatrix4: () => (/* reexport safe */ _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64ifyMatrix4)
/* harmony export */ });
/* harmony import */ var _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fp64-utils.js */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-utils.js");
/* harmony import */ var _fp64_arithmetic_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fp64-arithmetic-glsl.js */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-arithmetic-glsl.js");
/* harmony import */ var _fp64_functions_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fp64-functions-glsl.js */ "./node_modules/@luma.gl/shadertools/dist/modules-webgl1/math/fp64/fp64-functions-glsl.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



const CONST_UNIFORMS = {
    // Used in LUMA_FP64_CODE_ELIMINATION_WORKAROUND
    ONE: 1.0
};

function getUniforms() {
    return CONST_UNIFORMS;
}
/**
 * 64bit arithmetic: add, sub, mul, div (small subset of fp64 module)
 */
const fp64arithmetic = {
    name: 'fp64-arithmetic',
    vs: _fp64_arithmetic_glsl_js__WEBPACK_IMPORTED_MODULE_1__.fp64arithmeticShader,
    getUniforms,
    fp64ify: _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64ify,
    fp64LowPart: _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64LowPart,
    fp64ifyMatrix4: _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64ifyMatrix4
};
/**
 * Full 64 bit math library
 */
const fp64 = {
    name: 'fp64',
    vs: _fp64_functions_glsl_js__WEBPACK_IMPORTED_MODULE_2__.fp64functionShader,
    dependencies: [fp64arithmetic],
    // Additional Functions
    fp64ify: _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64ify,
    fp64LowPart: _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64LowPart,
    fp64ifyMatrix4: _fp64_utils_js__WEBPACK_IMPORTED_MODULE_0__.fp64ifyMatrix4
};


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules/engine/picking/picking.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules/engine/picking/picking.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   picking: () => (/* binding */ picking)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// cyan color
const DEFAULT_HIGHLIGHT_COLOR = new Float32Array([0, 1, 1, 1]);
const vs = `\
uniform pickingUniforms {
float isActive;
float isAttribute;
float isHighlightActive;
float useFloatColors;
vec3 highlightedObjectColor;
vec4 highlightColor;
} picking;
out vec4 picking_vRGBcolor_Avalid;
vec3 picking_normalizeColor(vec3 color) {
return picking.useFloatColors > 0.5 ? color : color / 255.0;
}
vec4 picking_normalizeColor(vec4 color) {
return picking.useFloatColors > 0.5 ? color : color / 255.0;
}
bool picking_isColorZero(vec3 color) {
return dot(color, vec3(1.0)) < 0.00001;
}
bool picking_isColorValid(vec3 color) {
return dot(color, vec3(1.0)) > 0.00001;
}
bool isVertexHighlighted(vec3 vertexColor) {
vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
return
bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}
void picking_setPickingColor(vec3 pickingColor) {
pickingColor = picking_normalizeColor(pickingColor);
if (bool(picking.isActive)) {
picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));
if (!bool(picking.isAttribute)) {
picking_vRGBcolor_Avalid.rgb = pickingColor;
}
} else {
picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
}
}
void picking_setPickingAttribute(float value) {
if (bool(picking.isAttribute)) {
picking_vRGBcolor_Avalid.r = value;
}
}
void picking_setPickingAttribute(vec2 value) {
if (bool(picking.isAttribute)) {
picking_vRGBcolor_Avalid.rg = value;
}
}
void picking_setPickingAttribute(vec3 value) {
if (bool(picking.isAttribute)) {
picking_vRGBcolor_Avalid.rgb = value;
}
}
`;
const fs = `\
uniform pickingUniforms {
float isActive;
float isAttribute;
float isHighlightActive;
float useFloatColors;
vec3 highlightedObjectColor;
vec4 highlightColor;
} picking;
in vec4 picking_vRGBcolor_Avalid;
vec4 picking_filterHighlightColor(vec4 color) {
if (picking.isActive > 0.5) {
return color;
}
bool selected = bool(picking_vRGBcolor_Avalid.a);
if (selected) {
float highLightAlpha = picking.highlightColor.a;
float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
float highLightRatio = highLightAlpha / blendedAlpha;
vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
return vec4(blendedRGB, blendedAlpha);
} else {
return color;
}
}
vec4 picking_filterPickingColor(vec4 color) {
if (bool(picking.isActive)) {
if (picking_vRGBcolor_Avalid.a == 0.0) {
discard;
}
return picking_vRGBcolor_Avalid;
}
return color;
}
vec4 picking_filterColor(vec4 color) {
vec4 highlightColor = picking_filterHighlightColor(color);
return picking_filterPickingColor(highlightColor);
}
`;
/**
 * Provides support for color-coding-based picking and highlighting.
 * In particular, supports picking a specific instance in an instanced
 * draw call and highlighting an instance based on its picking color,
 * and correspondingly, supports picking and highlighting groups of
 * primitives with the same picking color in non-instanced draw-calls
 */
const picking = {
    name: 'picking',
    vs,
    fs,
    uniformTypes: {
        isActive: 'f32',
        isAttribute: 'f32',
        isHighlightActive: 'f32',
        useFloatColors: 'f32',
        highlightedObjectColor: 'vec3<f32>',
        highlightColor: 'vec4<f32>'
    },
    defaultUniforms: {
        isActive: false,
        isAttribute: false,
        isHighlightActive: false,
        useFloatColors: true,
        highlightedObjectColor: new Float32Array([0, 0, 0]),
        highlightColor: DEFAULT_HIGHLIGHT_COLOR
    },
    getUniforms
};
function getUniforms(opts = {}, prevUniforms) {
    const uniforms = {};
    if (opts.highlightedObjectColor === undefined) {
        // Unless highlightedObjectColor explicitly null or set, do not update state
    }
    else if (opts.highlightedObjectColor === null) {
        uniforms.isHighlightActive = false;
    }
    else {
        uniforms.isHighlightActive = true;
        const highlightedObjectColor = opts.highlightedObjectColor.slice(0, 3);
        uniforms.highlightedObjectColor = highlightedObjectColor;
    }
    if (opts.highlightColor) {
        const color = Array.from(opts.highlightColor, x => x / 255);
        if (!Number.isFinite(color[3])) {
            color[3] = 1;
        }
        uniforms.highlightColor = color;
    }
    if (opts.isActive !== undefined) {
        uniforms.isActive = Boolean(opts.isActive);
        uniforms.isAttribute = Boolean(opts.isAttribute);
    }
    if (opts.useFloatColors !== undefined) {
        uniforms.useFloatColors = Boolean(opts.useFloatColors);
    }
    return uniforms;
}


/***/ }),

/***/ "./node_modules/@luma.gl/shadertools/dist/modules/math/fp32/fp32.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@luma.gl/shadertools/dist/modules/math/fp32/fp32.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fp32: () => (/* binding */ fp32)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// import {ShaderModule} from '../../types';
const fp32shader = `\
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND
const float TWO_PI = 6.2831854820251465;
const float PI_2 = 1.5707963705062866;
const float PI_16 = 0.1963495463132858;
const float SIN_TABLE_0 = 0.19509032368659973;
const float SIN_TABLE_1 = 0.3826834261417389;
const float SIN_TABLE_2 = 0.5555702447891235;
const float SIN_TABLE_3 = 0.7071067690849304;
const float COS_TABLE_0 = 0.9807852506637573;
const float COS_TABLE_1 = 0.9238795042037964;
const float COS_TABLE_2 = 0.8314695954322815;
const float COS_TABLE_3 = 0.7071067690849304;
const float INVERSE_FACTORIAL_3 = 1.666666716337204e-01;
const float INVERSE_FACTORIAL_5 = 8.333333767950535e-03;
const float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04;
const float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06;
float sin_taylor_fp32(float a) {
float r, s, t, x;
if (a == 0.0) {
return 0.0;
}
x = -a * a;
s = a;
r = a;
r = r * x;
t = r * INVERSE_FACTORIAL_3;
s = s + t;
r = r * x;
t = r * INVERSE_FACTORIAL_5;
s = s + t;
r = r * x;
t = r * INVERSE_FACTORIAL_7;
s = s + t;
r = r * x;
t = r * INVERSE_FACTORIAL_9;
s = s + t;
return s;
}
void sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {
if (a == 0.0) {
sin_t = 0.0;
cos_t = 1.0;
}
sin_t = sin_taylor_fp32(a);
cos_t = sqrt(1.0 - sin_t * sin_t);
}
float tan_taylor_fp32(float a) {
float sin_a;
float cos_a;
if (a == 0.0) {
return 0.0;
}
float z = floor(a / TWO_PI);
float r = a - TWO_PI * z;
float t;
float q = floor(r / PI_2 + 0.5);
int j = int(q);
if (j < -2 || j > 2) {
return 1.0 / 0.0;
}
t = r - PI_2 * q;
q = floor(t / PI_16 + 0.5);
int k = int(q);
int abs_k = int(abs(float(k)));
if (abs_k > 4) {
return 1.0 / 0.0;
} else {
t = t - PI_16 * q;
}
float u = 0.0;
float v = 0.0;
float sin_t, cos_t;
float s, c;
sincos_taylor_fp32(t, sin_t, cos_t);
if (k == 0) {
s = sin_t;
c = cos_t;
} else {
if (abs(float(abs_k) - 1.0) < 0.5) {
u = COS_TABLE_0;
v = SIN_TABLE_0;
} else if (abs(float(abs_k) - 2.0) < 0.5) {
u = COS_TABLE_1;
v = SIN_TABLE_1;
} else if (abs(float(abs_k) - 3.0) < 0.5) {
u = COS_TABLE_2;
v = SIN_TABLE_2;
} else if (abs(float(abs_k) - 4.0) < 0.5) {
u = COS_TABLE_3;
v = SIN_TABLE_3;
}
if (k > 0) {
s = u * sin_t + v * cos_t;
c = u * cos_t - v * sin_t;
} else {
s = u * sin_t - v * cos_t;
c = u * cos_t + v * sin_t;
}
}
if (j == 0) {
sin_a = s;
cos_a = c;
} else if (j == 1) {
sin_a = c;
cos_a = -s;
} else if (j == -1) {
sin_a = -c;
cos_a = s;
} else {
sin_a = -s;
cos_a = -c;
}
return sin_a / cos_a;
}
#endif
float tan_fp32(float a) {
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND
return tan_taylor_fp32(a);
#else
return tan(a);
#endif
}
`;
/**
 * 32 bit math library (fixups for GPUs)
 */
const fp32 = {
    name: 'fp32',
    vs: fp32shader
};


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertCompareFunction: () => (/* binding */ convertCompareFunction),
/* harmony export */   convertToCompareFunction: () => (/* binding */ convertToCompareFunction),
/* harmony export */   setDeviceParameters: () => (/* binding */ setDeviceParameters),
/* harmony export */   withDeviceAndGLParameters: () => (/* binding */ withDeviceAndGLParameters),
/* harmony export */   withDeviceParameters: () => (/* binding */ withDeviceParameters),
/* harmony export */   withGLParameters: () => (/* binding */ withGLParameters)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/state-tracker/track-context-state.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
/* harmony import */ var _context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/parameters/unified-parameter-api.js */ "./node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/* eslint-disable no-unused-expressions */ // For expression ? gl.enable() : gl.disable()
/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 */
function withDeviceAndGLParameters(device, parameters, glParameters, func) {
    if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.isObjectEmpty)(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(device);
    }
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    const webglDevice = device;
    (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(webglDevice.gl);
    try {
        setDeviceParameters(device, parameters);
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__.setGLParameters)(webglDevice.gl, glParameters);
        return func(device);
    }
    finally {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(webglDevice.gl);
    }
}
/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 * @deprecated use withDeviceParameters instead
 */
function withGLParameters(device, parameters, func) {
    if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.isObjectEmpty)(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(device);
    }
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    const webglDevice = device;
    (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(webglDevice.gl);
    try {
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__.setGLParameters)(webglDevice.gl, parameters);
        return func(device);
    }
    finally {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(webglDevice.gl);
    }
}
/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 */
function withDeviceParameters(device, parameters, func) {
    if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.isObjectEmpty)(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(device);
    }
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    // @ts-expect-error
    (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(device.gl);
    try {
        setDeviceParameters(device, parameters);
        return func(device);
    }
    finally {
        // @ts-expect-error
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(device.gl);
    }
}
/** Set WebGPU Style Parameters */
function setDeviceParameters(device, parameters) {
    const webglDevice = device;
    const { gl } = webglDevice;
    // RASTERIZATION SETTINGS
    if (parameters.cullMode) {
        switch (parameters.cullMode) {
            case 'none':
                gl.disable(2884);
                break;
            case 'front':
                gl.enable(2884);
                gl.cullFace(1028);
                break;
            case 'back':
                gl.enable(2884);
                gl.cullFace(1029);
                break;
        }
    }
    if (parameters.frontFace) {
        gl.frontFace(map('frontFace', parameters.frontFace, {
            ccw: 2305,
            cw: 2304
        }));
    }
    if (parameters.unclippedDepth) {
        if (device.features.has('depth-clip-control')) {
            // EXT_depth_clamp
            gl.enable(34383);
        }
    }
    if (parameters.depthBias !== undefined) {
        gl.enable(32823);
        gl.polygonOffset(parameters.depthBias, parameters.depthBiasSlopeScale || 0);
    }
    // depthBiasSlopeScale: {
    //   // Handled by depthBias
    // },
    // WEBGL EXTENSIONS
    if (parameters.provokingVertex) {
        if (device.features.has('provoking-vertex-webgl')) {
            const extensions = webglDevice.getExtension('WEBGL_provoking_vertex');
            const ext = extensions.WEBGL_provoking_vertex;
            const vertex = map('provokingVertex', parameters.provokingVertex, {
                first: 36429,
                last: 36430
            });
            ext?.provokingVertexWEBGL(vertex);
        }
    }
    if (parameters.polygonMode || parameters.polygonOffsetLine) {
        if (device.features.has('polygon-mode-webgl')) {
            if (parameters.polygonMode) {
                const extensions = webglDevice.getExtension('WEBGL_polygon_mode');
                const ext = extensions.WEBGL_polygon_mode;
                const mode = map('polygonMode', parameters.polygonMode, {
                    fill: 6914,
                    line: 6913
                });
                ext?.polygonModeWEBGL(1028, mode);
                ext?.polygonModeWEBGL(1029, mode);
            }
            if (parameters.polygonOffsetLine) {
                gl.enable(10754);
            }
        }
    }
    if (device.features.has('shader-clip-cull-distance-webgl')) {
        if (parameters.clipDistance0) {
            gl.enable(12288);
        }
        if (parameters.clipDistance1) {
            gl.enable(12289);
        }
        if (parameters.clipDistance2) {
            gl.enable(12290);
        }
        if (parameters.clipDistance3) {
            gl.enable(12291);
        }
        if (parameters.clipDistance4) {
            gl.enable(12292);
        }
        if (parameters.clipDistance5) {
            gl.enable(12293);
        }
        if (parameters.clipDistance6) {
            gl.enable(12294);
        }
        if (parameters.clipDistance7) {
            gl.enable(12295);
        }
    }
    // DEPTH STENCIL
    if (parameters.depthWriteEnabled !== undefined) {
        gl.depthMask(mapBoolean('depthWriteEnabled', parameters.depthWriteEnabled));
    }
    if (parameters.depthCompare) {
        parameters.depthCompare !== 'always' ? gl.enable(2929) : gl.disable(2929);
        gl.depthFunc(convertCompareFunction('depthCompare', parameters.depthCompare));
    }
    if (parameters.stencilWriteMask) {
        const mask = parameters.stencilWriteMask;
        gl.stencilMaskSeparate(1028, mask);
        gl.stencilMaskSeparate(1029, mask);
    }
    if (parameters.stencilReadMask) {
        // stencilReadMask is handle inside stencil***Compare.
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.log.warn('stencilReadMask not supported under WebGL');
    }
    if (parameters.stencilCompare) {
        const mask = parameters.stencilReadMask || 0xffffffff;
        const glValue = convertCompareFunction('depthCompare', parameters.stencilCompare);
        // TODO - ensure back doesn't overwrite
        parameters.stencilCompare !== 'always'
            ? gl.enable(2960)
            : gl.disable(2960);
        gl.stencilFuncSeparate(1028, glValue, 0, mask);
        gl.stencilFuncSeparate(1029, glValue, 0, mask);
    }
    if (parameters.stencilPassOperation &&
        parameters.stencilFailOperation &&
        parameters.stencilDepthFailOperation) {
        const dppass = convertStencilOperation('stencilPassOperation', parameters.stencilPassOperation);
        const sfail = convertStencilOperation('stencilFailOperation', parameters.stencilFailOperation);
        const dpfail = convertStencilOperation('stencilDepthFailOperation', parameters.stencilDepthFailOperation);
        gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
        gl.stencilOpSeparate(1029, sfail, dpfail, dppass);
    }
    // stencilDepthFailOperation() {
    //   // handled by stencilPassOperation
    // },
    // stencilFailOperation() {
    //   // handled by stencilPassOperation
    // },
    // COLOR STATE
    if (parameters.blendColorOperation || parameters.blendAlphaOperation) {
        gl.enable(3042);
        const colorEquation = convertBlendOperationToEquation('blendColorOperation', parameters.blendColorOperation || 'add');
        const alphaEquation = convertBlendOperationToEquation('blendAlphaOperation', parameters.blendAlphaOperation || 'add');
        gl.blendEquationSeparate(colorEquation, alphaEquation);
        const colorSrcFactor = convertBlendFactorToFunction('blendColorSrcFactor', parameters.blendColorSrcFactor || 'one');
        const colorDstFactor = convertBlendFactorToFunction('blendColorDstFactor', parameters.blendColorDstFactor || 'zero');
        const alphaSrcFactor = convertBlendFactorToFunction('blendAlphaSrcFactor', parameters.blendAlphaSrcFactor || 'one');
        const alphaDstFactor = convertBlendFactorToFunction('blendAlphaDstFactor', parameters.blendAlphaDstFactor || 'zero');
        gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);
    }
}
/*
      rasterizationState: {
        cullMode: "back",
      },

      depthStencilState: {
        depthWriteEnabled: true,
        depthCompare: "less",
        format: "depth24plus-stencil8",
      },

      colorStates: [
        {
          format: "bgra8unorm",
          // colorBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;
          // colorBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;
          // alphaBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;
          // alphaBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;
        },
      ],
    });
*/
function convertCompareFunction(parameter, value) {
    return map(parameter, value, {
        never: 512,
        less: 513,
        equal: 514,
        'less-equal': 515,
        greater: 516,
        'not-equal': 517,
        'greater-equal': 518,
        always: 519
    });
}
function convertToCompareFunction(parameter, value) {
    return map(parameter, value, {
        [512]: 'never',
        [513]: 'less',
        [514]: 'equal',
        [515]: 'less-equal',
        [516]: 'greater',
        [517]: 'not-equal',
        [518]: 'greater-equal',
        [519]: 'always'
    });
}
function convertStencilOperation(parameter, value) {
    return map(parameter, value, {
        keep: 7680,
        zero: 0,
        replace: 7681,
        invert: 5386,
        'increment-clamp': 7682,
        'decrement-clamp': 7683,
        'increment-wrap': 34055,
        'decrement-wrap': 34056
    });
}
function convertBlendOperationToEquation(parameter, value) {
    return map(parameter, value, {
        add: 32774,
        subtract: 32778,
        'reverse-subtract': 32779,
        min: 32775,
        max: 32776
    });
}
function convertBlendFactorToFunction(parameter, value) {
    return map(parameter, value, {
        one: 1,
        zero: 0,
        'src-color': 768,
        'one-minus-src-color': 769,
        'dst-color': 774,
        'one-minus-dst-color': 775,
        'src-alpha': 770,
        'one-minus-src-alpha': 771,
        'dst-alpha': 772,
        'one-minus-dst-alpha': 773,
        'src-alpha-saturated': 776,
        'constant-color': 32769,
        'one-minus-constant-color': 32770,
        'constant-alpha': 32771,
        'one-minus-constant-alpha': 32772
    });
}
function message(parameter, value) {
    return `Illegal parameter ${value} for ${parameter}`;
}
function map(parameter, value, valueMap) {
    if (!(value in valueMap)) {
        throw new Error(message(parameter, value));
    }
    return valueMap[value];
}
function mapBoolean(parameter, value) {
    return value;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertSamplerParametersToWebGL: () => (/* binding */ convertSamplerParametersToWebGL)
/* harmony export */ });
/* harmony import */ var _device_parameters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./device-parameters.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Convert WebGPU-style sampler props to WebGL
 * @param props
 * @returns
 */
function convertSamplerParametersToWebGL(props) {
    const params = {};
    if (props.addressModeU) {
        params[10242] = convertAddressMode(props.addressModeU);
    }
    if (props.addressModeV) {
        params[10243] = convertAddressMode(props.addressModeV);
    }
    if (props.addressModeW) {
        params[32882] = convertAddressMode(props.addressModeW);
    }
    if (props.magFilter) {
        params[10240] = convertMaxFilterMode(props.magFilter);
    }
    if (props.minFilter || props.mipmapFilter) {
        // TODO - arbitrary choice of linear?
        params[10241] = convertMinFilterMode(props.minFilter || 'linear', props.mipmapFilter);
    }
    if (props.lodMinClamp !== undefined) {
        params[33082] = props.lodMinClamp;
    }
    if (props.lodMaxClamp !== undefined) {
        params[33083] = props.lodMaxClamp;
    }
    if (props.type === 'comparison-sampler') {
        // Setting prop.compare turns this into a comparison sampler
        params[34892] = 34894;
    }
    if (props.compare) {
        params[34893] = (0,_device_parameters_js__WEBPACK_IMPORTED_MODULE_0__.convertCompareFunction)('compare', props.compare);
    }
    // Note depends on WebGL extension
    if (props.maxAnisotropy) {
        params[34046] = props.maxAnisotropy;
    }
    return params;
}
// HELPERS
/** Convert address more */
function convertAddressMode(addressMode) {
    switch (addressMode) {
        case 'clamp-to-edge':
            return 33071;
        case 'repeat':
            return 10497;
        case 'mirror-repeat':
            return 33648;
    }
}
function convertMaxFilterMode(maxFilter) {
    switch (maxFilter) {
        case 'nearest':
            return 9728;
        case 'linear':
            return 9729;
    }
}
/**
 * WebGPU has separate min filter and mipmap filter,
 * WebGL is combined and effectively offers 6 options
 */
function convertMinFilterMode(minFilter, mipmapFilter) {
    if (!mipmapFilter) {
        return convertMaxFilterMode(minFilter);
    }
    switch (minFilter) {
        case 'nearest':
            return mipmapFilter === 'nearest' ? 9984 : 9986;
        case 'linear':
            return mipmapFilter === 'nearest' ? 9985 : 9987;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TEXTURE_FEATURES: () => (/* binding */ TEXTURE_FEATURES),
/* harmony export */   TEXTURE_FORMATS: () => (/* binding */ TEXTURE_FORMATS),
/* harmony export */   checkTextureFeature: () => (/* binding */ checkTextureFeature),
/* harmony export */   convertGLToTextureFormat: () => (/* binding */ convertGLToTextureFormat),
/* harmony export */   convertTextureFormatToGL: () => (/* binding */ convertTextureFormatToGL),
/* harmony export */   getDepthStencilAttachmentWebGL: () => (/* binding */ getDepthStencilAttachmentWebGL),
/* harmony export */   getTextureFormatBytesPerPixel: () => (/* binding */ getTextureFormatBytesPerPixel),
/* harmony export */   getTextureFormatSupport: () => (/* binding */ getTextureFormatSupport),
/* harmony export */   getWebGLTextureParameters: () => (/* binding */ getWebGLTextureParameters),
/* harmony export */   isRenderbufferFormatSupported: () => (/* binding */ isRenderbufferFormatSupported),
/* harmony export */   isTextureFeature: () => (/* binding */ isTextureFeature),
/* harmony export */   isTextureFormatFilterable: () => (/* binding */ isTextureFormatFilterable),
/* harmony export */   isTextureFormatRenderable: () => (/* binding */ isTextureFormatRenderable),
/* harmony export */   isTextureFormatSupported: () => (/* binding */ isTextureFormatSupported)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/type-utils/decode-texture-format.js");
/* harmony import */ var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../context/helpers/webgl-extensions.js */ "./node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
/* harmony import */ var _vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vertex-formats.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/* eslint-disable camelcase */
// TEXTURE FEATURES
// Define local device feature strings to optimize minification
const texture_compression_bc = 'texture-compression-bc';
const texture_compression_astc = 'texture-compression-astc';
const texture_compression_etc2 = 'texture-compression-etc2';
const texture_compression_etc1_webgl = 'texture-compression-etc1-webgl';
const texture_compression_pvrtc_webgl = 'texture-compression-pvrtc-webgl';
const texture_compression_atc_webgl = 'texture-compression-atc-webgl';
const float32_renderable = 'float32-renderable-webgl';
const float16_renderable = 'float16-renderable-webgl';
const rgb9e5ufloat_renderable = 'rgb9e5ufloat_renderable-webgl';
const snorm8_renderable = 'snorm8-renderable-webgl';
const norm16_renderable = 'norm16-renderable-webgl';
const snorm16_renderable = 'snorm16-renderable-webgl';
const float32_filterable = 'float32-filterable';
const float16_filterable = 'float16-filterable-webgl';
// Define local webgl extension strings to optimize minification
const X_S3TC = 'WEBGL_compressed_texture_s3tc'; // BC1, BC2, BC3
const X_S3TC_SRGB = 'WEBGL_compressed_texture_s3tc_srgb'; // BC1, BC2, BC3
const X_RGTC = 'EXT_texture_compression_rgtc'; // BC4, BC5
const X_BPTC = 'EXT_texture_compression_bptc'; // BC6, BC7
const X_ETC2 = 'WEBGL_compressed_texture_etc'; // Renamed from 'WEBGL_compressed_texture_es3'
const X_ASTC = 'WEBGL_compressed_texture_astc';
const X_ETC1 = 'WEBGL_compressed_texture_etc1';
const X_PVRTC = 'WEBGL_compressed_texture_pvrtc';
const X_ATC = 'WEBGL_compressed_texture_atc';
// Define local webgl extension strings to optimize minification
const EXT_texture_norm16 = 'EXT_texture_norm16';
const EXT_render_snorm = 'EXT_render_snorm';
const EXT_color_buffer_float = 'EXT_color_buffer_float';
// prettier-ignore
const TEXTURE_FEATURES = {
    'float32-renderable-webgl': ['EXT_color_buffer_float'],
    'float16-renderable-webgl': ['EXT_color_buffer_half_float'],
    'rgb9e5ufloat_renderable-webgl': ['WEBGL_render_shared_exponent'],
    'snorm8-renderable-webgl': [EXT_render_snorm],
    'norm16-renderable-webgl': [EXT_texture_norm16],
    'snorm16-renderable-webgl': [EXT_texture_norm16, EXT_render_snorm],
    'float32-filterable': ['OES_texture_float_linear'],
    'float16-filterable-webgl': ['OES_texture_half_float_linear'],
    'texture-filterable-anisotropic-webgl': ['EXT_texture_filter_anisotropic'],
    'texture-blend-float-webgl': ['EXT_float_blend'],
    'texture-compression-bc': [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],
    // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],
    // 'texture-compression-bc3-webgl': [X_S3TC],
    'texture-compression-bc5-webgl': [X_RGTC],
    'texture-compression-bc7-webgl': [X_BPTC],
    'texture-compression-etc2': [X_ETC2],
    'texture-compression-astc': [X_ASTC],
    'texture-compression-etc1-webgl': [X_ETC1],
    'texture-compression-pvrtc-webgl': [X_PVRTC],
    'texture-compression-atc-webgl': [X_ATC]
};
/** Return a list of texture feature strings (for Device.features). Mainly compressed texture support */
// export function getTextureFeatures(
//   gl: WebGL2RenderingContext,
//   extensions: GLExtensions
// ): DeviceFeature[] {
//   const textureFeatures = Object.keys(TEXTURE_FEATURES) as DeviceFeature[];
//   return textureFeatures.filter(feature => checkTextureFeature(gl, feature, extensions));
// }
function isTextureFeature(feature) {
    return feature in TEXTURE_FEATURES;
}
/** Checks a texture feature (for Device.features). Mainly compressed texture support */
function checkTextureFeature(gl, feature, extensions) {
    const textureExtensions = TEXTURE_FEATURES[feature] || [];
    return textureExtensions.every(extension => (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, extension, extensions));
}
// TABLES
/**
 * Texture format data -
 * Exported but can change without notice
 */
// prettier-ignore
const TEXTURE_FORMATS = {
    // Unsized formats that leave the precision up to the driver. TODO - Fix bpp constants
    'rgb8unorm-unsized': { gl: 6407, b: 4, c: 2, bpp: 4,
        dataFormat: 6407, types: [5121, 33635] },
    'rgba8unorm-unsized': { gl: 6408, b: 4, c: 2, bpp: 4,
        dataFormat: 6408, types: [5121, 32819, 32820] },
    // 'r8unorm-unsized': {gl: GL.LUMINANCE, b: 4, c: 2, bpp: 4},
    // 'rgb8unorm-srgb-unsized': {gl: GL.SRGB_EXT, b: 4, c: 2, bpp: 4, gl1Ext: SRGB},
    // 'rgba8unorm-srgb-unsized': {gl: GL.SRGB_ALPHA_EXT, b: 4, c: 2, bpp: 4, gl1Ext: SRGB},
    // 8-bit formats
    'r8unorm': { gl: 33321, b: 1, c: 1, rb: true },
    'r8snorm': { gl: 36756, b: 1, c: 1, render: snorm8_renderable },
    'r8uint': { gl: 33330, b: 1, c: 1, rb: true },
    'r8sint': { gl: 33329, b: 1, c: 1, rb: true },
    // 16-bit formats
    'rg8unorm': { gl: 33323, b: 2, c: 2, rb: true },
    'rg8snorm': { gl: 36757, b: 2, c: 2, render: snorm8_renderable },
    'rg8uint': { gl: 33336, b: 2, c: 2, rb: true },
    'rg8sint': { gl: 33335, b: 2, c: 2, rb: true },
    'r16uint': { gl: 33332, b: 2, c: 1, rb: true },
    'r16sint': { gl: 33331, b: 2, c: 1, rb: true },
    'r16float': { gl: 33325, b: 2, c: 1, render: float16_renderable, filter: 'float16-filterable-webgl', rb: true },
    'r16unorm-webgl': { gl: 33322, b: 2, c: 1, f: norm16_renderable, rb: true },
    'r16snorm-webgl': { gl: 36760, b: 2, c: 1, f: snorm16_renderable },
    // Packed 16-bit formats
    'rgba4unorm-webgl': { gl: 32854, b: 2, c: 4, wgpu: false, rb: true },
    'rgb565unorm-webgl': { gl: 36194, b: 2, c: 4, wgpu: false, rb: true },
    'rgb5a1unorm-webgl': { gl: 32855, b: 2, c: 4, wgpu: false, rb: true },
    // 24-bit formats
    'rgb8unorm-webgl': { gl: 32849, b: 3, c: 3, wgpu: false },
    'rgb8snorm-webgl': { gl: 36758, b: 3, c: 3, wgpu: false },
    // 32-bit formats  
    'rgba8unorm': { gl: 32856, b: 4, c: 2, bpp: 4 },
    'rgba8unorm-srgb': { gl: 35907, b: 4, c: 4, bpp: 4 },
    'rgba8snorm': { gl: 36759, b: 4, c: 4, render: snorm8_renderable },
    'rgba8uint': { gl: 36220, b: 4, c: 4, bpp: 4 },
    'rgba8sint': { gl: 36238, b: 4, c: 4, bpp: 4 },
    // reverse colors, webgpu only
    'bgra8unorm': { b: 4, c: 4 },
    'bgra8unorm-srgb': { b: 4, c: 4 },
    'rg16uint': { gl: 33338, b: 4, c: 1, bpp: 4 },
    'rg16sint': { gl: 33337, b: 4, c: 2, bpp: 4 },
    // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension
    'rg16float': { gl: 33327, bpp: 4, b: 4, c: 2, render: float16_renderable, filter: float16_filterable, rb: true },
    'rg16unorm-webgl': { gl: 33324, b: 2, c: 2, render: norm16_renderable },
    'rg16snorm-webgl': { gl: 36761, b: 2, c: 2, render: snorm16_renderable },
    'r32uint': { gl: 33334, b: 4, c: 1, bpp: 4, rb: true },
    'r32sint': { gl: 33333, b: 4, c: 1, bpp: 4, rb: true },
    'r32float': { gl: 33326, bpp: 4, b: 4, c: 1, render: float32_renderable, filter: float32_filterable },
    // Packed 32-bit formats
    'rgb9e5ufloat': { gl: 35901, b: 4, c: 3, p: 1, render: rgb9e5ufloat_renderable }, // , filter: true},
    'rg11b10ufloat': { gl: 35898, b: 4, c: 3, p: 1, render: float32_renderable, rb: true },
    'rgb10a2unorm': { gl: 32857, b: 4, c: 4, p: 1, rb: true },
    'rgb10a2uint-webgl': { b: 4, c: 4, gl: 36975, p: 1, wgpu: false, bpp: 4, rb: true },
    // 48-bit formats
    'rgb16unorm-webgl': { gl: 32852, b: 2, c: 3, f: norm16_renderable }, // rgb not renderable
    'rgb16snorm-webgl': { gl: 36762, b: 2, c: 3, f: norm16_renderable }, // rgb not renderable
    // 64-bit formats
    'rg32uint': { gl: 33340, b: 8, c: 2, rb: true },
    'rg32sint': { gl: 33339, b: 8, c: 2, rb: true },
    'rg32float': { gl: 33328, b: 8, c: 2, render: float32_renderable, filter: float32_filterable, rb: true },
    'rgba16uint': { gl: 36214, b: 8, c: 4, rb: true },
    'rgba16sint': { gl: 36232, b: 8, c: 4, rb: true },
    'rgba16float': { gl: 34842, b: 8, c: 4, render: float16_renderable, filter: float16_filterable },
    'rgba16unorm-webgl': { gl: 32859, b: 2, c: 4, render: norm16_renderable, rb: true },
    'rgba16snorm-webgl': { gl: 36763, b: 2, c: 4, render: snorm16_renderable },
    // 96-bit formats (deprecated!)
    'rgb32float-webgl': { gl: 34837, render: float32_renderable, filter: float32_filterable,
        gl2ext: EXT_color_buffer_float, dataFormat: 6407, types: [5126] },
    // 128-bit formats
    'rgba32uint': { gl: 36208, b: 16, c: 4, rb: true },
    'rgba32sint': { gl: 36226, b: 16, c: 4, rb: true },
    'rgba32float': { gl: 34836, b: 16, c: 4, render: float32_renderable, filter: float32_filterable, rb: true },
    // Depth and stencil formats
    'stencil8': { gl: 36168, b: 1, c: 1, attachment: 36128, rb: true }, // 8 stencil bits
    'depth16unorm': { gl: 33189, b: 2, c: 1, attachment: 36096,
        dataFormat: 6402, types: [5123], rb: true }, // 16 depth bits
    'depth24plus': { gl: 33190, b: 3, c: 1, attachment: 36096,
        dataFormat: 6402, types: [5125] },
    'depth32float': { gl: 36012, b: 4, c: 1, attachment: 36096,
        dataFormat: 6402, types: [5126], rb: true },
    // The depth component of the "depth24plus" and "depth24plus-stencil8" formats may be implemented as either a 24-bit depth value or a "depth32float" value.
    'depth24plus-stencil8': { gl: 35056, b: 4, c: 2, p: 1, attachment: 33306, rb: true, depthTexture: true,
        dataFormat: 34041, types: [34042] },
    // "depth24unorm-stencil8" feature
    'depth24unorm-stencil8': { gl: 35056, b: 4, c: 2, p: 1, attachment: 33306,
        dataFormat: 34041, types: [34042], rb: true },
    // "depth32float-stencil8" feature - TODO below is render buffer only?
    'depth32float-stencil8': { gl: 36013, b: 5, c: 2, p: 1, attachment: 33306,
        dataFormat: 34041, types: [36269], rb: true },
    // BC compressed formats: check device.features.has("texture-compression-bc");
    'bc1-rgb-unorm-webgl': { gl: 33776, x: X_S3TC, f: texture_compression_bc },
    'bc1-rgb-unorm-srgb-webgl': { gl: 35916, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc1-rgba-unorm': { gl: 33777, x: X_S3TC, f: texture_compression_bc },
    'bc1-rgba-unorm-srgb': { gl: 35916, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc2-rgba-unorm': { gl: 33778, x: X_S3TC, f: texture_compression_bc },
    'bc2-rgba-unorm-srgb': { gl: 35918, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc3-rgba-unorm': { gl: 33779, x: X_S3TC, f: texture_compression_bc },
    'bc3-rgba-unorm-srgb': { gl: 35919, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc4-r-unorm': { gl: 36283, x: X_RGTC, f: texture_compression_bc },
    'bc4-r-snorm': { gl: 36284, x: X_RGTC, f: texture_compression_bc },
    'bc5-rg-unorm': { gl: 36285, x: X_RGTC, f: texture_compression_bc },
    'bc5-rg-snorm': { gl: 36286, x: X_RGTC, f: texture_compression_bc },
    'bc6h-rgb-ufloat': { gl: 36495, x: X_BPTC, f: texture_compression_bc },
    'bc6h-rgb-float': { gl: 36494, x: X_BPTC, f: texture_compression_bc },
    'bc7-rgba-unorm': { gl: 36492, x: X_BPTC, f: texture_compression_bc },
    'bc7-rgba-unorm-srgb': { gl: 36493, x: X_BPTC, f: texture_compression_bc },
    // WEBGL_compressed_texture_etc: device.features.has("texture-compression-etc2")
    // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression
    'etc2-rgb8unorm': { gl: 37492, f: texture_compression_etc2 },
    'etc2-rgb8unorm-srgb': { gl: 37494, f: texture_compression_etc2 },
    'etc2-rgb8a1unorm': { gl: 37496, f: texture_compression_etc2 },
    'etc2-rgb8a1unorm-srgb': { gl: 37497, f: texture_compression_etc2 },
    'etc2-rgba8unorm': { gl: 37493, f: texture_compression_etc2 },
    'etc2-rgba8unorm-srgb': { gl: 37495, f: texture_compression_etc2 },
    'eac-r11unorm': { gl: 37488, f: texture_compression_etc2 },
    'eac-r11snorm': { gl: 37489, f: texture_compression_etc2 },
    'eac-rg11unorm': { gl: 37490, f: texture_compression_etc2 },
    'eac-rg11snorm': { gl: 37491, f: texture_compression_etc2 },
    // X_ASTC compressed formats: device.features.has("texture-compression-astc")
    'astc-4x4-unorm': { gl: 37808, f: texture_compression_astc },
    'astc-4x4-unorm-srgb': { gl: 37840, f: texture_compression_astc },
    'astc-5x4-unorm': { gl: 37809, f: texture_compression_astc },
    'astc-5x4-unorm-srgb': { gl: 37841, f: texture_compression_astc },
    'astc-5x5-unorm': { gl: 37810, f: texture_compression_astc },
    'astc-5x5-unorm-srgb': { gl: 37842, f: texture_compression_astc },
    'astc-6x5-unorm': { gl: 37811, f: texture_compression_astc },
    'astc-6x5-unorm-srgb': { gl: 37843, f: texture_compression_astc },
    'astc-6x6-unorm': { gl: 37812, f: texture_compression_astc },
    'astc-6x6-unorm-srgb': { gl: 37844, f: texture_compression_astc },
    'astc-8x5-unorm': { gl: 37813, f: texture_compression_astc },
    'astc-8x5-unorm-srgb': { gl: 37845, f: texture_compression_astc },
    'astc-8x6-unorm': { gl: 37814, f: texture_compression_astc },
    'astc-8x6-unorm-srgb': { gl: 37846, f: texture_compression_astc },
    'astc-8x8-unorm': { gl: 37815, f: texture_compression_astc },
    'astc-8x8-unorm-srgb': { gl: 37847, f: texture_compression_astc },
    'astc-10x5-unorm': { gl: 37819, f: texture_compression_astc },
    'astc-10x5-unorm-srgb': { gl: 37851, f: texture_compression_astc },
    'astc-10x6-unorm': { gl: 37817, f: texture_compression_astc },
    'astc-10x6-unorm-srgb': { gl: 37849, f: texture_compression_astc },
    'astc-10x8-unorm': { gl: 37818, f: texture_compression_astc },
    'astc-10x8-unorm-srgb': { gl: 37850, f: texture_compression_astc },
    'astc-10x10-unorm': { gl: 37819, f: texture_compression_astc },
    'astc-10x10-unorm-srgb': { gl: 37851, f: texture_compression_astc },
    'astc-12x10-unorm': { gl: 37820, f: texture_compression_astc },
    'astc-12x10-unorm-srgb': { gl: 37852, f: texture_compression_astc },
    'astc-12x12-unorm': { gl: 37821, f: texture_compression_astc },
    'astc-12x12-unorm-srgb': { gl: 37853, f: texture_compression_astc },
    // WEBGL_compressed_texture_pvrtc
    'pvrtc-rgb4unorm-webgl': { gl: 35840, f: texture_compression_pvrtc_webgl },
    'pvrtc-rgba4unorm-webgl': { gl: 35842, f: texture_compression_pvrtc_webgl },
    'pvrtc-rbg2unorm-webgl': { gl: 35841, f: texture_compression_pvrtc_webgl },
    'pvrtc-rgba2unorm-webgl': { gl: 35843, f: texture_compression_pvrtc_webgl },
    // WEBGL_compressed_texture_etc1
    'etc1-rbg-unorm-webgl': { gl: 36196, f: texture_compression_etc1_webgl },
    // WEBGL_compressed_texture_atc
    'atc-rgb-unorm-webgl': { gl: 35986, f: texture_compression_atc_webgl },
    'atc-rgba-unorm-webgl': { gl: 35986, f: texture_compression_atc_webgl },
    'atc-rgbai-unorm-webgl': { gl: 34798, f: texture_compression_atc_webgl }
};
/** Legal combinations for internalFormat, format and type *
// [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8]},
// [GL.DEPTH_STENCIL]: ,
// Sized texture format
// R
[GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
// // RG
[GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
// // RGB
[GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
// // RGBA

[GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},
[GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1ext: EXT_SRGB},
[GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},
[GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},
[GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}
*/
/* This table is now baked into the above table
type RenderbufferFormat = {
  bpp: number;
  gl2?: boolean;
  ext?: string;
};

export const RENDERBUFFER_FORMATS: Record<string, RenderbufferFormat> = {
  [GL.DEPTH_COMPONENT16]: {bpp: 2}, // 16 depth bits.
  // TODO - Not clear which webgpu value to map this to.
  // [GL.DEPTH_COMPONENT24]: {gl2: true, bpp: 3},
  [GL.DEPTH_COMPONENT32F]: {gl2: true, bpp: 4},

  [GL.STENCIL_INDEX8]: {bpp: 1}, // 8 stencil bits.

  [GL.DEPTH_STENCIL]: {bpp: 4},
  [GL.DEPTH24_STENCIL8]: {gl2: true, bpp: 4},
  [GL.DEPTH32F_STENCIL8]: {gl2: true, bpp: 5},

  // When using a WebGL 1 context, color renderbuffer formats are limited
  [GL.RGBA4]: {gl2: true, bpp: 2},
  [GL.RGB565]: {gl2: true, bpp: 2},
  [GL.RGB5_A1]: {gl2: true, bpp: 2},

  // When using a WebGL 2 context, the following values are available additionally:
  [GL.R8]: {gl2: true, bpp: 1},
  [GL.R8UI]: {gl2: true, bpp: 1},
  [GL.R8I]: {gl2: true, bpp: 1},
  [GL.R16UI]: {gl2: true, bpp: 2},
  [GL.R16I]: {gl2: true, bpp: 2},
  [GL.R32UI]: {gl2: true, bpp: 4},
  [GL.R32I]: {gl2: true, bpp: 4},
  [GL.RG8]: {gl2: true, bpp: 2},
  [GL.RG8UI]: {gl2: true, bpp: 2},
  [GL.RG8I]: {gl2: true, bpp: 2},
  [GL.RG16UI]: {gl2: true, bpp: 4},
  [GL.RG16I]: {gl2: true, bpp: 4},
  [GL.RG32UI]: {gl2: true, bpp: 8},
  [GL.RG32I]: {gl2: true, bpp: 8},
  [GL.RGB8]: {gl2: true, bpp: 3},
  [GL.RGBA8]: {gl2: true, bpp: 4},
  // [GL.SRGB8_ALPHA8]: {gl2: true, gl1: SRGB}, // When using the EXT_sRGB WebGL1 extension
  [GL.RGB10_A2]: {gl2: true, bpp: 4},
  [GL.RGBA8UI]: {gl2: true, bpp: 4},
  [GL.RGBA8I]: {gl2: true, bpp: 4},
  [GL.RGB10_A2UI]: {gl2: true, bpp: 4},
  [GL.RGBA16UI]: {gl2: true, bpp: 8},
  [GL.RGBA16I]: {gl2: true, bpp: 8},
  [GL.RGBA32I]: {gl2: true, bpp: 16},
  [GL.RGBA32UI]: {gl2: true, bpp: 16},

  // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension
  [GL.R16F]: {ext: EXT_FLOAT_WEBGL2, bpp: 2},
  [GL.RG16F]: {ext: EXT_FLOAT_WEBGL2, bpp: 4},
  [GL.RGBA16F]: {ext: EXT_FLOAT_WEBGL2, bpp: 8},
  [GL.R32F]: {ext: EXT_FLOAT_WEBGL2, bpp: 4},
  [GL.RG32F]: {ext: EXT_FLOAT_WEBGL2, bpp: 8},
  // TODO - can't get WEBGL_color_buffer_float to work on renderbuffers
  [GL.RGBA32F]: {ext: EXT_FLOAT_WEBGL2, bpp: 16},
  // [GL.RGBA32F]: {ext: EXT_FLOAT_WEBGL2},
  [GL.R11F_G11F_B10F]: {ext: EXT_FLOAT_WEBGL2, bpp: 4}
};
*/
/** @deprecated should be removed */
const DATA_FORMAT_CHANNELS = {
    [6403]: 1,
    [36244]: 1,
    [33319]: 2,
    [33320]: 2,
    [6407]: 3,
    [36248]: 3,
    [6408]: 4,
    [36249]: 4,
    [6402]: 1,
    [34041]: 1,
    [6406]: 1,
    [6409]: 1,
    [6410]: 2
};
/** @deprecated should be removed */
const TYPE_SIZES = {
    [5126]: 4,
    [5125]: 4,
    [5124]: 4,
    [5123]: 2,
    [5122]: 2,
    [5131]: 2,
    [5120]: 1,
    [5121]: 1
};
// FUNCTIONS
/** Checks if a texture format is supported */
function isTextureFormatSupported(gl, format, extensions) {
    const info = TEXTURE_FORMATS[format];
    if (!info) {
        return false;
    }
    // Check that we have a GL constant
    if (info.gl === undefined) {
        return false;
    }
    // Check extensions
    const extension = info.x || info.gl2ext;
    if (extension) {
        return Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, extension, extensions));
    }
    return true;
}
function isRenderbufferFormatSupported(gl, format, extensions) {
    // Note: Order is important since the function call initializes extensions.
    return isTextureFormatSupported(gl, format, extensions) && TEXTURE_FORMATS[format]?.rb;
}
/**
 * Map WebGL texture formats (GL constants) to WebGPU-style TextureFormat strings
 */
function convertGLToTextureFormat(format) {
    if (typeof format === 'string') {
        return format;
    }
    const entry = Object.entries(TEXTURE_FORMATS).find(([, entry]) => entry.gl === format);
    if (!entry) {
        throw new Error(`Unknown texture format ${format}`);
    }
    return entry[0];
}
/**
 * Map WebGPU style texture format strings to GL constants
 */
function convertTextureFormatToGL(format) {
    const formatInfo = TEXTURE_FORMATS[format];
    const webglFormat = formatInfo?.gl;
    if (webglFormat === undefined) {
        throw new Error(`Unsupported texture format ${format}`);
    }
    return webglFormat;
}
/** Checks if a texture format is supported */
function getTextureFormatSupport(gl, format, extensions) {
    const info = TEXTURE_FORMATS[format];
    if (!info) {
        return { supported: false };
    }
    // let decoded;
    // try {
    //   decoded = decodeTextureFormat(format);
    // } catch {}
    // Support Check that we have a GL constant
    let supported = info.gl === undefined;
    supported = supported && checkTextureFeature(gl, info.f, extensions);
    // Filtering
    // const filterable = info.filter
    //   ? checkTextureFeature(gl, infofilter])
    //   : decoded && !decoded.signed;
    // const renderable = info.filter
    //   ? checkTextureFeature(gl, inforender])
    //   : decoded && !decoded.signed;
    return {
        supported,
        renderable: supported && checkTextureFeature(gl, info.render, extensions),
        filterable: supported && checkTextureFeature(gl, info.filter, extensions),
        blendable: false, // tod,
        storable: false
    };
}
/** Checks whether linear filtering (interpolated sampling) is available for floating point textures */
function isTextureFormatFilterable(gl, format, extensions) {
    if (!isTextureFormatSupported(gl, format, extensions)) {
        return false;
    }
    if (format.startsWith('depth') || format.startsWith('stencil')) {
        return false;
    }
    try {
        const decoded = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.decodeTextureFormat)(format);
        if (decoded.signed) {
            return false;
        }
    }
    catch {
        return false;
    }
    if (format.endsWith('32float')) {
        return Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, 'OES_texture_float_linear, extensions', extensions));
    }
    if (format.endsWith('16float')) {
        return Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, 'OES_texture_half_float_linear, extensions', extensions));
    }
    return true;
}
function isTextureFormatRenderable(gl, format, extensions) {
    if (!isTextureFormatSupported(gl, format, extensions)) {
        return false;
    }
    if (typeof format === 'number') {
        return false; // isTextureFormatFilterableWebGL(gl, format);
    }
    // TODO depends on device...
    return true;
}
/** Get parameters necessary to work with format in WebGL: internalFormat, dataFormat, type, compressed, */
function getWebGLTextureParameters(format) {
    const formatData = TEXTURE_FORMATS[format];
    const webglFormat = convertTextureFormatToGL(format);
    const decoded = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.decodeTextureFormat)(format);
    return {
        format: webglFormat,
        dataFormat: formatData?.dataFormat ||
            getWebGLPixelDataFormat(decoded.format, decoded.integer, decoded.normalized, webglFormat),
        // depth formats don't have a type
        type: decoded.dataType
            ? (0,_vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__.getGLFromVertexType)(decoded.dataType)
            : formatData?.types?.[0] || 5121,
        // @ts-expect-error
        compressed: decoded.compressed
    };
}
function getDepthStencilAttachmentWebGL(format) {
    const info = TEXTURE_FORMATS[format];
    if (!info?.attachment) {
        throw new Error(`${format} is not a depth stencil format`);
    }
    return info.attachment;
}
/** TODO - VERY roundabout legacy way of calculating bytes per pixel */
function getTextureFormatBytesPerPixel(format) {
    // TODO remove webgl1 support
    const params = getWebGLTextureParameters(format);
    // NOTE(Tarek): Default to RGBA bytes
    const channels = DATA_FORMAT_CHANNELS[params.dataFormat] || 4;
    const channelSize = TYPE_SIZES[params.type] || 1;
    return channels * channelSize;
}
// DATA TYPE HELPERS
function getWebGLPixelDataFormat(dataFormat, integer, normalized, format) {
    // WebGL1 formats use same internalFormat
    if (format === 6408 || format === 6407) {
        return format;
    }
    // prettier-ignore
    switch (dataFormat) {
        case 'r': return integer && !normalized ? 36244 : 6403;
        case 'rg': return integer && !normalized ? 33320 : 33319;
        case 'rgb': return integer && !normalized ? 36248 : 6407;
        case 'rgba': return integer && !normalized ? 36249 : 6408;
        default: return 6408;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGLFromVertexType: () => (/* binding */ getGLFromVertexType),
/* harmony export */   getVertexFormatFromGL: () => (/* binding */ getVertexFormatFromGL),
/* harmony export */   getVertexTypeFromGL: () => (/* binding */ getVertexTypeFromGL)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Get vertex format from GL constants */
function getVertexFormatFromGL(type, components) {
    const base = getVertexTypeFromGL(type);
    // prettier-ignore
    switch (components) {
        // @ts-expect-error TODO deal with lack of formats
        case 1: return base;
        case 2: return `${base}x2`;
        // @ts-expect-error TODO deal with lack of formats
        case 3: return `${base}x3`;
        case 4: return `${base}x4`;
    }
    // @ts-ignore unreachable
    throw new Error(String(components));
}
/** Get data type from GL constants */
function getVertexTypeFromGL(type, normalized = false) {
    // prettier-ignore
    switch (type) {
        // WebGPU does not support normalized 32 bit integer attributes
        case 5124: return normalized ? 'sint32' : 'sint32';
        case 5125: return normalized ? 'uint32' : 'uint32';
        case 5122: return normalized ? 'sint16' : 'unorm16';
        case 5123: return normalized ? 'uint16' : 'unorm16';
        case 5120: return normalized ? 'sint8' : 'snorm16';
        case 5121: return normalized ? 'uint8' : 'unorm8';
        case 5126: return 'float32';
        case 5131: return 'float16';
    }
    // @ts-ignore unreachable
    throw new Error(String(type));
}
function getGLFromVertexType(dataType) {
    // prettier-ignore
    switch (dataType) {
        case 'uint8': return 5121;
        case 'sint8': return 5120;
        case 'unorm8': return 5121;
        case 'snorm8': return 5120;
        case 'uint16': return 5123;
        case 'sint16': return 5122;
        case 'unorm16': return 5123;
        case 'snorm16': return 5122;
        case 'uint32': return 5125;
        case 'sint32': return 5124;
        // WebGPU does not support normalized 32 bit integer attributes
        // case 'unorm32': return GL.UNSIGNED_INT;
        // case 'snorm32': return GL.INT;
        case 'float16': return 5131;
        case 'float32': return 5126;
    }
    // @ts-ignore unreachable
    throw new Error(String(dataType));
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebGLDeviceFeatures: () => (/* binding */ WebGLDeviceFeatures)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/device.js");
/* harmony import */ var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/helpers/webgl-extensions.js */ "./node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
/* harmony import */ var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../converters/texture-formats.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Feature detection for WebGL
// Provides a function that enables simple checking of which WebGL features are




/**
 * Defines luma.gl "feature" names and semantics
 * when value is 'string' it is the name of the extension that enables this feature
 */
const WEBGL_FEATURES = {
    // optional WebGPU features
    'depth-clip-control': 'EXT_depth_clamp', // TODO these seem subtly different
    // 'timestamp-query' // GPUQueryType "timestamp-query"
    // "indirect-first-instance"
    // Textures are handled by getTextureFeatures()
    // 'depth24unorm-stencil8' // GPUTextureFormat 'depth24unorm-stencil8'
    // 'depth32float-stencil8' // GPUTextureFormat 'depth32float-stencil8'
    // optional WebGL features
    'timer-query-webgl': 'EXT_disjoint_timer_query_webgl2',
    'compilation-status-async-webgl': 'KHR_parallel_shader_compile',
    'polygon-mode-webgl': 'WEBGL_polygon_mode',
    'provoking-vertex-webgl': 'WEBGL_provoking_vertex',
    'shader-clip-cull-distance-webgl': 'WEBGL_clip_cull_distance',
    'shader-noperspective-interpolation-webgl': 'NV_shader_noperspective_interpolation',
    'shader-conservative-depth-webgl': 'EXT_conservative_depth'
    // Textures are handled by getTextureFeatures()
};
/**
 * WebGL extensions exposed as luma.gl features
 * To minimize GL log noise and improve performance, this class ensures that
 * - WebGL extensions are not queried until the corresponding feature is checked.
 * - WebGL extensions are only queried once.
 */
class WebGLDeviceFeatures extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.DeviceFeatures {
    gl;
    extensions;
    testedFeatures = new Set();
    constructor(gl, extensions, disabledFeatures) {
        super([], disabledFeatures);
        this.gl = gl;
        this.extensions = extensions;
        // TODO - is this really needed?
        // Enable EXT_float_blend first: https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend
        (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_1__.getWebGLExtension)(gl, 'EXT_color_buffer_float', extensions);
    }
    *[Symbol.iterator]() {
        const features = this.getFeatures();
        for (const feature of features) {
            if (this.has(feature)) {
                yield feature;
            }
        }
        return [];
    }
    has(feature) {
        if (this.disabledFeatures[feature]) {
            return false;
        }
        // We have already tested this feature
        if (!this.testedFeatures.has(feature)) {
            this.testedFeatures.add(feature);
            // Check the feature once
            if ((0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__.isTextureFeature)(feature) && (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__.checkTextureFeature)(this.gl, feature, this.extensions)) {
                this.features.add(feature);
            }
            if (this.getWebGLFeature(feature)) {
                this.features.add(feature);
            }
        }
        return this.features.has(feature);
    }
    // FOR DEVICE
    initializeFeatures() {
        // Initialize all features by checking them.
        // Except WEBGL_polygon_mode since Chrome logs ugly console warnings
        const features = this.getFeatures().filter(feature => feature !== 'polygon-mode-webgl');
        for (const feature of features) {
            this.has(feature);
        }
    }
    // IMPLEMENTATION
    getFeatures() {
        return [...Object.keys(WEBGL_FEATURES), ...Object.keys(_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__.TEXTURE_FEATURES)];
    }
    /** Extract all WebGL features */
    getWebGLFeature(feature) {
        const featureInfo = WEBGL_FEATURES[feature];
        // string value requires checking the corresponding WebGL extension
        const isSupported = typeof featureInfo === 'string'
            ? Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_1__.getWebGLExtension)(this.gl, featureInfo, this.extensions))
            : Boolean(featureInfo);
        return isSupported;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDeviceInfo: () => (/* binding */ getDeviceInfo)
/* harmony export */ });
/* harmony import */ var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../context/helpers/webgl-extensions.js */ "./node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/** @returns strings identifying the GPU vendor and driver. */
function getDeviceInfo(gl, extensions) {
    // "Masked" info is always available, but don't contain much useful information
    const vendorMasked = gl.getParameter(7936);
    const rendererMasked = gl.getParameter(7937);
    // If we are lucky, unmasked info is available
    // https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/
    (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, 'WEBGL_debug_renderer_info', extensions);
    const ext = extensions.WEBGL_debug_renderer_info;
    const vendorUnmasked = gl.getParameter(ext ? ext.UNMASKED_VENDOR_WEBGL : 7936);
    const rendererUnmasked = gl.getParameter(ext ? ext.UNMASKED_RENDERER_WEBGL : 7937);
    const vendor = vendorUnmasked || vendorMasked;
    const renderer = rendererUnmasked || rendererMasked;
    // Driver version
    const version = gl.getParameter(7938);
    // "Sniff" the GPU type and backend from the info. This works best if unmasked info is available.
    const gpu = identifyGPUVendor(vendor, renderer);
    const gpuBackend = identifyGPUBackend(vendor, renderer);
    const gpuType = identifyGPUType(vendor, renderer);
    // Determine GLSL version
    // For now, skip parsing of the long version string, just use context type below to deduce version
    // const version = gl.getParameter(GL.SHADING_LANGUAGE_VERSION) as string;
    // const shadingLanguageVersion = parseGLSLVersion(version);
    const shadingLanguage = 'glsl';
    const shadingLanguageVersion = 300;
    return {
        type: 'webgl',
        gpu,
        gpuType,
        gpuBackend,
        vendor,
        renderer,
        version,
        shadingLanguage,
        shadingLanguageVersion
    };
}
/** "Sniff" the GPU type from the info. This works best if unmasked info is available. */
function identifyGPUVendor(vendor, renderer) {
    if (/NVIDIA/i.exec(vendor) || /NVIDIA/i.exec(renderer)) {
        return 'nvidia';
    }
    if (/INTEL/i.exec(vendor) || /INTEL/i.exec(renderer)) {
        return 'intel';
    }
    if (/Apple/i.exec(vendor) || /Apple/i.exec(renderer)) {
        return 'apple';
    }
    if (/AMD/i.exec(vendor) ||
        /AMD/i.exec(renderer) ||
        /ATI/i.exec(vendor) ||
        /ATI/i.exec(renderer)) {
        return 'amd';
    }
    if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
        return 'software';
    }
    return 'unknown';
}
/** "Sniff" the GPU backend from the info. This works best if unmasked info is available. */
function identifyGPUBackend(vendor, renderer) {
    if (/Metal/i.exec(vendor) || /Metal/i.exec(renderer)) {
        return 'metal';
    }
    if (/ANGLE/i.exec(vendor) || /ANGLE/i.exec(renderer)) {
        return 'opengl';
    }
    return 'unknown';
}
function identifyGPUType(vendor, renderer) {
    if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
        return 'cpu';
    }
    const gpuVendor = identifyGPUVendor(vendor, renderer);
    switch (gpuVendor) {
        case 'intel':
            return 'integrated';
        case 'software':
            return 'cpu';
        case 'unknown':
            return 'unknown';
        default:
            return 'discrete';
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebGLDeviceLimits: () => (/* binding */ WebGLDeviceLimits)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/device.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// prettier-ignore
class WebGLDeviceLimits extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.DeviceLimits {
    get maxTextureDimension1D() { return 0; } // WebGL does not support 1D textures
    get maxTextureDimension2D() { return this.getParameter(3379); }
    get maxTextureDimension3D() { return this.getParameter(32883); }
    get maxTextureArrayLayers() { return this.getParameter(35071); }
    get maxBindGroups() { return 0; }
    get maxDynamicUniformBuffersPerPipelineLayout() { return 0; } // TBD
    get maxDynamicStorageBuffersPerPipelineLayout() { return 0; } // TBD
    get maxSampledTexturesPerShaderStage() { return this.getParameter(35660); } // ) TBD
    get maxSamplersPerShaderStage() { return this.getParameter(35661); }
    get maxStorageBuffersPerShaderStage() { return 0; } // TBD
    get maxStorageTexturesPerShaderStage() { return 0; } // TBD
    get maxUniformBuffersPerShaderStage() { return this.getParameter(35375); }
    get maxUniformBufferBindingSize() { return this.getParameter(35376); }
    get maxStorageBufferBindingSize() { return 0; }
    get minUniformBufferOffsetAlignment() { return this.getParameter(35380); }
    get minStorageBufferOffsetAlignment() { return 0; }
    get maxVertexBuffers() { return 16; } // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284
    get maxVertexAttributes() { return this.getParameter(34921); }
    get maxVertexBufferArrayStride() { return 2048; } // TBD, this is just the default value from WebGPU
    get maxInterStageShaderComponents() { return this.getParameter(35659); }
    get maxComputeWorkgroupStorageSize() { return 0; } // WebGL does not support compute shaders
    get maxComputeInvocationsPerWorkgroup() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupSizeX() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupSizeY() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupSizeZ() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupsPerDimension() { return 0; } // WebGL does not support compute shaders
    // PRIVATE
    gl;
    limits = {};
    constructor(gl) {
        super();
        this.gl = gl;
    }
    getParameter(parameter) {
        if (this.limits[parameter] === undefined) {
            this.limits[parameter] = this.gl.getParameter(parameter);
        }
        return this.limits[parameter];
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/decode-webgl-types.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/helpers/decode-webgl-types.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeGLAttributeType: () => (/* binding */ decodeGLAttributeType),
/* harmony export */   decodeGLUniformType: () => (/* binding */ decodeGLUniformType),
/* harmony export */   decomposeCompositeGLDataType: () => (/* binding */ decomposeCompositeGLDataType),
/* harmony export */   getCompositeGLDataType: () => (/* binding */ getCompositeGLDataType),
/* harmony export */   isSamplerUniform: () => (/* binding */ isSamplerUniform)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Check is uniform is of sampler type */
function isSamplerUniform(type) {
    return SAMPLER_TYPES.includes(type);
}
const SAMPLER_TYPES = [
    35678,
    35680,
    35679,
    35682,
    36289,
    36292,
    36293,
    36298,
    36299,
    36300,
    36303,
    36306,
    36307,
    36308,
    36311
];
// Composite types table
const COMPOSITE_GL_TYPES = {
    [5126]: [5126, 1, 'float', 'f32', 'float32'],
    [35664]: [5126, 2, 'vec2', 'vec2<f32>', 'float32x2'],
    [35665]: [5126, 3, 'vec3', 'vec3<f32>', 'float32x3'],
    [35666]: [5126, 4, 'vec4', 'vec4<f32>', 'float32x4'],
    [5124]: [5124, 1, 'int', 'i32', 'sint32'],
    [35667]: [5124, 2, 'ivec2', 'vec2<i32>', 'sint32x2'],
    [35668]: [5124, 3, 'ivec3', 'vec3<i32>', 'sint32x3'],
    [35669]: [5124, 4, 'ivec4', 'vec4<i32>', 'sint32x4'],
    [5125]: [5125, 1, 'uint', 'u32', 'uint32'],
    [36294]: [5125, 2, 'uvec2', 'vec2<u32>', 'uint32x2'],
    [36295]: [5125, 3, 'uvec3', 'vec3<u32>', 'uint32x3'],
    [36296]: [5125, 4, 'uvec4', 'vec4<u32>', 'uint32x4'],
    [35670]: [5126, 1, 'bool', 'f32', 'float32'],
    [35671]: [5126, 2, 'bvec2', 'vec2<f32>', 'float32x2'],
    [35672]: [5126, 3, 'bvec3', 'vec3<f32>', 'float32x3'],
    [35673]: [5126, 4, 'bvec4', 'vec4<f32>', 'float32x4'],
    // TODO - are sizes/components below correct?
    [35674]: [5126, 8, 'mat2', 'mat2x2<f32>'], // 4
    [35685]: [5126, 8, 'mat2x3', 'mat2x3<f32>'], // 6
    [35686]: [5126, 8, 'mat2x4', 'mat2x4<f32>'], // 8
    [35687]: [5126, 12, 'mat3x2', 'mat3x2<f32>'], // 6
    [35675]: [5126, 12, 'mat3', 'mat3x3<f32>'], // 9
    [35688]: [5126, 12, 'mat3x4', 'mat3x4<f32>'], // 12
    [35689]: [5126, 16, 'mat4x2', 'mat4x2<f32>'], // 8
    [35690]: [5126, 16, 'mat4x3', 'mat4x3<f32>'], // 12
    [35676]: [5126, 16, 'mat4', 'mat4x4<f32>'] // 16
};
/** Decomposes a composite type (GL.VEC3) into a basic type (GL.FLOAT) and components (3) */
function decodeGLUniformType(glUniformType) {
    const typeAndSize = COMPOSITE_GL_TYPES[glUniformType];
    if (!typeAndSize) {
        throw new Error('uniform');
    }
    const [glType, components, , format] = typeAndSize;
    return { format, components, glType };
}
/** Decomposes a composite type (GL.VEC3) into a basic type (GL.FLOAT) and components (3) */
function decodeGLAttributeType(glAttributeType) {
    const typeAndSize = COMPOSITE_GL_TYPES[glAttributeType];
    if (!typeAndSize) {
        throw new Error('attribute');
    }
    const [, components, , shaderType, vertexFormat] = typeAndSize;
    // TODO sanity - if (shaderType.startsWith('mat' ...))
    const attributeType = shaderType;
    return { attributeType, vertexFormat, components }; // , glType};
}
/** Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3) */
function decomposeCompositeGLDataType(compositeGLDataType) {
    const typeAndSize = COMPOSITE_GL_TYPES[compositeGLDataType];
    if (!typeAndSize) {
        return null;
    }
    const [type, components] = typeAndSize;
    return { type, components };
}
function getCompositeGLDataType(type, components) {
    switch (type) {
        case 5120:
        case 5121:
        case 5122:
        case 5123:
            type = 5126;
            break;
        default:
    }
    for (const glType in COMPOSITE_GL_TYPES) {
        const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];
        if (compType === type && compComponents === components) {
            return { glType: Number(glType), name };
        }
    }
    return null;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShaderLayout: () => (/* binding */ getShaderLayout)
/* harmony export */ });
/* harmony import */ var _classic_accessor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../classic/accessor.js */ "./node_modules/@luma.gl/webgl/dist/classic/accessor.js");
/* harmony import */ var _decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode-webgl-types.js */ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/decode-webgl-types.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

 // TODO - should NOT depend on classic API

/**
 * Extract metadata describing binding information for a program's shaders
 * Note: `linkProgram()` needs to have been called
 * (although linking does not need to have been successful).
 */
function getShaderLayout(gl, program) {
    const shaderLayout = {
        attributes: [],
        bindings: []
    };
    shaderLayout.attributes = readAttributeDeclarations(gl, program);
    // Uniform blocks
    const uniformBlocks = readUniformBlocks(gl, program);
    for (const uniformBlock of uniformBlocks) {
        const uniforms = uniformBlock.uniforms.map(uniform => ({
            name: uniform.name,
            format: uniform.format,
            byteOffset: uniform.byteOffset,
            byteStride: uniform.byteStride,
            arrayLength: uniform.arrayLength
        }));
        shaderLayout.bindings.push({
            type: 'uniform',
            name: uniformBlock.name,
            location: uniformBlock.location,
            visibility: (uniformBlock.vertex ? 0x1 : 0) & (uniformBlock.fragment ? 0x2 : 0),
            minBindingSize: uniformBlock.byteLength,
            uniforms
        });
    }
    const uniforms = readUniformBindings(gl, program);
    let textureUnit = 0;
    for (const uniform of uniforms) {
        if ((0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.isSamplerUniform)(uniform.type)) {
            const { viewDimension, sampleType } = getSamplerInfo(uniform.type);
            shaderLayout.bindings.push({
                type: 'texture',
                name: uniform.name,
                location: textureUnit,
                viewDimension,
                sampleType
            });
            // @ts-expect-error
            uniform.textureUnit = textureUnit;
            textureUnit += 1;
        }
    }
    if (uniforms.length) {
        shaderLayout.uniforms = uniforms;
    }
    // Varyings
    const varyings = readVaryings(gl, program);
    // Note - samplers are always in unform bindings, even if uniform blocks are used
    if (varyings?.length) {
        shaderLayout.varyings = varyings;
    }
    return shaderLayout;
}
// HELPERS
/**
 * Extract info about all transform feedback varyings
 *
 * linkProgram needs to have been called, although linking does not need to have been successful
 */
function readAttributeDeclarations(gl, program) {
    const attributes = [];
    const count = gl.getProgramParameter(program, 35721);
    for (let index = 0; index < count; index++) {
        const activeInfo = gl.getActiveAttrib(program, index);
        if (!activeInfo) {
            throw new Error('activeInfo');
        }
        const { name, type: compositeType /* , size*/ } = activeInfo;
        const location = gl.getAttribLocation(program, name);
        // Add only user provided attributes, for built-in attributes like `gl_InstanceID` location will be < 0
        if (location >= 0) {
            const { attributeType } = (0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeGLAttributeType)(compositeType);
            // Whether an attribute is instanced is essentially fixed by the structure of the shader code,
            // so it is arguably a static property of the shader.
            // There is no hint in the shader declarations
            // Heuristic: Any attribute name containing the word "instance" will be assumed to be instanced
            const stepMode = /instance/i.test(name) ? 'instance' : 'vertex';
            attributes.push({
                name,
                location,
                stepMode,
                type: attributeType
                // size - for arrays, size is the number of elements in the array
            });
        }
    }
    // Sort by declaration order
    attributes.sort((a, b) => a.location - b.location);
    return attributes;
}
/**
 * Extract info about all transform feedback varyings
 *
 * linkProgram needs to have been called, although linking does not need to have been successful
 */
function readVaryings(gl, program) {
    const varyings = [];
    const count = gl.getProgramParameter(program, 35971);
    for (let location = 0; location < count; location++) {
        const activeInfo = gl.getTransformFeedbackVarying(program, location);
        if (!activeInfo) {
            throw new Error('activeInfo');
        }
        const { name, type: compositeType, size } = activeInfo;
        const { glType, components } = (0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeGLUniformType)(compositeType);
        const accessor = new _classic_accessor_js__WEBPACK_IMPORTED_MODULE_1__.Accessor({ type: glType, size: size * components });
        const varying = { location, name, accessor }; // Base values
        varyings.push(varying);
    }
    varyings.sort((a, b) => a.location - b.location);
    return varyings;
}
/**
 * Extract info about all uniforms
 *
 * Query uniform locations and build name to setter map.
 */
function readUniformBindings(gl, program) {
    const uniforms = [];
    const uniformCount = gl.getProgramParameter(program, 35718);
    for (let i = 0; i < uniformCount; i++) {
        const activeInfo = gl.getActiveUniform(program, i);
        if (!activeInfo) {
            throw new Error('activeInfo');
        }
        const { name: rawName, size, type } = activeInfo;
        const { name, isArray } = parseUniformName(rawName);
        let webglLocation = gl.getUniformLocation(program, name);
        const uniformInfo = {
            // WebGL locations are uniquely typed but just numbers
            location: webglLocation,
            name,
            size,
            type,
            isArray
        };
        uniforms.push(uniformInfo);
        // Array (e.g. matrix) uniforms can occupy several 4x4 byte banks
        if (uniformInfo.size > 1) {
            for (let j = 0; j < uniformInfo.size; j++) {
                const elementName = `${name}[${j}]`;
                webglLocation = gl.getUniformLocation(program, elementName);
                const arrayElementUniformInfo = {
                    ...uniformInfo,
                    name: elementName,
                    location: webglLocation
                };
                uniforms.push(arrayElementUniformInfo);
            }
        }
    }
    return uniforms;
}
/**
 * Extract info about all "active" uniform blocks
 * @note In WebGL, "active" just means that unused (inactive) blocks may have been optimized away during linking)
 */
function readUniformBlocks(gl, program) {
    const getBlockParameter = (blockIndex, pname) => gl.getActiveUniformBlockParameter(program, blockIndex, pname);
    const uniformBlocks = [];
    const blockCount = gl.getProgramParameter(program, 35382);
    for (let blockIndex = 0; blockIndex < blockCount; blockIndex++) {
        const blockInfo = {
            name: gl.getActiveUniformBlockName(program, blockIndex) || '',
            location: getBlockParameter(blockIndex, 35391),
            byteLength: getBlockParameter(blockIndex, 35392),
            vertex: getBlockParameter(blockIndex, 35396),
            fragment: getBlockParameter(blockIndex, 35398),
            uniformCount: getBlockParameter(blockIndex, 35394),
            uniforms: []
        };
        const uniformIndices = getBlockParameter(blockIndex, 35395) || [];
        const uniformType = gl.getActiveUniforms(program, uniformIndices, 35383); // Array of GLenum indicating the types of the uniforms.
        const uniformArrayLength = gl.getActiveUniforms(program, uniformIndices, 35384); // Array of GLuint indicating the sizes of the uniforms.
        // const uniformBlockIndex = gl.getActiveUniforms(
        //   program,
        //   uniformIndices,
        //   GL.UNIFORM_BLOCK_INDEX
        // ); // Array of GLint indicating the block indices of the uniforms.
        const uniformOffset = gl.getActiveUniforms(program, uniformIndices, 35387); // Array of GLint indicating the uniform buffer offsets.
        const uniformStride = gl.getActiveUniforms(program, uniformIndices, 35388); // Array of GLint indicating the strides between the elements.
        // const uniformMatrixStride = gl.getActiveUniforms(
        //   program,
        //   uniformIndices,
        //   GL.UNIFORM_MATRIX_STRIDE
        // ); // Array of GLint indicating the strides between columns of a column-major matrix or a row-major matrix.
        // const uniformRowMajor = gl.getActiveUniforms(program, uniformIndices, GL.UNIFORM_IS_ROW_MAJOR);
        for (let i = 0; i < blockInfo.uniformCount; ++i) {
            const activeInfo = gl.getActiveUniform(program, uniformIndices[i]);
            if (!activeInfo) {
                throw new Error('activeInfo');
            }
            blockInfo.uniforms.push({
                name: activeInfo.name,
                format: (0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeGLUniformType)(uniformType[i]).format,
                type: uniformType[i],
                arrayLength: uniformArrayLength[i],
                byteOffset: uniformOffset[i],
                byteStride: uniformStride[i]
                // matrixStride: uniformStride[i],
                // rowMajor: uniformRowMajor[i]
            });
        }
        uniformBlocks.push(blockInfo);
    }
    uniformBlocks.sort((a, b) => a.location - b.location);
    return uniformBlocks;
}
/**
 * TOOD - compare with a above, confirm copy, then delete
  const bindings: Binding[] = [];
  const count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);
  for (let blockIndex = 0; blockIndex < count; blockIndex++) {
    const vertex = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
    const fragment = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
    const visibility = (vertex) + (fragment);
    const binding: BufferBinding = {
      location: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_BINDING),
      // name: gl.getActiveUniformBlockName(program, blockIndex),
      type: 'uniform',
      visibility,
      minBindingSize: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_DATA_SIZE),
      // uniformCount: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS),
      // uniformIndices: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
    }
    bindings.push(binding);
  }
*/
const SAMPLER_UNIFORMS_GL_TO_GPU = {
    [35678]: ['2d', 'float'],
    [35680]: ['cube', 'float'],
    [35679]: ['3d', 'float'],
    [35682]: ['3d', 'depth'],
    [36289]: ['2d-array', 'float'],
    [36292]: ['2d-array', 'depth'],
    [36293]: ['cube', 'float'],
    [36298]: ['2d', 'sint'],
    [36299]: ['3d', 'sint'],
    [36300]: ['cube', 'sint'],
    [36303]: ['2d-array', 'uint'],
    [36306]: ['2d', 'uint'],
    [36307]: ['3d', 'uint'],
    [36308]: ['cube', 'uint'],
    [36311]: ['2d-array', 'uint']
};
function getSamplerInfo(type) {
    const sampler = SAMPLER_UNIFORMS_GL_TO_GPU[type];
    if (!sampler) {
        throw new Error('sampler');
    }
    const [viewDimension, sampleType] = sampler;
    return { viewDimension, sampleType };
}
// HELPERS
function parseUniformName(name) {
    // Shortcut to avoid redundant or bad matches
    if (name[name.length - 1] !== ']') {
        return {
            name,
            length: 1,
            isArray: false
        };
    }
    // if array name then clean the array brackets
    const UNIFORM_NAME_REGEXP = /([^[]*)(\[[0-9]+\])?/;
    const matches = UNIFORM_NAME_REGEXP.exec(name);
    if (!matches || matches.length < 2) {
        throw new Error(`Failed to parse GLSL uniform name ${name}`);
    }
    return {
        name: matches[1],
        length: matches[2] ? 1 : 0,
        isArray: Boolean(matches[2])
    };
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseShaderCompilerLog: () => (/* binding */ parseShaderCompilerLog)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Parse a WebGL-format GLSL compilation log into an array of WebGPU style message records.
 * This follows documented WebGL conventions for compilation logs.
 * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)
 */
function parseShaderCompilerLog(errLog) {
    // Parse the error - note: browser and driver dependent
    const lines = errLog.split(/\r?\n/);
    const messages = [];
    for (const line of lines) {
        if (line.length <= 1) {
            continue; // eslint-disable-line no-continue
        }
        const segments = line.split(':');
        // Check for messages with no line information `ERROR: unsupported shader version`
        if (segments.length === 2) {
            const [messageType, message] = segments;
            messages.push({
                message: message.trim(),
                type: getMessageType(messageType),
                lineNum: 0,
                linePos: 0
            });
            continue; // eslint-disable-line no-continue
        }
        const [messageType, linePosition, lineNumber, ...rest] = segments;
        let lineNum = parseInt(lineNumber, 10);
        if (isNaN(lineNum)) {
            lineNum = 0;
        }
        let linePos = parseInt(linePosition, 10);
        if (isNaN(linePos)) {
            linePos = 0;
        }
        messages.push({
            message: rest.join(':').trim(),
            type: getMessageType(messageType),
            lineNum,
            linePos // TODO
        });
    }
    return messages;
}
/** Ensure supported type */
function getMessageType(messageType) {
    const MESSAGE_TYPES = ['warning', 'error', 'info'];
    const lowerCaseType = messageType.toLowerCase();
    return (MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : 'info');
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setUniform: () => (/* binding */ setUniform)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Set a raw uniform (without type conversion and caching) */
/* eslint-disable max-len */
function setUniform(gl, location, type, value) {
    const gl2 = gl;
    // Prepare the value for WebGL setters
    let uniformValue = value;
    if (uniformValue === true) {
        uniformValue = 1;
    }
    if (uniformValue === false) {
        uniformValue = 0;
    }
    const arrayValue = typeof uniformValue === 'number' ? [uniformValue] : uniformValue;
    // prettier-ignore
    switch (type) {
        case 35678:
        case 35680:
        case 35679:
        case 35682:
        case 36289:
        case 36292:
        case 36293:
        case 36298:
        case 36299:
        case 36300:
        case 36303:
        case 36306:
        case 36307:
        case 36308:
        case 36311:
            if (typeof value !== 'number') {
                throw new Error('samplers must be set to integers');
            }
            return gl.uniform1i(location, value);
        case 5126: return gl.uniform1fv(location, arrayValue);
        case 35664: return gl.uniform2fv(location, arrayValue);
        case 35665: return gl.uniform3fv(location, arrayValue);
        case 35666: return gl.uniform4fv(location, arrayValue);
        case 5124: return gl.uniform1iv(location, arrayValue);
        case 35667: return gl.uniform2iv(location, arrayValue);
        case 35668: return gl.uniform3iv(location, arrayValue);
        case 35669: return gl.uniform4iv(location, arrayValue);
        case 35670: return gl.uniform1iv(location, arrayValue);
        case 35671: return gl.uniform2iv(location, arrayValue);
        case 35672: return gl.uniform3iv(location, arrayValue);
        case 35673: return gl.uniform4iv(location, arrayValue);
        // WEBGL2 - unsigned integers
        case 5125: return gl2.uniform1uiv(location, arrayValue, 1);
        case 36294: return gl2.uniform2uiv(location, arrayValue, 2);
        case 36295: return gl2.uniform3uiv(location, arrayValue, 3);
        case 36296: return gl2.uniform4uiv(location, arrayValue, 4);
        // WebGL2 - quadratic matrices
        // false: don't transpose the matrix
        case 35674: return gl.uniformMatrix2fv(location, false, arrayValue);
        case 35675: return gl.uniformMatrix3fv(location, false, arrayValue);
        case 35676: return gl.uniformMatrix4fv(location, false, arrayValue);
        // WebGL2 - rectangular matrices
        case 35685: return gl2.uniformMatrix2x3fv(location, false, arrayValue);
        case 35686: return gl2.uniformMatrix2x4fv(location, false, arrayValue);
        case 35687: return gl2.uniformMatrix3x2fv(location, false, arrayValue);
        case 35688: return gl2.uniformMatrix3x4fv(location, false, arrayValue);
        case 35689: return gl2.uniformMatrix4x2fv(location, false, arrayValue);
        case 35690: return gl2.uniformMatrix4x3fv(location, false, arrayValue);
    }
    throw new Error('Illegal uniform');
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGLDrawMode: () => (/* binding */ getGLDrawMode),
/* harmony export */   getGLPrimitive: () => (/* binding */ getGLPrimitive),
/* harmony export */   getPrimitiveCount: () => (/* binding */ getPrimitiveCount),
/* harmony export */   getPrimitiveDrawMode: () => (/* binding */ getPrimitiveDrawMode),
/* harmony export */   getVertexCount: () => (/* binding */ getVertexCount)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// Counts the number of complete primitives given a number of vertices and a drawMode
function getPrimitiveDrawMode(drawMode) {
    switch (drawMode) {
        case 0:
            return 0;
        case 1:
            return 1;
        case 3:
            return 1;
        case 2:
            return 1;
        case 4:
            return 4;
        case 5:
            return 4;
        case 6:
            return 4;
        default:
            throw new Error('drawMode');
    }
}
// Counts the number of complete "primitives" given a number of vertices and a drawMode
function getPrimitiveCount(options) {
    const { drawMode, vertexCount } = options;
    switch (drawMode) {
        case 0:
        case 2:
            return vertexCount;
        case 1:
            return vertexCount / 2;
        case 3:
            return vertexCount - 1;
        case 4:
            return vertexCount / 3;
        case 5:
        case 6:
            return vertexCount - 2;
        default:
            throw new Error('drawMode');
    }
}
// Counts the number of vertices after splitting the vertex stream into separate "primitives"
function getVertexCount(options) {
    const { drawMode, vertexCount } = options;
    const primitiveCount = getPrimitiveCount({ drawMode, vertexCount });
    switch (getPrimitiveDrawMode(drawMode)) {
        case 0:
            return primitiveCount;
        case 1:
            return primitiveCount * 2;
        case 4:
            return primitiveCount * 3;
        default:
            throw new Error('drawMode');
    }
}
/** Get the primitive type for draw */
function getGLDrawMode(topology) {
    // prettier-ignore
    switch (topology) {
        case 'point-list': return 0;
        case 'line-list': return 1;
        case 'line-strip': return 3;
        case 'line-loop-webgl': return 2;
        case 'triangle-list': return 4;
        case 'triangle-strip': return 5;
        case 'triangle-fan-webgl': return 6;
        default: throw new Error(topology);
    }
}
/** Get the primitive type for transform feedback */
function getGLPrimitive(topology) {
    // prettier-ignore
    switch (topology) {
        case 'point-list': return 0;
        case 'line-list': return 1;
        case 'line-strip': return 1;
        case 'line-loop-webgl': return 1;
        case 'triangle-list': return 4;
        case 'triangle-strip': return 4;
        case 'triangle-fan-webgl': return 4;
        default: throw new Error(topology);
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLBuffer: () => (/* binding */ WEBGLBuffer)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/** WebGL Buffer interface */
class WEBGLBuffer extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer {
    device;
    gl;
    handle;
    /** Target in OpenGL defines the type of buffer */
    glTarget;
    /** Usage is a hint on how frequently the buffer will be updates */
    glUsage;
    /** Index type is needed when issuing draw calls, so we pre-compute it */
    glIndexType = 5123;
    /** Number of bytes allocated on the GPU for this buffer */
    byteLength;
    /** Number of bytes used */
    bytesUsed;
    constructor(device, props = {}) {
        super(device, props);
        this.device = device;
        this.gl = this.device.gl;
        const handle = typeof props === 'object' ? props.handle : undefined;
        this.handle = handle || this.gl.createBuffer();
        device.setSpectorMetadata(this.handle, { ...this.props, data: typeof this.props.data });
        // - In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers
        //   otherwise buffer type will lock to generic (non-element) buffer
        // - In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here
        this.glTarget = getWebGLTarget(this.props.usage);
        this.glUsage = getWebGLUsage(this.props.usage);
        this.glIndexType = this.props.indexType === 'uint32' ? 5125 : 5123;
        // Set data: (re)initializes the buffer
        if (props.data) {
            this._initWithData(props.data, props.byteOffset, props.byteLength);
        }
        else {
            this._initWithByteLength(props.byteLength || 0);
        }
    }
    // PRIVATE METHODS
    /** Allocate a new buffer and initialize to contents of typed array */
    _initWithData(data, byteOffset = 0, byteLength = data.byteLength + byteOffset) {
        // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;
        const glTarget = this.glTarget;
        this.gl.bindBuffer(glTarget, this.handle);
        this.gl.bufferData(glTarget, byteLength, this.glUsage);
        this.gl.bufferSubData(glTarget, byteOffset, data);
        this.gl.bindBuffer(glTarget, null);
        this.bytesUsed = byteLength;
        this.byteLength = byteLength;
        this._setDebugData(data, byteOffset, byteLength);
        this.trackAllocatedMemory(byteLength);
    }
    // Allocate a GPU buffer of specified size.
    _initWithByteLength(byteLength) {
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(byteLength >= 0);
        // Workaround needed for Safari (#291):
        // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.
        let data = byteLength;
        if (byteLength === 0) {
            // @ts-expect-error
            data = new Float32Array(0);
        }
        // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;
        const glTarget = this.glTarget;
        this.gl.bindBuffer(glTarget, this.handle);
        this.gl.bufferData(glTarget, data, this.glUsage);
        this.gl.bindBuffer(glTarget, null);
        this.bytesUsed = byteLength;
        this.byteLength = byteLength;
        this._setDebugData(null, 0, byteLength);
        this.trackAllocatedMemory(byteLength);
        return this;
    }
    destroy() {
        if (!this.destroyed && this.handle) {
            this.removeStats();
            this.trackDeallocatedMemory();
            this.gl.deleteBuffer(this.handle);
            this.destroyed = true;
            // @ts-expect-error
            this.handle = null;
        }
    }
    write(data, byteOffset = 0) {
        const srcOffset = 0;
        const byteLength = undefined; // data.byteLength;
        // Create the buffer - binding it here for the first time locks the type
        // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type
        const glTarget = 36663;
        this.gl.bindBuffer(glTarget, this.handle);
        // WebGL2: subData supports additional srcOffset and length parameters
        if (srcOffset !== 0 || byteLength !== undefined) {
            this.gl.bufferSubData(glTarget, byteOffset, data, srcOffset, byteLength);
        }
        else {
            this.gl.bufferSubData(glTarget, byteOffset, data);
        }
        this.gl.bindBuffer(glTarget, null);
        this._setDebugData(data, byteOffset, data.byteLength);
    }
    /** Asynchronously read data from the buffer */
    async readAsync(byteOffset = 0, byteLength) {
        return this.readSyncWebGL(byteOffset, byteLength);
    }
    /** Synchronously read data from the buffer. WebGL only. */
    readSyncWebGL(byteOffset = 0, byteLength) {
        byteLength = byteLength ?? this.byteLength - byteOffset;
        const data = new Uint8Array(byteLength);
        const dstOffset = 0;
        // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type
        this.gl.bindBuffer(36662, this.handle);
        this.gl.getBufferSubData(36662, byteOffset, data, dstOffset, byteLength);
        this.gl.bindBuffer(36662, null);
        // Update local `data` if offsets are 0
        this._setDebugData(data, byteOffset, byteLength);
        return data;
    }
}
/**
 * Returns a WebGL buffer target
 *
 * @param usage
 * static MAP_READ = 0x01;
 * static MAP_WRITE = 0x02;
 * static COPY_SRC = 0x0004;
 * static COPY_DST = 0x0008;
 * static INDEX = 0x0010;
 * static VERTEX = 0x0020;
 * static UNIFORM = 0x0040;
 * static STORAGE = 0x0080;
 * static INDIRECT = 0x0100;
 * static QUERY_RESOLVE = 0x0200;
 *
 * @returns WebGL buffer targe
 *
 * Buffer bind points in WebGL2
 * gl.COPY_READ_BUFFER: Buffer for copying from one buffer object to another.
 * gl.COPY_WRITE_BUFFER: Buffer for copying from one buffer object to another.
 * gl.TRANSFORM_FEEDBACK_BUFFER: Buffer for transform feedback operations.
 * gl.PIXEL_PACK_BUFFER: Buffer used for pixel transfer operations.
 * gl.PIXEL_UNPACK_BUFFER: Buffer used for pixel transfer operations.
 */
function getWebGLTarget(usage) {
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.INDEX) {
        return 34963;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.VERTEX) {
        return 34962;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.UNIFORM) {
        return 35345;
    }
    // Binding a buffer for the first time locks the type
    // In WebGL2, we can use GL.COPY_WRITE_BUFFER to avoid locking the type
    return 34962;
}
/** @todo usage is not passed correctly */
function getWebGLUsage(usage) {
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.INDEX) {
        return 35044;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.VERTEX) {
        return 35044;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.UNIFORM) {
        return 35048;
    }
    return 35044;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLCommandBuffer: () => (/* binding */ WEBGLCommandBuffer),
/* harmony export */   glFormatToComponents: () => (/* binding */ glFormatToComponents),
/* harmony export */   glTypeToBytes: () => (/* binding */ glTypeToBytes)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */ var _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl-texture.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */ var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../converters/texture-formats.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




function cast(value) {
    return value;
}
class WEBGLCommandBuffer extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.CommandBuffer {
    device;
    commands = [];
    constructor(device) {
        super(device, {});
        this.device = device;
    }
    submitCommands(commands = this.commands) {
        for (const command of commands) {
            switch (command.name) {
                case 'copy-buffer-to-buffer':
                    _copyBufferToBuffer(this.device, command.options);
                    break;
                case 'copy-buffer-to-texture':
                    _copyBufferToTexture(this.device, command.options);
                    break;
                case 'copy-texture-to-buffer':
                    _copyTextureToBuffer(this.device, command.options);
                    break;
                case 'copy-texture-to-texture':
                    _copyTextureToTexture(this.device, command.options);
                    break;
            }
        }
    }
}
function _copyBufferToBuffer(device, options) {
    const source = cast(options.source);
    const destination = cast(options.destination);
    // {In WebGL2 we can p}erform the copy on the GPU
    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type
    device.gl.bindBuffer(36662, source.handle);
    device.gl.bindBuffer(36663, destination.handle);
    device.gl.copyBufferSubData(36662, 36663, options.sourceOffset ?? 0, options.destinationOffset ?? 0, options.size);
    device.gl.bindBuffer(36662, null);
    device.gl.bindBuffer(36663, null);
}
/**
 * Copies data from a Buffer object into a Texture object
 * NOTE: doesn't wait for copy to be complete
 */
function _copyBufferToTexture(device, options) {
    throw new Error('Not implemented');
}
/**
 * Copies data from a Texture object into a Buffer object.
 * NOTE: doesn't wait for copy to be complete
 */
function _copyTextureToBuffer(device, options) {
    const { 
    /** Texture to copy to/from. */
    source, 
    /**  Mip-map level of the texture to copy to/from. (Default 0) */
    mipLevel = 0, 
    /** Defines which aspects of the texture to copy to/from. */
    aspect = 'all', 
    /** Width to copy */
    width = options.source.width, 
    /** Height to copy */
    height = options.source.height, depthOrArrayLayers = 0, 
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
    origin = [0, 0], 
    /** Destination buffer */
    destination, 
    /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */
    byteOffset = 0, 
    /**
     * The stride, in bytes, between the beginning of each block row and the subsequent block row.
     * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).
     */
    bytesPerRow, 
    /**
     * Number of block rows per single image of the texture.
     * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.
     * Required if there are multiple images (i.e. the copy depth is more than one).
     */
    rowsPerImage } = options;
    // TODO - Not possible to read just stencil or depth part in WebGL?
    if (aspect !== 'all') {
        throw new Error('not supported');
    }
    // TODO - mipLevels are set when attaching texture to framebuffer
    if (mipLevel !== 0 || depthOrArrayLayers !== 0 || bytesPerRow || rowsPerImage) {
        throw new Error('not implemented');
    }
    // Asynchronous read (PIXEL_PACK_BUFFER) is WebGL2 only feature
    const { framebuffer, destroyFramebuffer } = getFramebuffer(source);
    let prevHandle;
    try {
        const webglBuffer = destination;
        const sourceWidth = width || framebuffer.width;
        const sourceHeight = height || framebuffer.height;
        const sourceParams = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__.getWebGLTextureParameters)(framebuffer.texture.props.format);
        const sourceFormat = sourceParams.dataFormat;
        const sourceType = sourceParams.type;
        // if (!target) {
        //   // Create new buffer with enough size
        //   const components = glFormatToComponents(sourceFormat);
        //   const byteCount = glTypeToBytes(sourceType);
        //   const byteLength = byteOffset + sourceWidth * sourceHeight * components * byteCount;
        //   target = device.createBuffer({byteLength});
        // }
        device.gl.bindBuffer(35051, webglBuffer.handle);
        // @ts-expect-error native bindFramebuffer is overridden by our state tracker
        prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
        device.gl.readPixels(origin[0], origin[1], sourceWidth, sourceHeight, sourceFormat, sourceType, byteOffset);
    }
    finally {
        device.gl.bindBuffer(35051, null);
        // prevHandle may be unassigned if the try block failed before binding
        if (prevHandle !== undefined) {
            device.gl.bindFramebuffer(36160, prevHandle);
        }
        if (destroyFramebuffer) {
            framebuffer.destroy();
        }
    }
}
/**
 * Copies data from a Framebuffer or a Texture object into a Buffer object.
 * NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transfer.
export function readPixelsToBuffer(
  source: Framebuffer | Texture,
  options?: {
    sourceX?: number;
    sourceY?: number;
    sourceFormat?: number;
    target?: Buffer; // A new Buffer object is created when not provided.
    targetByteOffset?: number; // byte offset in buffer object
    // following parameters are auto deduced if not provided
    sourceWidth?: number;
    sourceHeight?: number;
    sourceType?: number;
  }
): Buffer
 */
/**
 * Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)
 */
// eslint-disable-next-line complexity, max-statements
function _copyTextureToTexture(device, options) {
    const { 
    /** Texture to copy to/from. */
    source, 
    /**  Mip-map level of the texture to copy to (Default 0) */
    destinationMipLevel = 0, 
    /** Defines which aspects of the texture to copy to/from. */
    // aspect = 'all',
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */
    origin = [0, 0], 
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */
    destinationOrigin = [0, 0], 
    /** Texture to copy to/from. */
    destination
    /**  Mip-map level of the texture to copy to/from. (Default 0) */
    // destinationMipLevel = options.mipLevel,
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
    // destinationOrigin = [0, 0],
    /** Defines which aspects of the texture to copy to/from. */
    // destinationAspect = options.aspect,
     } = options;
    let { width = options.destination.width, height = options.destination.height
    // depthOrArrayLayers = 0
     } = options;
    const { framebuffer, destroyFramebuffer } = getFramebuffer(source);
    const [sourceX, sourceY] = origin;
    const [destinationX, destinationY, destinationZ] = destinationOrigin;
    // @ts-expect-error native bindFramebuffer is overridden by our state tracker
    const prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
    // TODO - support gl.readBuffer (WebGL2 only)
    // const prevBuffer = gl.readBuffer(attachment);
    let texture = null;
    let textureTarget;
    if (destination instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTexture) {
        texture = destination;
        width = Number.isFinite(width) ? width : texture.width;
        height = Number.isFinite(height) ? height : texture.height;
        texture.bind(0);
        textureTarget = texture.target;
    }
    else {
        throw new Error('invalid destination');
    }
    switch (textureTarget) {
        case 3553:
        case 34067:
            device.gl.copyTexSubImage2D(textureTarget, destinationMipLevel, destinationX, destinationY, sourceX, sourceY, width, height);
            break;
        case 35866:
        case 32879:
            device.gl.copyTexSubImage3D(textureTarget, destinationMipLevel, destinationX, destinationY, destinationZ, sourceX, sourceY, width, height);
            break;
        default:
    }
    if (texture) {
        texture.unbind();
    }
    device.gl.bindFramebuffer(36160, prevHandle);
    if (destroyFramebuffer) {
        framebuffer.destroy();
    }
}
// Returns number of components in a specific readPixels WebGL format
function glFormatToComponents(format) {
    switch (format) {
        case 6406:
        case 33326:
        case 6403:
            return 1;
        case 33328:
        case 33319:
            return 2;
        case 6407:
        case 34837:
            return 3;
        case 6408:
        case 34836:
            return 4;
        // TODO: Add support for additional WebGL2 formats
        default:
            throw new Error('GLFormat');
    }
}
// Return byte count for given readPixels WebGL type
function glTypeToBytes(type) {
    switch (type) {
        case 5121:
            return 1;
        case 33635:
        case 32819:
        case 32820:
            return 2;
        case 5126:
            return 4;
        // TODO: Add support for additional WebGL2 types
        default:
            throw new Error('GLType');
    }
}
// Helper methods
function getFramebuffer(source) {
    if (source instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Texture) {
        const { width, height, id } = source;
        const framebuffer = source.device.createFramebuffer({
            id: `framebuffer-for-${id}`,
            width,
            height,
            colorAttachments: [source]
        });
        return { framebuffer, destroyFramebuffer: true };
    }
    return { framebuffer: source, destroyFramebuffer: false };
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLCommandEncoder: () => (/* binding */ WEBGLCommandEncoder)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js");
/* harmony import */ var _webgl_command_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webgl-command-buffer.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


class WEBGLCommandEncoder extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.CommandEncoder {
    device;
    commandBuffer;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.commandBuffer = new _webgl_command_buffer_js__WEBPACK_IMPORTED_MODULE_1__.WEBGLCommandBuffer(device);
    }
    destroy() { }
    finish() {
        this.commandBuffer.submitCommands();
    }
    // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;
    // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;
    // finish(options?: {id?: string}): GPUCommandBuffer;
    copyBufferToBuffer(options) {
        this.commandBuffer.commands.push({ name: 'copy-buffer-to-buffer', options });
    }
    copyBufferToTexture(options) {
        this.commandBuffer.commands.push({ name: 'copy-buffer-to-texture', options });
    }
    copyTextureToBuffer(options) {
        this.commandBuffer.commands.push({ name: 'copy-texture-to-buffer', options });
    }
    copyTextureToTexture(options) {
        this.commandBuffer.commands.push({ name: 'copy-texture-to-texture', options });
    }
    pushDebugGroup(groupLabel) { }
    popDebugGroup() { }
    insertDebugMarker(markerLabel) { }
    resolveQuerySet(querySet, destination, options) { }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLFramebuffer: () => (/* binding */ WEBGLFramebuffer)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl-texture.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */ var _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webgl-texture-view.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js");
/* harmony import */ var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../converters/texture-formats.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors





/** luma.gl Framebuffer, WebGL implementation  */
class WEBGLFramebuffer extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Framebuffer {
    device;
    gl;
    handle;
    get texture() {
        return this.colorAttachments[0];
    }
    constructor(device, props) {
        super(device, props);
        // WebGL default framebuffer handle is null
        const isDefaultFramebuffer = props.handle === null;
        this.device = device;
        this.gl = device.gl;
        this.handle =
            this.props.handle || isDefaultFramebuffer ? this.props.handle : this.gl.createFramebuffer();
        if (!isDefaultFramebuffer) {
            // default framebuffer handle is null, so we can't set spector metadata...
            device.setSpectorMetadata(this.handle, { id: this.props.id, props: this.props });
            // Auto create textures for attachments if needed
            this.autoCreateAttachmentTextures();
            /** Attach from a map of attachments */
            // @ts-expect-error native bindFramebuffer is overridden by our state tracker
            const prevHandle = this.gl.bindFramebuffer(36160, this.handle);
            // Walk the attachments
            for (let i = 0; i < this.colorAttachments.length; ++i) {
                const attachment = this.colorAttachments[i];
                const attachmentPoint = 36064 + i;
                if (attachment) {
                    this._attachOne(attachmentPoint, attachment);
                }
            }
            if (this.depthStencilAttachment) {
                this._attachOne((0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__.getDepthStencilAttachmentWebGL)(this.depthStencilAttachment.props.format), this.depthStencilAttachment);
            }
            /** Check the status */
            // @ts-expect-error
            if (props.check !== false) {
                const status = this.gl.checkFramebufferStatus(36160);
                if (status !== 36053) {
                    throw new Error(`Framebuffer ${_getFrameBufferStatus(status)}`);
                }
            }
            this.gl.bindFramebuffer(36160, prevHandle);
        }
    }
    /** destroys any auto created resources etc. */
    destroy() {
        super.destroy(); // destroys owned resources etc.
        if (!this.destroyed && this.handle !== null) {
            this.gl.deleteFramebuffer(this.handle);
            // this.handle = null;
        }
    }
    // PRIVATE
    /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */
    createDepthStencilTexture(format) {
        // return new WEBGLRenderbuffer(this.device, {
        return new _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTexture(this.device, {
            id: `${this.id}-depth-stencil`,
            format,
            width: this.width,
            height: this.height,
            mipmaps: false
        });
    }
    /**
     * Attachment resize is expected to be a noop if size is same
     */
    resizeAttachments(width, height) {
        // for default framebuffer, just update the stored size
        if (this.handle === null) {
            // assert(width === undefined && height === undefined);
            this.width = this.gl.drawingBufferWidth;
            this.height = this.gl.drawingBufferHeight;
            return this;
        }
        if (width === undefined) {
            width = this.gl.drawingBufferWidth;
        }
        if (height === undefined) {
            height = this.gl.drawingBufferHeight;
        }
        // TODO Not clear that this is better than default destroy/create implementation
        for (const colorAttachment of this.colorAttachments) {
            colorAttachment.texture.resize({ width, height });
        }
        if (this.depthStencilAttachment) {
            this.depthStencilAttachment.texture.resize({ width, height });
        }
        return this;
    }
    /** Attach one attachment */
    _attachOne(attachmentPoint, attachment) {
        // if (attachment instanceof WEBGLRenderbuffer) {
        //   this._attachWEBGLRenderbuffer(attachmentPoint, attachment);
        //   return attachment;
        // }
        if (Array.isArray(attachment)) {
            const [texture, layer = 0, level = 0] = attachment;
            this._attachTexture(attachmentPoint, texture, layer, level);
            return texture;
        }
        if (attachment instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTexture) {
            this._attachTexture(attachmentPoint, attachment, 0, 0);
            return attachment;
        }
        if (attachment instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_3__.WEBGLTextureView) {
            const textureView = attachment;
            this._attachTexture(attachmentPoint, textureView.texture, textureView.props.baseMipLevel, textureView.props.baseArrayLayer);
            return attachment.texture;
        }
        throw new Error('attach');
    }
    // TODO - we do not seem to need render buffers in WebGL 2
    // protected _attachWEBGLRenderbuffer(attachment: GL, renderbuffer: WEBGLRenderbuffer): void {
    //   this.gl.framebufferRenderbuffer(
    //     GL.FRAMEBUFFER,
    //     attachment,
    //     GL.RENDERBUFFER,
    //     renderbuffer.handle
    //   );
    // }
    /**
     * @param attachment
     * @param texture
     * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`
     * @param level = 0 - mipmapLevel
     */
    _attachTexture(attachment, texture, layer, level) {
        const { gl } = this.device;
        gl.bindTexture(texture.target, texture.handle);
        switch (texture.target) {
            case 35866:
            case 32879:
                gl.framebufferTextureLayer(36160, attachment, texture.target, level, layer);
                break;
            case 34067:
                // layer must be a cubemap face (or if index, converted to cube map face)
                const face = mapIndexToCubeMapFace(layer);
                gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);
                break;
            case 3553:
                gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);
                break;
            default:
                (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(false, 'Illegal texture type');
        }
        gl.bindTexture(texture.target, null);
    }
}
// Helper functions
// Map an index to a cube map face constant
function mapIndexToCubeMapFace(layer) {
    // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)
    // if smaller assume layer is index, otherwise assume it is already a cube map face constant
    return layer < 34069
        ? layer + 34069
        : layer;
}
// Helper METHODS
// Get a string describing the framebuffer error if installed
function _getFrameBufferStatus(status) {
    switch (status) {
        case 36053:
            return 'success';
        case 36054:
            return 'Mismatched attachments';
        case 36055:
            return 'No attachments';
        case 36057:
            return 'Height/width mismatch';
        case 36061:
            return 'Unsupported or split attachments';
        // WebGL2
        case 36182:
            return 'Samples mismatch';
        // OVR_multiview2 extension
        // case GL.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: return 'baseViewIndex mismatch';
        default:
            return `${status}`;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLQuerySet: () => (/* binding */ WEBGLQuerySet)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/query-set.js");
// WebGL2 Query (also handles disjoint timer extensions)


/**
 * Asynchronous queries for different kinds of information
 */
class WEBGLQuerySet extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.QuerySet {
    device;
    handle;
    target = null;
    _queryPending = false;
    _pollingPromise = null;
    get [Symbol.toStringTag]() {
        return 'Query';
    }
    // Create a query class
    constructor(device, props) {
        super(device, props);
        this.device = device;
        if (props.count > 1) {
            throw new Error('WebGL QuerySet can only have one value');
        }
        this.handle = this.device.gl.createQuery();
        Object.seal(this);
    }
    destroy() {
        this.device.gl.deleteQuery(this.handle);
    }
    // FOR RENDER PASS AND COMMAND ENCODER
    /**
     * Shortcut for timer query (dependent on extension in both WebGL1 and 2)
     * Measures GPU time delta between this call and a matching `end` call in the
     * GPU instruction stream.
     */
    beginTimestampQuery() {
        return this._begin(35007);
    }
    endTimestampQuery() {
        this._end();
    }
    // Shortcut for occlusion queries
    beginOcclusionQuery(options) {
        return this._begin(options?.conservative ? 36202 : 35887);
    }
    endOcclusionQuery() {
        this._end();
    }
    // Shortcut for transformFeedbackQuery
    beginTransformFeedbackQuery() {
        return this._begin(35976);
    }
    endTransformFeedbackQuery() {
        this._end();
    }
    async resolveQuery() {
        const value = await this.pollQuery();
        return [value];
    }
    // PRIVATE METHODS
    /**
     * Due to OpenGL API limitations, after calling `begin()` on one Query
     * instance, `end()` must be called on that same instance before
     * calling `begin()` on another query. While there can be multiple
     * outstanding queries representing disjoint `begin()`/`end()` intervals.
     * It is not possible to interleave or overlap `begin` and `end` calls.
     */
    _begin(target) {
        // Don't start a new query if one is already active.
        if (this._queryPending) {
            return;
        }
        this.target = target;
        this.device.gl.beginQuery(this.target, this.handle);
        return;
    }
    // ends the current query
    _end() {
        // Can't end a new query if the last one hasn't been resolved.
        if (this._queryPending) {
            return;
        }
        if (this.target) {
            this.device.gl.endQuery(this.target);
            this.target = null;
            this._queryPending = true;
        }
        return;
    }
    // Returns true if the query result is available
    isResultAvailable() {
        if (!this._queryPending) {
            return false;
        }
        const resultAvailable = this.device.gl.getQueryParameter(this.handle, 34919);
        if (resultAvailable) {
            this._queryPending = false;
        }
        return resultAvailable;
    }
    // Timing query is disjoint, i.e. results are invalid
    isTimerDisjoint() {
        return this.device.gl.getParameter(36795);
    }
    // Returns query result.
    getResult() {
        return this.device.gl.getQueryParameter(this.handle, 34918);
    }
    // Returns the query result, converted to milliseconds to match JavaScript conventions.
    getTimerMilliseconds() {
        return this.getResult() / 1e6;
    }
    // Polls the query
    pollQuery(limit = Number.POSITIVE_INFINITY) {
        if (this._pollingPromise) {
            return this._pollingPromise;
        }
        let counter = 0;
        this._pollingPromise = new Promise((resolve, reject) => {
            const poll = () => {
                if (this.isResultAvailable()) {
                    resolve(this.getResult());
                    this._pollingPromise = null;
                }
                else if (counter++ > limit) {
                    reject('Timed out');
                    this._pollingPromise = null;
                }
                else {
                    requestAnimationFrame(poll);
                }
            };
            requestAnimationFrame(poll);
        });
        return this._pollingPromise;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLRenderPass: () => (/* binding */ WEBGLRenderPass)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js");
/* harmony import */ var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../context/state-tracker/with-parameters.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
/* harmony import */ var _context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/parameters/unified-parameter-api.js */ "./node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */ var _context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/state-tracker/track-context-state.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors





// Should collapse during minification
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_COLOR = 0x1800;
const COLOR_CHANNELS = [0x1, 0x2, 0x4, 0x8]; // GPUColorWrite RED, GREEN, BLUE, ALPHA
class WEBGLRenderPass extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPass {
    device;
    /** Parameters that should be applied before each draw call */
    glParameters;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        // TODO - do parameters (scissorRect) affect the clear operation?
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(this.device.gl);
        this.setParameters(this.props.parameters);
        // Hack - for now WebGL draws in "immediate mode" (instead of queueing the operations)...
        this.clear();
    }
    end() {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(this.device.gl);
        // should add commands to CommandEncoder.
    }
    pushDebugGroup(groupLabel) { }
    popDebugGroup() { }
    insertDebugMarker(markerLabel) { }
    // beginOcclusionQuery(queryIndex: number): void;
    // endOcclusionQuery(): void;
    // executeBundles(bundles: Iterable<GPURenderBundle>): void;
    /**
     * Maps RenderPass parameters to GL parameters
     */
    setParameters(parameters = {}) {
        const glParameters = { ...this.glParameters };
        // Framebuffers are specified using parameters in WebGL
        if (this.props.framebuffer) {
            glParameters.framebuffer = this.props.framebuffer;
        }
        if (this.props.depthReadOnly) {
            glParameters.depthMask = !this.props.depthReadOnly;
        }
        glParameters.stencilMask = this.props.stencilReadOnly ? 0 : 1;
        glParameters[35977] = this.props.discard;
        // Map the four renderpass parameters to WebGL parameters
        if (parameters.viewport) {
            // WebGPU viewports are 6 coordinates (X, Y, Z)
            if (parameters.viewport.length >= 6) {
                glParameters.viewport = parameters.viewport.slice(0, 4);
                glParameters.depthRange = [parameters.viewport[4], parameters.viewport[5]];
            }
            else {
                // WebGL viewports are 4 coordinates (X, Y)
                glParameters.viewport = parameters.viewport;
            }
        }
        if (parameters.scissorRect) {
            glParameters.scissorTest = true;
            glParameters.scissor = parameters.scissorRect;
        }
        if (parameters.blendConstant) {
            glParameters.blendColor = parameters.blendConstant;
        }
        if (parameters.stencilReference) {
            // eslint-disable-next-line no-console
            console.warn('RenderPassParameters.stencilReference not yet implemented in WebGL');
            // parameters.stencilFunc = [func, ref, mask];
            // Does this work?
            parameters[2967] = parameters.stencilReference;
        }
        if (parameters.colorMask) {
            glParameters.colorMask = COLOR_CHANNELS.map(channel => Boolean(channel & parameters.colorMask));
        }
        this.glParameters = glParameters;
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__.setGLParameters)(this.device.gl, glParameters);
    }
    beginOcclusionQuery(queryIndex) {
        const webglQuerySet = this.props.occlusionQuerySet;
        webglQuerySet?.beginOcclusionQuery();
    }
    endOcclusionQuery() {
        const webglQuerySet = this.props.occlusionQuerySet;
        webglQuerySet?.endOcclusionQuery();
    }
    // PRIVATE
    /**
     * Optionally clears depth, color and stencil buffers based on parameters
     */
    clear() {
        const glParameters = { ...this.glParameters };
        let clearMask = 0;
        if (this.props.clearColor !== false) {
            clearMask |= GL_COLOR_BUFFER_BIT;
            glParameters.clearColor = this.props.clearColor;
        }
        if (this.props.clearDepth !== false) {
            clearMask |= GL_DEPTH_BUFFER_BIT;
            glParameters.clearDepth = this.props.clearDepth;
        }
        if (this.props.clearStencil !== false) {
            clearMask |= GL_STENCIL_BUFFER_BIT;
            glParameters.clearStencil = this.props.clearStencil;
        }
        if (clearMask !== 0) {
            // Temporarily set any clear "colors" and call clear
            (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_3__.withGLParameters)(this.device.gl, glParameters, () => {
                this.device.gl.clear(clearMask);
            });
            // TODO - clear multiple color attachments
            // for (attachment of this.framebuffer.colorAttachments) {
            //   this.clearColorBuffer
            // }
        }
    }
    /**
     * WebGL2 - clear a specific color buffer
     */
    clearColorBuffer(drawBuffer = 0, value = [0, 0, 0, 0]) {
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_3__.withGLParameters)(this.device.gl, { framebuffer: this.props.framebuffer }, () => {
            // Method selection per OpenGL ES 3 docs
            switch (value.constructor) {
                case Int32Array:
                    this.device.gl.clearBufferiv(GL_COLOR, drawBuffer, value);
                    break;
                case Uint32Array:
                    this.device.gl.clearBufferuiv(GL_COLOR, drawBuffer, value);
                    break;
                case Float32Array:
                default:
                    this.device.gl.clearBufferfv(GL_COLOR, drawBuffer, value);
                    break;
            }
        });
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLRenderPipeline: () => (/* binding */ WEBGLRenderPipeline)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/cast.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js");
/* harmony import */ var _helpers_get_shader_layout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/get-shader-layout.js */ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout.js");
/* harmony import */ var _converters_device_parameters_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../converters/device-parameters.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js");
/* harmony import */ var _helpers_set_uniform_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/set-uniform.js */ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js");
/* harmony import */ var _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webgl-buffer.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */ var _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./webgl-framebuffer.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js");
/* harmony import */ var _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./webgl-texture.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */ var _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./webgl-texture-view.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js");
/* harmony import */ var _helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/webgl-topology-utils.js */ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// import {mergeShaderLayout, getAttributeInfosFromLayouts} from '@luma.gl/core';









const LOG_PROGRAM_PERF_PRIORITY = 4;
/** Creates a new render pipeline */
class WEBGLRenderPipeline extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline {
    /** The WebGL device that created this render pipeline */
    device;
    /** Handle to underlying WebGL program */
    handle;
    /** vertex shader */
    vs;
    /** fragment shader */
    fs;
    /** The layout extracted from shader by WebGL introspection APIs */
    introspectedLayout;
    /** Uniforms set on this model */
    uniforms = {};
    /** Bindings set on this model */
    bindings = {};
    /** WebGL varyings */
    varyings = null;
    _uniformCount = 0;
    _uniformSetters = {}; // TODO are these used?
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.handle = this.props.handle || this.device.gl.createProgram();
        this.device.setSpectorMetadata(this.handle, { id: this.props.id });
        // Create shaders if needed
        this.vs = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.cast)(props.vs);
        this.fs = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.cast)(props.fs);
        // assert(this.vs.stage === 'vertex');
        // assert(this.fs.stage === 'fragment');
        // Setup varyings if supplied
        // @ts-expect-error WebGL only
        const { varyings, bufferMode = 35981 } = props;
        if (varyings && varyings.length > 0) {
            this.varyings = varyings;
            this.device.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);
        }
        this._linkShaders();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.time(1, `RenderPipeline ${this.id} - shaderLayout introspection`)();
        this.introspectedLayout = (0,_helpers_get_shader_layout_js__WEBPACK_IMPORTED_MODULE_3__.getShaderLayout)(this.device.gl, this.handle);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.timeEnd(1, `RenderPipeline ${this.id} - shaderLayout introspection`)();
        // Merge provided layout with introspected layout
        this.shaderLayout = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.mergeShaderLayout)(this.introspectedLayout, props.shaderLayout);
        // WebGPU has more restrictive topology support than WebGL
        switch (this.props.topology) {
            case 'triangle-fan-webgl':
            case 'line-loop-webgl':
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Primitive topology ${this.props.topology} is deprecated and will be removed in v9.1`);
                break;
            default:
        }
    }
    destroy() {
        if (this.handle) {
            this.device.gl.deleteProgram(this.handle);
            // this.handle = null;
            this.destroyed = true;
        }
    }
    /**
     * Bindings include: textures, samplers and uniform buffers
     * @todo needed for portable model
     */
    setBindings(bindings, options) {
        // if (log.priority >= 2) {
        //   checkUniformValues(uniforms, this.id, this._uniformSetters);
        // }
        for (const [name, value] of Object.entries(bindings)) {
            // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block
            // This convention allows shaders to name uniform blocks as `uniform appUniforms {} app;`
            // and reference them as `app` from both GLSL and JS.
            // TODO - this is rather hacky - we could also remap the name directly in the shader layout.
            const binding = this.shaderLayout.bindings.find(binding => binding.name === name) ||
                this.shaderLayout.bindings.find(binding => binding.name === `${name}Uniforms`);
            if (!binding) {
                const validBindings = this.shaderLayout.bindings
                    .map(binding => `"${binding.name}"`)
                    .join(', ');
                if (!options?.disableWarnings) {
                    _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Unknown binding "${name}" in render pipeline "${this.id}", expected one of ${validBindings}`)();
                }
                continue; // eslint-disable-line no-continue
            }
            if (!value) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Unsetting binding "${name}" in render pipeline "${this.id}"`)();
            }
            switch (binding.type) {
                case 'uniform':
                    // @ts-expect-error
                    if (!(value instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__.WEBGLBuffer) && !(value.buffer instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__.WEBGLBuffer)) {
                        throw new Error('buffer value');
                    }
                    break;
                case 'texture':
                    if (!(value instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView ||
                        value instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture ||
                        value instanceof _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLFramebuffer)) {
                        throw new Error('texture value');
                    }
                    break;
                case 'sampler':
                    _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Ignoring sampler ${name}`)();
                    break;
                default:
                    throw new Error(binding.type);
            }
            this.bindings[name] = value;
        }
    }
    /** @todo needed for portable model
     * @note The WebGL API is offers many ways to draw things
     * This function unifies those ways into a single call using common parameters with sane defaults
     */
    draw(options) {
        const { renderPass, parameters = this.props.parameters, topology = this.props.topology, vertexArray, vertexCount, 
        // indexCount,
        instanceCount, isInstanced = false, firstVertex = 0, 
        // firstIndex,
        // firstInstance,
        // baseVertex,
        transformFeedback } = options;
        const glDrawMode = (0,_helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_9__.getGLDrawMode)(topology);
        const isIndexed = Boolean(vertexArray.indexBuffer);
        const glIndexType = vertexArray.indexBuffer?.glIndexType;
        // Note that we sometimes get called with 0 instances
        // If we are using async linking, we need to wait until linking completes
        if (this.linkStatus !== 'success') {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline:${this.id}.draw() aborted - waiting for shader linking`)();
            return false;
        }
        // Avoid WebGL draw call when not rendering any data or values are incomplete
        // Note: async textures set as uniforms might still be loading.
        // Now that all uniforms have been updated, check if any texture
        // in the uniforms is not yet initialized, then we don't draw
        if (!this._areTexturesRenderable() || vertexCount === 0) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline:${this.id}.draw() aborted - textures not yet loaded`)();
            return false;
        }
        // (isInstanced && instanceCount === 0)
        if (vertexCount === 0) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline:${this.id}.draw() aborted - no vertices to draw`)();
            return true;
        }
        this.device.gl.useProgram(this.handle);
        // Note: Rebinds constant attributes before each draw call
        vertexArray.bindBeforeRender(renderPass);
        if (transformFeedback) {
            transformFeedback.begin(this.props.topology);
        }
        // We have to apply bindings before every draw call since other draw calls will overwrite
        this._applyBindings();
        this._applyUniforms();
        const webglRenderPass = renderPass;
        (0,_converters_device_parameters_js__WEBPACK_IMPORTED_MODULE_10__.withDeviceAndGLParameters)(this.device, parameters, webglRenderPass.glParameters, () => {
            if (isIndexed && isInstanced) {
                this.device.gl.drawElementsInstanced(glDrawMode, vertexCount || 0, // indexCount?
                glIndexType, firstVertex, instanceCount || 0);
                // } else if (isIndexed && this.device.isWebGL2 && !isNaN(start) && !isNaN(end)) {
                //   this.device.gldrawRangeElements(glDrawMode, start, end, vertexCount, glIndexType, offset);
            }
            else if (isIndexed) {
                this.device.gl.drawElements(glDrawMode, vertexCount || 0, glIndexType, firstVertex); // indexCount?
            }
            else if (isInstanced) {
                this.device.gl.drawArraysInstanced(glDrawMode, firstVertex, vertexCount || 0, instanceCount || 0);
            }
            else {
                this.device.gl.drawArrays(glDrawMode, firstVertex, vertexCount || 0);
            }
            if (transformFeedback) {
                transformFeedback.end();
            }
        });
        vertexArray.unbindAfterRender(renderPass);
        return true;
    }
    // DEPRECATED METHODS
    setUniformsWebGL(uniforms) {
        const { bindings } = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_11__.splitUniformsAndBindings)(uniforms);
        Object.keys(bindings).forEach(name => {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Unsupported value "${JSON.stringify(bindings[name])}" used in setUniforms() for key ${name}. Use setBindings() instead?`)();
        });
        // TODO - check against layout
        Object.assign(this.uniforms, uniforms);
    }
    // PRIVATE METHODS
    // setAttributes(attributes: Record<string, Buffer>): void {}
    // setBindings(bindings: Record<string, Binding>): void {}
    async _linkShaders() {
        const { gl } = this.device;
        gl.attachShader(this.handle, this.vs.handle);
        gl.attachShader(this.handle, this.fs.handle);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
        gl.linkProgram(this.handle);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
        // TODO Avoid checking program linking error in production
        if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.level === 0) {
            // return;
        }
        if (!this.device.features.has('compilation-status-async-webgl')) {
            const status = this._getLinkStatus();
            this._reportLinkStatus(status);
            return;
        }
        // async case
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.once(1, 'RenderPipeline linking is asynchronous')();
        await this._waitForLinkComplete();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline ${this.id} - async linking complete: ${this.linkStatus}`)();
        const status = this._getLinkStatus();
        this._reportLinkStatus(status);
    }
    /** Report link status. First, check for shader compilation failures if linking fails */
    _reportLinkStatus(status) {
        switch (status) {
            case 'success':
                return;
            default:
                // First check for shader compilation failures if linking fails
                if (this.vs.compilationStatus === 'error') {
                    this.vs.debugShader();
                    throw new Error(`Error during compilation of shader ${this.vs.id}`);
                }
                if (this.fs?.compilationStatus === 'error') {
                    this.fs.debugShader();
                    throw new Error(`Error during compilation of shader ${this.fs.id}`);
                }
                throw new Error(`Error during ${status}: ${this.device.gl.getProgramInfoLog(this.handle)}`);
        }
    }
    /**
     * Get the shader compilation status
     * TODO - Load log even when no error reported, to catch warnings?
     * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
     */
    _getLinkStatus() {
        const { gl } = this.device;
        const linked = gl.getProgramParameter(this.handle, 35714);
        if (!linked) {
            this.linkStatus = 'error';
            return 'linking';
        }
        gl.validateProgram(this.handle);
        const validated = gl.getProgramParameter(this.handle, 35715);
        if (!validated) {
            this.linkStatus = 'error';
            return 'validation';
        }
        this.linkStatus = 'success';
        return 'success';
    }
    /** Use KHR_parallel_shader_compile extension if available */
    async _waitForLinkComplete() {
        const waitMs = async (ms) => await new Promise(resolve => setTimeout(resolve, ms));
        const DELAY_MS = 10; // Shader compilation is typically quite fast (with some exceptions)
        // If status polling is not available, we can't wait for completion. Just wait a little to minimize blocking
        if (!this.device.features.has('compilation-status-async-webgl')) {
            await waitMs(DELAY_MS);
            return;
        }
        const { gl } = this.device;
        for (;;) {
            const complete = gl.getProgramParameter(this.handle, 37297);
            if (complete) {
                return;
            }
            await waitMs(DELAY_MS);
        }
    }
    /**
     * Checks if all texture-values uniforms are renderable (i.e. loaded)
     * Update a texture if needed (e.g. from video)
     * Note: This is currently done before every draw call
     */
    _areTexturesRenderable() {
        let texturesRenderable = true;
        for (const [, texture] of Object.entries(this.bindings)) {
            if (texture instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture) {
                texture.update();
                texturesRenderable = texturesRenderable && texture.loaded;
            }
        }
        return texturesRenderable;
    }
    /** Apply any bindings (before each draw call) */
    _applyBindings() {
        // If we are using async linking, we need to wait until linking completes
        if (this.linkStatus !== 'success') {
            return;
        }
        const { gl } = this.device;
        gl.useProgram(this.handle);
        let textureUnit = 0;
        let uniformBufferIndex = 0;
        for (const binding of this.shaderLayout.bindings) {
            // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block
            const value = this.bindings[binding.name] || this.bindings[binding.name.replace(/Uniforms$/, '')];
            if (!value) {
                throw new Error(`No value for binding ${binding.name} in ${this.id}`);
            }
            switch (binding.type) {
                case 'uniform':
                    // Set buffer
                    const { name } = binding;
                    const location = gl.getUniformBlockIndex(this.handle, name);
                    if (location === 4294967295) {
                        throw new Error(`Invalid uniform block name ${name}`);
                    }
                    gl.uniformBlockBinding(this.handle, uniformBufferIndex, location);
                    // console.debug(binding, location);
                    if (value instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__.WEBGLBuffer) {
                        gl.bindBufferBase(35345, uniformBufferIndex, value.handle);
                    }
                    else {
                        gl.bindBufferRange(35345, uniformBufferIndex, 
                        // @ts-expect-error
                        value.buffer.handle, 
                        // @ts-expect-error
                        value.offset || 0, 
                        // @ts-expect-error
                        value.size || value.buffer.byteLength - value.offset);
                    }
                    uniformBufferIndex += 1;
                    break;
                case 'texture':
                    if (!(value instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView ||
                        value instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture ||
                        value instanceof _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLFramebuffer)) {
                        throw new Error('texture');
                    }
                    let texture;
                    if (value instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView) {
                        texture = value.texture;
                    }
                    else if (value instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture) {
                        texture = value;
                    }
                    else if (value instanceof _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLFramebuffer &&
                        value.colorAttachments[0] instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView) {
                        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn('Passing framebuffer in texture binding may be deprecated. Use fbo.colorAttachments[0] instead')();
                        texture = value.colorAttachments[0].texture;
                    }
                    else {
                        throw new Error('No texture');
                    }
                    gl.activeTexture(33984 + textureUnit);
                    gl.bindTexture(texture.target, texture.handle);
                    // gl.bindSampler(textureUnit, sampler.handle);
                    textureUnit += 1;
                    break;
                case 'sampler':
                    // ignore
                    break;
                case 'storage':
                case 'read-only-storage':
                    throw new Error(`binding type '${binding.type}' not supported in WebGL`);
            }
        }
    }
    /**
     * Due to program sharing, uniforms need to be reset before every draw call
     * (though caching will avoid redundant WebGL calls)
     */
    _applyUniforms() {
        for (const uniformLayout of this.shaderLayout.uniforms || []) {
            const { name, location, type, textureUnit } = uniformLayout;
            const value = this.uniforms[name] ?? textureUnit;
            if (value !== undefined) {
                (0,_helpers_set_uniform_js__WEBPACK_IMPORTED_MODULE_12__.setUniform)(this.device.gl, location, type, value);
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLSampler: () => (/* binding */ WEBGLSampler)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/sampler.js");
/* harmony import */ var _converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../converters/sampler-parameters.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Sampler object -
 * so that they can be set directly on the texture
 * https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/sampler_object.html
 */
class WEBGLSampler extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Sampler {
    device;
    handle;
    parameters;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.parameters = (0,_converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_1__.convertSamplerParametersToWebGL)(props);
        this.handle = this.handle || this.device.gl.createSampler();
        this._setSamplerParameters(this.parameters);
    }
    destroy() {
        if (this.handle) {
            this.device.gl.deleteSampler(this.handle);
            // @ts-expect-error read-only/undefined
            this.handle = undefined;
        }
    }
    toString() {
        return `Sampler(${this.id},${JSON.stringify(this.props)})`;
    }
    /** Set sampler parameters on the sampler */
    _setSamplerParameters(parameters) {
        for (const [pname, value] of Object.entries(parameters)) {
            // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.
            // For now, pick the float version for parameters specified as GLfloat.
            const param = Number(pname);
            switch (param) {
                case 33082:
                case 33083:
                    this.device.gl.samplerParameterf(this.handle, param, value);
                    break;
                default:
                    this.device.gl.samplerParameteri(this.handle, param, value);
                    break;
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLShader: () => (/* binding */ WEBGLShader)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/shader.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _helpers_parse_shader_compiler_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/parse-shader-compiler-log.js */ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * An immutable compiled shader program that execute portions of the GPU Pipeline
 */
class WEBGLShader extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Shader {
    device;
    handle;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        switch (this.props.stage) {
            case 'vertex':
                this.handle = this.props.handle || this.device.gl.createShader(35633);
                break;
            case 'fragment':
                this.handle = this.props.handle || this.device.gl.createShader(35632);
                break;
            default:
                throw new Error(this.props.stage);
        }
        this._compile(this.source);
    }
    destroy() {
        if (this.handle) {
            this.removeStats();
            this.device.gl.deleteShader(this.handle);
            // this.handle = null;
            this.destroyed = true;
        }
    }
    async getCompilationInfo() {
        await this._waitForCompilationComplete();
        return this.getCompilationInfoSync();
    }
    getCompilationInfoSync() {
        const log = this.device.gl.getShaderInfoLog(this.handle);
        return (0,_helpers_parse_shader_compiler_log_js__WEBPACK_IMPORTED_MODULE_1__.parseShaderCompilerLog)(log);
    }
    getTranslatedSource() {
        const extensions = this.device.getExtension('WEBGL_debug_shaders');
        const ext = extensions.WEBGL_debug_shaders;
        return ext?.getTranslatedShaderSource(this.handle);
    }
    // PRIVATE METHODS
    /** Compile a shader and get compilation status */
    async _compile(source) {
        const addGLSLVersion = (source) => source.startsWith('#version ') ? source : `#version 100\n${source}`;
        source = addGLSLVersion(source);
        const { gl } = this.device;
        gl.shaderSource(this.handle, source);
        gl.compileShader(this.handle);
        // For performance reasons, avoid checking shader compilation errors on production
        if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.level === 0) {
            this.compilationStatus = 'pending';
            return;
        }
        // Sync case - slower, but advantage is that it throws in the constructor, making break on error more useful
        if (!this.device.features.has('compilation-status-async-webgl')) {
            this._getCompilationStatus();
            // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus
            this.debugShader();
            if (this.compilationStatus === 'error') {
                throw new Error(`GLSL compilation errors in ${this.props.stage} shader ${this.props.id}`);
            }
            return;
        }
        // async case
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.once(1, 'Shader compilation is asynchronous')();
        await this._waitForCompilationComplete();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `Shader ${this.id} - async compilation complete: ${this.compilationStatus}`)();
        this._getCompilationStatus();
        // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus
        this.debugShader();
    }
    /** Use KHR_parallel_shader_compile extension if available */
    async _waitForCompilationComplete() {
        const waitMs = async (ms) => await new Promise(resolve => setTimeout(resolve, ms));
        const DELAY_MS = 10; // Shader compilation is typically quite fast (with some exceptions)
        // If status polling is not available, we can't wait for completion. Just wait a little to minimize blocking
        if (!this.device.features.has('compilation-status-async-webgl')) {
            await waitMs(DELAY_MS);
            return;
        }
        const { gl } = this.device;
        for (;;) {
            const complete = gl.getShaderParameter(this.handle, 37297);
            if (complete) {
                return;
            }
            await waitMs(DELAY_MS);
        }
    }
    /**
     * Get the shader compilation status
     * TODO - Load log even when no error reported, to catch warnings?
     * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
     */
    _getCompilationStatus() {
        this.compilationStatus = this.device.gl.getShaderParameter(this.handle, 35713)
            ? 'success'
            : 'error';
    }
}
// TODO - Original code from luma.gl v8 - keep until new debug functionality has matured
// if (!compilationSuccess) {
//   const parsedLog = shaderLog ? parseShaderCompilerLog(shaderLog) : [];
//   const messages = parsedLog.filter(message => message.type === 'error');
//   const formattedLog = formatCompilerLog(messages, source, {showSourceCode: 'all', html: true});
//   const shaderDescription = `${this.stage} shader ${shaderName}`;
//   log.error(`GLSL compilation errors in ${shaderDescription}\n${formattedLog}`)();
//   displayShaderLog(parsedLog, source, shaderName);
// }


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLTextureView: () => (/* binding */ WEBGLTextureView)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// import {decodeTextureFormat} from '@luma.gl/core';

class WEBGLTextureView extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.TextureView {
    device;
    gl;
    handle;
    texture;
    constructor(device, props) {
        super(device, { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.Texture.defaultProps, ...props });
        this.device = device;
        this.gl = this.device.gl;
        this.handle = null;
        this.texture = props.texture;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_WEBGL_TEXTURE_PROPS: () => (/* binding */ DEFAULT_WEBGL_TEXTURE_PROPS),
/* harmony export */   WEBGLTexture: () => (/* binding */ WEBGLTexture)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/load-file.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../context/state-tracker/with-parameters.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
/* harmony import */ var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../converters/texture-formats.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
/* harmony import */ var _converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../converters/sampler-parameters.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js");
/* harmony import */ var _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./webgl-buffer.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */ var _webgl_sampler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webgl-sampler.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js");
/* harmony import */ var _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl-texture-view.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors








const DEFAULT_WEBGL_TEXTURE_PROPS = {
    // deprecated
    parameters: {},
    pixelStore: {},
    pixels: null,
    border: 0,
    dataFormat: undefined,
    textureUnit: undefined,
    target: undefined
};
// Polyfill
class WEBGLTexture extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Texture {
    // TODO - remove?
    static FACES = [
        34069,
        34070,
        34071,
        34072,
        34073,
        34074
    ];
    MAX_ATTRIBUTES;
    device;
    gl;
    handle;
    // (TODO - currently unused in WebGL, but WebGL 2 does support sampler objects) */
    sampler = undefined;
    view = undefined;
    // data;
    glFormat = undefined;
    type = undefined;
    dataFormat = undefined;
    mipmaps = undefined;
    /**
     * @note `target` cannot be modified by bind:
     * textures are special because when you first bind them to a target,
     * they get special information. When you first bind a texture as a
     * GL_TEXTURE_2D, you are saying that this texture is a 2D texture.
     * And it will always be a 2D texture; this state cannot be changed ever.
     * A texture that was first bound as a GL_TEXTURE_2D, must always be bound as a GL_TEXTURE_2D;
     * attempting to bind it as GL_TEXTURE_3D will give rise to a run-time error
     * */
    target;
    textureUnit = undefined;
    /**
     * Program.draw() checks the loaded flag of all textures to avoid
     * Textures that are still loading from promises
     * Set to true as soon as texture has been initialized with valid data
     */
    loaded = false;
    _video;
    constructor(device, props) {
        super(device, { ...DEFAULT_WEBGL_TEXTURE_PROPS, format: 'rgba8unorm', ...props });
        this.device = device;
        this.gl = this.device.gl;
        this.handle = this.props.handle || this.gl.createTexture();
        this.device.setSpectorMetadata(this.handle, { ...this.props, data: typeof this.props.data }); // {name: this.props.id};
        this.glFormat = 6408;
        this.target = getWebGLTextureTarget(this.props);
        // Program.draw() checks the loaded flag of all textures
        this.loaded = false;
        // Signature: new Texture2D(gl, {data: url})
        if (typeof this.props?.data === 'string') {
            Object.assign(this.props, { data: (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.loadImage)(this.props.data) });
        }
        this.initialize(this.props);
        Object.seal(this);
    }
    destroy() {
        if (this.handle) {
            this.gl.deleteTexture(this.handle);
            this.removeStats();
            this.trackDeallocatedMemory('Texture');
            // this.handle = null;
            this.destroyed = true;
        }
    }
    toString() {
        return `Texture(${this.id},${this.width}x${this.height})`;
    }
    createView(props) {
        return new _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTextureView(this.device, { ...props, texture: this });
    }
    // eslint-disable-next-line max-statements
    initialize(props = {}) {
        // Cube textures
        if (this.props.dimension === 'cube') {
            return this.initializeCube(props);
        }
        let data = props.data;
        if (data instanceof Promise) {
            data.then(resolvedImageData => this.initialize(Object.assign({}, props, {
                pixels: resolvedImageData,
                data: resolvedImageData
            })));
            return this;
        }
        const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;
        // @ts-expect-error
        if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {
            this._video = null; // Declare member before the object is sealed
            // @ts-expect-error
            data.addEventListener('loadeddata', () => this.initialize(props));
            return this;
        }
        const { parameters = {} } = props;
        const { pixels = null, pixelStore = {}, textureUnit = undefined, mipmaps = true } = props;
        // pixels variable is for API compatibility purpose
        if (!data) {
            // TODO - This looks backwards? Commenting out for now until we decide
            // which prop to use
            // log.deprecated('data', 'pixels')();
            data = pixels;
        }
        let { width, height, dataFormat, type, compressed = false } = props;
        const { depth = 0 } = props;
        const glFormat = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.convertTextureFormatToGL)(props.format);
        // Deduce width and height
        ({ width, height, compressed, dataFormat, type } = this._deduceParameters({
            format: props.format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        // Store opts for accessors
        this.width = width;
        this.height = height;
        // this.depth = depth;
        this.glFormat = glFormat;
        this.type = type;
        this.dataFormat = dataFormat;
        this.textureUnit = textureUnit;
        if (Number.isFinite(this.textureUnit)) {
            this.gl.activeTexture(33984 + this.textureUnit);
            this.gl.bindTexture(this.target, this.handle);
        }
        this.mipmaps = mipmaps;
        this.setImageData({
            data,
            width,
            height,
            depth,
            format: glFormat,
            type,
            dataFormat,
            // @ts-expect-error
            parameters: pixelStore,
            compressed
        });
        // Set texture sampler parameters
        this.setSampler(props.sampler);
        this._setSamplerParameters(parameters);
        this.view = this.createView({ ...this.props, mipLevelCount: 1, arrayLayerCount: 1 });
        if (mipmaps && this.device.isTextureFormatFilterable(props.format)) {
            this.generateMipmap();
        }
        if (isVideo) {
            this._video = {
                video: data,
                parameters,
                // @ts-expect-error
                lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1
            };
        }
        return this;
    }
    initializeCube(props) {
        const { mipmaps = true, parameters = {} } = props;
        // Store props for accessors
        // this.props = props;
        // @ts-expect-error
        this.setCubeMapImageData(props).then(() => {
            this.loaded = true;
            // TODO - should genMipmap() be called on the cubemap or on the faces?
            // TODO - without generateMipmap() cube textures do not work at all!!! Why?
            if (mipmaps) {
                this.generateMipmap(props);
            }
            this.setSampler(props.sampler);
            this._setSamplerParameters(parameters);
        });
        return this;
    }
    setSampler(sampler = {}) {
        let samplerProps;
        if (sampler instanceof _webgl_sampler_js__WEBPACK_IMPORTED_MODULE_4__.WEBGLSampler) {
            this.sampler = sampler;
            samplerProps = sampler.props;
        }
        else {
            this.sampler = new _webgl_sampler_js__WEBPACK_IMPORTED_MODULE_4__.WEBGLSampler(this.device, sampler);
            samplerProps = sampler;
        }
        const parameters = (0,_converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_5__.convertSamplerParametersToWebGL)(samplerProps);
        this._setSamplerParameters(parameters);
        return this;
    }
    /**
     * If size has changed, reinitializes with current format
     * @note note clears image and mipmaps
     */
    resize(options) {
        const { height, width, mipmaps = false } = options;
        if (width !== this.width || height !== this.height) {
            return this.initialize({
                width,
                height,
                format: this.format,
                type: this.type,
                dataFormat: this.dataFormat,
                mipmaps
            });
        }
        return this;
    }
    /** Update external texture (video frame) */
    update() {
        if (this._video) {
            const { video, parameters, lastTime } = this._video;
            // @ts-expect-error
            if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {
                return;
            }
            this.setSubImageData({
                data: video,
                parameters
            });
            if (this.mipmaps) {
                this.generateMipmap();
            }
            this._video.lastTime = video.currentTime;
        }
    }
    // Call to regenerate mipmaps after modifying texture(s)
    generateMipmap(params = {}) {
        this.mipmaps = true;
        this.gl.bindTexture(this.target, this.handle);
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, params, () => {
            this.gl.generateMipmap(this.target);
        });
        this.gl.bindTexture(this.target, null);
        return this;
    }
    /*
     * Allocates storage
     * @param {*} pixels -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param  width -
     * @param  height -
     * @param  mipMapLevel -
     * @param {GLenum} format - format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */
    // eslint-disable-next-line max-statements, complexity
    setImageData(options) {
        if (this.props.dimension === '3d' || this.props.dimension === '2d-array') {
            return this.setImageData3D(options);
        }
        this.trackDeallocatedMemory('Texture');
        const { target = this.target, pixels = null, level = 0, glFormat = this.glFormat, offset = 0, parameters = {} } = options;
        let { data = null, type = this.type, width = this.width, height = this.height, dataFormat = this.dataFormat, compressed = false } = options;
        // pixels variable is  for API compatibility purpose
        if (!data) {
            data = pixels;
        }
        ({ type, dataFormat, compressed, width, height } = this._deduceParameters({
            format: this.props.format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        const { gl } = this;
        gl.bindTexture(this.target, this.handle);
        let dataType = null;
        ({ data, dataType } = this._getDataType({ data, compressed }));
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, parameters, () => {
            switch (dataType) {
                case 'null':
                    gl.texImage2D(target, level, glFormat, width, height, 0 /* border*/, dataFormat, type, data);
                    break;
                case 'typed-array':
                    gl.texImage2D(target, level, glFormat, width, height, 0, // border (must be 0)
                    dataFormat, type, data, offset);
                    break;
                case 'buffer':
                    // WebGL2 enables creating textures directly from a WebGL buffer
                    this.device.gl.bindBuffer(35052, data.handle || data);
                    this.device.gl.texImage2D(target, level, glFormat, width, height, 0 /* border*/, dataFormat, type, offset);
                    this.device.gl.bindBuffer(35052, null);
                    break;
                case 'browser-object':
                    gl.texImage2D(target, level, glFormat, width, height, 0 /* border*/, dataFormat, type, data);
                    break;
                case 'compressed':
                    for (const [levelIndex, levelData] of data.entries()) {
                        gl.compressedTexImage2D(target, levelIndex, levelData.format, levelData.width, levelData.height, 0 /* border, must be 0 */, levelData.data);
                    }
                    break;
                default:
                    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(false, 'Unknown image data type');
            }
        });
        if (data && data.byteLength) {
            this.trackAllocatedMemory(data.byteLength, 'Texture');
        }
        else {
            const bytesPerPixel = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getTextureFormatBytesPerPixel)(this.props.format);
            this.trackAllocatedMemory(this.width * this.height * bytesPerPixel, 'Texture');
        }
        this.loaded = true;
        return this;
    }
    /**
     * Redefines an area of an existing texture
     * Note: does not allocate storage
     * Redefines an area of an existing texture
     */
    setSubImageData({ target = this.target, pixels = null, data = null, x = 0, y = 0, width = this.width, height = this.height, level = 0, glFormat = this.glFormat, type = this.type, dataFormat = this.dataFormat, compressed = false, offset = 0, parameters = {} }) {
        ({ type, dataFormat, compressed, width, height } = this._deduceParameters({
            format: this.props.format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(this.depth === 1, 'texSubImage not supported for 3D textures');
        // pixels variable is  for API compatibility purpose
        if (!data) {
            data = pixels;
        }
        // Support ndarrays
        if (data && data.data) {
            const ndarray = data;
            data = ndarray.data;
            width = ndarray.shape[0];
            height = ndarray.shape[1];
        }
        // Support buffers
        if (data instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLBuffer) {
            data = data.handle;
        }
        this.gl.bindTexture(this.target, this.handle);
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, parameters, () => {
            // TODO - x,y parameters
            if (compressed) {
                this.gl.compressedTexSubImage2D(target, level, x, y, width, height, glFormat, data);
            }
            else if (data === null) {
                this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);
            }
            else if (ArrayBuffer.isView(data)) {
                this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);
            }
            else if (typeof WebGLBuffer !== 'undefined' && data instanceof WebGLBuffer) {
                // WebGL2 allows us to create texture directly from a WebGL buffer
                // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER
                this.device.gl.bindBuffer(35052, data);
                this.device.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);
                this.device.gl.bindBuffer(35052, null);
            }
            else {
                // Assume data is a browser supported object (ImageData, Canvas, ...)
                this.device.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);
            }
        });
        this.gl.bindTexture(this.target, null);
    }
    /**
     * Defines a two-dimensional texture image or cube-map texture image with
     * pixels from the current framebuffer (rather than from client memory).
     * (gl.copyTexImage2D wrapper)
     *
     * Note that binding a texture into a Framebuffer's color buffer and
     * rendering can be faster.
     */
    copyFramebuffer(opts = {}) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.log.error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();
        return null;
    }
    getActiveUnit() {
        return this.gl.getParameter(34016) - 33984;
    }
    bind(textureUnit = this.textureUnit) {
        const { gl } = this;
        if (textureUnit !== undefined) {
            this.textureUnit = textureUnit;
            gl.activeTexture(33984 + textureUnit);
        }
        gl.bindTexture(this.target, this.handle);
        return textureUnit;
    }
    unbind(textureUnit = this.textureUnit) {
        const { gl } = this;
        if (textureUnit !== undefined) {
            this.textureUnit = textureUnit;
            gl.activeTexture(33984 + textureUnit);
        }
        gl.bindTexture(this.target, null);
        return textureUnit;
    }
    // PRIVATE METHODS
    _getDataType({ data, compressed = false }) {
        if (compressed) {
            return { data, dataType: 'compressed' };
        }
        if (data === null) {
            return { data, dataType: 'null' };
        }
        if (ArrayBuffer.isView(data)) {
            return { data, dataType: 'typed-array' };
        }
        if (data instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLBuffer) {
            return { data: data.handle, dataType: 'buffer' };
        }
        // Raw WebGL handle (not a luma wrapper)
        if (typeof WebGLBuffer !== 'undefined' && data instanceof WebGLBuffer) {
            return { data, dataType: 'buffer' };
        }
        // Assume data is a browser supported object (ImageData, Canvas, ...)
        return { data, dataType: 'browser-object' };
    }
    // HELPER METHODS
    _deduceParameters(opts) {
        const { format, data } = opts;
        let { width, height, dataFormat, type, compressed } = opts;
        // Deduce format and type from format
        const parameters = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getWebGLTextureParameters)(format);
        dataFormat = dataFormat || parameters.dataFormat;
        type = type || parameters.type;
        compressed = compressed || parameters.compressed;
        ({ width, height } = this._deduceImageSize(data, width, height));
        return { dataFormat, type, compressed, width, height, format, data };
    }
    // eslint-disable-next-line complexity
    _deduceImageSize(data, width, height) {
        let size;
        if (typeof ImageData !== 'undefined' && data instanceof ImageData) {
            size = { width: data.width, height: data.height };
        }
        else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {
            size = { width: data.naturalWidth, height: data.naturalHeight };
        }
        else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {
            size = { width: data.width, height: data.height };
        }
        else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {
            size = { width: data.width, height: data.height };
        }
        else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {
            size = { width: data.videoWidth, height: data.videoHeight };
        }
        else if (!data) {
            size = { width: width >= 0 ? width : 1, height: height >= 0 ? height : 1 };
        }
        else {
            size = { width, height };
        }
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(size, 'Could not deduced texture size');
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');
        return size;
    }
    // CUBE MAP METHODS
    /* eslint-disable max-statements, max-len */
    async setCubeMapImageData(options) {
        const { gl } = this;
        const { width, height, pixels, data, format = 6408, type = 5121 } = options;
        const imageDataMap = pixels || data;
        // pixel data (imageDataMap) is an Object from Face to Image or Promise.
        // For example:
        // {
        // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,
        // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,
        // ... }
        // To provide multiple level-of-details (LODs) this can be Face to Array
        // of Image or Promise, like this
        // {
        // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],
        // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],
        // ... }
        const resolvedFaces = await Promise.all(WEBGLTexture.FACES.map(face => {
            const facePixels = imageDataMap[face];
            return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);
        }));
        this.bind();
        WEBGLTexture.FACES.forEach((face, index) => {
            if (resolvedFaces[index].length > 1 && this.props.mipmaps !== false) {
                // If the user provides multiple LODs, then automatic mipmap
                // generation generateMipmap() should be disabled to avoid overwritting them.
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.log.warn(`${this.id} has mipmap and multiple LODs.`)();
            }
            resolvedFaces[index].forEach((image, lodLevel) => {
                // TODO: adjust width & height for LOD!
                if (width && height) {
                    gl.texImage2D(face, lodLevel, format, width, height, 0 /* border*/, format, type, image);
                }
                else {
                    gl.texImage2D(face, lodLevel, format, format, type, image);
                }
            });
        });
        this.unbind();
    }
    /** @todo update this method to accept LODs */
    setImageDataForFace(options) {
        const { face, width, height, pixels, data, format = 6408, type = 5121
        // generateMipmap = false // TODO
         } = options;
        const { gl } = this;
        const imageData = pixels || data;
        this.bind();
        if (imageData instanceof Promise) {
            imageData.then(resolvedImageData => this.setImageDataForFace(Object.assign({}, options, {
                face,
                data: resolvedImageData,
                pixels: resolvedImageData
            })));
        }
        else if (this.width || this.height) {
            gl.texImage2D(face, 0, format, width, height, 0 /* border*/, format, type, imageData);
        }
        else {
            gl.texImage2D(face, 0, format, format, type, imageData);
        }
        return this;
    }
    /** Image 3D copies from Typed Array or WebGLBuffer */
    setImageData3D(options) {
        const { level = 0, dataFormat, format, type, // = GL.UNSIGNED_BYTE,
        width, height, depth = 1, offset = 0, data, parameters = {} } = options;
        this.trackDeallocatedMemory('Texture');
        this.gl.bindTexture(this.target, this.handle);
        const webglTextureFormat = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getWebGLTextureParameters)(format);
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, parameters, () => {
            if (ArrayBuffer.isView(data)) {
                this.gl.texImage3D(this.target, level, webglTextureFormat.format, width, height, depth, 0 /* border, must be 0 */, webglTextureFormat.dataFormat, webglTextureFormat.type, // dataType: getWebGL,
                data);
            }
            if (data instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLBuffer) {
                this.gl.bindBuffer(35052, data.handle);
                this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, 0 /* border, must be 0 */, format, type, offset);
            }
        });
        if (data && data.byteLength) {
            this.trackAllocatedMemory(data.byteLength, 'Texture');
        }
        else {
            const bytesPerPixel = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getTextureFormatBytesPerPixel)(this.props.format);
            this.trackAllocatedMemory(this.width * this.height * this.depth * bytesPerPixel, 'Texture');
        }
        this.loaded = true;
        return this;
    }
    // RESOURCE METHODS
    /**
     * Sets sampler parameters on texture
     */
    _setSamplerParameters(parameters) {
        // NPOT parameters may populate an empty object
        if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.isObjectEmpty)(parameters)) {
            return;
        }
        logParameters(parameters);
        this.gl.bindTexture(this.target, this.handle);
        for (const [pname, pvalue] of Object.entries(parameters)) {
            const param = Number(pname);
            const value = pvalue;
            // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.
            // For now, pick the float version for parameters specified as GLfloat.
            switch (param) {
                case 33082:
                case 33083:
                    this.gl.texParameterf(this.target, param, value);
                    break;
                default:
                    this.gl.texParameteri(this.target, param, value);
                    break;
            }
        }
        this.gl.bindTexture(this.target, null);
        return;
    }
}
// HELPERS
function getWebGLTextureTarget(props) {
    switch (props.dimension) {
        // supported in WebGL
        case '2d':
            return 3553;
        case 'cube':
            return 34067;
        // supported in WebGL2
        case '2d-array':
            return 35866;
        case '3d':
            return 32879;
        // not supported in any WebGL version
        case '1d':
        case 'cube-array':
        default:
            throw new Error(props.dimension);
    }
}
function logParameters(parameters) {
    _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.log.log(1, 'texture sampler parameters', parameters)();
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLTransformFeedback: () => (/* binding */ WEBGLTransformFeedback)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */ var _helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/webgl-topology-utils.js */ "./node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js");




class WEBGLTransformFeedback extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.TransformFeedback {
    device;
    gl;
    handle;
    /**
     * NOTE: The Model already has this information while drawing, but
     * TransformFeedback currently needs it internally, to look up
     * varying information outside of a draw() call.
     */
    layout;
    buffers = {};
    unusedBuffers = {};
    /**
     * Allows us to avoid a Chrome bug where a buffer that is already bound to a
     * different target cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
     * This a major workaround, see: https://github.com/KhronosGroup/WebGL/issues/2346
     */
    bindOnUse = true;
    _bound = false;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.gl = device.gl;
        this.handle = this.props.handle || this.gl.createTransformFeedback();
        this.layout = this.props.layout;
        if (props.buffers) {
            this.setBuffers(props.buffers);
        }
        Object.seal(this);
    }
    destroy() {
        this.gl.deleteTransformFeedback(this.handle);
        super.destroy();
    }
    begin(topology = 'point-list') {
        this.gl.bindTransformFeedback(36386, this.handle);
        if (this.bindOnUse) {
            this._bindBuffers();
        }
        this.gl.beginTransformFeedback((0,_helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_1__.getGLPrimitive)(topology));
    }
    end() {
        this.gl.endTransformFeedback();
        if (this.bindOnUse) {
            this._unbindBuffers();
        }
        this.gl.bindTransformFeedback(36386, null);
    }
    // SUBCLASS
    setBuffers(buffers) {
        this.buffers = {};
        this.unusedBuffers = {};
        this.bind(() => {
            for (const bufferName in buffers) {
                this.setBuffer(bufferName, buffers[bufferName]);
            }
        });
    }
    setBuffer(locationOrName, bufferOrRange) {
        const location = this._getVaryingIndex(locationOrName);
        const { buffer, byteLength, byteOffset } = this._getBufferRange(bufferOrRange);
        if (location < 0) {
            this.unusedBuffers[locationOrName] = buffer;
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`${this.id} unusedBuffers varying buffer ${locationOrName}`)();
            return;
        }
        this.buffers[location] = { buffer, byteLength, byteOffset };
        // Need to avoid chrome bug where buffer that is already bound to a different target
        // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
        if (!this.bindOnUse) {
            this._bindBuffer(location, buffer, byteOffset, byteLength);
        }
    }
    getBuffer(locationOrName) {
        if (isIndex(locationOrName)) {
            return this.buffers[locationOrName] || null;
        }
        const location = this._getVaryingIndex(locationOrName);
        return location >= 0 ? this.buffers[location] : null;
    }
    bind(funcOrHandle = this.handle) {
        if (typeof funcOrHandle !== 'function') {
            this.gl.bindTransformFeedback(36386, funcOrHandle);
            return this;
        }
        let value;
        if (!this._bound) {
            this.gl.bindTransformFeedback(36386, this.handle);
            this._bound = true;
            value = funcOrHandle();
            this._bound = false;
            this.gl.bindTransformFeedback(36386, null);
        }
        else {
            value = funcOrHandle();
        }
        return value;
    }
    unbind() {
        this.bind(null);
    }
    // PRIVATE METHODS
    /** Extract offsets for bindBufferRange */
    _getBufferRange(bufferOrRange) {
        if (bufferOrRange instanceof _index_js__WEBPACK_IMPORTED_MODULE_3__.WEBGLBuffer) {
            return { buffer: bufferOrRange, byteOffset: 0, byteLength: bufferOrRange.byteLength };
        }
        // To use bindBufferRange either offset or size must be specified.
        // @ts-expect-error Must be a BufferRange.
        const { buffer, byteOffset = 0, byteLength = bufferOrRange.buffer.byteLength } = bufferOrRange;
        return { buffer, byteOffset, byteLength };
    }
    _getVaryingIndex(locationOrName) {
        if (isIndex(locationOrName)) {
            return Number(locationOrName);
        }
        for (const varying of this.layout.varyings) {
            if (locationOrName === varying.name) {
                return varying.location;
            }
        }
        return -1;
    }
    /**
     * Need to avoid chrome bug where buffer that is already bound to a different target
     * cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
     */
    _bindBuffers() {
        for (const bufferIndex in this.buffers) {
            const { buffer, byteLength, byteOffset } = this._getBufferRange(this.buffers[bufferIndex]);
            this._bindBuffer(Number(bufferIndex), buffer, byteOffset, byteLength);
        }
    }
    _unbindBuffers() {
        for (const bufferIndex in this.buffers) {
            this.gl.bindBufferBase(35982, Number(bufferIndex), null);
        }
    }
    _bindBuffer(index, buffer, byteOffset = 0, byteLength) {
        const handle = buffer && buffer.handle;
        if (!handle || byteLength === undefined) {
            this.gl.bindBufferBase(35982, index, handle);
        }
        else {
            this.gl.bindBufferRange(35982, index, handle, byteOffset, byteLength);
        }
    }
}
/**
 * Returns true if the given value is an integer, or a string that
 * trivially converts to an integer (only numeric characters).
 */
function isIndex(value) {
    if (typeof value === 'number') {
        return Number.isInteger(value);
    }
    return /^\d+$/.test(value);
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WEBGLVertexArray: () => (/* binding */ WEBGLVertexArray)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/array-utils-flat.js");
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/get-browser.js");
/* harmony import */ var _converters_vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../converters/vertex-formats.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




// import {getGLFromVertexType} from '../converters/vertex-formats';
/** VertexArrayObject wrapper */
class WEBGLVertexArray extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.VertexArray {
    get [Symbol.toStringTag]() {
        return 'VertexArray';
    }
    device;
    handle;
    /** Attribute 0 buffer constant */
    buffer = null;
    bufferValue = null;
    /** * Attribute 0 can not be disable on most desktop OpenGL based browsers */
    static isConstantAttributeZeroSupported(device) {
        return (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.getBrowser)() === 'Chrome';
    }
    // Create a VertexArray
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.handle = this.device.gl.createVertexArray();
    }
    destroy() {
        super.destroy();
        if (this.buffer) {
            this.buffer?.destroy();
        }
        if (this.handle) {
            this.device.gl.deleteVertexArray(this.handle);
            // @ts-expect-error read-only/undefined
            this.handle = undefined;
        }
        // Auto-delete elements?
        // return [this.elements];
    }
    /**
    // Set (bind/unbind) an elements buffer, for indexed rendering.
    // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER or null. Constants not supported
     *
     * @param elementBuffer
     */
    setIndexBuffer(indexBuffer) {
        const buffer = indexBuffer;
        // Explicitly allow `null` to support clearing the index buffer
        if (buffer && buffer.glTarget !== 34963) {
            throw new Error('Use .setBuffer()');
        }
        // In WebGL The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject
        this.device.gl.bindVertexArray(this.handle);
        this.device.gl.bindBuffer(34963, buffer ? buffer.handle : null);
        this.indexBuffer = buffer;
        // Unbind to prevent unintended changes to the VAO.
        this.device.gl.bindVertexArray(null);
    }
    /** Set a location in vertex attributes array to a buffer, enables the location, sets divisor */
    setBuffer(location, attributeBuffer) {
        const buffer = attributeBuffer;
        // Sanity check target
        if (buffer.glTarget === 34963) {
            throw new Error('Use .setIndexBuffer()');
        }
        const { size, type, stride, offset, normalized, integer, divisor } = this._getAccessor(location);
        this.device.gl.bindVertexArray(this.handle);
        // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target
        this.device.gl.bindBuffer(34962, buffer.handle);
        // WebGL2 supports *integer* data formats, i.e. GPU will see integer values
        if (integer) {
            this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
        }
        else {
            // Attaches ARRAY_BUFFER with specified buffer format to location
            this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
        }
        // Clear binding - keeping it may cause [.WebGL-0x12804417100]
        // GL_INVALID_OPERATION: A transform feedback buffer that would be written to is also bound to a non-transform-feedback target
        this.device.gl.bindBuffer(34962, null);
        // Mark as non-constant
        this.device.gl.enableVertexAttribArray(location);
        // Set the step mode 0=vertex, 1=instance
        this.device.gl.vertexAttribDivisor(location, divisor || 0);
        this.attributes[location] = buffer;
        // Unbind to prevent unintended changes to the VAO.
        this.device.gl.bindVertexArray(null);
    }
    /** Set a location in vertex attributes array to a constant value, disables the location */
    setConstantWebGL(location, value) {
        this._enable(location, false);
        this.attributes[location] = value;
    }
    bindBeforeRender() {
        this.device.gl.bindVertexArray(this.handle);
        this._applyConstantAttributes();
    }
    unbindAfterRender() {
        // Unbind to prevent unintended changes to the VAO.
        this.device.gl.bindVertexArray(null);
    }
    // Internal methods
    /**
     * Constant attributes need to be reset before every draw call
     * Any attribute that is disabled in the current vertex array object
     * is read from the context's global constant value for that attribute location.
     * @note Constant attributes are only supported in WebGL, not in WebGPU
     */
    _applyConstantAttributes() {
        for (let location = 0; location < this.maxVertexAttributes; ++location) {
            const constant = this.attributes[location];
            // A typed array means this is a constant
            if (ArrayBuffer.isView(constant)) {
                this.device.setConstantAttributeWebGL(location, constant);
            }
        }
    }
    /**
     * Set a location in vertex attributes array to a buffer, enables the location, sets divisor
     * @note requires vertex array to be bound
     */
    // protected _setAttributeLayout(location: number): void {
    //   const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);
    //   // WebGL2 supports *integer* data formats, i.e. GPU will see integer values
    //   if (integer) {
    //     this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
    //   } else {
    //     // Attaches ARRAY_BUFFER with specified buffer format to location
    //     this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
    //   }
    //   this.device.gl.vertexAttribDivisor(location, divisor || 0);
    // }
    /** Get an accessor from the  */
    _getAccessor(location) {
        const attributeInfo = this.attributeInfos[location];
        if (!attributeInfo) {
            throw new Error(`Unknown attribute location ${location}`);
        }
        const glType = (0,_converters_vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__.getGLFromVertexType)(attributeInfo.bufferDataType);
        return {
            size: attributeInfo.bufferComponents,
            type: glType,
            stride: attributeInfo.byteStride,
            offset: attributeInfo.byteOffset,
            normalized: attributeInfo.normalized,
            // it is the shader attribute declaration, not the vertex memory format,
            // that determines if the data in the buffer will be treated as integers.
            //
            // Also note that WebGL supports assigning non-normalized integer data to floating point attributes,
            // but as far as we can tell, WebGPU does not.
            integer: attributeInfo.integer,
            divisor: attributeInfo.stepMode === 'instance' ? 1 : 0
        };
    }
    /**
     * Enabling an attribute location makes it reference the currently bound buffer
     * Disabling an attribute location makes it reference the global constant value
     * TODO - handle single values for size 1 attributes?
     * TODO - convert classic arrays based on known type?
     */
    _enable(location, enable = true) {
        // Attribute 0 cannot be disabled in most desktop OpenGL based browsers...
        const canDisableAttributeZero = WEBGLVertexArray.isConstantAttributeZeroSupported(this.device);
        const canDisableAttribute = canDisableAttributeZero || location !== 0;
        if (enable || canDisableAttribute) {
            location = Number(location);
            this.device.gl.bindVertexArray(this.handle);
            if (enable) {
                this.device.gl.enableVertexAttribArray(location);
            }
            else {
                this.device.gl.disableVertexAttribArray(location);
            }
            this.device.gl.bindVertexArray(null);
        }
    }
    /**
     * Provide a means to create a buffer that is equivalent to a constant.
     * NOTE: Desktop OpenGL cannot disable attribute 0.
     * https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-
     * this-has-significant-performance-penalty
     */
    getConstantBuffer(elementCount, value) {
        // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)
        const constantValue = normalizeConstantArrayValue(value);
        const byteLength = constantValue.byteLength * elementCount;
        const length = constantValue.length * elementCount;
        if (this.buffer && byteLength !== this.buffer.byteLength) {
            throw new Error(`Buffer size is immutable, byte length ${byteLength} !== ${this.buffer.byteLength}.`);
        }
        let updateNeeded = !this.buffer;
        this.buffer = this.buffer || this.device.createBuffer({ byteLength });
        // Reallocate and update contents if needed
        updateNeeded = updateNeeded || !compareConstantArrayValues(constantValue, this.bufferValue);
        if (updateNeeded) {
            // Create a typed array that is big enough, and fill it with the required data
            const typedArray = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.getScratchArray)(value.constructor, length);
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.fillArray)({ target: typedArray, source: constantValue, start: 0, count: length });
            this.buffer.write(typedArray);
            this.bufferValue = value;
        }
        return this.buffer;
    }
}
// HELPER FUNCTIONS
/**
 * TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)
 * TODO - handle single values for size 1 attributes?
 */
function normalizeConstantArrayValue(arrayValue) {
    if (Array.isArray(arrayValue)) {
        return new Float32Array(arrayValue);
    }
    return arrayValue;
}
/**
 *
 */
function compareConstantArrayValues(v1, v2) {
    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {
        return false;
    }
    for (let i = 0; i < v1.length; ++i) {
        if (v1[i] !== v2[i]) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebGLCanvasContext: () => (/* binding */ WebGLCanvasContext)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/canvas-context.js");
/* harmony import */ var _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resources/webgl-framebuffer.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * A WebGL Canvas Context which manages the canvas and handles drawing buffer resizing etc
 */
class WebGLCanvasContext extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.CanvasContext {
    device;
    presentationSize;
    _framebuffer = null;
    constructor(device, props) {
        // Note: Base class creates / looks up the canvas (unless under Node.js)
        super(props);
        this.device = device;
        this.presentationSize = [-1, -1];
        this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);
        this.update();
    }
    getCurrentFramebuffer() {
        this.update();
        // Setting handle to null returns a reference to the default framebuffer
        this._framebuffer = this._framebuffer || new _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_1__.WEBGLFramebuffer(this.device, { handle: null });
        return this._framebuffer;
    }
    /** Resizes and updates render targets if necessary */
    update() {
        const size = this.getPixelSize();
        const sizeChanged = size[0] !== this.presentationSize[0] || size[1] !== this.presentationSize[1];
        if (sizeChanged) {
            this.presentationSize = size;
            this.resize();
        }
    }
    /**
     * Resize the canvas' drawing buffer.
     *
     * Can match the canvas CSS size, and optionally also consider devicePixelRatio
     * Can be called every frame
     *
     * Regardless of size, the drawing buffer will always be scaled to the viewport, but
     * for best visual results, usually set to either:
     *  canvas CSS width x canvas CSS height
     *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio
     * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
     */
    resize(options) {
        if (!this.device.gl)
            return;
        // Resize browser context .
        if (this.canvas) {
            const devicePixelRatio = this.getDevicePixelRatio(options?.useDevicePixels);
            this.setDevicePixelRatio(devicePixelRatio, options);
            return;
        }
    }
    commit() {
        // gl.commit was ultimately removed from the WebGL standard??
        // if (this.offScreen && this.gl.commit) {
        //   // @ts-expect-error gl.commit is not officially part of WebGL2RenderingContext
        //   this.gl.commit();
        // }
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js":
/*!******************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebGLDevice: () => (/* binding */ WebGLDevice)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/device.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/canvas-context.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../context/state-tracker/track-context-state.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
/* harmony import */ var _context_helpers_create_browser_context_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../context/helpers/create-browser-context.js */ "./node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js");
/* harmony import */ var _device_helpers_webgl_device_info_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./device-helpers/webgl-device-info.js */ "./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js");
/* harmony import */ var _device_helpers_webgl_device_features_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./device-helpers/webgl-device-features.js */ "./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js");
/* harmony import */ var _device_helpers_webgl_device_limits_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./device-helpers/webgl-device-limits.js */ "./node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js");
/* harmony import */ var _webgl_canvas_context_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./webgl-canvas-context.js */ "./node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js");
/* harmony import */ var _context_debug_spector_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context/debug/spector.js */ "./node_modules/@luma.gl/webgl/dist/context/debug/spector.js");
/* harmony import */ var _context_debug_webgl_developer_tools_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/debug/webgl-developer-tools.js */ "./node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js");
/* harmony import */ var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./converters/texture-formats.js */ "./node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
/* harmony import */ var _resources_webgl_buffer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/webgl-buffer.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */ var _resources_webgl_shader_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resources/webgl-shader.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js");
/* harmony import */ var _resources_webgl_sampler_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resources/webgl-sampler.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js");
/* harmony import */ var _resources_webgl_texture_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resources/webgl-texture.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */ var _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./resources/webgl-framebuffer.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js");
/* harmony import */ var _resources_webgl_render_pass_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./resources/webgl-render-pass.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js");
/* harmony import */ var _resources_webgl_render_pipeline_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./resources/webgl-render-pipeline.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js");
/* harmony import */ var _resources_webgl_command_encoder_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./resources/webgl-command-encoder.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js");
/* harmony import */ var _resources_webgl_vertex_array_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./resources/webgl-vertex-array.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js");
/* harmony import */ var _resources_webgl_transform_feedback_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./resources/webgl-transform-feedback.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js");
/* harmony import */ var _resources_webgl_query_set_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./resources/webgl-query-set.js */ "./node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js");
/* harmony import */ var _classic_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../classic/copy-and-blit.js */ "./node_modules/@luma.gl/webgl/dist/classic/copy-and-blit.js");
/* harmony import */ var _context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../context/parameters/unified-parameter-api.js */ "./node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */ var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../context/state-tracker/with-parameters.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
/* harmony import */ var _classic_clear_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../classic/clear.js */ "./node_modules/@luma.gl/webgl/dist/classic/clear.js");
/* harmony import */ var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../context/helpers/webgl-extensions.js */ "./node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


























const LOG_LEVEL = 1;
/** WebGPU style Device API for a WebGL context */
class WebGLDevice extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Device {
    //
    // Public `Device` API
    //
    /** type of this device */
    static type = 'webgl';
    /** type of this device */
    type = 'webgl';
    /** The underlying WebGL context */
    handle;
    features;
    limits;
    info;
    canvasContext;
    lost;
    _resolveContextLost;
    //
    // Static methods, expected to be present by `luma.createDevice()`
    //
    /** Check if WebGL 2 is available */
    static isSupported() {
        return typeof WebGL2RenderingContext !== 'undefined';
    }
    /**
     * Get a device instance from a GL context
     * Creates and instruments the device if not already created
     * @param gl
     * @returns
     */
    static attach(gl) {
        if (gl instanceof WebGLDevice) {
            return gl;
        }
        // @ts-expect-error
        if (gl?.device instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Device) {
            // @ts-expect-error
            return gl.device;
        }
        if (!isWebGL(gl)) {
            throw new Error('Invalid WebGL2RenderingContext');
        }
        return new WebGLDevice({ gl: gl });
    }
    static async create(props = {}) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.groupCollapsed(LOG_LEVEL, 'WebGLDevice created')();
        const promises = [];
        // Load webgl and spector debug scripts from CDN if requested
        if (props.debug) {
            promises.push((0,_context_debug_webgl_developer_tools_js__WEBPACK_IMPORTED_MODULE_2__.loadWebGLDeveloperTools)());
        }
        if (props.spector) {
            promises.push((0,_context_debug_spector_js__WEBPACK_IMPORTED_MODULE_3__.loadSpectorJS)());
        }
        // Wait for page to load: if canvas is a string we need to query the DOM for the canvas element.
        // We only wait when props.canvas is string to avoids setting the global page onload callback unless necessary.
        if (typeof props.canvas === 'string') {
            promises.push(_luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.CanvasContext.pageLoaded);
        }
        // Wait for all the loads to settle before creating the context.
        // The Device.create() functions are async, so in contrast to the constructor, we can `await` here.
        const results = await Promise.allSettled(promises);
        for (const result of results) {
            if (result.status === 'rejected') {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.error(`Failed to initialize debug libraries ${result.reason}`)();
            }
        }
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.probe(LOG_LEVEL + 1, 'DOM is loaded')();
        // @ts-expect-error
        if (props.gl?.device) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn('reattaching existing device')();
            return WebGLDevice.attach(props.gl);
        }
        const device = new WebGLDevice(props);
        // Log some debug info about the newly created context
        const message = `\
Created ${device.type}${device.debug ? ' debug' : ''} context: \
${device.info.vendor}, ${device.info.renderer} for canvas: ${device.canvasContext.id}`;
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.probe(LOG_LEVEL, message)();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.table(LOG_LEVEL, device.info)();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.groupEnd(LOG_LEVEL)();
        return device;
    }
    //
    // Public API
    //
    constructor(props) {
        super({ ...props, id: props.id || (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_5__.uid)('webgl-device') });
        // If attaching to an already attached context, return the attached device
        // @ts-expect-error device is attached to context
        const device = props.gl?.device;
        if (device) {
            throw new Error(`WebGL context already attached to device ${device.id}`);
        }
        // Create and instrument context
        const canvas = props.gl?.canvas || props.canvas;
        this.canvasContext = new _webgl_canvas_context_js__WEBPACK_IMPORTED_MODULE_6__.WebGLCanvasContext(this, { ...props, canvas });
        this.lost = new Promise(resolve => {
            this._resolveContextLost = resolve;
        });
        let gl = props.gl || null;
        gl ||= (0,_context_helpers_create_browser_context_js__WEBPACK_IMPORTED_MODULE_7__.createBrowserContext)(this.canvasContext.canvas, {
            ...props,
            onContextLost: (event) => this._resolveContextLost?.({
                reason: 'destroyed',
                message: 'Entered sleep mode, or too many apps or browser tabs are using the GPU.'
            })
        });
        if (!gl) {
            throw new Error('WebGL context creation failed');
        }
        this.handle = gl;
        this.gl = gl;
        this.gl.device = this; // Update GL context: Link webgl context back to device
        this.gl._version = 2; // Update GL context: Store WebGL version field on gl context (HACK to identify debug contexts)
        if (props.spector) {
            this.spectorJS = (0,_context_debug_spector_js__WEBPACK_IMPORTED_MODULE_3__.initializeSpectorJS)({ ...this.props, canvas: this.handle.canvas });
        }
        // luma Device fields
        this.info = (0,_device_helpers_webgl_device_info_js__WEBPACK_IMPORTED_MODULE_8__.getDeviceInfo)(this.gl, this._extensions);
        this.limits = new _device_helpers_webgl_device_limits_js__WEBPACK_IMPORTED_MODULE_9__.WebGLDeviceLimits(this.gl);
        this.features = new _device_helpers_webgl_device_features_js__WEBPACK_IMPORTED_MODULE_10__.WebGLDeviceFeatures(this.gl, this._extensions, this.props.disabledFeatures);
        if (this.props.initalizeFeatures) {
            this.features.initializeFeatures();
        }
        this.canvasContext.resize();
        // Install context state tracking
        // @ts-expect-error - hidden parameters
        const { enable = true, copyState = false } = props;
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__.trackContextState)(this.gl, {
            enable,
            copyState,
            log: (...args) => _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.log(1, ...args)()
        });
        // DEBUG contexts: Add debug instrumentation to the context, force log level to at least 1
        if (props.debug) {
            this.gl = (0,_context_debug_webgl_developer_tools_js__WEBPACK_IMPORTED_MODULE_2__.makeDebugContext)(this.gl, { ...props, throwOnError: true });
            this.debug = true;
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.level = Math.max(_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.level, 1);
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn('WebGL debug mode activated. Performance reduced.')();
        }
    }
    /**
     * Destroys the context
     * @note Has no effect for WebGL browser contexts, there is no browser API for destroying contexts
     */
    destroy() { }
    get isLost() {
        return this.gl.isContextLost();
    }
    getSize() {
        return [this.gl.drawingBufferWidth, this.gl.drawingBufferHeight];
    }
    isTextureFormatSupported(format) {
        return (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__.isTextureFormatSupported)(this.gl, format, this._extensions);
    }
    isTextureFormatFilterable(format) {
        return (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__.isTextureFormatFilterable)(this.gl, format, this._extensions);
    }
    isTextureFormatRenderable(format) {
        return (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__.isTextureFormatRenderable)(this.gl, format, this._extensions);
    }
    // IMPLEMENTATION OF ABSTRACT DEVICE
    createCanvasContext(props) {
        throw new Error('WebGL only supports a single canvas');
    }
    createBuffer(props) {
        const newProps = this._getBufferProps(props);
        return new _resources_webgl_buffer_js__WEBPACK_IMPORTED_MODULE_13__.WEBGLBuffer(this, newProps);
    }
    _createTexture(props) {
        return new _resources_webgl_texture_js__WEBPACK_IMPORTED_MODULE_14__.WEBGLTexture(this, props);
    }
    createExternalTexture(props) {
        throw new Error('createExternalTexture() not implemented'); // return new Program(props);
    }
    createSampler(props) {
        return new _resources_webgl_sampler_js__WEBPACK_IMPORTED_MODULE_15__.WEBGLSampler(this, props);
    }
    createShader(props) {
        return new _resources_webgl_shader_js__WEBPACK_IMPORTED_MODULE_16__.WEBGLShader(this, props);
    }
    createFramebuffer(props) {
        return new _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_17__.WEBGLFramebuffer(this, props);
    }
    createVertexArray(props) {
        return new _resources_webgl_vertex_array_js__WEBPACK_IMPORTED_MODULE_18__.WEBGLVertexArray(this, props);
    }
    createTransformFeedback(props) {
        return new _resources_webgl_transform_feedback_js__WEBPACK_IMPORTED_MODULE_19__.WEBGLTransformFeedback(this, props);
    }
    createQuerySet(props) {
        return new _resources_webgl_query_set_js__WEBPACK_IMPORTED_MODULE_20__.WEBGLQuerySet(this, props);
    }
    createRenderPipeline(props) {
        return new _resources_webgl_render_pipeline_js__WEBPACK_IMPORTED_MODULE_21__.WEBGLRenderPipeline(this, props);
    }
    beginRenderPass(props) {
        return new _resources_webgl_render_pass_js__WEBPACK_IMPORTED_MODULE_22__.WEBGLRenderPass(this, props);
    }
    createComputePipeline(props) {
        throw new Error('ComputePipeline not supported in WebGL');
    }
    beginComputePass(props) {
        throw new Error('ComputePass not supported in WebGL');
    }
    renderPass = null;
    createCommandEncoder(props) {
        return new _resources_webgl_command_encoder_js__WEBPACK_IMPORTED_MODULE_23__.WEBGLCommandEncoder(this, props);
    }
    /**
     * Offscreen Canvas Support: Commit the frame
     * https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/commit
     * Chrome's offscreen canvas does not require gl.commit
     */
    submit() {
        this.renderPass?.end();
        this.renderPass = null;
        // this.canvasContext.commit();
    }
    //
    // TEMPORARY HACKS - will be removed in v9.1
    //
    /** @deprecated - should use command encoder */
    readPixelsToArrayWebGL(source, options) {
        return (0,_classic_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_24__.readPixelsToArray)(source, options);
    }
    /** @deprecated - should use command encoder */
    readPixelsToBufferWebGL(source, options) {
        return (0,_classic_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_24__.readPixelsToBuffer)(source, options);
    }
    setParametersWebGL(parameters) {
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__.setGLParameters)(this.gl, parameters);
    }
    getParametersWebGL(parameters) {
        return (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__.getGLParameters)(this.gl, parameters);
    }
    withParametersWebGL(parameters, func) {
        return (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_26__.withGLParameters)(this.gl, parameters, func);
    }
    clearWebGL(options) {
        (0,_classic_clear_js__WEBPACK_IMPORTED_MODULE_27__.clear)(this, options);
    }
    resetWebGL() {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn('WebGLDevice.resetWebGL is deprecated, use only for debugging')();
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__.resetGLParameters)(this.gl);
    }
    //
    // WebGL-only API (not part of `Device` API)
    //
    /** WebGL2 context. */
    gl;
    debug = false;
    /** State used by luma.gl classes: TODO - move to canvasContext*/
    _canvasSizeInfo = { clientWidth: 0, clientHeight: 0, devicePixelRatio: 1 };
    /** State used by luma.gl classes - TODO - not used? */
    _extensions = {};
    _polyfilled = false;
    /** Instance of Spector.js (if initialized) */
    spectorJS;
    /**
     * Triggers device (or WebGL context) loss.
     * @note primarily intended for testing how application reacts to device loss
     */
    loseDevice() {
        let deviceLossTriggered = false;
        const extensions = this.getExtension('WEBGL_lose_context');
        const ext = extensions.WEBGL_lose_context;
        if (ext) {
            deviceLossTriggered = true;
            ext.loseContext();
            // ext.loseContext should trigger context loss callback but the platform may not do this, so do it explicitly
        }
        this._resolveContextLost?.({
            reason: 'destroyed',
            message: 'Application triggered context loss'
        });
        return deviceLossTriggered;
    }
    /** Save current WebGL context state onto an internal stack */
    pushState() {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__.pushContextState)(this.gl);
    }
    /** Restores previously saved context state */
    popState() {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__.popContextState)(this.gl);
    }
    /**
     * Storing data on a special field on WebGLObjects makes that data visible in SPECTOR chrome debug extension
     * luma.gl ids and props can be inspected
     */
    setSpectorMetadata(handle, props) {
        // @ts-expect-error
        // eslint-disable-next-line camelcase
        handle.__SPECTOR_Metadata = props;
    }
    /**
     * Returns the GL.<KEY> constant that corresponds to a numeric value of a GL constant
     * Be aware that there are some duplicates especially for constants that are 0,
     * so this isn't guaranteed to return the right key in all cases.
     */
    getGLKey(value, gl) {
        // @ts-ignore expect-error depends on settings
        gl = gl || this.gl2 || this.gl;
        const number = Number(value);
        for (const key in gl) {
            // @ts-ignore expect-error depends on settings
            if (gl[key] === number) {
                return `GL.${key}`;
            }
        }
        // No constant found. Stringify the value and return it.
        return String(value);
    }
    /** Store constants */
    _constants;
    /**
     * Set a constant value for a location. Disabled attributes at that location will read from this value
     * @note WebGL constants are stored globally on the WebGL context, not the VertexArray
     * so they need to be updated before every render
     * @todo - remember/cache values to avoid setting them unnecessarily?
     */
    setConstantAttributeWebGL(location, constant) {
        const maxVertexAttributes = this.limits.maxVertexAttributes;
        this._constants = this._constants || new Array(maxVertexAttributes).fill(null);
        const currentConstant = this._constants[location];
        if (currentConstant && compareConstantArrayValues(currentConstant, constant)) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.info(1, `setConstantAttributeWebGL(${location}) could have been skipped, value unchanged`)();
        }
        this._constants[location] = constant;
        switch (constant.constructor) {
            case Float32Array:
                setConstantFloatArray(this, location, constant);
                break;
            case Int32Array:
                setConstantIntArray(this, location, constant);
                break;
            case Uint32Array:
                setConstantUintArray(this, location, constant);
                break;
            default:
                (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_28__.assert)(false);
        }
    }
    /** Ensure extensions are only requested once */
    getExtension(name) {
        (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_29__.getWebGLExtension)(this.gl, name, this._extensions);
        return this._extensions;
    }
}
/** Check if supplied parameter is a WebGL2RenderingContext */
function isWebGL(gl) {
    if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {
        return true;
    }
    // Look for debug contexts, headless gl etc
    return Boolean(gl && Number.isFinite(gl._version));
}
/** Set constant float array attribute */
function setConstantFloatArray(device, location, array) {
    switch (array.length) {
        case 1:
            device.gl.vertexAttrib1fv(location, array);
            break;
        case 2:
            device.gl.vertexAttrib2fv(location, array);
            break;
        case 3:
            device.gl.vertexAttrib3fv(location, array);
            break;
        case 4:
            device.gl.vertexAttrib4fv(location, array);
            break;
        default:
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_28__.assert)(false);
    }
}
/** Set constant signed int array attribute */
function setConstantIntArray(device, location, array) {
    device.gl.vertexAttribI4iv(location, array);
    // TODO - not clear if we need to use the special forms, more testing needed
    // switch (array.length) {
    //   case 1:
    //     gl.vertexAttribI1iv(location, array);
    //     break;
    //   case 2:
    //     gl.vertexAttribI2iv(location, array);
    //     break;
    //   case 3:
    //     gl.vertexAttribI3iv(location, array);
    //     break;
    //   case 4:
    //     break;
    //   default:
    //     assert(false);
    // }
}
/** Set constant unsigned int array attribute */
function setConstantUintArray(device, location, array) {
    device.gl.vertexAttribI4uiv(location, array);
    // TODO - not clear if we need to use the special forms, more testing needed
    // switch (array.length) {
    //   case 1:
    //     gl.vertexAttribI1uiv(location, array);
    //     break;
    //   case 2:
    //     gl.vertexAttribI2uiv(location, array);
    //     break;
    //   case 3:
    //     gl.vertexAttribI3uiv(location, array);
    //     break;
    //   case 4:
    //     gl.vertexAttribI4uiv(location, array);
    //     break;
    //   default:
    //     assert(false);
    // }
}
/**
 * Compares contents of two typed arrays
 * @todo max length?
 */
function compareConstantArrayValues(v1, v2) {
    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {
        return false;
    }
    for (let i = 0; i < v1.length; ++i) {
        if (v1[i] !== v2[i]) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/classic/accessor.js":
/*!**************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/classic/accessor.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Accessor: () => (/* binding */ Accessor),
/* harmony export */   DEFAULT_ACCESSOR_VALUES: () => (/* binding */ DEFAULT_ACCESSOR_VALUES)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/check-props.js");
/* harmony import */ var _typed_array_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typed-array-utils.js */ "./node_modules/@luma.gl/webgl/dist/classic/typed-array-utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



const DEFAULT_ACCESSOR_VALUES = {
    offset: 0,
    stride: 0,
    type: 5126,
    size: 1,
    divisor: 0,
    normalized: false,
    integer: false
};
const PROP_CHECKS = {
    deprecatedProps: {
        instanced: 'divisor',
        isInstanced: 'divisor'
    }
};
class Accessor {
    offset;
    stride;
    type;
    size;
    divisor;
    normalized;
    integer;
    buffer;
    index;
    static getBytesPerElement(accessor) {
        // TODO: using `FLOAT` when type is not specified,
        // ensure this assumption is valid or force API to specify type.
        const ArrayType = (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayFromGLType)(accessor.type || 5126);
        return ArrayType.BYTES_PER_ELEMENT;
    }
    static getBytesPerVertex(accessor) {
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(accessor.size);
        // TODO: using `FLOAT` when type is not specified,
        // ensure this assumption is valid or force API to specify type.
        const ArrayType = (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayFromGLType)(accessor.type || 5126);
        return ArrayType.BYTES_PER_ELEMENT * accessor.size;
    }
    // Combines (merges) a list of accessors. On top of default values
    // Usually [programAccessor, bufferAccessor, appAccessor]
    // All props will be set in the returned object.
    // TODO check for conflicts between values in the supplied accessors
    static resolve(...accessors) {
        return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values
    }
    constructor(...accessors) {
        accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence
        Object.freeze(this);
    }
    toString() {
        return JSON.stringify(this);
    }
    // ACCESSORS
    // TODO - remove>
    get BYTES_PER_ELEMENT() {
        return Accessor.getBytesPerElement(this);
    }
    get BYTES_PER_VERTEX() {
        return Accessor.getBytesPerVertex(this);
    }
    // PRIVATE
    // eslint-disable-next-line complexity, max-statements
    _assign(props = {}) {
        props = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.checkProps)('Accessor', props, PROP_CHECKS);
        if (props.type !== undefined) {
            this.type = props.type;
            // Auto-deduce integer type?
            if (props.type === 5124 || props.type === 5125) {
                this.integer = true;
            }
        }
        if (props.size !== undefined) {
            this.size = props.size;
        }
        if (props.offset !== undefined) {
            this.offset = props.offset;
        }
        if (props.stride !== undefined) {
            this.stride = props.stride;
        }
        // @ts-expect-error
        if (props.normalize !== undefined) {
            // @ts-expect-error
            this.normalized = props.normalize;
        }
        if (props.normalized !== undefined) {
            this.normalized = props.normalized;
        }
        if (props.integer !== undefined) {
            this.integer = props.integer;
        }
        // INSTANCE DIVISOR
        if (props.divisor !== undefined) {
            this.divisor = props.divisor;
        }
        // Buffer is optional
        if (props.buffer !== undefined) {
            this.buffer = props.buffer;
        }
        // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)
        // TODO - should this be part of accessor?
        if (props.index !== undefined) {
            if (typeof props.index === 'boolean') {
                this.index = props.index ? 1 : 0;
            }
            else {
                this.index = props.index;
            }
        }
        // DEPRECATED
        // @ts-expect-error
        if (props.instanced !== undefined) {
            // @ts-expect-error
            this.divisor = props.instanced ? 1 : 0;
        }
        // @ts-expect-error
        if (props.isInstanced !== undefined) {
            // @ts-expect-error
            this.divisor = props.isInstanced ? 1 : 0;
        }
        if (this.offset === undefined)
            delete this.offset;
        if (this.stride === undefined)
            delete this.stride;
        if (this.type === undefined)
            delete this.type;
        if (this.size === undefined)
            delete this.size;
        if (this.divisor === undefined)
            delete this.divisor;
        if (this.normalized === undefined)
            delete this.normalized;
        if (this.integer === undefined)
            delete this.integer;
        if (this.buffer === undefined)
            delete this.buffer;
        if (this.index === undefined)
            delete this.index;
        return this;
    }
}
// TEST EXPORTS



/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/classic/clear.js":
/*!***********************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/classic/clear.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   clearBuffer: () => (/* binding */ clearBuffer)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../context/state-tracker/with-parameters.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// Should collapse during minification
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_COLOR = 0x1800;
const GL_DEPTH = 0x1801;
const GL_STENCIL = 0x1802;
const GL_DEPTH_STENCIL = 0x84f9;
// Should disappear if asserts are removed
const ERR_ARGUMENTS = 'clear: bad arguments';
/**
 * Optionally clears depth, color and stencil buffers
 * @deprecated Set clear color when creating a RenderPass.
 */
function clear(device, options) {
    const { framebuffer = null, color = null, depth = null, stencil = null } = options || {};
    const parameters = {};
    if (framebuffer) {
        parameters.framebuffer = framebuffer;
    }
    let clearFlags = 0;
    if (color) {
        clearFlags |= GL_COLOR_BUFFER_BIT;
        if (color !== true) {
            parameters.clearColor = color;
        }
    }
    if (depth) {
        clearFlags |= GL_DEPTH_BUFFER_BIT;
        if (depth !== true) {
            parameters.clearDepth = depth;
        }
    }
    if (stencil) {
        clearFlags |= GL_STENCIL_BUFFER_BIT;
        if (depth !== true) {
            parameters.clearStencil = depth;
        }
    }
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(clearFlags !== 0, ERR_ARGUMENTS);
    // Temporarily set any clear "colors" and call clear
    const gl = device.gl;
    (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_1__.withGLParameters)(gl, parameters, () => {
        gl.clear(clearFlags);
    });
}
/**
 * WebGL2 - clear a specific drawing buffer
 * @deprecated Set clear color when creating a RenderPass
 */
function clearBuffer(device, options) {
    const { framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0] } = options || {};
    const gl = device.gl;
    (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_1__.withGLParameters)(gl, { framebuffer }, () => {
        // Method selection per OpenGL ES 3 docs
        switch (buffer) {
            case GL_COLOR:
                switch (value.constructor) {
                    case Int32Array:
                        gl.clearBufferiv(buffer, drawBuffer, value);
                        break;
                    case Uint32Array:
                        gl.clearBufferuiv(buffer, drawBuffer, value);
                        break;
                    case Float32Array:
                    default:
                        gl.clearBufferfv(buffer, drawBuffer, value);
                }
                break;
            case GL_DEPTH:
                gl.clearBufferfv(GL_DEPTH, 0, [value]);
                break;
            case GL_STENCIL:
                gl.clearBufferiv(GL_STENCIL, 0, [value]);
                break;
            case GL_DEPTH_STENCIL:
                const [depth, stencil] = value;
                gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);
                break;
            default:
                (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(false, ERR_ARGUMENTS);
        }
    });
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/classic/copy-and-blit.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/classic/copy-and-blit.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   copyToTexture: () => (/* binding */ copyToTexture),
/* harmony export */   readPixelsToArray: () => (/* binding */ readPixelsToArray),
/* harmony export */   readPixelsToBuffer: () => (/* binding */ readPixelsToBuffer),
/* harmony export */   toFramebuffer: () => (/* binding */ toFramebuffer)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js");
/* harmony import */ var _typed_array_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typed-array-utils.js */ "./node_modules/@luma.gl/webgl/dist/classic/typed-array-utils.js");
/* harmony import */ var _format_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format-utils.js */ "./node_modules/@luma.gl/webgl/dist/classic/format-utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * Copies data from a type  or a Texture object into ArrayBuffer object.
 * App can provide targetPixelArray or have it auto allocated by this method
 *  newly allocated by this method unless provided by app.
 * @deprecated Use CommandEncoder.copyTextureToBuffer and Buffer.read
 * @note Slow requires roundtrip to GPU
 *
 * @param source
 * @param options
 * @returns pixel array,
 */
function readPixelsToArray(source, options) {
    const { sourceX = 0, sourceY = 0, sourceFormat = 6408, sourceAttachment = 36064 // TODO - support gl.readBuffer
     } = options || {};
    let { target = null, 
    // following parameters are auto deduced if not provided
    sourceWidth, sourceHeight, sourceType } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(framebuffer);
    const { gl, handle } = framebuffer;
    sourceWidth = sourceWidth || framebuffer.width;
    sourceHeight = sourceHeight || framebuffer.height;
    // TODO - Set and unset gl.readBuffer
    // if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {
    //   sourceAttachment = GL.FRONT;
    // }
    const attachment = sourceAttachment - 36064;
    // assert(attachments[sourceAttachment]);
    // Deduce the type from color attachment if not provided.
    sourceType =
        sourceType ||
            framebuffer.colorAttachments[attachment]?.texture?.type || 5121;
    // Deduce type and allocated pixelArray if needed
    target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);
    // Pixel array available, if necessary, deduce type from it.
    sourceType = sourceType || (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_1__.getGLTypeFromTypedArray)(target);
    const prevHandle = gl.bindFramebuffer(36160, handle);
    gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);
    // @ts-expect-error
    gl.bindFramebuffer(36160, prevHandle || null);
    if (deleteFramebuffer) {
        framebuffer.destroy();
    }
    return target;
}
/**
 * Copies data from a Framebuffer or a Texture object into a Buffer object.
 * NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.
 * @deprecated Use CommandEncoder
 * @param source
 * @param options
 */
function readPixelsToBuffer(source, options) {
    const { target, sourceX = 0, sourceY = 0, sourceFormat = 6408, targetByteOffset = 0 } = options || {};
    // following parameters are auto deduced if not provided
    let { sourceWidth, sourceHeight, sourceType } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(framebuffer);
    sourceWidth = sourceWidth || framebuffer.width;
    sourceHeight = sourceHeight || framebuffer.height;
    // Asynchronous read (PIXEL_PACK_BUFFER) is WebGL2 only feature
    const webglFramebuffer = framebuffer;
    // deduce type if not available.
    sourceType = sourceType || 5121;
    let webglBufferTarget = target;
    if (!webglBufferTarget) {
        // Create new buffer with enough size
        const components = (0,_format_utils_js__WEBPACK_IMPORTED_MODULE_2__.glFormatToComponents)(sourceFormat);
        const byteCount = (0,_format_utils_js__WEBPACK_IMPORTED_MODULE_2__.glTypeToBytes)(sourceType);
        const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;
        webglBufferTarget = webglFramebuffer.device.createBuffer({ byteLength });
    }
    // TODO(donmccurdy): Do we have tests to confirm this is working?
    const commandEncoder = source.device.createCommandEncoder();
    commandEncoder.copyTextureToBuffer({
        source: source,
        width: sourceWidth,
        height: sourceHeight,
        origin: [sourceX, sourceY],
        destination: webglBufferTarget,
        byteOffset: targetByteOffset
    });
    commandEncoder.destroy();
    if (deleteFramebuffer) {
        framebuffer.destroy();
    }
    return webglBufferTarget;
}
/**
 * Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)
 * @deprecated Use CommandEncoder
 */
// eslint-disable-next-line complexity, max-statements
function copyToTexture(source, target, options) {
    const { sourceX = 0, sourceY = 0, 
    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer
    targetMipmaplevel = 0, targetInternalFormat = 6408 } = options || {};
    let { targetX, targetY, targetZ, width, // defaults to target width
    height // defaults to target height
     } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(framebuffer);
    const webglFramebuffer = framebuffer;
    const { device, handle } = webglFramebuffer;
    const isSubCopy = typeof targetX !== 'undefined' ||
        typeof targetY !== 'undefined' ||
        typeof targetZ !== 'undefined';
    targetX = targetX || 0;
    targetY = targetY || 0;
    targetZ = targetZ || 0;
    const prevHandle = device.gl.bindFramebuffer(36160, handle);
    // TODO - support gl.readBuffer (WebGL2 only)
    // const prevBuffer = gl.readBuffer(attachment);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(target);
    let texture = null;
    let textureTarget;
    if (target instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Texture) {
        texture = target;
        width = Number.isFinite(width) ? width : texture.width;
        height = Number.isFinite(height) ? height : texture.height;
        texture.bind(0);
        textureTarget = texture.target;
    }
    else {
        textureTarget = target;
    }
    if (!isSubCopy) {
        device.gl.copyTexImage2D(textureTarget, targetMipmaplevel, targetInternalFormat, sourceX, sourceY, width, height, 0 /* border must be 0 */);
    }
    else {
        switch (textureTarget) {
            case 3553:
            case 34067:
                device.gl.copyTexSubImage2D(textureTarget, targetMipmaplevel, targetX, targetY, sourceX, sourceY, width, height);
                break;
            case 35866:
            case 32879:
                device.gl.copyTexSubImage3D(textureTarget, targetMipmaplevel, targetX, targetY, targetZ, sourceX, sourceY, width, height);
                break;
            default:
        }
    }
    if (texture) {
        texture.unbind();
    }
    // @ts-expect-error
    device.gl.bindFramebuffer(36160, prevHandle || null);
    if (deleteFramebuffer) {
        framebuffer.destroy();
    }
    return texture;
}
function getFramebuffer(source) {
    if (!(source instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.Framebuffer)) {
        return { framebuffer: toFramebuffer(source), deleteFramebuffer: true };
    }
    return { framebuffer: source, deleteFramebuffer: false };
}
/**
 * Wraps a given texture into a framebuffer object, that can be further used
 * to read data from the texture object.
 */
function toFramebuffer(texture, props) {
    const { device, width, height, id } = texture;
    const framebuffer = device.createFramebuffer({
        ...props,
        id: `framebuffer-for-${id}`,
        width,
        height,
        colorAttachments: [texture]
    });
    return framebuffer;
}
function getPixelArray(pixelArray, type, format, width, height) {
    if (pixelArray) {
        return pixelArray;
    }
    // Allocate pixel array if not already available, using supplied type
    type = type || 5121;
    const ArrayType = (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypedArrayFromGLType)(type, { clamped: false });
    const components = (0,_format_utils_js__WEBPACK_IMPORTED_MODULE_2__.glFormatToComponents)(format);
    // TODO - check for composite type (components = 1).
    return new ArrayType(width * height * components);
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/classic/format-utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/classic/format-utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   glFormatToComponents: () => (/* binding */ glFormatToComponents),
/* harmony export */   glTypeToBytes: () => (/* binding */ glTypeToBytes)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// Returns number of components in a specific readPixels WebGL format
function glFormatToComponents(format) {
    switch (format) {
        case 6406:
        case 33326:
        case 6403:
            return 1;
        case 33328:
        case 33319:
            return 2;
        case 6407:
        case 34837:
            return 3;
        case 6408:
        case 34836:
            return 4;
        // TODO: Add support for additional WebGL2 formats
        default:
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
            return 0;
    }
}
// Return byte count for given readPixels WebGL type
function glTypeToBytes(type) {
    switch (type) {
        case 5121:
            return 1;
        case 33635:
        case 32819:
        case 32820:
            return 2;
        case 5126:
            return 4;
        // TODO: Add support for additional WebGL2 types
        default:
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
            return 0;
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/classic/typed-array-utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/classic/typed-array-utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   flipRows: () => (/* binding */ flipRows),
/* harmony export */   getGLTypeFromTypedArray: () => (/* binding */ getGLTypeFromTypedArray),
/* harmony export */   getTypedArrayFromGLType: () => (/* binding */ getTypedArrayFromGLType),
/* harmony export */   scalePixels: () => (/* binding */ scalePixels)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';
/**
 * Converts TYPED ARRAYS to corresponding GL constant
 * Used to auto deduce gl parameter types
 * @deprecated Use getDataTypeFromTypedArray
 * @param arrayOrType
 * @returns
 */
function getGLTypeFromTypedArray(arrayOrType) {
    // If typed array, look up constructor
    const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
    switch (type) {
        case Float32Array:
            return 5126;
        case Uint16Array:
            return 5123;
        case Uint32Array:
            return 5125;
        case Uint8Array:
            return 5121;
        case Uint8ClampedArray:
            return 5121;
        case Int8Array:
            return 5120;
        case Int16Array:
            return 5122;
        case Int32Array:
            return 5124;
        default:
            throw new Error(ERR_TYPE_DEDUCTION);
    }
}
/**
 * Converts GL constant to corresponding TYPED ARRAY
 * Used to auto deduce gl parameter types
 * @deprecated Use getTypedArrayFromDataType
 * @param glType
 * @param param1
 * @returns
 */
// eslint-disable-next-line complexity
function getTypedArrayFromGLType(glType, options) {
    const { clamped = true } = options || {};
    // Sorted in some order of likelihood to reduce amount of comparisons
    switch (glType) {
        case 5126:
            return Float32Array;
        case 5123:
        case 33635:
        case 32819:
        case 32820:
            return Uint16Array;
        case 5125:
            return Uint32Array;
        case 5121:
            return clamped ? Uint8ClampedArray : Uint8Array;
        case 5120:
            return Int8Array;
        case 5122:
            return Int16Array;
        case 5124:
            return Int32Array;
        default:
            throw new Error('Failed to deduce typed array type from GL constant');
    }
}
/**
 * Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)
 * https: *stackoverflow.com/questions/41969562/
 * how-can-i-flip-the-result-of-webglrenderingcontext-readpixels
 * @param param0
 */
function flipRows(options) {
    const { data, width, height, bytesPerPixel = 4, temp } = options;
    const bytesPerRow = width * bytesPerPixel;
    // make a temp buffer to hold one row
    const tempBuffer = temp || new Uint8Array(bytesPerRow);
    for (let y = 0; y < height / 2; ++y) {
        const topOffset = y * bytesPerRow;
        const bottomOffset = (height - y - 1) * bytesPerRow;
        // make copy of a row on the top half
        tempBuffer.set(data.subarray(topOffset, topOffset + bytesPerRow));
        // copy a row from the bottom half to the top
        data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
        // copy the copy of the top half row to the bottom half
        data.set(tempBuffer, bottomOffset);
    }
}
function scalePixels(options) {
    const { data, width, height } = options;
    const newWidth = Math.round(width / 2);
    const newHeight = Math.round(height / 2);
    const newData = new Uint8Array(newWidth * newHeight * 4);
    for (let y = 0; y < newHeight; y++) {
        for (let x = 0; x < newWidth; x++) {
            for (let c = 0; c < 4; c++) {
                newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];
            }
        }
    }
    return { data: newData, width: newWidth, height: newHeight };
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/debug/spector.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/debug/spector.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeSpectorJS: () => (/* binding */ initializeSpectorJS),
/* harmony export */   loadSpectorJS: () => (/* binding */ loadSpectorJS)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/load-file.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const DEFAULT_SPECTOR_PROPS = {
    spector: _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.get('spector') || _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.get('spectorjs')
};
// https://github.com/BabylonJS/Spector.js#basic-usage
const SPECTOR_CDN_URL = 'https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js';
const LOG_LEVEL = 1;
let spector = null;
let initialized = false;
/** Loads spector from CDN if not already installed */
async function loadSpectorJS(props) {
    if (!globalThis.SPECTOR) {
        try {
            await (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.loadScript)(SPECTOR_CDN_URL);
        }
        catch (error) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.warn(String(error));
        }
    }
}
function initializeSpectorJS(props) {
    props = { ...DEFAULT_SPECTOR_PROPS, ...props };
    if (!props?.spector) {
        return null;
    }
    if (!spector && globalThis.SPECTOR) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.probe(LOG_LEVEL, 'SPECTOR found and initialized')();
        spector = new globalThis.SPECTOR.Spector();
        if (globalThis.luma) {
            globalThis.luma.spector = spector;
        }
    }
    if (!spector) {
        return null;
    }
    if (!initialized) {
        initialized = true;
        // enables recording some extra information merged in the capture like texture memory sizes and formats
        spector.spyCanvases();
        // A callback when results are ready
        spector?.onCaptureStarted.add((capture) => _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.info('Spector capture started:', capture)());
        spector?.onCapture.add((capture) => {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.info('Spector capture complete:', capture)();
            // Use undocumented Spector API to open the UI with our capture
            // See https://github.com/BabylonJS/Spector.js/blob/767ad1195a25b85a85c381f400eb50a979239eca/src/spector.ts#L124
            spector?.getResultUI();
            spector?.resultView.display();
            spector?.resultView.addCapture(capture);
        });
    }
    if (props?.canvas) {
        // @ts-expect-error If spector is specified as a canvas id, only monitor that canvas
        if (typeof props.spector === 'string' && props.spector !== props.canvas.id) {
            return spector;
        }
        // capture startup
        // spector?.captureCanvas(props?.canvas);
        spector?.startCapture(props?.canvas, 500); // 500 commands
        new Promise(resolve => setTimeout(resolve, 2000)).then(_ => {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.info('Spector capture stopped after 2 seconds')();
            spector?.stopCapture();
            // spector?.displayUI();
        });
    }
    return spector;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadWebGLDeveloperTools: () => (/* binding */ loadWebGLDeveloperTools),
/* harmony export */   makeDebugContext: () => (/* binding */ makeDebugContext)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/load-file.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */ var _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @luma.gl/constants */ "./node_modules/@luma.gl/constants/dist/webgl-constants.js");
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// Rename constant to prevent inlining. We need the full set of constants for generating debug strings.


const WEBGL_DEBUG_CDN_URL = 'https://unpkg.com/webgl-debug@2.0.1/index.js';
// Helper to get shared context data
function getWebGLContextData(gl) {
    gl.luma = gl.luma || {};
    return gl.luma;
}
/**
 * Loads Khronos WebGLDeveloperTools from CDN if not already installed
 * const WebGLDebugUtils = require('webgl-debug');
 * @see https://github.com/KhronosGroup/WebGLDeveloperTools
 * @see https://github.com/vorg/webgl-debug
 */
async function loadWebGLDeveloperTools() {
    if ((0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() && !globalThis.WebGLDebugUtils) {
        globalThis.global = globalThis.global || globalThis;
        // @ts-expect-error Developer tools expects global to be set
        globalThis.global.module = {};
        await (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.loadScript)(WEBGL_DEBUG_CDN_URL);
    }
}
// Returns (a potentially new) context with debug instrumentation turned off or on.
// Note that this actually returns a new context
function makeDebugContext(gl, props = {}) {
    // Return null to ensure we don't try to create a context in this case (TODO what case is that?)
    if (!gl) {
        return null;
    }
    return props.debug ? getDebugContext(gl, props) : getRealContext(gl);
}
// Returns the real context from either of the real/debug contexts
function getRealContext(gl) {
    const data = getWebGLContextData(gl);
    // If the context has a realContext member, it is a debug context so return the realContext
    return data.realContext ? data.realContext : gl;
}
// Returns the debug context from either of the real/debug contexts
function getDebugContext(gl, props) {
    if (!globalThis.WebGLDebugUtils) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn('webgl-debug not loaded')();
        return gl;
    }
    const data = getWebGLContextData(gl);
    // If this already has a debug context, return it.
    if (data.debugContext) {
        return data.debugContext;
    }
    // Create a new debug context
    globalThis.WebGLDebugUtils.init({ ..._luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL, ...gl });
    const glDebug = globalThis.WebGLDebugUtils.makeDebugContext(gl, onGLError.bind(null, props), onValidateGLFunc.bind(null, props));
    // Make sure we have all WebGL2 and extension constants (todo dynamic import to circumvent minification?)
    for (const key in _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL) {
        if (!(key in glDebug) && typeof _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL[key] === 'number') {
            glDebug[key] = _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL[key];
        }
    }
    // Ensure we have a clean prototype on the instrumented object
    // Note: setPrototypeOf does come with perf warnings, but we already take a bigger perf reduction
    // by synchronizing the WebGL errors after each WebGL call.
    class WebGLDebugContext {
    }
    Object.setPrototypeOf(glDebug, Object.getPrototypeOf(gl));
    Object.setPrototypeOf(WebGLDebugContext, glDebug);
    const debugContext = Object.create(WebGLDebugContext);
    // Store the debug context
    data.realContext = gl;
    data.debugContext = debugContext;
    debugContext.debug = true;
    // Return it
    return debugContext;
}
// DEBUG TRACING
function getFunctionString(functionName, functionArgs) {
    // Cover bug in webgl-debug-tools
    functionArgs = Array.from(functionArgs).map(arg => (arg === undefined ? 'undefined' : arg));
    let args = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, functionArgs);
    args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;
    return `gl.${functionName}(${args})`;
}
function onGLError(props, err, functionName, args) {
    // Cover bug in webgl-debug-tools
    args = Array.from(args).map(arg => (arg === undefined ? 'undefined' : arg));
    const errorMessage = globalThis.WebGLDebugUtils.glEnumToString(err);
    const functionArgs = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, args);
    const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;
    _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.error(message)();
    debugger; // eslint-disable-line
    if (props.throwOnError) {
        throw new Error(message);
    }
}
// Don't generate function string until it is needed
function onValidateGLFunc(props, functionName, functionArgs) {
    let functionString = '';
    if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.level >= 1) {
        functionString = getFunctionString(functionName, functionArgs);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.log(1, functionString)();
    }
    // If array of breakpoint strings supplied, check if any of them is contained in current GLEnum function
    if (props.break && props.break.length > 0) {
        functionString = functionString || getFunctionString(functionName, functionArgs);
        const isBreakpoint = props.break.every((breakOn) => functionString.indexOf(breakOn) !== -1);
        if (isBreakpoint) {
            debugger; // eslint-disable-line
        }
    }
    for (const arg of functionArgs) {
        if (arg === undefined) {
            functionString = functionString || getFunctionString(functionName, functionArgs);
            if (props.throwOnError) {
                throw new Error(`Undefined argument: ${functionString}`);
            }
            else {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.error(`Undefined argument: ${functionString}`)();
                debugger; // eslint-disable-line
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createBrowserContext: () => (/* binding */ createBrowserContext)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const DEFAULT_CONTEXT_PROPS = {
    powerPreference: 'high-performance', // After all, most apps are using WebGL for performance reasons
    // eslint-disable-next-line no-console
    onContextLost: () => console.error('WebGL context lost'),
    // eslint-disable-next-line no-console
    onContextRestored: () => console.info('WebGL context restored')
};
/**
 * Create a WebGL context for a canvas
 * Note calling this multiple time on the same canvas does return the same context
 * @param canvas A canvas element or offscreen canvas
 */
function createBrowserContext(canvas, props) {
    props = { ...DEFAULT_CONTEXT_PROPS, ...props };
    // Try to extract any extra information about why context creation failed
    let errorMessage = null;
    const onCreateError = error => (errorMessage = error.statusMessage || errorMessage);
    canvas.addEventListener('webglcontextcreationerror', onCreateError, false);
    // Create the desired context
    let gl = null;
    // props.failIfMajorPerformanceCaveat = true;
    // We require webgl2 context
    gl ||= canvas.getContext('webgl2', props);
    // Software GPU
    // props.failIfMajorPerformanceCaveat = false;
    // if (!gl && props.webgl1) {
    //   gl = canvas.getContext('webgl', props);
    // }
    // TODO are we removing this listener before giving it a chance to fire?
    canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);
    if (!gl) {
        throw new Error(`Failed to create WebGL context: ${errorMessage || 'Unknown error'}`);
    }
    if (props.onContextLost) {
        // Carefully extract and wrap callbacks to prevent addEventListener from rebinding them.
        const { onContextLost } = props;
        canvas.addEventListener('webglcontextlost', (event) => onContextLost(event), false);
    }
    if (props.onContextRestored) {
        // Carefully extract and wrap callbacks to prevent addEventListener from rebinding them.
        const { onContextRestored } = props;
        canvas.addEventListener('webglcontextrestored', (event) => onContextRestored(event), false);
    }
    return gl;
}
/* TODO - can we call this asynchronously to catch the error events?
export async function createBrowserContextAsync(canvas: HTMLCanvasElement | OffscreenCanvas, props: ContextProps): Promise<WebGL2RenderingContext> {
  props = {...DEFAULT_CONTEXT_PROPS, ...props};

 // Try to extract any extra information about why context creation failed
 let errorMessage = null;
 const onCreateError = (error) => (errorMessage = error.statusMessage || errorMessage);
 canvas.addEventListener('webglcontextcreationerror', onCreateError, false);

 const gl = createBrowserContext(canvas, props);

 // Give the listener a chance to fire
 await new Promise(resolve => setTimeout(resolve, 0));

 canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);

 return gl;
}
*/


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWebGLExtension: () => (/* binding */ getWebGLExtension)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Ensure extensions are only requested once */
function getWebGLExtension(gl, name, extensions) {
    if (extensions[name] === undefined) {
        extensions[name] = gl.getExtension(name) || null;
    }
    return extensions[name];
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGLParameters: () => (/* binding */ getGLParameters),
/* harmony export */   resetGLParameters: () => (/* binding */ resetGLParameters),
/* harmony export */   setGLParameters: () => (/* binding */ setGLParameters)
/* harmony export */ });
/* harmony import */ var _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webgl-parameter-tables.js */ "./node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Sets any GL parameter regardless of function (gl.blendMode, ...)
 *
 * @note requires a `cache` object to be set on the context (gl.state.cache)
 * This object is used to fill in any missing values for composite setter functions
 */
function setGLParameters(gl, parameters) {
    if (isObjectEmpty(parameters)) {
        return;
    }
    const compositeSetters = {};
    // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)
    for (const key in parameters) {
        const glConstant = Number(key);
        const setter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_SETTERS[key];
        if (setter) {
            // Composite setters should only be called once, so save them
            if (typeof setter === 'string') {
                compositeSetters[setter] = true;
            }
            else {
                // if (gl[glConstant] !== undefined) {
                // TODO - added above check since this is being called on WebGL2 parameters in WebGL1...
                // TODO - deep equal on values? only call setter if value has changed?
                // NOTE - the setter will automatically update this.state
                setter(gl, parameters[key], glConstant);
            }
        }
    }
    // HANDLE COMPOSITE SETTERS
    // NOTE: any non-provided values needed by composite setters are filled in from state cache
    // The cache parameter is automatically retrieved from the context
    // This depends on `trackContextState`, which is technically a "circular" dependency.
    // But it is too inconvenient to always require a cache parameter here.
    // This is the ONLY external dependency in this module/
    // @ts-expect-error
    const cache = gl.state && gl.state.cache;
    if (cache) {
        for (const key in compositeSetters) {
            // TODO - avoid calling composite setters if values have not changed.
            const compositeSetter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_COMPOSITE_PARAMETER_SETTERS[key];
            // Note - if `trackContextState` has been called,
            // the setter will automatically update this.state.cache
            compositeSetter(gl, parameters, cache);
        }
    }
    // Add a log for the else case?
}
/**
 * Reads the entire WebGL state from a context

  // default to querying all parameters

  * @returns - a newly created map, with values keyed by GL parameters
 *
 * @note Copies the state from a context (gl.getParameter should not be overriden)
 * Reads the entire WebGL state from a context
 *
 * @note This can generates a huge amount of synchronous driver roundtrips and should be
 * considered a very slow operation, to be used only if/when a context already manipulated
 * by external code needs to be synchronized for the first time
 */
function getGLParameters(gl, parameters = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_DEFAULTS) {
    // support both arrays of parameters and objects (keys represent parameters)
    if (typeof parameters === 'number') {
        // single GL enum
        const key = parameters;
        const getter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_GETTERS[key];
        return getter ? getter(gl, key) : gl.getParameter(key);
    }
    const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);
    const state = {};
    for (const key of parameterKeys) {
        const getter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_GETTERS[key];
        state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
    }
    return state;
}
/**
 * Reset all parameters to a (almost) pure context state
 * @note viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,
 * NOT the canvas size dimensions, so they will have to be properly set after
 * calling this function.
 */
function resetGLParameters(gl) {
    setGLParameters(gl, _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_DEFAULTS);
}
// Helpers
// Returns true if given object is empty, false otherwise.
function isObjectEmpty(object) {
    // @ts-ignore dummy key variable
    for (const key in object) {
        return false;
    }
    return true;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GL_COMPOSITE_PARAMETER_SETTERS: () => (/* binding */ GL_COMPOSITE_PARAMETER_SETTERS),
/* harmony export */   GL_HOOKED_SETTERS: () => (/* binding */ GL_HOOKED_SETTERS),
/* harmony export */   GL_PARAMETER_DEFAULTS: () => (/* binding */ GL_PARAMETER_DEFAULTS),
/* harmony export */   GL_PARAMETER_GETTERS: () => (/* binding */ GL_PARAMETER_GETTERS),
/* harmony export */   GL_PARAMETER_SETTERS: () => (/* binding */ GL_PARAMETER_SETTERS),
/* harmony export */   NON_CACHE_PARAMETERS: () => (/* binding */ NON_CACHE_PARAMETERS)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Tables describing WebGL parameters

// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS
/* eslint-disable no-shadow */
const GL_PARAMETER_DEFAULTS = {
    [3042]: false,
    [32773]: new Float32Array([0, 0, 0, 0]),
    [32777]: 32774,
    [34877]: 32774,
    [32969]: 1,
    [32968]: 0,
    [32971]: 1,
    [32970]: 0,
    [3106]: new Float32Array([0, 0, 0, 0]), // TBD
    [3107]: [true, true, true, true],
    [2884]: false,
    [2885]: 1029,
    [2929]: false,
    [2931]: 1,
    [2932]: 513,
    [2928]: new Float32Array([0, 1]), // TBD
    [2930]: true,
    [3024]: true,
    [35725]: null,
    // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
    [36006]: null,
    [36007]: null,
    [34229]: null,
    [34964]: null,
    [2886]: 2305,
    [33170]: 4352,
    [2849]: 1,
    [32823]: false,
    [32824]: 0,
    [10752]: 0,
    [32926]: false,
    [32928]: false,
    [32938]: 1.0,
    [32939]: false,
    [3089]: false,
    // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box
    [3088]: new Int32Array([0, 0, 1024, 1024]),
    [2960]: false,
    [2961]: 0,
    [2968]: 0xffffffff,
    [36005]: 0xffffffff,
    [2962]: 519,
    [2967]: 0,
    [2963]: 0xffffffff,
    [34816]: 519,
    [36003]: 0,
    [36004]: 0xffffffff,
    [2964]: 7680,
    [2965]: 7680,
    [2966]: 7680,
    [34817]: 7680,
    [34818]: 7680,
    [34819]: 7680,
    // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.
    [2978]: [0, 0, 1024, 1024],
    [36389]: null,
    [36662]: null,
    [36663]: null,
    [35053]: null,
    [35055]: null,
    [35723]: 4352,
    [36010]: null,
    [35977]: false,
    [3333]: 4,
    [3317]: 4,
    [37440]: false,
    [37441]: false,
    [37443]: 37444,
    [3330]: 0,
    [3332]: 0,
    [3331]: 0,
    [3314]: 0,
    [32878]: 0,
    [3316]: 0,
    [3315]: 0,
    [32877]: 0
};
// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API
const enable = (gl, value, key) => value ? gl.enable(key) : gl.disable(key);
const hint = (gl, value, key) => gl.hint(key, value);
const pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);
const bindFramebuffer = (gl, value, key) => {
    const target = key === 36006 ? 36009 : 36008;
    return gl.bindFramebuffer(target, value);
};
const bindBuffer = (gl, value, key) => {
    const bindingMap = {
        [34964]: 34962,
        [36662]: 36662,
        [36663]: 36663,
        [35053]: 35051,
        [35055]: 35052
    };
    const glTarget = bindingMap[key];
    gl.bindBuffer(glTarget, value);
};
// Utility
function isArray(array) {
    return Array.isArray(array) || (ArrayBuffer.isView(array) && !(array instanceof DataView));
}
// Map from WebGL parameter names to corresponding WebGL setter functions
// WegGL constants are read by parameter names, but set by function names
// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'
const GL_PARAMETER_SETTERS = {
    [3042]: enable,
    [32773]: (gl, value) => gl.blendColor(...value),
    [32777]: 'blendEquation',
    [34877]: 'blendEquation',
    [32969]: 'blendFunc',
    [32968]: 'blendFunc',
    [32971]: 'blendFunc',
    [32970]: 'blendFunc',
    [3106]: (gl, value) => gl.clearColor(...value),
    [3107]: (gl, value) => gl.colorMask(...value),
    [2884]: enable,
    [2885]: (gl, value) => gl.cullFace(value),
    [2929]: enable,
    [2931]: (gl, value) => gl.clearDepth(value),
    [2932]: (gl, value) => gl.depthFunc(value),
    [2928]: (gl, value) => gl.depthRange(...value),
    [2930]: (gl, value) => gl.depthMask(value),
    [3024]: enable,
    [35723]: hint,
    [35725]: (gl, value) => gl.useProgram(value),
    [36007]: (gl, value) => gl.bindRenderbuffer(36161, value),
    [36389]: (gl, value) => gl.bindTransformFeedback?.(36386, value),
    [34229]: (gl, value) => gl.bindVertexArray(value),
    // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
    [36006]: bindFramebuffer,
    [36010]: bindFramebuffer,
    // Buffers
    [34964]: bindBuffer,
    [36662]: bindBuffer,
    [36663]: bindBuffer,
    [35053]: bindBuffer,
    [35055]: bindBuffer,
    [2886]: (gl, value) => gl.frontFace(value),
    [33170]: hint,
    [2849]: (gl, value) => gl.lineWidth(value),
    [32823]: enable,
    [32824]: 'polygonOffset',
    [10752]: 'polygonOffset',
    [35977]: enable,
    [32926]: enable,
    [32928]: enable,
    [32938]: 'sampleCoverage',
    [32939]: 'sampleCoverage',
    [3089]: enable,
    [3088]: (gl, value) => gl.scissor(...value),
    [2960]: enable,
    [2961]: (gl, value) => gl.clearStencil(value),
    [2968]: (gl, value) => gl.stencilMaskSeparate(1028, value),
    [36005]: (gl, value) => gl.stencilMaskSeparate(1029, value),
    [2962]: 'stencilFuncFront',
    [2967]: 'stencilFuncFront',
    [2963]: 'stencilFuncFront',
    [34816]: 'stencilFuncBack',
    [36003]: 'stencilFuncBack',
    [36004]: 'stencilFuncBack',
    [2964]: 'stencilOpFront',
    [2965]: 'stencilOpFront',
    [2966]: 'stencilOpFront',
    [34817]: 'stencilOpBack',
    [34818]: 'stencilOpBack',
    [34819]: 'stencilOpBack',
    [2978]: (gl, value) => gl.viewport(...value),
    // WEBGL2 EXTENSIONS
    // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/
    [34383]: enable,
    // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/
    // [GL.PROVOKING_VERTEX_WEBL]: TODO - extension function needed
    // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/
    // POLYGON_MODE_WEBGL  TODO - extension function needed
    [10754]: enable,
    // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/
    [12288]: enable,
    [12289]: enable,
    [12290]: enable,
    [12291]: enable,
    [12292]: enable,
    [12293]: enable,
    [12294]: enable,
    [12295]: enable,
    // PIXEL PACK/UNPACK MODES
    [3333]: pixelStorei,
    [3317]: pixelStorei,
    [37440]: pixelStorei,
    [37441]: pixelStorei,
    [37443]: pixelStorei,
    [3330]: pixelStorei,
    [3332]: pixelStorei,
    [3331]: pixelStorei,
    [3314]: pixelStorei,
    [32878]: pixelStorei,
    [3316]: pixelStorei,
    [3315]: pixelStorei,
    [32877]: pixelStorei,
    // Function-style setters
    framebuffer: (gl, framebuffer) => {
        // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class
        // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.
        const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;
        return gl.bindFramebuffer(36160, handle);
    },
    blend: (gl, value) => value ? gl.enable(3042) : gl.disable(3042),
    blendColor: (gl, value) => gl.blendColor(...value),
    blendEquation: (gl, args) => {
        const separateModes = typeof args === 'number' ? [args, args] : args;
        gl.blendEquationSeparate(...separateModes);
    },
    blendFunc: (gl, args) => {
        const separateFuncs = args?.length === 2 ? [...args, ...args] : args;
        gl.blendFuncSeparate(...separateFuncs);
    },
    clearColor: (gl, value) => gl.clearColor(...value),
    clearDepth: (gl, value) => gl.clearDepth(value),
    clearStencil: (gl, value) => gl.clearStencil(value),
    colorMask: (gl, value) => gl.colorMask(...value),
    cull: (gl, value) => value ? gl.enable(2884) : gl.disable(2884),
    cullFace: (gl, value) => gl.cullFace(value),
    depthTest: (gl, value) => value ? gl.enable(2929) : gl.disable(2929),
    depthFunc: (gl, value) => gl.depthFunc(value),
    depthMask: (gl, value) => gl.depthMask(value),
    depthRange: (gl, value) => gl.depthRange(...value),
    dither: (gl, value) => value ? gl.enable(3024) : gl.disable(3024),
    derivativeHint: (gl, value) => {
        // gl1: 'OES_standard_derivatives'
        gl.hint(35723, value);
    },
    frontFace: (gl, value) => gl.frontFace(value),
    mipmapHint: (gl, value) => gl.hint(33170, value),
    lineWidth: (gl, value) => gl.lineWidth(value),
    polygonOffsetFill: (gl, value) => value ? gl.enable(32823) : gl.disable(32823),
    polygonOffset: (gl, value) => gl.polygonOffset(...value),
    sampleCoverage: (gl, value) => gl.sampleCoverage(...value),
    scissorTest: (gl, value) => value ? gl.enable(3089) : gl.disable(3089),
    scissor: (gl, value) => gl.scissor(...value),
    stencilTest: (gl, value) => value ? gl.enable(2960) : gl.disable(2960),
    stencilMask: (gl, value) => {
        value = isArray(value) ? value : [value, value];
        const [mask, backMask] = value;
        gl.stencilMaskSeparate(1028, mask);
        gl.stencilMaskSeparate(1029, backMask);
    },
    stencilFunc: (gl, args) => {
        args = isArray(args) && args.length === 3 ? [...args, ...args] : args;
        const [func, ref, mask, backFunc, backRef, backMask] = args;
        gl.stencilFuncSeparate(1028, func, ref, mask);
        gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);
    },
    stencilOp: (gl, args) => {
        args = isArray(args) && args.length === 3 ? [...args, ...args] : args;
        const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;
        gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
        gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);
    },
    viewport: (gl, value) => gl.viewport(...value)
};
function getValue(glEnum, values, cache) {
    return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];
}
// COMPOSITE_WEBGL_PARAMETER_
const GL_COMPOSITE_PARAMETER_SETTERS = {
    blendEquation: (gl, values, cache) => gl.blendEquationSeparate(getValue(32777, values, cache), getValue(34877, values, cache)),
    blendFunc: (gl, values, cache) => gl.blendFuncSeparate(getValue(32969, values, cache), getValue(32968, values, cache), getValue(32971, values, cache), getValue(32970, values, cache)),
    polygonOffset: (gl, values, cache) => gl.polygonOffset(getValue(32824, values, cache), getValue(10752, values, cache)),
    sampleCoverage: (gl, values, cache) => gl.sampleCoverage(getValue(32938, values, cache), getValue(32939, values, cache)),
    stencilFuncFront: (gl, values, cache) => gl.stencilFuncSeparate(1028, getValue(2962, values, cache), getValue(2967, values, cache), getValue(2963, values, cache)),
    stencilFuncBack: (gl, values, cache) => gl.stencilFuncSeparate(1029, getValue(34816, values, cache), getValue(36003, values, cache), getValue(36004, values, cache)),
    stencilOpFront: (gl, values, cache) => gl.stencilOpSeparate(1028, getValue(2964, values, cache), getValue(2965, values, cache), getValue(2966, values, cache)),
    stencilOpBack: (gl, values, cache) => gl.stencilOpSeparate(1029, getValue(34817, values, cache), getValue(34818, values, cache), getValue(34819, values, cache))
};
// Setter functions intercepted for cache updates
const GL_HOOKED_SETTERS = {
    // GENERIC SETTERS
    enable: (update, capability) => update({
        [capability]: true
    }),
    disable: (update, capability) => update({
        [capability]: false
    }),
    pixelStorei: (update, pname, value) => update({
        [pname]: value
    }),
    hint: (update, pname, hint) => update({
        [pname]: hint
    }),
    // SPECIFIC SETTERS
    useProgram: (update, value) => update({
        [35725]: value
    }),
    bindRenderbuffer: (update, target, value) => update({
        [36007]: value
    }),
    bindTransformFeedback: (update, target, value) => update({
        [36389]: value
    }),
    bindVertexArray: (update, value) => update({
        [34229]: value
    }),
    bindFramebuffer: (update, target, framebuffer) => {
        switch (target) {
            case 36160:
                return update({
                    [36006]: framebuffer,
                    [36010]: framebuffer
                });
            case 36009:
                return update({ [36006]: framebuffer });
            case 36008:
                return update({ [36010]: framebuffer });
            default:
                return null;
        }
    },
    bindBuffer: (update, target, buffer) => {
        const pname = {
            [34962]: [34964],
            [36662]: [36662],
            [36663]: [36663],
            [35051]: [35053],
            [35052]: [35055]
        }[target];
        if (pname) {
            return update({ [pname]: buffer });
        }
        // targets that should not be cached
        return { valueChanged: true };
    },
    blendColor: (update, r, g, b, a) => update({
        [32773]: new Float32Array([r, g, b, a])
    }),
    blendEquation: (update, mode) => update({
        [32777]: mode,
        [34877]: mode
    }),
    blendEquationSeparate: (update, modeRGB, modeAlpha) => update({
        [32777]: modeRGB,
        [34877]: modeAlpha
    }),
    blendFunc: (update, src, dst) => update({
        [32969]: src,
        [32968]: dst,
        [32971]: src,
        [32970]: dst
    }),
    blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({
        [32969]: srcRGB,
        [32968]: dstRGB,
        [32971]: srcAlpha,
        [32970]: dstAlpha
    }),
    clearColor: (update, r, g, b, a) => update({
        [3106]: new Float32Array([r, g, b, a])
    }),
    clearDepth: (update, depth) => update({
        [2931]: depth
    }),
    clearStencil: (update, s) => update({
        [2961]: s
    }),
    colorMask: (update, r, g, b, a) => update({
        [3107]: [r, g, b, a]
    }),
    cullFace: (update, mode) => update({
        [2885]: mode
    }),
    depthFunc: (update, func) => update({
        [2932]: func
    }),
    depthRange: (update, zNear, zFar) => update({
        [2928]: new Float32Array([zNear, zFar])
    }),
    depthMask: (update, mask) => update({
        [2930]: mask
    }),
    frontFace: (update, face) => update({
        [2886]: face
    }),
    lineWidth: (update, width) => update({
        [2849]: width
    }),
    polygonOffset: (update, factor, units) => update({
        [32824]: factor,
        [10752]: units
    }),
    sampleCoverage: (update, value, invert) => update({
        [32938]: value,
        [32939]: invert
    }),
    scissor: (update, x, y, width, height) => update({
        [3088]: new Int32Array([x, y, width, height])
    }),
    stencilMask: (update, mask) => update({
        [2968]: mask,
        [36005]: mask
    }),
    stencilMaskSeparate: (update, face, mask) => update({
        [face === 1028 ? 2968 : 36005]: mask
    }),
    stencilFunc: (update, func, ref, mask) => update({
        [2962]: func,
        [2967]: ref,
        [2963]: mask,
        [34816]: func,
        [36003]: ref,
        [36004]: mask
    }),
    stencilFuncSeparate: (update, face, func, ref, mask) => update({
        [face === 1028 ? 2962 : 34816]: func,
        [face === 1028 ? 2967 : 36003]: ref,
        [face === 1028 ? 2963 : 36004]: mask
    }),
    stencilOp: (update, fail, zfail, zpass) => update({
        [2964]: fail,
        [2965]: zfail,
        [2966]: zpass,
        [34817]: fail,
        [34818]: zfail,
        [34819]: zpass
    }),
    stencilOpSeparate: (update, face, fail, zfail, zpass) => update({
        [face === 1028 ? 2964 : 34817]: fail,
        [face === 1028 ? 2965 : 34818]: zfail,
        [face === 1028 ? 2966 : 34819]: zpass
    }),
    viewport: (update, x, y, width, height) => update({
        [2978]: [x, y, width, height]
    })
};
// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT
const isEnabled = (gl, key) => gl.isEnabled(key);
// Exceptions for any keys that cannot be queried by gl.getParameters
const GL_PARAMETER_GETTERS = {
    [3042]: isEnabled,
    [2884]: isEnabled,
    [2929]: isEnabled,
    [3024]: isEnabled,
    [32823]: isEnabled,
    [32926]: isEnabled,
    [32928]: isEnabled,
    [3089]: isEnabled,
    [2960]: isEnabled,
    [35977]: isEnabled
};
const NON_CACHE_PARAMETERS = new Set([
    34016,
    36388,
    36387,
    35983,
    35368,
    34965,
    35739,
    35738,
    3074,
    34853,
    34854,
    34855,
    34856,
    34857,
    34858,
    34859,
    34860,
    34861,
    34862,
    34863,
    34864,
    34865,
    34866,
    34867,
    34868,
    35097,
    32873,
    35869,
    32874,
    34068
]);


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepArrayEqual: () => (/* binding */ deepArrayEqual)
/* harmony export */ });
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** deeply compare two arrays */
function deepArrayEqual(x, y) {
    if (x === y) {
        return true;
    }
    const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
    const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);
    // @ts-expect-error TODO fix
    if (isArrayX && isArrayY && x.length === y.length) {
        // @ts-expect-error TODO fix
        for (let i = 0; i < x.length; ++i) {
            if (x[i] !== y[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   popContextState: () => (/* binding */ popContextState),
/* harmony export */   pushContextState: () => (/* binding */ pushContextState),
/* harmony export */   trackContextState: () => (/* binding */ trackContextState)
/* harmony export */ });
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */ var _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parameters/webgl-parameter-tables.js */ "./node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js");
/* harmony import */ var _parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parameters/unified-parameter-api.js */ "./node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */ var _deep_array_equal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deep-array-equal.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Support for listening to context state changes and intercepting state queries
// NOTE: this system does not handle buffer bindings




// HELPER CLASS - GLState
/* eslint-disable no-shadow */
class GLState {
    gl;
    program = null;
    stateStack = [];
    enable = true;
    cache;
    log;
    constructor(gl, { copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)
    log = () => { } // Logging function, called when gl parameter change calls are actually issued
     } = {}) {
        this.gl = gl;
        this.cache = copyState ? (0,_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_0__.getGLParameters)(gl) : Object.assign({}, _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.GL_PARAMETER_DEFAULTS);
        this.log = log;
        this._updateCache = this._updateCache.bind(this);
        Object.seal(this);
    }
    push(values = {}) {
        this.stateStack.push({});
    }
    pop() {
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(this.stateStack.length > 0);
        // Use the saved values in the state stack to restore parameters
        const oldValues = this.stateStack[this.stateStack.length - 1];
        (0,_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_0__.setGLParameters)(this.gl, oldValues);
        // Don't pop until we have reset parameters (to make sure other "stack frames" are not affected)
        this.stateStack.pop();
    }
    /**
    // interceptor for context set functions - update our cache and our stack
    // values (Object) - the key values for this setter
     * @param values
     * @returns
     */
    _updateCache(values) {
        let valueChanged = false;
        let oldValue; // = undefined
        const oldValues = this.stateStack.length > 0 ? this.stateStack[this.stateStack.length - 1] : null;
        for (const key in values) {
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(key !== undefined);
            const value = values[key];
            const cached = this.cache[key];
            // Check that value hasn't already been shadowed
            if (!(0,_deep_array_equal_js__WEBPACK_IMPORTED_MODULE_3__.deepArrayEqual)(value, cached)) {
                valueChanged = true;
                oldValue = cached;
                // First, save current value being shadowed
                // If a state stack frame is active, save the current parameter values for pop
                // but first check that value hasn't already been shadowed and saved
                if (oldValues && !(key in oldValues)) {
                    oldValues[key] = cached;
                }
                // Save current value being shadowed
                this.cache[key] = value;
            }
        }
        return { valueChanged, oldValue };
    }
}
function getContextState(gl) {
    // @ts-expect-error
    return gl.state;
}
// PUBLIC API
/**
 * Initialize WebGL state caching on a context
 * can be called multiple times to enable/disable
 *
 * @note After calling this function, context state will be cached
 * gl.state.push() and gl.state.pop() will be available for saving,
 * temporarily modifying, and then restoring state.
 */
function trackContextState(gl, options) {
    const { enable = true, copyState } = options;
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(copyState !== undefined);
    // @ts-expect-error
    if (!gl.state) {
        // @ts-ignore
        // const {polyfillContext} = global_;
        // if (polyfillContext) {
        //   polyfillContext(gl);
        // }
        // Create a state cache
        // @ts-expect-error
        gl.state = new GLState(gl, { copyState });
        installProgramSpy(gl);
        // intercept all setter functions in the table
        for (const key in _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.GL_HOOKED_SETTERS) {
            const setter = _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.GL_HOOKED_SETTERS[key];
            installSetterSpy(gl, key, setter);
        }
        // intercept all getter functions in the table
        installGetterOverride(gl, 'getParameter');
        installGetterOverride(gl, 'isEnabled');
    }
    const glState = getContextState(gl);
    glState.enable = enable;
    return gl;
}
/**
 * Saves current WebGL context state onto an internal per-context stack
 */
function pushContextState(gl) {
    let glState = getContextState(gl);
    if (!glState) {
        trackContextState(gl, { copyState: false });
        glState = getContextState(gl);
    }
    glState.push();
}
/**
 * Restores previously saved WebGL context state
 */
function popContextState(gl) {
    const glState = getContextState(gl);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(glState);
    glState.pop();
}
// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT
/**
// Overrides a WebGL2RenderingContext state "getter" function
// to return values directly from cache
 * @param gl
 * @param functionName
 */
function installGetterOverride(gl, functionName) {
    // Get the original function from the WebGL2RenderingContext
    const originalGetterFunc = gl[functionName].bind(gl);
    // Wrap it with a spy so that we can update our state cache when it gets called
    gl[functionName] = function get(pname) {
        if (pname === undefined || _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.NON_CACHE_PARAMETERS.has(pname)) {
            // Invalid or blacklisted parameter, do not cache
            return originalGetterFunc(pname);
        }
        const glState = getContextState(gl);
        if (!(pname in glState.cache)) {
            // WebGL limits are not prepopulated in the cache, call the original getter when first queried.
            glState.cache[pname] = originalGetterFunc(pname);
        }
        // Optionally call the original function to do a "hard" query from the WebGL2RenderingContext
        return glState.enable
            ? // Call the getter the params so that it can e.g. serve from a cache
                glState.cache[pname]
            : // Optionally call the original function to do a "hard" query from the WebGL2RenderingContext
                originalGetterFunc(pname);
    };
    // Set the name of this anonymous function to help in debugging and profiling
    Object.defineProperty(gl[functionName], 'name', {
        value: `${functionName}-from-cache`,
        configurable: false
    });
}
/**
// Overrides a WebGL2RenderingContext state "setter" function
// to call a setter spy before the actual setter. Allows us to keep a cache
// updated with a copy of the WebGL context state.
 * @param gl
 * @param functionName
 * @param setter
 * @returns
 */
function installSetterSpy(gl, functionName, setter) {
    // Get the original function from the WebGL2RenderingContext
    if (!gl[functionName]) {
        // TODO - remove?
        // This could happen if we try to intercept WebGL2 method on a WebGL1 context
        return;
    }
    const originalSetterFunc = gl[functionName].bind(gl);
    // Wrap it with a spy so that we can update our state cache when it gets called
    gl[functionName] = function set(...params) {
        // Update the value
        // Call the setter with the state cache and the params so that it can store the parameters
        const glState = getContextState(gl);
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const { valueChanged, oldValue } = setter(glState._updateCache, ...params);
        // Call the original WebGL2RenderingContext func to make sure the context actually gets updated
        if (valueChanged) {
            originalSetterFunc(...params);
        }
        // Note: if the original function fails to set the value, our state cache will be bad
        // No solution for this at the moment, but assuming that this is unlikely to be a real problem
        // We could call the setter after the originalSetterFunc. Concern is that this would
        // cause different behavior in debug mode, where originalSetterFunc can throw exceptions
        return oldValue;
    };
    // Set the name of this anonymous function to help in debugging and profiling
    Object.defineProperty(gl[functionName], 'name', {
        value: `${functionName}-to-cache`,
        configurable: false
    });
}
function installProgramSpy(gl) {
    const originalUseProgram = gl.useProgram.bind(gl);
    gl.useProgram = function useProgramLuma(handle) {
        const glState = getContextState(gl);
        if (glState.program !== handle) {
            originalUseProgram(handle);
            glState.program = handle;
        }
    };
}


/***/ }),

/***/ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   withGLParameters: () => (/* binding */ withGLParameters)
/* harmony export */ });
/* harmony import */ var _parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parameters/unified-parameter-api.js */ "./node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */ var _track_context_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./track-context-state.js */ "./node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 */
function withGLParameters(gl, parameters, func) {
    if (isObjectEmpty(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(gl);
    }
    const { nocatch = true } = parameters;
    (0,_track_context_state_js__WEBPACK_IMPORTED_MODULE_0__.pushContextState)(gl);
    (0,_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_1__.setGLParameters)(gl, parameters);
    // Setup is done, call the function
    let value;
    if (nocatch) {
        // Avoid try catch to minimize stack size impact for safe execution paths
        value = func(gl);
        (0,_track_context_state_js__WEBPACK_IMPORTED_MODULE_0__.popContextState)(gl);
    }
    else {
        // Wrap in a try-catch to ensure that parameters are restored on exceptions
        try {
            value = func(gl);
        }
        finally {
            (0,_track_context_state_js__WEBPACK_IMPORTED_MODULE_0__.popContextState)(gl);
        }
    }
    return value;
}
// Helpers
// Returns true if given object is empty, false otherwise.
function isObjectEmpty(object) {
    // @ts-ignore - dummy key variable
    for (const key in object) {
        return false;
    }
    return true;
}


/***/ }),

/***/ "./node_modules/@mapbox/tiny-sdf/index.js":
/*!************************************************!*\
  !*** ./node_modules/@mapbox/tiny-sdf/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TinySDF)
/* harmony export */ });
const INF = 1e20;

class TinySDF {
    constructor({
        fontSize = 24,
        buffer = 3,
        radius = 8,
        cutoff = 0.25,
        fontFamily = 'sans-serif',
        fontWeight = 'normal',
        fontStyle = 'normal'
    } = {}) {
        this.buffer = buffer;
        this.cutoff = cutoff;
        this.radius = radius;

        // make the canvas size big enough to both have the specified buffer around the glyph
        // for "halo", and account for some glyphs possibly being larger than their font size
        const size = this.size = fontSize + buffer * 4;

        const canvas = this._createCanvas(size);
        const ctx = this.ctx = canvas.getContext('2d', {willReadFrequently: true});
        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;

        ctx.textBaseline = 'alphabetic';
        ctx.textAlign = 'left'; // Necessary so that RTL text doesn't have different alignment
        ctx.fillStyle = 'black';

        // temporary arrays for the distance transform
        this.gridOuter = new Float64Array(size * size);
        this.gridInner = new Float64Array(size * size);
        this.f = new Float64Array(size);
        this.z = new Float64Array(size + 1);
        this.v = new Uint16Array(size);
    }

    _createCanvas(size) {
        const canvas = document.createElement('canvas');
        canvas.width = canvas.height = size;
        return canvas;
    }

    draw(char) {
        const {
            width: glyphAdvance,
            actualBoundingBoxAscent,
            actualBoundingBoxDescent,
            actualBoundingBoxLeft,
            actualBoundingBoxRight
        } = this.ctx.measureText(char);

        // The integer/pixel part of the top alignment is encoded in metrics.glyphTop
        // The remainder is implicitly encoded in the rasterization
        const glyphTop = Math.ceil(actualBoundingBoxAscent);
        const glyphLeft = 0;

        // If the glyph overflows the canvas size, it will be clipped at the bottom/right
        const glyphWidth = Math.max(0, Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft)));
        const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));

        const width = glyphWidth + 2 * this.buffer;
        const height = glyphHeight + 2 * this.buffer;

        const len = Math.max(width * height, 0);
        const data = new Uint8ClampedArray(len);
        const glyph = {data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance};
        if (glyphWidth === 0 || glyphHeight === 0) return glyph;

        const {ctx, buffer, gridInner, gridOuter} = this;
        ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);
        ctx.fillText(char, buffer, buffer + glyphTop);
        const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight);

        // Initialize grids outside the glyph range to alpha 0
        gridOuter.fill(INF, 0, len);
        gridInner.fill(0, 0, len);

        for (let y = 0; y < glyphHeight; y++) {
            for (let x = 0; x < glyphWidth; x++) {
                const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255; // alpha value
                if (a === 0) continue; // empty pixels

                const j = (y + buffer) * width + x + buffer;

                if (a === 1) { // fully drawn pixels
                    gridOuter[j] = 0;
                    gridInner[j] = INF;

                } else { // aliased pixels
                    const d = 0.5 - a;
                    gridOuter[j] = d > 0 ? d * d : 0;
                    gridInner[j] = d < 0 ? d * d : 0;
                }
            }
        }

        edt(gridOuter, 0, 0, width, height, width, this.f, this.v, this.z);
        edt(gridInner, buffer, buffer, glyphWidth, glyphHeight, width, this.f, this.v, this.z);

        for (let i = 0; i < len; i++) {
            const d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);
            data[i] = Math.round(255 - 255 * (d / this.radius + this.cutoff));
        }

        return glyph;
    }
}

// 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf
function edt(data, x0, y0, width, height, gridSize, f, v, z) {
    for (let x = x0; x < x0 + width; x++) edt1d(data, y0 * gridSize + x, gridSize, height, f, v, z);
    for (let y = y0; y < y0 + height; y++) edt1d(data, y * gridSize + x0, 1, width, f, v, z);
}

// 1D squared distance transform
function edt1d(grid, offset, stride, length, f, v, z) {
    v[0] = 0;
    z[0] = -INF;
    z[1] = INF;
    f[0] = grid[offset];

    for (let q = 1, k = 0, s = 0; q < length; q++) {
        f[q] = grid[offset + q * stride];
        const q2 = q * q;
        do {
            const r = v[k];
            s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;
        } while (s <= z[k] && --k > -1);

        k++;
        v[k] = q;
        z[k] = s;
        z[k + 1] = INF;
    }

    for (let q = 0, k = 0; q < length; q++) {
        while (z[k + 1] < q) k++;
        const r = v[k];
        const qr = q - r;
        grid[offset + q * stride] = f[r] + qr * qr;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/base/math-array.js":
/*!********************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/base/math-array.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MathArray: () => (/* binding */ MathArray)
/* harmony export */ });
/* harmony import */ var _lib_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/common.js */ "./node_modules/@math.gl/core/dist/lib/common.js");

/** Base class for vectors and matrices */
class MathArray extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
        // @ts-expect-error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.
        return new this.constructor().copy(this); // eslint-disable-line
    }
    fromArray(array, offset = 0) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] = array[i + offset];
        }
        return this.check();
    }
    toArray(targetArray = [], offset = 0) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            targetArray[offset + i] = this[i];
        }
        return targetArray;
    }
    toObject(targetObject) {
        return targetObject;
    }
    from(arrayOrObject) {
        return Array.isArray(arrayOrObject)
            ? this.copy(arrayOrObject)
            : // @ts-ignore
                this.fromObject(arrayOrObject);
    }
    to(arrayOrObject) {
        // @ts-ignore
        if (arrayOrObject === this) {
            return this;
        }
        // @ts-expect-error TS2339: Property 'toObject' does not exist on type 'MathArray'.
        return (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target) {
        return target ? this.to(target) : this;
    }
    /** @deprecated */
    toFloat32Array() {
        return new Float32Array(this);
    }
    toString() {
        return this.formatString(_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.config);
    }
    /** Formats string according to options */
    formatString(opts) {
        let string = '';
        for (let i = 0; i < this.ELEMENTS; ++i) {
            string += (i > 0 ? ', ' : '') + (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.formatValue)(this[i], opts);
        }
        return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;
    }
    equals(array) {
        if (!array || this.length !== array.length) {
            return false;
        }
        for (let i = 0; i < this.ELEMENTS; ++i) {
            if (!(0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this[i], array[i])) {
                return false;
            }
        }
        return true;
    }
    exactEquals(array) {
        if (!array || this.length !== array.length) {
            return false;
        }
        for (let i = 0; i < this.ELEMENTS; ++i) {
            if (this[i] !== array[i]) {
                return false;
            }
        }
        return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] = -this[i];
        }
        return this.check();
    }
    lerp(a, b, t) {
        if (t === undefined) {
            return this.lerp(this, a, b);
        }
        for (let i = 0; i < this.ELEMENTS; ++i) {
            const ai = a[i];
            const endValue = typeof b === 'number' ? b : b[i];
            this[i] = ai + t * (endValue - ai);
        }
        return this.check();
    }
    /** Minimal */
    min(vector) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] = Math.min(vector[i], this[i]);
        }
        return this.check();
    }
    /** Maximal */
    max(vector) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] = Math.max(vector[i], this[i]);
        }
        return this.check();
    }
    clamp(minVector, maxVector) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);
        }
        return this.check();
    }
    add(...vectors) {
        for (const vector of vectors) {
            for (let i = 0; i < this.ELEMENTS; ++i) {
                this[i] += vector[i];
            }
        }
        return this.check();
    }
    subtract(...vectors) {
        for (const vector of vectors) {
            for (let i = 0; i < this.ELEMENTS; ++i) {
                this[i] -= vector[i];
            }
        }
        return this.check();
    }
    scale(scale) {
        if (typeof scale === 'number') {
            for (let i = 0; i < this.ELEMENTS; ++i) {
                this[i] *= scale;
            }
        }
        else {
            for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {
                this[i] *= scale[i];
            }
        }
        return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] *= scalar;
        }
        return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
        if (_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.config.debug && !this.validate()) {
            throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
        }
        return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
        let valid = this.length === this.ELEMENTS;
        for (let i = 0; i < this.ELEMENTS; ++i) {
            valid = valid && Number.isFinite(this[i]);
        }
        return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a) {
        return this.subtract(a);
    }
    /** @deprecated */
    setScalar(a) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] = a;
        }
        return this.check();
    }
    /** @deprecated */
    addScalar(a) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] += a;
        }
        return this.check();
    }
    /** @deprecated */
    subScalar(a) {
        return this.addScalar(-a);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
        // Multiplies all elements
        // `Matrix4.scale` only scales its 3x3 "minor"
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] *= scalar;
        }
        return this.check();
    }
    /** @deprecated */
    divideScalar(a) {
        return this.multiplyByScalar(1 / a);
    }
    /** @deprecated */
    clampScalar(min, max) {
        for (let i = 0; i < this.ELEMENTS; ++i) {
            this[i] = Math.min(Math.max(this[i], min), max);
        }
        return this.check();
    }
    /** @deprecated */
    get elements() {
        return this;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/base/matrix.js":
/*!****************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/base/matrix.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix: () => (/* binding */ Matrix)
/* harmony export */ });
/* harmony import */ var _math_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math-array.js */ "./node_modules/@math.gl/core/dist/classes/base/math-array.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
/* harmony import */ var _lib_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/common.js */ "./node_modules/@math.gl/core/dist/lib/common.js");



/** Base class for matrices */
class Matrix extends _math_array_js__WEBPACK_IMPORTED_MODULE_0__.MathArray {
    // fromObject(object) {
    //   const array = object.elements;
    //   return this.fromRowMajor(array);
    // }
    // toObject(object) {
    //   const array = object.elements;
    //   this.toRowMajor(array);
    //   return object;
    // }
    // TODO better override formatString?
    toString() {
        let string = '[';
        if (_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.config.printRowMajor) {
            string += 'row-major:';
            for (let row = 0; row < this.RANK; ++row) {
                for (let col = 0; col < this.RANK; ++col) {
                    string += ` ${this[col * this.RANK + row]}`;
                }
            }
        }
        else {
            string += 'column-major:';
            for (let i = 0; i < this.ELEMENTS; ++i) {
                string += ` ${this[i]}`;
            }
        }
        string += ']';
        return string;
    }
    getElementIndex(row, col) {
        return col * this.RANK + row;
    }
    // By default assumes row major indices
    getElement(row, col) {
        return this[col * this.RANK + row];
    }
    // By default assumes row major indices
    setElement(row, col, value) {
        this[col * this.RANK + row] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
        return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
        const firstIndex = columnIndex * this.RANK;
        for (let i = 0; i < this.RANK; ++i) {
            result[i] = this[firstIndex + i];
        }
        return result;
    }
    setColumn(columnIndex, columnVector) {
        const firstIndex = columnIndex * this.RANK;
        for (let i = 0; i < this.RANK; ++i) {
            this[firstIndex + i] = columnVector[i];
        }
        return this;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/base/vector.js":
/*!****************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/base/vector.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector: () => (/* binding */ Vector)
/* harmony export */ });
/* harmony import */ var _math_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math-array.js */ "./node_modules/@math.gl/core/dist/classes/base/math-array.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
/* harmony import */ var _lib_assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/assert.js */ "./node_modules/@math.gl/core/dist/lib/assert.js");



/** Base class for vectors with at least 2 elements */
class Vector extends _math_array_js__WEBPACK_IMPORTED_MODULE_0__.MathArray {
    // ACCESSORS
    get x() {
        return this[0];
    }
    set x(value) {
        this[0] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_1__.checkNumber)(value);
    }
    get y() {
        return this[1];
    }
    set y(value) {
        this[1] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_1__.checkNumber)(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
        return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
        return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
        let length = 0;
        for (let i = 0; i < this.ELEMENTS; ++i) {
            length += this[i] * this[i];
        }
        return length;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
        return this.lengthSquared();
    }
    distance(mathArray) {
        return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
        let length = 0;
        for (let i = 0; i < this.ELEMENTS; ++i) {
            const dist = this[i] - mathArray[i];
            length += dist * dist;
        }
        return (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_1__.checkNumber)(length);
    }
    dot(mathArray) {
        let product = 0;
        for (let i = 0; i < this.ELEMENTS; ++i) {
            product += this[i] * mathArray[i];
        }
        return (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_1__.checkNumber)(product);
    }
    // MODIFIERS
    normalize() {
        const length = this.magnitude();
        if (length !== 0) {
            for (let i = 0; i < this.ELEMENTS; ++i) {
                this[i] /= length;
            }
        }
        return this.check();
    }
    multiply(...vectors) {
        for (const vector of vectors) {
            for (let i = 0; i < this.ELEMENTS; ++i) {
                this[i] *= vector[i];
            }
        }
        return this.check();
    }
    divide(...vectors) {
        for (const vector of vectors) {
            for (let i = 0; i < this.ELEMENTS; ++i) {
                this[i] /= vector[i];
            }
        }
        return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
        return this.lengthSquared();
    }
    distanceTo(vector) {
        return this.distance(vector);
    }
    distanceToSquared(vector) {
        return this.distanceSquared(vector);
    }
    getComponent(i) {
        (0,_lib_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(i >= 0 && i < this.ELEMENTS, 'index is out of range');
        return (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_1__.checkNumber)(this[i]);
    }
    setComponent(i, value) {
        (0,_lib_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(i >= 0 && i < this.ELEMENTS, 'index is out of range');
        this[i] = value;
        return this.check();
    }
    addVectors(a, b) {
        return this.copy(a).add(b);
    }
    subVectors(a, b) {
        return this.copy(a).subtract(b);
    }
    multiplyVectors(a, b) {
        return this.copy(a).multiply(b);
    }
    addScaledVector(a, b) {
        // @ts-expect-error error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.
        return this.add(new this.constructor(a).multiplyScalar(b));
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/matrix3.js":
/*!************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/matrix3.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix3: () => (/* binding */ Matrix3)
/* harmony export */ });
/* harmony import */ var _base_matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/matrix.js */ "./node_modules/@math.gl/core/dist/classes/base/matrix.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
/* harmony import */ var _lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/gl-matrix-extras.js */ "./node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js");
/* harmony import */ var _gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gl-matrix/mat3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/mat3.js");
/* harmony import */ var _gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gl-matrix/vec2.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");
/* harmony import */ var _gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gl-matrix/vec3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
// Copyright (c) 2017 Uber Technologies, Inc.
// MIT License






var INDICES;
(function (INDICES) {
    INDICES[INDICES["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES[INDICES["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES[INDICES["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES[INDICES["COL1ROW0"] = 3] = "COL1ROW0";
    INDICES[INDICES["COL1ROW1"] = 4] = "COL1ROW1";
    INDICES[INDICES["COL1ROW2"] = 5] = "COL1ROW2";
    INDICES[INDICES["COL2ROW0"] = 6] = "COL2ROW0";
    INDICES[INDICES["COL2ROW1"] = 7] = "COL2ROW1";
    INDICES[INDICES["COL2ROW2"] = 8] = "COL2ROW2";
})(INDICES || (INDICES = {}));
const IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);
class Matrix3 extends _base_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix {
    static get IDENTITY() {
        return getIdentityMatrix();
    }
    static get ZERO() {
        return getZeroMatrix();
    }
    get ELEMENTS() {
        return 9;
    }
    get RANK() {
        return 3;
    }
    get INDICES() {
        return INDICES;
    }
    constructor(array, ...args) {
        // PERF NOTE: initialize elements as double precision numbers
        super(-0, -0, -0, -0, -0, -0, -0, -0, -0);
        if (arguments.length === 1 && Array.isArray(array)) {
            this.copy(array);
        }
        else if (args.length > 0) {
            this.copy([array, ...args]);
        }
        else {
            this.identity();
        }
    }
    copy(array) {
        // Element wise copy for performance
        this[0] = array[0];
        this[1] = array[1];
        this[2] = array[2];
        this[3] = array[3];
        this[4] = array[4];
        this[5] = array[5];
        this[6] = array[6];
        this[7] = array[7];
        this[8] = array[8];
        return this.check();
    }
    // Constructors
    identity() {
        return this.copy(IDENTITY_MATRIX);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
        return this.check();
    }
    /** Calculates a 3x3 matrix from the given quaternion
     * q quat  Quaternion to create matrix from
     */
    fromQuaternion(q) {
        (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.fromQuat)(this, q);
        return this.check();
    }
    /**
     * accepts column major order, stores in column major order
     */
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {
        this[0] = m00;
        this[1] = m10;
        this[2] = m20;
        this[3] = m01;
        this[4] = m11;
        this[5] = m21;
        this[6] = m02;
        this[7] = m12;
        this[8] = m22;
        return this.check();
    }
    /**
     * accepts row major order, stores as column major
     */
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        this[0] = m00;
        this[1] = m10;
        this[2] = m20;
        this[3] = m01;
        this[4] = m11;
        this[5] = m21;
        this[6] = m02;
        this[7] = m12;
        this[8] = m22;
        return this.check();
    }
    // Accessors
    determinant() {
        return (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.determinant)(this);
    }
    // Modifiers
    transpose() {
        (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.transpose)(this, this);
        return this.check();
    }
    /** Invert a matrix. Note that this can fail if the matrix is not invertible */
    invert() {
        (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.invert)(this, this);
        return this.check();
    }
    // Operations
    multiplyLeft(a) {
        (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.multiply)(this, a, this);
        return this.check();
    }
    multiplyRight(a) {
        (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.multiply)(this, this, a);
        return this.check();
    }
    rotate(radians) {
        (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.rotate)(this, this, radians);
        return this.check();
    }
    scale(factor) {
        if (Array.isArray(factor)) {
            (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.scale)(this, this, factor);
        }
        else {
            (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.scale)(this, this, [factor, factor]);
        }
        return this.check();
    }
    translate(vec) {
        (0,_gl_matrix_mat3_js__WEBPACK_IMPORTED_MODULE_1__.translate)(this, this, vec);
        return this.check();
    }
    // Transforms
    transform(vector, result) {
        let out;
        switch (vector.length) {
            case 2:
                out = (0,_gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_2__.transformMat3)(result || [-0, -0], vector, this);
                break;
            case 3:
                out = (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.transformMat3)(result || [-0, -0, -0], vector, this);
                break;
            case 4:
                out = (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__.vec4_transformMat3)(result || [-0, -0, -0, -0], vector, this);
                break;
            default:
                throw new Error('Illegal vector');
        }
        (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_5__.checkVector)(out, vector.length);
        return out;
    }
    /** @deprecated */
    transformVector(vector, result) {
        return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector2(vector, result) {
        return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector3(vector, result) {
        return this.transform(vector, result);
    }
}
let ZERO_MATRIX3;
let IDENTITY_MATRIX3 = null;
function getZeroMatrix() {
    if (!ZERO_MATRIX3) {
        ZERO_MATRIX3 = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);
        Object.freeze(ZERO_MATRIX3);
    }
    return ZERO_MATRIX3;
}
function getIdentityMatrix() {
    if (!IDENTITY_MATRIX3) {
        IDENTITY_MATRIX3 = new Matrix3();
        Object.freeze(IDENTITY_MATRIX3);
    }
    return IDENTITY_MATRIX3;
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/matrix4.js":
/*!************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/matrix4.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix4: () => (/* binding */ Matrix4)
/* harmony export */ });
/* harmony import */ var _base_matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/matrix.js */ "./node_modules/@math.gl/core/dist/classes/base/matrix.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
/* harmony import */ var _lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/gl-matrix-extras.js */ "./node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js");
/* harmony import */ var _gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gl-matrix/mat4.js */ "./node_modules/@math.gl/core/dist/gl-matrix/mat4.js");
/* harmony import */ var _gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gl-matrix/vec2.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");
/* harmony import */ var _gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gl-matrix/vec3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _gl_matrix_vec4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gl-matrix/vec4.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js");
// Copyright (c) 2017 Uber Technologies, Inc.
// MIT License


/* eslint-disable camelcase */

// @ts-ignore gl-matrix types...




var INDICES;
(function (INDICES) {
    INDICES[INDICES["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES[INDICES["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES[INDICES["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES[INDICES["COL0ROW3"] = 3] = "COL0ROW3";
    INDICES[INDICES["COL1ROW0"] = 4] = "COL1ROW0";
    INDICES[INDICES["COL1ROW1"] = 5] = "COL1ROW1";
    INDICES[INDICES["COL1ROW2"] = 6] = "COL1ROW2";
    INDICES[INDICES["COL1ROW3"] = 7] = "COL1ROW3";
    INDICES[INDICES["COL2ROW0"] = 8] = "COL2ROW0";
    INDICES[INDICES["COL2ROW1"] = 9] = "COL2ROW1";
    INDICES[INDICES["COL2ROW2"] = 10] = "COL2ROW2";
    INDICES[INDICES["COL2ROW3"] = 11] = "COL2ROW3";
    INDICES[INDICES["COL3ROW0"] = 12] = "COL3ROW0";
    INDICES[INDICES["COL3ROW1"] = 13] = "COL3ROW1";
    INDICES[INDICES["COL3ROW2"] = 14] = "COL3ROW2";
    INDICES[INDICES["COL3ROW3"] = 15] = "COL3ROW3";
})(INDICES || (INDICES = {}));
const DEFAULT_FOVY = (45 * Math.PI) / 180;
const DEFAULT_ASPECT = 1;
const DEFAULT_NEAR = 0.1;
const DEFAULT_FAR = 500;
const IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
/** 4x4 matrix */
class Matrix4 extends _base_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix {
    static get IDENTITY() {
        return getIdentityMatrix();
    }
    static get ZERO() {
        return getZeroMatrix();
    }
    get ELEMENTS() {
        return 16;
    }
    get RANK() {
        return 4;
    }
    get INDICES() {
        return INDICES;
    }
    constructor(array) {
        // PERF NOTE: initialize elements as double precision numbers
        super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);
        if (arguments.length === 1 && Array.isArray(array)) {
            this.copy(array);
        }
        else {
            this.identity();
        }
    }
    copy(array) {
        this[0] = array[0];
        this[1] = array[1];
        this[2] = array[2];
        this[3] = array[3];
        this[4] = array[4];
        this[5] = array[5];
        this[6] = array[6];
        this[7] = array[7];
        this[8] = array[8];
        this[9] = array[9];
        this[10] = array[10];
        this[11] = array[11];
        this[12] = array[12];
        this[13] = array[13];
        this[14] = array[14];
        this[15] = array[15];
        return this.check();
    }
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {
        this[0] = m00;
        this[1] = m10;
        this[2] = m20;
        this[3] = m30;
        this[4] = m01;
        this[5] = m11;
        this[6] = m21;
        this[7] = m31;
        this[8] = m02;
        this[9] = m12;
        this[10] = m22;
        this[11] = m32;
        this[12] = m03;
        this[13] = m13;
        this[14] = m23;
        this[15] = m33;
        return this.check();
    }
    // accepts row major order, stores as column major
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        this[0] = m00;
        this[1] = m10;
        this[2] = m20;
        this[3] = m30;
        this[4] = m01;
        this[5] = m11;
        this[6] = m21;
        this[7] = m31;
        this[8] = m02;
        this[9] = m12;
        this[10] = m22;
        this[11] = m32;
        this[12] = m03;
        this[13] = m13;
        this[14] = m23;
        this[15] = m33;
        return this.check();
    }
    toRowMajor(result) {
        result[0] = this[0];
        result[1] = this[4];
        result[2] = this[8];
        result[3] = this[12];
        result[4] = this[1];
        result[5] = this[5];
        result[6] = this[9];
        result[7] = this[13];
        result[8] = this[2];
        result[9] = this[6];
        result[10] = this[10];
        result[11] = this[14];
        result[12] = this[3];
        result[13] = this[7];
        result[14] = this[11];
        result[15] = this[15];
        return result;
    }
    // Constructors
    /** Set to identity matrix */
    identity() {
        return this.copy(IDENTITY_MATRIX);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
        return this.check();
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     * @param quaternion Quaternion to create matrix from
     * @returns self
     */
    fromQuaternion(quaternion) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.fromQuat)(this, quaternion);
        return this.check();
    }
    /**
     * Generates a frustum matrix with the given bounds
     * @param view.left - Left bound of the frustum
     * @param view.right - Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top - Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far - Far bound of the frustum. Can be set to Infinity.
     * @returns self
     */
    frustum(view) {
        const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
        if (far === Infinity) {
            computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);
        }
        else {
            (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.frustum)(this, left, right, bottom, top, near, far);
        }
        return this.check();
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point,
     * and up axis
     * @param view.eye - (vector) Position of the viewer
     * @param view.center - (vector) Point the viewer is looking at
     * @param view.up - (vector) Up axis
     * @returns self
     */
    lookAt(view) {
        const { eye, center = [0, 0, 0], up = [0, 1, 0] } = view;
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.lookAt)(this, eye, center, up);
        return this.check();
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     * from "traditional" view space parameters
     * @param view.left - Left bound of the frustum
     * @param view.right number  Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top number  Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far number  Far bound of the frustum
     * @returns self
     */
    ortho(view) {
        const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.ortho)(this, left, right, bottom, top, near, far);
        return this.check();
    }
    /**
     * Generates an orthogonal projection matrix with the same parameters
     * as a perspective matrix (plus focalDistance)
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. Typically viewport width / viewport height
     * @param view.focalDistance Distance in the view frustum used for extent calculations
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    orthographic(view) {
        const { fovy = DEFAULT_FOVY, aspect = DEFAULT_ASPECT, focalDistance = 1, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
        checkRadians(fovy);
        const halfY = fovy / 2;
        const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera
        const right = top * aspect;
        return this.ortho({
            left: -right,
            right,
            bottom: -top,
            top,
            near,
            far
        });
    }
    /**
     * Generates a perspective projection matrix with the given bounds
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. typically viewport width/height
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    perspective(view) {
        const { fovy = (45 * Math.PI) / 180, aspect = 1, near = 0.1, far = 500 } = view;
        checkRadians(fovy);
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.perspective)(this, fovy, aspect, near, far);
        return this.check();
    }
    // Accessors
    determinant() {
        return (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.determinant)(this);
    }
    /**
     * Extracts the non-uniform scale assuming the matrix is an affine transformation.
     * The scales are the "lengths" of the column vectors in the upper-left 3x3 matrix.
     * @param result
     * @returns self
     */
    getScale(result = [-0, -0, -0]) {
        // explicit is faster than hypot...
        result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
        result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);
        result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);
        // result[0] = Math.hypot(this[0], this[1], this[2]);
        // result[1] = Math.hypot(this[4], this[5], this[6]);
        // result[2] = Math.hypot(this[8], this[9], this[10]);
        return result;
    }
    /**
     * Gets the translation portion, assuming the matrix is a affine transformation matrix.
     * @param result
     * @returns self
     */
    getTranslation(result = [-0, -0, -0]) {
        result[0] = this[12];
        result[1] = this[13];
        result[2] = this[14];
        return result;
    }
    /**
     * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotation(result, scaleResult) {
        result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];
        scaleResult = scaleResult || [-0, -0, -0];
        const scale = this.getScale(scaleResult);
        const inverseScale0 = 1 / scale[0];
        const inverseScale1 = 1 / scale[1];
        const inverseScale2 = 1 / scale[2];
        result[0] = this[0] * inverseScale0;
        result[1] = this[1] * inverseScale1;
        result[2] = this[2] * inverseScale2;
        result[3] = 0;
        result[4] = this[4] * inverseScale0;
        result[5] = this[5] * inverseScale1;
        result[6] = this[6] * inverseScale2;
        result[7] = 0;
        result[8] = this[8] * inverseScale0;
        result[9] = this[9] * inverseScale1;
        result[10] = this[10] * inverseScale2;
        result[11] = 0;
        result[12] = 0;
        result[13] = 0;
        result[14] = 0;
        result[15] = 1;
        return result;
    }
    /**
     *
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotationMatrix3(result, scaleResult) {
        result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];
        scaleResult = scaleResult || [-0, -0, -0];
        const scale = this.getScale(scaleResult);
        const inverseScale0 = 1 / scale[0];
        const inverseScale1 = 1 / scale[1];
        const inverseScale2 = 1 / scale[2];
        result[0] = this[0] * inverseScale0;
        result[1] = this[1] * inverseScale1;
        result[2] = this[2] * inverseScale2;
        result[3] = this[4] * inverseScale0;
        result[4] = this[5] * inverseScale1;
        result[5] = this[6] * inverseScale2;
        result[6] = this[8] * inverseScale0;
        result[7] = this[9] * inverseScale1;
        result[8] = this[10] * inverseScale2;
        return result;
    }
    // Modifiers
    transpose() {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.transpose)(this, this);
        return this.check();
    }
    invert() {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.invert)(this, this);
        return this.check();
    }
    // Operations
    multiplyLeft(a) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.multiply)(this, a, this);
        return this.check();
    }
    multiplyRight(a) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.multiply)(this, this, a);
        return this.check();
    }
    // Rotates a matrix by the given angle around the X axis
    rotateX(radians) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.rotateX)(this, this, radians);
        // mat4_rotate(this, this, radians, [1, 0, 0]);
        return this.check();
    }
    // Rotates a matrix by the given angle around the Y axis.
    rotateY(radians) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.rotateY)(this, this, radians);
        // mat4_rotate(this, this, radians, [0, 1, 0]);
        return this.check();
    }
    /**
     * Rotates a matrix by the given angle around the Z axis.
     * @param radians
     * @returns self
     */
    rotateZ(radians) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.rotateZ)(this, this, radians);
        // mat4_rotate(this, this, radians, [0, 0, 1]);
        return this.check();
    }
    /**
     *
     * @param param0
     * @returns self
     */
    rotateXYZ(angleXYZ) {
        return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);
    }
    /**
     *
     * @param radians
     * @param axis
     * @returns self
     */
    rotateAxis(radians, axis) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.rotate)(this, this, radians, axis);
        return this.check();
    }
    /**
     *
     * @param factor
     * @returns self
     */
    scale(factor) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.scale)(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);
        return this.check();
    }
    /**
     *
     * @param vec
     * @returns self
     */
    translate(vector) {
        (0,_gl_matrix_mat4_js__WEBPACK_IMPORTED_MODULE_1__.translate)(this, this, vector);
        return this.check();
    }
    // Transforms
    /**
     * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points
     * @param vector
     * @param result
     * @returns self
     */
    transform(vector, result) {
        if (vector.length === 4) {
            result = (0,_gl_matrix_vec4_js__WEBPACK_IMPORTED_MODULE_2__.transformMat4)(result || [-0, -0, -0, -0], vector, this);
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_3__.checkVector)(result, 4);
            return result;
        }
        return this.transformAsPoint(vector, result);
    }
    /**
     * Transforms any 2 or 3 element array as point (w implicitly 1)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsPoint(vector, result) {
        const { length } = vector;
        let out;
        switch (length) {
            case 2:
                out = (0,_gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_4__.transformMat4)(result || [-0, -0], vector, this);
                break;
            case 3:
                out = (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_5__.transformMat4)(result || [-0, -0, -0], vector, this);
                break;
            default:
                throw new Error('Illegal vector');
        }
        (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_3__.checkVector)(out, vector.length);
        return out;
    }
    /**
     * Transforms any 2 or 3 element array as vector (w implicitly 0)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsVector(vector, result) {
        let out;
        switch (vector.length) {
            case 2:
                out = (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_6__.vec2_transformMat4AsVector)(result || [-0, -0], vector, this);
                break;
            case 3:
                out = (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_6__.vec3_transformMat4AsVector)(result || [-0, -0, -0], vector, this);
                break;
            default:
                throw new Error('Illegal vector');
        }
        (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_3__.checkVector)(out, vector.length);
        return out;
    }
    /** @deprecated */
    transformPoint(vector, result) {
        return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformVector(vector, result) {
        return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformDirection(vector, result) {
        return this.transformAsVector(vector, result);
    }
    // three.js math API compatibility
    makeRotationX(radians) {
        return this.identity().rotateX(radians);
    }
    makeTranslation(x, y, z) {
        return this.identity().translate([x, y, z]);
    }
}
// TODO initializing static members directly is an option, but make sure no tree-shaking issues
let ZERO;
let IDENTITY;
function getZeroMatrix() {
    if (!ZERO) {
        ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        Object.freeze(ZERO);
    }
    return ZERO;
}
function getIdentityMatrix() {
    if (!IDENTITY) {
        IDENTITY = new Matrix4();
        Object.freeze(IDENTITY);
    }
    return IDENTITY;
}
// HELPER FUNCTIONS
function checkRadians(possiblyDegrees) {
    if (possiblyDegrees > Math.PI * 2) {
        throw Error('expected radians');
    }
}
// eslint-disable-next-line max-params
function computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {
    const column0Row0 = (2 * near) / (right - left);
    const column1Row1 = (2 * near) / (top - bottom);
    const column2Row0 = (right + left) / (right - left);
    const column2Row1 = (top + bottom) / (top - bottom);
    const column2Row2 = -1;
    const column2Row3 = -1;
    const column3Row2 = -2 * near;
    result[0] = column0Row0;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
    result[5] = column1Row1;
    result[6] = 0;
    result[7] = 0;
    result[8] = column2Row0;
    result[9] = column2Row1;
    result[10] = column2Row2;
    result[11] = column2Row3;
    result[12] = 0;
    result[13] = 0;
    result[14] = column3Row2;
    result[15] = 0;
    return result;
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/quaternion.js":
/*!***************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/quaternion.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Quaternion: () => (/* binding */ Quaternion)
/* harmony export */ });
/* harmony import */ var _base_math_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/math-array.js */ "./node_modules/@math.gl/core/dist/classes/base/math-array.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
/* harmony import */ var _vector4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vector4.js */ "./node_modules/@math.gl/core/dist/classes/vector4.js");
/* harmony import */ var _gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gl-matrix/quat.js */ "./node_modules/@math.gl/core/dist/gl-matrix/quat.js");
/* harmony import */ var _gl_matrix_vec4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gl-matrix/vec4.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js");



// @ts-ignore gl-matrix types...

// @ts-ignore gl-matrix types...

const IDENTITY_QUATERNION = [0, 0, 0, 1];
class Quaternion extends _base_math_array_js__WEBPACK_IMPORTED_MODULE_0__.MathArray {
    constructor(x = 0, y = 0, z = 0, w = 1) {
        // PERF NOTE: initialize elements as double precision numbers
        super(-0, -0, -0, -0);
        // eslint-disable-next-line prefer-rest-params
        if (Array.isArray(x) && arguments.length === 1) {
            this.copy(x);
        }
        else {
            this.set(x, y, z, w);
        }
    }
    copy(array) {
        this[0] = array[0];
        this[1] = array[1];
        this[2] = array[2];
        this[3] = array[3];
        return this.check();
    }
    set(x, y, z, w) {
        this[0] = x;
        this[1] = y;
        this[2] = z;
        this[3] = w;
        return this.check();
    }
    fromObject(object) {
        this[0] = object.x;
        this[1] = object.y;
        this[2] = object.z;
        this[3] = object.w;
        return this.check();
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     * NOTE: The resultant quaternion is not normalized, so you should
     * be sure to renormalize the quaternion yourself where necessary.
     * @param m
     * @returns
     */
    fromMatrix3(m) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.fromMat3)(this, m);
        return this.check();
    }
    fromAxisRotation(axis, rad) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.setAxisAngle)(this, axis, rad);
        return this.check();
    }
    /** Set a quat to the identity quaternion */
    identity() {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.identity)(this);
        return this.check();
    }
    // Set the components of a quat to the given values
    // set(i, j, k, l) {
    //   quat_set(this, i, j, k, l);
    //   return this.check();
    // }
    // Sets a quat from the given angle and rotation axis, then returns it.
    setAxisAngle(axis, rad) {
        return this.fromAxisRotation(axis, rad);
    }
    // Getters/setters
    get ELEMENTS() {
        return 4;
    }
    get x() {
        return this[0];
    }
    set x(value) {
        this[0] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
    }
    get y() {
        return this[1];
    }
    set y(value) {
        this[1] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
    }
    get z() {
        return this[2];
    }
    set z(value) {
        this[2] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
    }
    get w() {
        return this[3];
    }
    set w(value) {
        this[3] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
    }
    // Calculates the length of a quat
    len() {
        return (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.length)(this);
    }
    // Calculates the squared length of a quat
    lengthSquared() {
        return (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.squaredLength)(this);
    }
    // Calculates the dot product of two quat's
    // @return {Number}
    dot(a) {
        return (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.dot)(this, a);
    }
    // Gets the rotation axis and angle for a given quaternion.
    // If a quaternion is created with setAxisAngle, this method will
    // return the same values as providied in the original parameter
    // list OR functionally equivalent values.
    // Example: The quaternion formed by axis [0, 0, 1] and angle -90
    // is the same as the quaternion formed by [0, 0, 1] and 270.
    // This method favors the latter.
    // @return {{[x,y,z], Number}}
    // getAxisAngle() {
    //   const axis = [];
    // //   const angle = quat_getAxisAngle(axis, this);
    //   return {axis, angle};
    // }
    // MODIFIERS
    // Sets a quaternion to represent the shortest rotation from one vector
    // to another. Both vectors are assumed to be unit length.
    rotationTo(vectorA, vectorB) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.rotationTo)(this, vectorA, vectorB);
        return this.check();
    }
    // Sets the specified quaternion with values corresponding to the given axes.
    // Each axis is a vec3 and is expected to be unit length and perpendicular
    // to all other specified axes.
    // setAxes() {
    //   Number
    // }
    // Performs a spherical linear interpolation with two control points
    // sqlerp() {
    //   Number;
    // }
    // Adds two quat's
    add(a) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.add)(this, this, a);
        return this.check();
    }
    // Calculates the W component of a quat from the X, Y, and Z components.
    // Any existing W component will be ignored.
    calculateW() {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.calculateW)(this, this);
        return this.check();
    }
    // Calculates the conjugate of a quat If the quaternion is normalized,
    // this function is faster than quat_invert and produces the same result.
    conjugate() {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.conjugate)(this, this);
        return this.check();
    }
    // Calculates the inverse of a quat
    invert() {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.invert)(this, this);
        return this.check();
    }
    // Performs a linear interpolation between two quat's
    lerp(a, b, t) {
        if (t === undefined) {
            return this.lerp(this, a, b);
        }
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.lerp)(this, a, b, t);
        return this.check();
    }
    // Multiplies two quat's
    multiplyRight(a) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.multiply)(this, this, a);
        return this.check();
    }
    multiplyLeft(a) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.multiply)(this, a, this);
        return this.check();
    }
    // Normalize a quat
    normalize() {
        // Handle 0 case
        const length = this.len();
        const l = length > 0 ? 1 / length : 0;
        this[0] = this[0] * l;
        this[1] = this[1] * l;
        this[2] = this[2] * l;
        this[3] = this[3] * l;
        // Set to [0, 0, 0, 1] if length is 0
        if (length === 0) {
            this[3] = 1;
        }
        return this.check();
    }
    // Rotates a quaternion by the given angle about the X axis
    rotateX(rad) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.rotateX)(this, this, rad);
        return this.check();
    }
    // Rotates a quaternion by the given angle about the Y axis
    rotateY(rad) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.rotateY)(this, this, rad);
        return this.check();
    }
    // Rotates a quaternion by the given angle about the Z axis
    rotateZ(rad) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.rotateZ)(this, this, rad);
        return this.check();
    }
    // Scales a quat by a scalar number
    scale(b) {
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.scale)(this, this, b);
        return this.check();
    }
    // Performs a spherical linear interpolation between two quat
    slerp(arg0, arg1, arg2) {
        let start;
        let target;
        let ratio;
        // eslint-disable-next-line prefer-rest-params
        switch (arguments.length) {
            case 1: // Deprecated signature ({start, target, ratio})
                // eslint-disable-next-line prefer-rest-params
                ({
                    start = IDENTITY_QUATERNION,
                    target,
                    ratio
                } = arg0);
                break;
            case 2: // THREE.js compatibility signature (target, ration)
                start = this; // eslint-disable-line
                target = arg0;
                ratio = arg1;
                break;
            default:
                // Default signature: (start, target, ratio)
                start = arg0;
                target = arg1;
                ratio = arg2;
        }
        (0,_gl_matrix_quat_js__WEBPACK_IMPORTED_MODULE_1__.slerp)(this, start, target, ratio);
        return this.check();
    }
    transformVector4(vector, result = new _vector4_js__WEBPACK_IMPORTED_MODULE_3__.Vector4()) {
        (0,_gl_matrix_vec4_js__WEBPACK_IMPORTED_MODULE_4__.transformQuat)(result, vector, this);
        return (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkVector)(result, 4);
    }
    // THREE.js Math API compatibility
    lengthSq() {
        return this.lengthSquared();
    }
    setFromAxisAngle(axis, rad) {
        return this.setAxisAngle(axis, rad);
    }
    premultiply(a) {
        return this.multiplyLeft(a);
    }
    multiply(a) {
        return this.multiplyRight(a);
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/spherical-coordinates.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/spherical-coordinates.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SphericalCoordinates: () => (/* binding */ SphericalCoordinates)
/* harmony export */ });
/* harmony import */ var _vector3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector3.js */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _lib_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/common.js */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gl-matrix/vec3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");



// @ts-ignore gl-matrix types...

// TODO - import epsilon
const EPSILON = 0.000001;
const EARTH_RADIUS_METERS = 6371000;
/**
 * The poles (phi) are at the positive and negative y axis.
 * The equator starts at positive z.
 * @link https://en.wikipedia.org/wiki/Spherical_coordinate_system
 */
class SphericalCoordinates {
    // bearing: number;
    // pitch: number;
    // altitude: number;
    // lnglatZ coordinates
    // longitude: number;
    // latitude: number;
    // lng: number;
    // lat: number;
    // z: number;
    /**
     * Creates a new SphericalCoordinates object
     * @param options
     * @param [options.phi] =0 - rotation around X (latitude)
     * @param [options.theta] =0 - rotation around Y (longitude)
     * @param [options.radius] =1 - Distance from center
     * @param [options.bearing]
     * @param [options.pitch]
     * @param [options.altitude]
     * @param [options.radiusScale] =1
     */
    // eslint-disable-next-line complexity
    constructor({ phi = 0, theta = 0, radius = 1, bearing, pitch, altitude, radiusScale = EARTH_RADIUS_METERS } = {}) {
        this.phi = phi;
        this.theta = theta;
        // TODO - silently accepts illegal 0
        this.radius = radius || altitude || 1; // radial distance from center
        this.radiusScale = radiusScale || 1; // Used by lngLatZ
        if (bearing !== undefined) {
            this.bearing = bearing; // up / down towards top and bottom pole
        }
        if (pitch !== undefined) {
            this.pitch = pitch; // around the equator of the sphere
        }
        this.check();
    }
    toString() {
        return this.formatString(_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.config);
    }
    formatString({ printTypes = false }) {
        const f = _lib_common_js__WEBPACK_IMPORTED_MODULE_0__.formatValue;
        return `${printTypes ? 'Spherical' : ''}\
[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;
    }
    equals(other) {
        return ((0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this.radius, other.radius) &&
            (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this.theta, other.theta) &&
            (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this.phi, other.phi));
    }
    exactEquals(other) {
        return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;
    }
    /* eslint-disable brace-style */
    // Cartographic (bearing 0 north, pitch 0 look from above)
    get bearing() {
        return 180 - (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.degrees)(this.phi);
    }
    set bearing(v) {
        this.phi = Math.PI - (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.radians)(v);
    }
    get pitch() {
        return (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.degrees)(this.theta);
    }
    set pitch(v) {
        this.theta = (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.radians)(v);
    }
    // get pitch() { return 90 - degrees(this.phi); }
    // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }
    // get altitude() { return this.radius - 1; } // relative altitude
    // lnglatZ coordinates
    get longitude() {
        return (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.degrees)(this.phi);
    }
    get latitude() {
        return (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.degrees)(this.theta);
    }
    get lng() {
        return (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.degrees)(this.phi);
    }
    get lat() {
        return (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.degrees)(this.theta);
    }
    get z() {
        return (this.radius - 1) * this.radiusScale;
    }
    /* eslint-enable brace-style */
    set(radius, phi, theta) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this.check();
    }
    clone() {
        return new SphericalCoordinates().copy(this);
    }
    copy(other) {
        this.radius = other.radius;
        this.phi = other.phi;
        this.theta = other.theta;
        return this.check();
    }
    fromLngLatZ([lng, lat, z]) {
        this.radius = 1 + z / this.radiusScale;
        this.phi = (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.radians)(lat);
        this.theta = (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.radians)(lng);
        return this.check();
    }
    fromVector3(v) {
        this.radius = _gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_1__.length(v);
        if (this.radius > 0) {
            this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis
            this.phi = Math.acos((0,_lib_common_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(v[2] / this.radius, -1, 1)); // polar angle
        }
        return this.check();
    }
    toVector3() {
        return new _vector3_js__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, this.radius)
            .rotateX({ radians: this.theta })
            .rotateZ({ radians: this.phi });
    }
    // restrict phi to be betwee EPS and PI-EPS
    makeSafe() {
        this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));
        return this;
    }
    check() {
        // this.makeSafe();
        if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {
            throw new Error('SphericalCoordinates: some fields set to invalid numbers');
        }
        return this;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/vector2.js":
/*!************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/vector2.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector2: () => (/* binding */ Vector2)
/* harmony export */ });
/* harmony import */ var _base_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/vector.js */ "./node_modules/@math.gl/core/dist/classes/base/vector.js");
/* harmony import */ var _lib_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/common.js */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
/* harmony import */ var _gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gl-matrix/vec2.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");
/* harmony import */ var _lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/gl-matrix-extras.js */ "./node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js");
// Copyright (c) 2017 Uber Technologies, Inc.
// MIT License





/**
 * Two-element vector class.
 * Subclass of Array<number>
 */
class Vector2 extends _base_vector_js__WEBPACK_IMPORTED_MODULE_0__.Vector {
    // Creates a new, empty vec2
    constructor(x = 0, y = 0) {
        // PERF NOTE: initialize elements as double precision numbers
        super(2); // -0, -0);
        if ((0,_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(x) && arguments.length === 1) {
            this.copy(x);
        }
        else {
            if (_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.config.debug) {
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(x);
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(y);
            }
            this[0] = x;
            this[1] = y;
        }
    }
    set(x, y) {
        this[0] = x;
        this[1] = y;
        return this.check();
    }
    copy(array) {
        this[0] = array[0];
        this[1] = array[1];
        return this.check();
    }
    fromObject(object) {
        if (_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.config.debug) {
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.x);
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.y);
        }
        this[0] = object.x;
        this[1] = object.y;
        return this.check();
    }
    toObject(object) {
        object.x = this[0];
        object.y = this[1];
        return object;
    }
    // Getters/setters
    get ELEMENTS() {
        return 2;
    }
    /**
     * Returns angle from x axis
     * @returns
     */
    horizontalAngle() {
        return Math.atan2(this.y, this.x);
    }
    /**
     * Returns angle from y axis
     * @returns
     */
    verticalAngle() {
        return Math.atan2(this.x, this.y);
    }
    // Transforms
    /**
     * Transforms as point
     * @param matrix4
     * @returns
     */
    transform(matrix4) {
        return this.transformAsPoint(matrix4);
    }
    /**
     * transforms as point (4th component is implicitly 1)
     * @param matrix4
     * @returns
     */
    transformAsPoint(matrix4) {
        (0,_gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_3__.transformMat4)(this, this, matrix4);
        return this.check();
    }
    /**
     * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)
     * @param matrix4
     * @returns
     */
    transformAsVector(matrix4) {
        (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__.vec2_transformMat4AsVector)(this, this, matrix4);
        return this.check();
    }
    transformByMatrix3(matrix3) {
        (0,_gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_3__.transformMat3)(this, this, matrix3);
        return this.check();
    }
    transformByMatrix2x3(matrix2x3) {
        (0,_gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_3__.transformMat2d)(this, this, matrix2x3);
        return this.check();
    }
    transformByMatrix2(matrix2) {
        (0,_gl_matrix_vec2_js__WEBPACK_IMPORTED_MODULE_3__.transformMat2)(this, this, matrix2);
        return this.check();
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/vector3.js":
/*!************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/vector3.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector3: () => (/* binding */ Vector3)
/* harmony export */ });
/* harmony import */ var _base_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/vector.js */ "./node_modules/@math.gl/core/dist/classes/base/vector.js");
/* harmony import */ var _lib_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/common.js */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
/* harmony import */ var _gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gl-matrix/vec3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/gl-matrix-extras.js */ "./node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js");



// @ts-ignore gl-matrix types

/* eslint-disable camelcase */

const ORIGIN = [0, 0, 0];
let ZERO;
/**
 * Three-element vector class.
 * Subclass of Array<number>
 */
class Vector3 extends _base_vector_js__WEBPACK_IMPORTED_MODULE_0__.Vector {
    static get ZERO() {
        if (!ZERO) {
            ZERO = new Vector3(0, 0, 0);
            Object.freeze(ZERO);
        }
        return ZERO;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x = 0, y = 0, z = 0) {
        // PERF NOTE: initialize elements as double precision numbers
        super(-0, -0, -0);
        if (arguments.length === 1 && (0,_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(x)) {
            this.copy(x);
        }
        else {
            // this.set(x, y, z);
            if (_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.config.debug) {
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(x);
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(y);
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(z);
            }
            // @ts-expect-error TS2412: Property '0' of type 'number | [number, number, number]' is not assignable to numeric index type 'number'
            this[0] = x;
            this[1] = y;
            this[2] = z;
        }
    }
    set(x, y, z) {
        this[0] = x;
        this[1] = y;
        this[2] = z;
        return this.check();
    }
    copy(array) {
        this[0] = array[0];
        this[1] = array[1];
        this[2] = array[2];
        return this.check();
    }
    fromObject(object) {
        if (_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.config.debug) {
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.x);
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.y);
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.z);
        }
        this[0] = object.x;
        this[1] = object.y;
        this[2] = object.z;
        return this.check();
    }
    toObject(object) {
        object.x = this[0];
        object.y = this[1];
        object.z = this[2];
        return object;
    }
    // Getters/setters
    get ELEMENTS() {
        return 3;
    }
    get z() {
        return this[2];
    }
    set z(value) {
        this[2] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
    }
    // ACCESSORS
    angle(vector) {
        return (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.angle)(this, vector);
    }
    // MODIFIERS
    cross(vector) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.cross)(this, this, vector);
        return this.check();
    }
    rotateX({ radians, origin = ORIGIN }) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.rotateX)(this, this, origin, radians);
        return this.check();
    }
    rotateY({ radians, origin = ORIGIN }) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.rotateY)(this, this, origin, radians);
        return this.check();
    }
    rotateZ({ radians, origin = ORIGIN }) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.rotateZ)(this, this, origin, radians);
        return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
        return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.transformMat4)(this, this, matrix4);
        return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
        (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__.vec3_transformMat4AsVector)(this, this, matrix4);
        return this.check();
    }
    transformByMatrix3(matrix3) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.transformMat3)(this, this, matrix3);
        return this.check();
    }
    transformByMatrix2(matrix2) {
        (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__.vec3_transformMat2)(this, this, matrix2);
        return this.check();
    }
    transformByQuaternion(quaternion) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.transformQuat)(this, this, quaternion);
        return this.check();
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/classes/vector4.js":
/*!************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/classes/vector4.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector4: () => (/* binding */ Vector4)
/* harmony export */ });
/* harmony import */ var _gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gl-matrix/vec3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/gl-matrix-extras.js */ "./node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js");
/* harmony import */ var _base_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/vector.js */ "./node_modules/@math.gl/core/dist/classes/base/vector.js");
/* harmony import */ var _lib_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/common.js */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _lib_validators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/validators.js */ "./node_modules/@math.gl/core/dist/lib/validators.js");
// Copyright (c) 2017 Uber Technologies, Inc.
// MIT License
/* eslint-disable camelcase */





let ZERO;
/**
 * Four-element vector class.
 * Subclass of Array<number>
 */
class Vector4 extends _base_vector_js__WEBPACK_IMPORTED_MODULE_0__.Vector {
    static get ZERO() {
        if (!ZERO) {
            ZERO = new Vector4(0, 0, 0, 0);
            Object.freeze(ZERO);
        }
        return ZERO;
    }
    constructor(x = 0, y = 0, z = 0, w = 0) {
        // PERF NOTE: initialize elements as double precision numbers
        super(-0, -0, -0, -0);
        if ((0,_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(x) && arguments.length === 1) {
            this.copy(x);
        }
        else {
            // this.set(x, y, z, w);
            if (_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.config.debug) {
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(x);
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(y);
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(z);
                (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(w);
            }
            this[0] = x;
            this[1] = y;
            this[2] = z;
            this[3] = w;
        }
    }
    set(x, y, z, w) {
        this[0] = x;
        this[1] = y;
        this[2] = z;
        this[3] = w;
        return this.check();
    }
    copy(array) {
        this[0] = array[0];
        this[1] = array[1];
        this[2] = array[2];
        this[3] = array[3];
        return this.check();
    }
    fromObject(object) {
        if (_lib_common_js__WEBPACK_IMPORTED_MODULE_1__.config.debug) {
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.x);
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.y);
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.z);
            (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(object.w);
        }
        this[0] = object.x;
        this[1] = object.y;
        this[2] = object.z;
        this[3] = object.w;
        return this;
    }
    toObject(object) {
        object.x = this[0];
        object.y = this[1];
        object.z = this[2];
        object.w = this[3];
        return object;
    }
    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */
    get ELEMENTS() {
        return 4;
    }
    get z() {
        return this[2];
    }
    set z(value) {
        this[2] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
    }
    get w() {
        return this[3];
    }
    set w(value) {
        this[3] = (0,_lib_validators_js__WEBPACK_IMPORTED_MODULE_2__.checkNumber)(value);
    }
    transform(matrix4) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.transformMat4)(this, this, matrix4);
        return this.check();
    }
    transformByMatrix3(matrix3) {
        (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__.vec4_transformMat3)(this, this, matrix3);
        return this.check();
    }
    transformByMatrix2(matrix2) {
        (0,_lib_gl_matrix_extras_js__WEBPACK_IMPORTED_MODULE_4__.vec4_transformMat2)(this, this, matrix2);
        return this.check();
    }
    transformByQuaternion(quaternion) {
        (0,_gl_matrix_vec3_js__WEBPACK_IMPORTED_MODULE_3__.transformQuat)(this, this, quaternion);
        return this.check();
    }
    // three.js compatibility
    applyMatrix4(m) {
        m.transform(this, this);
        return this;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/gl-matrix/common.js":
/*!*************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/gl-matrix/common.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ANGLE_ORDER: () => (/* binding */ ANGLE_ORDER),
/* harmony export */   ARRAY_TYPE: () => (/* binding */ ARRAY_TYPE),
/* harmony export */   EPSILON: () => (/* binding */ EPSILON),
/* harmony export */   RANDOM: () => (/* binding */ RANDOM),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   setMatrixArrayType: () => (/* binding */ setMatrixArrayType),
/* harmony export */   toRadian: () => (/* binding */ toRadian)
/* harmony export */ });
// @eslint-disable
// @ts-nocheck
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
const EPSILON = 0.000001;
let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
const RANDOM = Math.random;
const ANGLE_ORDER = 'zyx';
/**
 * Symmetric round
 * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background
 *
 * @param {Number} a value to round
 */
function round(a) {
    if (a >= 0)
        return Math.round(a);
    return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);
}
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */
function setMatrixArrayType(type) {
    ARRAY_TYPE = type;
}
const degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */
function toRadian(a) {
    return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
function equals(a, b) {
    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/gl-matrix/mat3.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/gl-matrix/mat3.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   adjoint: () => (/* binding */ adjoint),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   determinant: () => (/* binding */ determinant),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   frob: () => (/* binding */ frob),
/* harmony export */   fromMat2d: () => (/* binding */ fromMat2d),
/* harmony export */   fromMat4: () => (/* binding */ fromMat4),
/* harmony export */   fromQuat: () => (/* binding */ fromQuat),
/* harmony export */   fromRotation: () => (/* binding */ fromRotation),
/* harmony export */   fromScaling: () => (/* binding */ fromScaling),
/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),
/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),
/* harmony export */   normalFromMat4: () => (/* binding */ normalFromMat4),
/* harmony export */   projection: () => (/* binding */ projection),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   translate: () => (/* binding */ translate),
/* harmony export */   transpose: () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@math.gl/core/dist/gl-matrix/common.js");

/**
 * 3x3 Matrix
 * @module mat3
 */
/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
function create() {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);
    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
function fromMat4(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
function clone(a) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        const a01 = a[1];
        const a02 = a[2];
        const a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    }
    else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */
function invert(out, a) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a10 = a[3];
    const a11 = a[4];
    const a12 = a[5];
    const a20 = a[6];
    const a21 = a[7];
    const a22 = a[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    // Calculate the determinant
    let det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */
function adjoint(out, a) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a10 = a[3];
    const a11 = a[4];
    const a12 = a[5];
    const a20 = a[6];
    const a21 = a[7];
    const a22 = a[8];
    out[0] = a11 * a22 - a12 * a21;
    out[1] = a02 * a21 - a01 * a22;
    out[2] = a01 * a12 - a02 * a11;
    out[3] = a12 * a20 - a10 * a22;
    out[4] = a00 * a22 - a02 * a20;
    out[5] = a02 * a10 - a00 * a12;
    out[6] = a10 * a21 - a11 * a20;
    out[7] = a01 * a20 - a00 * a21;
    out[8] = a00 * a11 - a01 * a10;
    return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a10 = a[3];
    const a11 = a[4];
    const a12 = a[5];
    const a20 = a[6];
    const a21 = a[7];
    const a22 = a[8];
    return (a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20));
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */
function multiply(out, a, b) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a10 = a[3];
    const a11 = a[4];
    const a12 = a[5];
    const a20 = a[6];
    const a21 = a[7];
    const a22 = a[8];
    const b00 = b[0];
    const b01 = b[1];
    const b02 = b[2];
    const b10 = b[3];
    const b11 = b[4];
    const b12 = b[5];
    const b20 = b[6];
    const b21 = b[7];
    const b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */
function translate(out, a, v) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a10 = a[3];
    const a11 = a[4];
    const a12 = a[5];
    const a20 = a[6];
    const a21 = a[7];
    const a22 = a[8];
    const x = v[0];
    const y = v[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function rotate(out, a, rad) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a10 = a[3];
    const a11 = a[4];
    const a12 = a[5];
    const a20 = a[6];
    const a21 = a[7];
    const a22 = a[8];
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
function scale(out, a, v) {
    const x = v[0];
    const y = v[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */
function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function fromRotation(out, rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = -s;
    out[4] = c;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */
function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/
function fromMat2d(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */
function fromQuat(out, q) {
    const x = q[0];
    const y = q[1];
    const z = q[2];
    const w = q[3];
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const yx = y * x2;
    const yy = y * y2;
    const zx = z * x2;
    const zy = z * y2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */
function normalFromMat4(out, a) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    // Calculate the determinant
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */
function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return `mat3(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]})`;
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
    return Math.sqrt(a[0] * a[0] +
        a[1] * a[1] +
        a[2] * a[2] +
        a[3] * a[3] +
        a[4] * a[4] +
        a[5] * a[5] +
        a[6] * a[6] +
        a[7] * a[7] +
        a[8] * a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    out[6] = a[6] + b[6] * scale;
    out[7] = a[7] + b[7] * scale;
    out[8] = a[8] + b[8] * scale;
    return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
    return (a[0] === b[0] &&
        a[1] === b[1] &&
        a[2] === b[2] &&
        a[3] === b[3] &&
        a[4] === b[4] &&
        a[5] === b[5] &&
        a[6] === b[6] &&
        a[7] === b[7] &&
        a[8] === b[8]);
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
    const a0 = a[0];
    const a1 = a[1];
    const a2 = a[2];
    const a3 = a[3];
    const a4 = a[4];
    const a5 = a[5];
    const a6 = a[6];
    const a7 = a[7];
    const a8 = a[8];
    const b0 = b[0];
    const b1 = b[1];
    const b2 = b[2];
    const b3 = b[3];
    const b4 = b[4];
    const b5 = b[5];
    const b6 = b[6];
    const b7 = b[7];
    const b8 = b[8];
    return (Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
        Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
        Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
        Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
        Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
        Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
        Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
        Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
        Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */
const mul = multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */
const sub = subtract;


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/gl-matrix/mat4.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/gl-matrix/mat4.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   adjoint: () => (/* binding */ adjoint),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   decompose: () => (/* binding */ decompose),
/* harmony export */   determinant: () => (/* binding */ determinant),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   frob: () => (/* binding */ frob),
/* harmony export */   fromQuat: () => (/* binding */ fromQuat),
/* harmony export */   fromQuat2: () => (/* binding */ fromQuat2),
/* harmony export */   fromRotation: () => (/* binding */ fromRotation),
/* harmony export */   fromRotationTranslation: () => (/* binding */ fromRotationTranslation),
/* harmony export */   fromRotationTranslationScale: () => (/* binding */ fromRotationTranslationScale),
/* harmony export */   fromRotationTranslationScaleOrigin: () => (/* binding */ fromRotationTranslationScaleOrigin),
/* harmony export */   fromScaling: () => (/* binding */ fromScaling),
/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   fromXRotation: () => (/* binding */ fromXRotation),
/* harmony export */   fromYRotation: () => (/* binding */ fromYRotation),
/* harmony export */   fromZRotation: () => (/* binding */ fromZRotation),
/* harmony export */   frustum: () => (/* binding */ frustum),
/* harmony export */   getRotation: () => (/* binding */ getRotation),
/* harmony export */   getScaling: () => (/* binding */ getScaling),
/* harmony export */   getTranslation: () => (/* binding */ getTranslation),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   lookAt: () => (/* binding */ lookAt),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),
/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),
/* harmony export */   ortho: () => (/* binding */ ortho),
/* harmony export */   orthoNO: () => (/* binding */ orthoNO),
/* harmony export */   orthoZO: () => (/* binding */ orthoZO),
/* harmony export */   perspective: () => (/* binding */ perspective),
/* harmony export */   perspectiveFromFieldOfView: () => (/* binding */ perspectiveFromFieldOfView),
/* harmony export */   perspectiveNO: () => (/* binding */ perspectiveNO),
/* harmony export */   perspectiveZO: () => (/* binding */ perspectiveZO),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   rotateX: () => (/* binding */ rotateX),
/* harmony export */   rotateY: () => (/* binding */ rotateY),
/* harmony export */   rotateZ: () => (/* binding */ rotateZ),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   targetTo: () => (/* binding */ targetTo),
/* harmony export */   translate: () => (/* binding */ translate),
/* harmony export */   transpose: () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@math.gl/core/dist/gl-matrix/common.js");
// @eslint-disable
// @ts-nocheck

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */
/**
 * Creates a new identity mat4
 *
 * @returns a new 4x4 matrix
 */
function create() {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);
    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        const a01 = a[1];
        const a02 = a[2];
        const a03 = a[3];
        const a12 = a[6];
        const a13 = a[7];
        const a23 = a[11];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    }
    else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    // Calculate the determinant
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    out[0] = a11 * b11 - a12 * b10 + a13 * b09;
    out[1] = a02 * b10 - a01 * b11 - a03 * b09;
    out[2] = a31 * b05 - a32 * b04 + a33 * b03;
    out[3] = a22 * b04 - a21 * b05 - a23 * b03;
    out[4] = a12 * b08 - a10 * b11 - a13 * b07;
    out[5] = a00 * b11 - a02 * b08 + a03 * b07;
    out[6] = a32 * b02 - a30 * b05 - a33 * b01;
    out[7] = a20 * b05 - a22 * b02 + a23 * b01;
    out[8] = a10 * b10 - a11 * b08 + a13 * b06;
    out[9] = a01 * b08 - a00 * b10 - a03 * b06;
    out[10] = a30 * b04 - a31 * b02 + a33 * b00;
    out[11] = a21 * b02 - a20 * b04 - a23 * b00;
    out[12] = a11 * b07 - a10 * b09 - a12 * b06;
    out[13] = a00 * b09 - a01 * b07 + a02 * b06;
    out[14] = a31 * b01 - a30 * b03 - a32 * b00;
    out[15] = a20 * b03 - a21 * b01 + a22 * b00;
    return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];
    const b0 = a00 * a11 - a01 * a10;
    const b1 = a00 * a12 - a02 * a10;
    const b2 = a01 * a12 - a02 * a11;
    const b3 = a20 * a31 - a21 * a30;
    const b4 = a20 * a32 - a22 * a30;
    const b5 = a21 * a32 - a22 * a31;
    const b6 = a00 * b5 - a01 * b4 + a02 * b3;
    const b7 = a10 * b5 - a11 * b4 + a12 * b3;
    const b8 = a20 * b2 - a21 * b1 + a22 * b0;
    const b9 = a30 * b2 - a31 * b1 + a32 * b0;
    // Calculate the determinant
    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];
    // Cache only the current line of the second matrix
    let b0 = b[0];
    let b1 = b[1];
    let b2 = b[2];
    let b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    const x = v[0];
    const y = v[1];
    const z = v[2];
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    }
    else {
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a03;
        out[4] = a10;
        out[5] = a11;
        out[6] = a12;
        out[7] = a13;
        out[8] = a20;
        out[9] = a21;
        out[10] = a22;
        out[11] = a23;
        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    const x = v[0];
    const y = v[1];
    const z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
    let x = axis[0];
    let y = axis[1];
    let z = axis[2];
    let len = Math.sqrt(x * x + y * y + z * z);
    let c;
    let s;
    let t;
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    let b00;
    let b01;
    let b02;
    let b10;
    let b11;
    let b12;
    let b20;
    let b21;
    let b22;
    if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
        return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    // Construct the elements of the rotation matrix
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */
function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */
function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function fromRotation(out, rad, axis) {
    let x = axis[0];
    let y = axis[1];
    let z = axis[2];
    let len = Math.sqrt(x * x + y * y + z * z);
    let c;
    let s;
    let t;
    if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
        return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromXRotation(out, rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    // Perform axis-specific matrix multiplication
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromYRotation(out, rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    // Perform axis-specific matrix multiplication
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromZRotation(out, rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    // Perform axis-specific matrix multiplication
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    const x = q[0];
    const y = q[1];
    const z = q[2];
    const w = q[3];
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const xy = x * y2;
    const xz = x * z2;
    const yy = y * y2;
    const yz = y * z2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */
function fromQuat2(out, a) {
    const translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
    const bx = -a[0];
    const by = -a[1];
    const bz = -a[2];
    const bw = a[3];
    const ax = a[4];
    const ay = a[5];
    const az = a[6];
    const aw = a[7];
    const magnitude = bx * bx + by * by + bz * bz + bw * bw;
    // Only scale if it makes sense
    if (magnitude > 0) {
        translation[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;
        translation[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;
        translation[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;
    }
    else {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a, translation);
    return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getScaling(out, mat) {
    const m11 = mat[0];
    const m12 = mat[1];
    const m13 = mat[2];
    const m21 = mat[4];
    const m22 = mat[5];
    const m23 = mat[6];
    const m31 = mat[8];
    const m32 = mat[9];
    const m33 = mat[10];
    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
    return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
function getRotation(out, mat) {
    const scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
    getScaling(scaling, mat);
    const is1 = 1 / scaling[0];
    const is2 = 1 / scaling[1];
    const is3 = 1 / scaling[2];
    const sm11 = mat[0] * is1;
    const sm12 = mat[1] * is2;
    const sm13 = mat[2] * is3;
    const sm21 = mat[4] * is1;
    const sm22 = mat[5] * is2;
    const sm23 = mat[6] * is3;
    const sm31 = mat[8] * is1;
    const sm32 = mat[9] * is2;
    const sm33 = mat[10] * is3;
    const trace = sm11 + sm22 + sm33;
    let S = 0;
    if (trace > 0) {
        S = Math.sqrt(trace + 1.0) * 2;
        out[3] = 0.25 * S;
        out[0] = (sm23 - sm32) / S;
        out[1] = (sm31 - sm13) / S;
        out[2] = (sm12 - sm21) / S;
    }
    else if (sm11 > sm22 && sm11 > sm33) {
        S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
        out[3] = (sm23 - sm32) / S;
        out[0] = 0.25 * S;
        out[1] = (sm12 + sm21) / S;
        out[2] = (sm31 + sm13) / S;
    }
    else if (sm22 > sm33) {
        S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
        out[3] = (sm31 - sm13) / S;
        out[0] = (sm12 + sm21) / S;
        out[1] = 0.25 * S;
        out[2] = (sm23 + sm32) / S;
    }
    else {
        S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
        out[3] = (sm12 - sm21) / S;
        out[0] = (sm31 + sm13) / S;
        out[1] = (sm23 + sm32) / S;
        out[2] = 0.25 * S;
    }
    return out;
}
/**
 * Decomposes a transformation matrix into its rotation, translation
 * and scale components. Returns only the rotation component
 * @param  {quat} out_r Quaternion to receive the rotation component
 * @param  {vec3} out_t Vector to receive the translation vector
 * @param  {vec3} out_s Vector to receive the scaling factor
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @returns {quat} out_r
 */
function decompose(out_r, out_t, out_s, mat) {
    out_t[0] = mat[12];
    out_t[1] = mat[13];
    out_t[2] = mat[14];
    const m11 = mat[0];
    const m12 = mat[1];
    const m13 = mat[2];
    const m21 = mat[4];
    const m22 = mat[5];
    const m23 = mat[6];
    const m31 = mat[8];
    const m32 = mat[9];
    const m33 = mat[10];
    out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
    out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
    out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
    const is1 = 1 / out_s[0];
    const is2 = 1 / out_s[1];
    const is3 = 1 / out_s[2];
    const sm11 = m11 * is1;
    const sm12 = m12 * is2;
    const sm13 = m13 * is3;
    const sm21 = m21 * is1;
    const sm22 = m22 * is2;
    const sm23 = m23 * is3;
    const sm31 = m31 * is1;
    const sm32 = m32 * is2;
    const sm33 = m33 * is3;
    const trace = sm11 + sm22 + sm33;
    let S = 0;
    if (trace > 0) {
        S = Math.sqrt(trace + 1.0) * 2;
        out_r[3] = 0.25 * S;
        out_r[0] = (sm23 - sm32) / S;
        out_r[1] = (sm31 - sm13) / S;
        out_r[2] = (sm12 - sm21) / S;
    }
    else if (sm11 > sm22 && sm11 > sm33) {
        S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
        out_r[3] = (sm23 - sm32) / S;
        out_r[0] = 0.25 * S;
        out_r[1] = (sm12 + sm21) / S;
        out_r[2] = (sm31 + sm13) / S;
    }
    else if (sm22 > sm33) {
        S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
        out_r[3] = (sm31 - sm13) / S;
        out_r[0] = (sm12 + sm21) / S;
        out_r[1] = 0.25 * S;
        out_r[2] = (sm23 + sm32) / S;
    }
    else {
        S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
        out_r[3] = (sm12 - sm21) / S;
        out_r[0] = (sm31 + sm13) / S;
        out_r[1] = (sm23 + sm32) / S;
        out_r[2] = 0.25 * S;
    }
    return out_r;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */
function fromRotationTranslationScale(out, q, v, s) {
    // Quaternion math
    const x = q[0];
    const y = q[1];
    const z = q[2];
    const w = q[3];
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const xy = x * y2;
    const xz = x * z2;
    const yy = y * y2;
    const yz = y * z2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    const sx = s[0];
    const sy = s[1];
    const sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
    // Quaternion math
    const x = q[0];
    const y = q[1];
    const z = q[2];
    const w = q[3];
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const xy = x * y2;
    const xz = x * z2;
    const yy = y * y2;
    const yz = y * z2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    const sx = s[0];
    const sy = s[1];
    const sz = s[2];
    const ox = o[0];
    const oy = o[1];
    const oz = o[2];
    const out0 = (1 - (yy + zz)) * sx;
    const out1 = (xy + wz) * sx;
    const out2 = (xz - wy) * sx;
    const out4 = (xy - wz) * sy;
    const out5 = (1 - (xx + zz)) * sy;
    const out6 = (yz + wx) * sy;
    const out8 = (xz + wy) * sz;
    const out9 = (yz - wx) * sz;
    const out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    const x = q[0];
    const y = q[1];
    const z = q[2];
    const w = q[3];
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const yx = y * x2;
    const yy = y * y2;
    const zx = z * x2;
    const zy = z * y2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    const rl = 1 / (right - left);
    const tb = 1 / (top - bottom);
    const nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */
function perspectiveNO(out, fovy, aspect, near, far) {
    const f = 1.0 / Math.tan(fovy / 2);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
        const nf = 1 / (near - far);
        out[10] = (far + near) * nf;
        out[14] = 2 * far * near * nf;
    }
    else {
        out[10] = -1;
        out[14] = -2 * near;
    }
    return out;
}
/**
 * Alias for {@link mat4.perspectiveNO}
 * @function
 */
const perspective = perspectiveNO;
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */
function perspectiveZO(out, fovy, aspect, near, far) {
    const f = 1.0 / Math.tan(fovy / 2);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
        const nf = 1 / (near - far);
        out[10] = far * nf;
        out[14] = far * near * nf;
    }
    else {
        out[10] = -1;
        out[14] = -near;
    }
    return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
    const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);
    const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);
    const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);
    const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);
    const xScale = 2.0 / (leftTan + rightTan);
    const yScale = 2.0 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function orthoNO(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
}
/**
 * Alias for {@link mat4.orthoNO}
 * @function
 */
const ortho = orthoNO;
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function orthoZO(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    let len;
    let x0;
    let x1;
    let x2;
    let y0;
    let y1;
    let y2;
    let z0;
    let z1;
    let z2;
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    const centerx = center[0];
    const centery = center[1];
    const centerz = center[2];
    if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON &&
        Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON &&
        Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
        return identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    }
    else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    }
    else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */
function targetTo(out, eye, target, up) {
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    let z0 = eyex - target[0];
    let z1 = eyey - target[1];
    let z2 = eyez - target[2];
    let len = z0 * z0 + z1 * z1 + z2 * z2;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        z0 *= len;
        z1 *= len;
        z2 *= len;
    }
    let x0 = upy * z2 - upz * z1;
    let x1 = upz * z0 - upx * z2;
    let x2 = upx * z1 - upy * z0;
    len = x0 * x0 + x1 * x1 + x2 * x2;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return `mat4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]}, ${a[9]}, ${a[10]}, ${a[11]}, ${a[12]}, ${a[13]}, ${a[14]}, ${a[15]})`;
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
    return Math.sqrt(a[0] * a[0] +
        a[1] * a[1] +
        a[2] * a[2] +
        a[3] * a[3] +
        a[4] * a[4] +
        a[5] * a[5] +
        a[6] * a[6] +
        a[7] * a[7] +
        a[8] * a[8] +
        a[9] * a[9] +
        a[10] * a[10] +
        a[11] * a[11] +
        a[12] * a[12] +
        a[13] * a[13] +
        a[14] * a[14] +
        a[15] * a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    out[6] = a[6] + b[6] * scale;
    out[7] = a[7] + b[7] * scale;
    out[8] = a[8] + b[8] * scale;
    out[9] = a[9] + b[9] * scale;
    out[10] = a[10] + b[10] * scale;
    out[11] = a[11] + b[11] * scale;
    out[12] = a[12] + b[12] * scale;
    out[13] = a[13] + b[13] * scale;
    out[14] = a[14] + b[14] * scale;
    out[15] = a[15] + b[15] * scale;
    return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
    return (a[0] === b[0] &&
        a[1] === b[1] &&
        a[2] === b[2] &&
        a[3] === b[3] &&
        a[4] === b[4] &&
        a[5] === b[5] &&
        a[6] === b[6] &&
        a[7] === b[7] &&
        a[8] === b[8] &&
        a[9] === b[9] &&
        a[10] === b[10] &&
        a[11] === b[11] &&
        a[12] === b[12] &&
        a[13] === b[13] &&
        a[14] === b[14] &&
        a[15] === b[15]);
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
    const a0 = a[0];
    const a1 = a[1];
    const a2 = a[2];
    const a3 = a[3];
    const a4 = a[4];
    const a5 = a[5];
    const a6 = a[6];
    const a7 = a[7];
    const a8 = a[8];
    const a9 = a[9];
    const a10 = a[10];
    const a11 = a[11];
    const a12 = a[12];
    const a13 = a[13];
    const a14 = a[14];
    const a15 = a[15];
    const b0 = b[0];
    const b1 = b[1];
    const b2 = b[2];
    const b3 = b[3];
    const b4 = b[4];
    const b5 = b[5];
    const b6 = b[6];
    const b7 = b[7];
    const b8 = b[8];
    const b9 = b[9];
    const b10 = b[10];
    const b11 = b[11];
    const b12 = b[12];
    const b13 = b[13];
    const b14 = b[14];
    const b15 = b[15];
    return (Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
        Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
        Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
        Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
        Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
        Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
        Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
        Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
        Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
        Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
        Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
        Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
        Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
        Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
        Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
        Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15)));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */
const mul = multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */
const sub = subtract;


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/gl-matrix/quat.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/gl-matrix/quat.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   calculateW: () => (/* binding */ calculateW),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   conjugate: () => (/* binding */ conjugate),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   exp: () => (/* binding */ exp),
/* harmony export */   fromMat3: () => (/* binding */ fromMat3),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   getAngle: () => (/* binding */ getAngle),
/* harmony export */   getAxisAngle: () => (/* binding */ getAxisAngle),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   ln: () => (/* binding */ ln),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   pow: () => (/* binding */ pow),
/* harmony export */   rotateX: () => (/* binding */ rotateX),
/* harmony export */   rotateY: () => (/* binding */ rotateY),
/* harmony export */   rotateZ: () => (/* binding */ rotateZ),
/* harmony export */   rotationTo: () => (/* binding */ rotationTo),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   setAxes: () => (/* binding */ setAxes),
/* harmony export */   setAxisAngle: () => (/* binding */ setAxisAngle),
/* harmony export */   slerp: () => (/* binding */ slerp),
/* harmony export */   sqlerp: () => (/* binding */ sqlerp),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@math.gl/core/dist/gl-matrix/common.js");
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/mat3.js");
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js");
// @eslint-disable
// @ts-nocheck




// const glMatrix: {EPSILON = 0.000001};
/**
 * Quaternion in the format XYZW
 * @module quat
 */
/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
function create() {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
    }
    out[3] = 1;
    return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    const s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
function getAxisAngle(out_axis, q) {
    const rad = Math.acos(q[3]) * 2.0;
    const s = Math.sin(rad / 2.0);
    if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
        out_axis[0] = q[0] / s;
        out_axis[1] = q[1] / s;
        out_axis[2] = q[2] / s;
    }
    else {
        // If s is zero, return any axis (no rotation - axis does not matter)
        out_axis[0] = 1;
        out_axis[1] = 0;
        out_axis[2] = 0;
    }
    return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */
function getAngle(a, b) {
    const dotproduct = dot(a, b);
    return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */
function multiply(out, a, b) {
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const aw = a[3];
    const bx = b[0];
    const by = b[1];
    const bz = b[2];
    const bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX(out, a, rad) {
    rad *= 0.5;
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const aw = a[3];
    const bx = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY(out, a, rad) {
    rad *= 0.5;
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const aw = a[3];
    const by = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ(out, a, rad) {
    rad *= 0.5;
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const aw = a[3];
    const bz = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW(out, a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */
function exp(out, a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = a[3];
    const r = Math.sqrt(x * x + y * y + z * z);
    const et = Math.exp(w);
    const s = r > 0 ? (et * Math.sin(r)) / r : 0;
    out[0] = x * s;
    out[1] = y * s;
    out[2] = z * s;
    out[3] = et * Math.cos(r);
    return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */
function ln(out, a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = a[3];
    const r = Math.sqrt(x * x + y * y + z * z);
    const t = r > 0 ? Math.atan2(r, w) / r : 0;
    out[0] = x * t;
    out[1] = y * t;
    out[2] = z * t;
    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
    return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */
function pow(out, a, b) {
    ln(out, a);
    scale(out, out, b);
    exp(out, out);
    return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */
function slerp(out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const aw = a[3];
    let bx = b[0];
    let by = b[1];
    let bz = b[2];
    let bw = b[3];
    let cosom;
    let omega;
    let scale0;
    let scale1;
    let sinom;
    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if (cosom < 0.0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
    }
    // calculate coefficients
    if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
        // standard case (slerp)
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    }
    else {
        // "from" and "to" quaternions are very close
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
}
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
// export function random(out) {
//   // Implementation of http://planning.cs.uiuc.edu/node198.html
//   // TODO: Calling random 3 times is probably not the fastest solution
//   let u1 = glMatrix.RANDOM();
//   let u2 = glMatrix.RANDOM();
//   let u3 = glMatrix.RANDOM();
//   let sqrt1MinusU1 = Math.sqrt(1 - u1);
//   let sqrtU1 = Math.sqrt(u1);
//   out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
//   out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
//   out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
//   out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
//   return out;
// }
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert(out, a) {
    const a0 = a[0];
    const a1 = a[1];
    const a2 = a[2];
    const a3 = a[3];
    const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
    const invDot = dot ? 1.0 / dot : 0;
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    const fTrace = m[0] + m[4] + m[8];
    let fRoot;
    if (fTrace > 0.0) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0); // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot; // 1/(4w)
        out[0] = (m[5] - m[7]) * fRoot;
        out[1] = (m[6] - m[2]) * fRoot;
        out[2] = (m[1] - m[3]) * fRoot;
    }
    else {
        // |w| <= 1/2
        let i = 0;
        if (m[4] > m[0])
            i = 1;
        if (m[8] > m[i * 3 + i])
            i = 2;
        const j = (i + 1) % 3;
        const k = (i + 2) % 3;
        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x Angle to rotate around X axis in degrees.
 * @param {Number} y Angle to rotate around Y axis in degrees.
 * @param {Number} z Angle to rotate around Z axis in degrees.
 * @param {'zyx'|'xyz'|'yxz'|'yzx'|'zxy'|'zyx'} order Intrinsic order for conversion, default is zyx.
 * @returns {quat} out
 * @function
 */
// export function fromEuler(out, x, y, z, order = glMatrix.ANGLE_ORDER) {
//   let halfToRad = Math.PI / 360;
//   x *= halfToRad;
//   z *= halfToRad;
//   y *= halfToRad;
//   let sx = Math.sin(x);
//   let cx = Math.cos(x);
//   let sy = Math.sin(y);
//   let cy = Math.cos(y);
//   let sz = Math.sin(z);
//   let cz = Math.cos(z);
//   switch (order) {
//     case "xyz":
//       out[0] = sx * cy * cz + cx * sy * sz;
//       out[1] = cx * sy * cz - sx * cy * sz;
//       out[2] = cx * cy * sz + sx * sy * cz;
//       out[3] = cx * cy * cz - sx * sy * sz;
//       break;
//     case "xzy":
//       out[0] = sx * cy * cz - cx * sy * sz;
//       out[1] = cx * sy * cz - sx * cy * sz;
//       out[2] = cx * cy * sz + sx * sy * cz;
//       out[3] = cx * cy * cz + sx * sy * sz;
//       break;
//     case "yxz":
//       out[0] = sx * cy * cz + cx * sy * sz;
//       out[1] = cx * sy * cz - sx * cy * sz;
//       out[2] = cx * cy * sz - sx * sy * cz;
//       out[3] = cx * cy * cz + sx * sy * sz;
//       break;
//     case "yzx":
//       out[0] = sx * cy * cz + cx * sy * sz;
//       out[1] = cx * sy * cz + sx * cy * sz;
//       out[2] = cx * cy * sz - sx * sy * cz;
//       out[3] = cx * cy * cz - sx * sy * sz;
//       break;
//     case "zxy":
//       out[0] = sx * cy * cz - cx * sy * sz;
//       out[1] = cx * sy * cz + sx * cy * sz;
//       out[2] = cx * cy * sz + sx * sy * cz;
//       out[3] = cx * cy * cz - sx * sy * sz;
//       break;
//     case "zyx":
//       out[0] = sx * cy * cz - cx * sy * sz;
//       out[1] = cx * sy * cz + sx * cy * sz;
//       out[2] = cx * cy * sz - sx * sy * cz;
//       out[3] = cx * cy * cz + sx * sy * sz;
//       break;
//     default:
//       throw new Error('Unknown angle order ' + order);
//   }
//   return out;
// }
/**
 * Returns a string representation of a quaternion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
    return `quat(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
const clone = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.clone;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
const fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.fromValues;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the source quaternion
 * @returns {quat} out
 * @function
 */
const copy = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.copy;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
const set = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.set;
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 * @function
 */
const add = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.add;
/**
 * Alias for {@link quat.multiply}
 * @function
 */
const mul = multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {ReadonlyQuat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
const scale = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.scale;
/**
 * Calculates the dot product of two quat's
 *
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
const dot = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.dot;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */
const lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.lerp;
/**
 * Calculates the length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate length of
 * @returns {Number} length of a
 */
const length = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.length;
/**
 * Alias for {@link quat.length}
 * @function
 */
const len = length;
/**
 * Calculates the squared length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
const squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.squaredLength;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
const normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.normalize;
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat} a The first quaternion.
 * @param {ReadonlyQuat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
const exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.exactEquals;
/**
 * Returns whether or not the quaternions point approximately to the same direction.
 *
 * Both quaternions are assumed to be unit length.
 *
 * @param {ReadonlyQuat} a The first unit quaternion.
 * @param {ReadonlyQuat} b The second unit quaternion.
 * @returns {Boolean} True if the quaternions are equal, false otherwise.
 */
function equals(a, b) {
    return Math.abs(_vec4_js__WEBPACK_IMPORTED_MODULE_1__.dot(a, b)) >= 1 - _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON;
}
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */
const rotationTo = (function () {
    const tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.create();
    const xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(1, 0, 0);
    const yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 1, 0);
    return function (out, a, b) {
        const dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.dot(a, b);
        if (dot < -0.999999) {
            _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, xUnitVec3, a);
            if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__.len(tmpvec3) < 0.000001)
                _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, yUnitVec3, a);
            _vec3_js__WEBPACK_IMPORTED_MODULE_2__.normalize(tmpvec3, tmpvec3);
            setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        }
        else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        }
        _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot;
        return normalize(out, out);
    };
})();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */
const sqlerp = (function () {
    const temp1 = create();
    const temp2 = create();
    return function (out, a, b, c, d, t) {
        slerp(temp1, a, d, t);
        slerp(temp2, b, c, t);
        slerp(out, temp1, temp2, 2 * t * (1 - t));
        return out;
    };
})();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
const setAxes = (function () {
    const matr = _mat3_js__WEBPACK_IMPORTED_MODULE_3__.create();
    return function (out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];
        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];
        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];
        return normalize(out, fromMat3(out, matr));
    };
})();


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/gl-matrix/vec2.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   angle: () => (/* binding */ angle),
/* harmony export */   ceil: () => (/* binding */ ceil),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   cross: () => (/* binding */ cross),
/* harmony export */   dist: () => (/* binding */ dist),
/* harmony export */   distance: () => (/* binding */ distance),
/* harmony export */   div: () => (/* binding */ div),
/* harmony export */   divide: () => (/* binding */ divide),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   floor: () => (/* binding */ floor),
/* harmony export */   forEach: () => (/* binding */ forEach),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   inverse: () => (/* binding */ inverse),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   max: () => (/* binding */ max),
/* harmony export */   min: () => (/* binding */ min),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   negate: () => (/* binding */ negate),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   sqrDist: () => (/* binding */ sqrDist),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   transformMat2: () => (/* binding */ transformMat2),
/* harmony export */   transformMat2d: () => (/* binding */ transformMat2d),
/* harmony export */   transformMat3: () => (/* binding */ transformMat3),
/* harmony export */   transformMat4: () => (/* binding */ transformMat4),
/* harmony export */   zero: () => (/* binding */ zero)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@math.gl/core/dist/gl-matrix/common.js");
// @eslint-disable
// @ts-nocheck

/**
 * 2 Dimensional Vector
 * @module vec2
 */
/**
 * Creates a new, empty vec2
 *
 * @returns {NumericArray} a new 2D vector
 */
function create() {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);
    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
    }
    return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {Readonly<NumericArray>} a vector to clone
 * @returns {NumericArray} a new 2D vector
 */
function clone(a) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {NumericArray} a new 2D vector
 */
function fromValues(x, y) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the source vector
 * @returns {NumericArray} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {NumericArray} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {NumericArray} out
 */
function set(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
}
/**
 * Adds two vec2's
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {NumericArray} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {NumericArray} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {NumericArray} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
}
/**
 * Divides two vec2's
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {NumericArray} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a vector to ceil
 * @returns {NumericArray} out
 */
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a vector to floor
 * @returns {NumericArray} out
 */
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {NumericArray} out
 */
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {NumericArray} out
 */
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
}
/**
 * symmetric round the components of a vec2
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a vector to round
 * @returns {NumericArray} out
 */
function round(out, a) {
    out[0] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[0]);
    out[1] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[1]);
    return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {NumericArray} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {NumericArray} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
    const x = b[0] - a[0];
    const y = b[1] - a[1];
    return Math.sqrt(x * x + y * y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
    const x = b[0] - a[0];
    const y = b[1] - a[1];
    return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {Readonly<NumericArray>} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    const x = a[0];
    const y = a[1];
    return Math.sqrt(x * x + y * y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {Readonly<NumericArray>} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
    const x = a[0];
    const y = a[1];
    return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a vector to negate
 * @returns {NumericArray} out
 */
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a vector to invert
 * @returns {NumericArray} out
 */
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    return out;
}
/**
 * Normalize a vec2
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a vector to normalize
 * @returns {NumericArray} out
 */
function normalize(out, a) {
    const x = a[0];
    const y = a[1];
    let len = x * x + y * y;
    if (len > 0) {
        // TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
    }
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    const z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the first operand
 * @param {Readonly<NumericArray>} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {NumericArray} out
 */
function lerp(out, a, b, t) {
    const ax = a[0];
    const ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {NumericArray} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned
 * @returns {NumericArray} out
 */
function random(out, scale) {
    scale = scale === undefined ? 1.0 : scale;
    const r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {NumericArray} out
 */
function transformMat2(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {NumericArray} out
 */
function transformMat2d(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {NumericArray} out
 */
function transformMat3(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {NumericArray} out the receiving vector
 * @param {Readonly<NumericArray>} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {NumericArray} out
 */
function transformMat4(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
}
/**
 * Rotate a 2D vector
 * @param {NumericArray} out The receiving vec2
 * @param {Readonly<NumericArray>} a The vec2 point to rotate
 * @param {Readonly<NumericArray>} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {NumericArray} out
 */
function rotate(out, a, b, rad) {
    // Translate point to the origin
    const p0 = a[0] - b[0];
    const p1 = a[1] - b[1];
    const sinC = Math.sin(rad);
    const cosC = Math.cos(rad);
    // perform rotation and translate to correct position
    out[0] = p0 * cosC - p1 * sinC + b[0];
    out[1] = p0 * sinC + p1 * cosC + b[1];
    return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {Readonly<NumericArray>} a The first operand
 * @param {Readonly<NumericArray>} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
    const x1 = a[0];
    const y1 = a[1];
    const x2 = b[0];
    const y2 = b[1];
    // mag is the product of the magnitudes of a and b
    const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2));
    // mag &&.. short circuits if mag == 0
    const cosine = mag && (x1 * x2 + y1 * y2) / mag;
    // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {NumericArray} out the receiving vector
 * @returns {NumericArray} out
 */
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {Readonly<NumericArray>} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
    return `vec2(${a[0]}, ${a[1]})`;
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {Readonly<NumericArray>} a The first vector.
 * @param {Readonly<NumericArray>} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {Readonly<NumericArray>} a The first vector.
 * @param {Readonly<NumericArray>} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
    const a0 = a[0];
    const a1 = a[1];
    const b0 = b[0];
    const b1 = b[1];
    return (Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
        Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */
const len = length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */
const sub = subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */
const mul = multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */
const div = divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */
const dist = distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function () {
    const vec = create();
    return function (a, stride, offset, count, fn, arg) {
        let i;
        let l;
        if (!stride) {
            stride = 2;
        }
        if (!offset) {
            offset = 0;
        }
        if (count) {
            l = Math.min(count * stride + offset, a.length);
        }
        else {
            l = a.length;
        }
        for (i = offset; i < l; i += stride) {
            vec[0] = a[i];
            vec[1] = a[i + 1];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
        }
        return a;
    };
})();


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/gl-matrix/vec3.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   angle: () => (/* binding */ angle),
/* harmony export */   bezier: () => (/* binding */ bezier),
/* harmony export */   ceil: () => (/* binding */ ceil),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   cross: () => (/* binding */ cross),
/* harmony export */   dist: () => (/* binding */ dist),
/* harmony export */   distance: () => (/* binding */ distance),
/* harmony export */   div: () => (/* binding */ div),
/* harmony export */   divide: () => (/* binding */ divide),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   floor: () => (/* binding */ floor),
/* harmony export */   forEach: () => (/* binding */ forEach),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   hermite: () => (/* binding */ hermite),
/* harmony export */   inverse: () => (/* binding */ inverse),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   max: () => (/* binding */ max),
/* harmony export */   min: () => (/* binding */ min),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   negate: () => (/* binding */ negate),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   rotateX: () => (/* binding */ rotateX),
/* harmony export */   rotateY: () => (/* binding */ rotateY),
/* harmony export */   rotateZ: () => (/* binding */ rotateZ),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   slerp: () => (/* binding */ slerp),
/* harmony export */   sqrDist: () => (/* binding */ sqrDist),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   transformMat3: () => (/* binding */ transformMat3),
/* harmony export */   transformMat4: () => (/* binding */ transformMat4),
/* harmony export */   transformQuat: () => (/* binding */ transformQuat),
/* harmony export */   zero: () => (/* binding */ zero)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@math.gl/core/dist/gl-matrix/common.js");
// @eslint-disable
// @ts-nocheck

/**
 * 3 Dimensional Vector
 * @module vec3
 */
/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
function create() {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
    }
    return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
function clone(a) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    return Math.sqrt(x * x + y * y + z * z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
}
/**
 * symmetric round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */
function round(out, a) {
    out[0] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[0]);
    out[1] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[1]);
    out[2] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[2]);
    return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
    const x = b[0] - a[0];
    const y = b[1] - a[1];
    const z = b[2] - a[2];
    return Math.sqrt(x * x + y * y + z * z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
    const x = b[0] - a[0];
    const y = b[1] - a[1];
    const z = b[2] - a[2];
    return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    let len = x * x + y * y + z * z;
    if (len > 0) {
        // TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
    }
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
    return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const bx = b[0];
    const by = b[1];
    const bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
}
/**
 * Performs a spherical linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */
function slerp(out, a, b, t) {
    const angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));
    const sinTotal = Math.sin(angle);
    const ratioA = Math.sin((1 - t) * angle) / sinTotal;
    const ratioB = Math.sin(t * angle) / sinTotal;
    out[0] = ratioA * a[0] + ratioB * b[0];
    out[1] = ratioA * a[1] + ratioB * b[1];
    out[2] = ratioA * a[2] + ratioB * b[2];
    return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */
function hermite(out, a, b, c, d, t) {
    const factorTimes2 = t * t;
    const factor1 = factorTimes2 * (2 * t - 3) + 1;
    const factor2 = factorTimes2 * (t - 2) + t;
    const factor3 = factorTimes2 * (t - 1);
    const factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */
function bezier(out, a, b, c, d, t) {
    const inverseFactor = 1 - t;
    const inverseFactorTimesTwo = inverseFactor * inverseFactor;
    const factorTimes2 = t * t;
    const factor1 = inverseFactorTimesTwo * inverseFactor;
    const factor2 = 3 * t * inverseFactorTimesTwo;
    const factor3 = 3 * factorTimes2 * inverseFactor;
    const factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned
 * @returns {vec3} out
 */
function random(out, scale) {
    scale = scale === undefined ? 1.0 : scale;
    const r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;
    const z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;
    const zScale = Math.sqrt(1.0 - z * z) * scale;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    let w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
function transformMat3(out, a, m) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */
function transformQuat(out, a, q) {
    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
    const qx = q[0];
    const qy = q[1];
    const qz = q[2];
    const qw = q[3];
    const x = a[0];
    const y = a[1];
    const z = a[2];
    // var qvec = [qx, qy, qz];
    // var uv = vec3.cross([], qvec, a);
    let uvx = qy * z - qz * y;
    let uvy = qz * x - qx * z;
    let uvz = qx * y - qy * x;
    // var uuv = vec3.cross([], qvec, uv);
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    // vec3.scale(uv, uv, 2 * w);
    const w2 = qw * 2;
    uvx *= w2;
    uvy *= w2;
    uvz *= w2;
    // vec3.scale(uuv, uuv, 2);
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    // return vec3.add(out, a, vec3.add(out, uv, uuv));
    out[0] = x + uvx + uuvx;
    out[1] = y + uvy + uuvy;
    out[2] = z + uvz + uuvz;
    return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */
function rotateX(out, a, b, rad) {
    const p = [];
    const r = [];
    // Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    // perform rotation
    r[0] = p[0];
    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
    // translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */
function rotateY(out, a, b, rad) {
    const p = [];
    const r = [];
    // Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    // perform rotation
    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
    // translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */
function rotateZ(out, a, b, rad) {
    const p = [];
    const r = [];
    // Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    // perform rotation
    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
    r[2] = p[2];
    // translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const bx = b[0];
    const by = b[1];
    const bz = b[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot(a, b) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    out[2] = 0.0;
    return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
    return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
    const a0 = a[0];
    const a1 = a[1];
    const a2 = a[2];
    const b0 = b[0];
    const b1 = b[1];
    const b2 = b[2];
    return (Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
        Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
        Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */
const sub = subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */
const mul = multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */
const div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */
const dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */
const len = length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function () {
    const vec = create();
    return function (a, stride, offset, count, fn, arg) {
        let i;
        let l;
        if (!stride) {
            stride = 3;
        }
        if (!offset) {
            offset = 0;
        }
        if (count) {
            l = Math.min(count * stride + offset, a.length);
        }
        else {
            l = a.length;
        }
        for (i = offset; i < l; i += stride) {
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
        }
        return a;
    };
})();


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/gl-matrix/vec4.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   ceil: () => (/* binding */ ceil),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   cross: () => (/* binding */ cross),
/* harmony export */   dist: () => (/* binding */ dist),
/* harmony export */   distance: () => (/* binding */ distance),
/* harmony export */   div: () => (/* binding */ div),
/* harmony export */   divide: () => (/* binding */ divide),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   floor: () => (/* binding */ floor),
/* harmony export */   forEach: () => (/* binding */ forEach),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   inverse: () => (/* binding */ inverse),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   max: () => (/* binding */ max),
/* harmony export */   min: () => (/* binding */ min),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   negate: () => (/* binding */ negate),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   sqrDist: () => (/* binding */ sqrDist),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   transformMat4: () => (/* binding */ transformMat4),
/* harmony export */   transformQuat: () => (/* binding */ transformQuat),
/* harmony export */   zero: () => (/* binding */ zero)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@math.gl/core/dist/gl-matrix/common.js");
// @eslint-disable
// @ts-nocheck

/**
 * 4 Dimensional Vector
 * @module vec4
 */
/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
function create() {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
    }
    return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
function clone(a) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
function fromValues(x, y, z, w) {
    const out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
}
/**
 * symmetric round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */
function round(out, a) {
    out[0] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[0]);
    out[1] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[1]);
    out[2] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[2]);
    out[3] = _common_js__WEBPACK_IMPORTED_MODULE_0__.round(a[3]);
    return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
    const x = b[0] - a[0];
    const y = b[1] - a[1];
    const z = b[2] - a[2];
    const w = b[3] - a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
    const x = b[0] - a[0];
    const y = b[1] - a[1];
    const z = b[2] - a[2];
    const w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = a[3];
    return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    out[3] = 1.0 / a[3];
    return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize(out, a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = a[3];
    let len = x * x + y * y + z * z + w * w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
    }
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
    return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */
function cross(out, u, v, w) {
    const A = v[0] * w[1] - v[1] * w[0];
    const B = v[0] * w[2] - v[2] * w[0];
    const C = v[0] * w[3] - v[3] * w[0];
    const D = v[1] * w[2] - v[2] * w[1];
    const E = v[1] * w[3] - v[3] * w[1];
    const F = v[2] * w[3] - v[3] * w[2];
    const G = u[0];
    const H = u[1];
    const I = u[2];
    const J = u[3];
    out[0] = H * F - I * E + J * D;
    out[1] = -(G * F) + I * C - J * B;
    out[2] = G * E - H * C + J * A;
    out[3] = -(G * D) + H * B - I * A;
    return out;
}
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */
function lerp(out, a, b, t) {
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned
 * @returns {vec4} out
 */
function random(out, scale) {
    scale = scale === undefined ? 1.0 : scale;
    // Marsaglia, George. Choosing a Point from the Surface of a
    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
    // http://projecteuclid.org/euclid.aoms/1177692644;
    let v1;
    let v2;
    let v3;
    let v4;
    let s1;
    let s2;
    do {
        v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
        v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
        s1 = v1 * v1 + v2 * v2;
    } while (s1 >= 1);
    do {
        v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
        v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
        s2 = v3 * v3 + v4 * v4;
    } while (s2 >= 1);
    const d = Math.sqrt((1 - s1) / s2);
    out[0] = scale * v1;
    out[1] = scale * v2;
    out[2] = scale * v3 * d;
    out[3] = scale * v4 * d;
    return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4(out, a, m) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */
function transformQuat(out, a, q) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const qx = q[0];
    const qy = q[1];
    const qz = q[2];
    const qw = q[3];
    // calculate quat * vec
    const ix = qw * x + qy * z - qz * y;
    const iy = qw * y + qz * x - qx * z;
    const iz = qw * z + qx * y - qy * x;
    const iw = -qx * x - qy * y - qz * z;
    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
    return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
    const a0 = a[0];
    const a1 = a[1];
    const a2 = a[2];
    const a3 = a[3];
    const b0 = b[0];
    const b1 = b[1];
    const b2 = b[2];
    const b3 = b[3];
    return (Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
        Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
        Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
        Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */
const sub = subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */
const mul = multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */
const div = divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */
const dist = distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */
const len = length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function () {
    const vec = create();
    return function (a, stride, offset, count, fn, arg) {
        let i;
        let l;
        if (!stride) {
            stride = 4;
        }
        if (!offset) {
            offset = 0;
        }
        if (count) {
            l = Math.min(count * stride + offset, a.length);
        }
        else {
            l = a.length;
        }
        for (i = offset; i < l; i += stride) {
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            vec[3] = a[i + 3];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
            a[i + 3] = vec[3];
        }
        return a;
    };
})();


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/lib/assert.js":
/*!*******************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/lib/assert.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
function assert(condition, message) {
    if (!condition) {
        throw new Error(`math.gl assertion ${message}`);
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/lib/common.js":
/*!*******************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/lib/common.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   acos: () => (/* binding */ acos),
/* harmony export */   asin: () => (/* binding */ asin),
/* harmony export */   atan: () => (/* binding */ atan),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   config: () => (/* binding */ config),
/* harmony export */   configure: () => (/* binding */ configure),
/* harmony export */   cos: () => (/* binding */ cos),
/* harmony export */   degrees: () => (/* binding */ degrees),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   formatValue: () => (/* binding */ formatValue),
/* harmony export */   isArray: () => (/* binding */ isArray),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   radians: () => (/* binding */ radians),
/* harmony export */   sin: () => (/* binding */ sin),
/* harmony export */   tan: () => (/* binding */ tan),
/* harmony export */   toDegrees: () => (/* binding */ toDegrees),
/* harmony export */   toRadians: () => (/* binding */ toRadians),
/* harmony export */   withEpsilon: () => (/* binding */ withEpsilon)
/* harmony export */ });
// math.gl, MIT license
const RADIANS_TO_DEGREES = (1 / Math.PI) * 180;
const DEGREES_TO_RADIANS = (1 / 180) * Math.PI;
const DEFAULT_CONFIG = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
};
// Configuration is truly global as of v3.6 to ensure single config even if multiple copies of math.gl
// Multiple copies of config can be quite tricky to debug...
globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG } };
const config = globalThis.mathgl.config;
function configure(options) {
    // Only copy existing keys
    Object.assign(config, options);
    return config;
}
/**
 * Formats a value into a string
 * @param value
 * @param param1
 * @returns
 */
function formatValue(value, { precision = config.precision } = {}) {
    value = round(value);
    // get rid of trailing zeros
    return `${parseFloat(value.toPrecision(precision))}`;
}
/**
 * Check if value is an "array"
 * Returns `true` if value is either an array or a typed array
 * Note: returns `false` for `ArrayBuffer` and `DataView` instances
 * @note isTypedArray and isNumericArray are often more useful in TypeScript
 */
function isArray(value) {
    return Array.isArray(value) || (ArrayBuffer.isView(value) && !(value instanceof DataView));
}
function clone(array) {
    return 'clone' in array ? array.clone() : array.slice();
}
function toRadians(degrees) {
    return radians(degrees);
}
function toDegrees(radians) {
    return degrees(radians);
}
function radians(degrees, result) {
    return map(degrees, (degrees) => degrees * DEGREES_TO_RADIANS, result);
}
function degrees(radians, result) {
    return map(radians, (radians) => radians * RADIANS_TO_DEGREES, result);
}
/**
 * "GLSL equivalent" of `Math.sin`: Works on single values and vectors
 * @deprecated
 */
function sin(radians, result) {
    return map(radians, (angle) => Math.sin(angle), result);
}
/**
 * "GLSL equivalent" of `Math.cos`: Works on single values and vectors
 * @deprecated
 */
function cos(radians, result) {
    return map(radians, (angle) => Math.cos(angle), result);
}
/**
 * "GLSL equivalent" of `Math.tan`: Works on single values and vectors
 * @deprecated
 */
function tan(radians, result) {
    return map(radians, (angle) => Math.tan(angle), result);
}
/**
 * "GLSL equivalent" of `Math.asin`: Works on single values and vectors
 * @deprecated
 */
function asin(radians, result) {
    return map(radians, (angle) => Math.asin(angle), result);
}
/**
 * "GLSL equivalent" of `Math.acos`: Works on single values and vectors
 * @deprecated
 */
function acos(radians, result) {
    return map(radians, (angle) => Math.acos(angle), result);
}
/**
 * "GLSL equivalent" of `Math.atan`: Works on single values and vectors
 * @deprecated
 */
function atan(radians, result) {
    return map(radians, (angle) => Math.atan(angle), result);
}
function clamp(value, min, max) {
    return map(value, (value) => Math.max(min, Math.min(max, value)));
}
function lerp(a, b, t) {
    if (isArray(a)) {
        return a.map((ai, i) => lerp(ai, b[i], t));
    }
    return t * b + (1 - t) * a;
}
/* eslint-disable */
/**
 * Compares any two math objects, using `equals` method if available.
 * @param a
 * @param b
 * @param epsilon
 * @returns
 */
function equals(a, b, epsilon) {
    const oldEpsilon = config.EPSILON;
    if (epsilon) {
        config.EPSILON = epsilon;
    }
    try {
        if (a === b) {
            return true;
        }
        if (isArray(a) && isArray(b)) {
            if (a.length !== b.length) {
                return false;
            }
            for (let i = 0; i < a.length; ++i) {
                // eslint-disable-next-line max-depth
                if (!equals(a[i], b[i])) {
                    return false;
                }
            }
            return true;
        }
        if (a && a.equals) {
            return a.equals(b);
        }
        if (b && b.equals) {
            return b.equals(a);
        }
        if (typeof a === 'number' && typeof b === 'number') {
            return Math.abs(a - b) <= config.EPSILON * Math.max(1, Math.abs(a), Math.abs(b));
        }
        return false;
    }
    finally {
        config.EPSILON = oldEpsilon;
    }
}
function exactEquals(a, b) {
    if (a === b) {
        return true;
    }
    if (a && typeof a === 'object' && b && typeof b === 'object') {
        if (a.constructor !== b.constructor) {
            return false;
        }
        if (a.exactEquals) {
            return a.exactEquals(b);
        }
    }
    if (isArray(a) && isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; ++i) {
            if (!exactEquals(a[i], b[i])) {
                return false;
            }
        }
        return true;
    }
    return false;
}
/* eslint-enable */
function withEpsilon(epsilon, func) {
    const oldPrecision = config.EPSILON;
    config.EPSILON = epsilon;
    let value;
    try {
        value = func();
    }
    finally {
        config.EPSILON = oldPrecision;
    }
    return value;
}
// HELPERS
function round(value) {
    return Math.round(value / config.EPSILON) * config.EPSILON;
}
// If the array has a clone function, calls it, otherwise returns a copy
function duplicateArray(array) {
    // @ts-expect-error We check for math.gl class methods
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    return array.clone ? array.clone() : new Array(array.length);
}
// If the argument value is an array, applies the func element wise,
// otherwise applies func to the argument value
function map(value, func, result) {
    if (isArray(value)) {
        const array = value;
        result = result || duplicateArray(array);
        for (let i = 0; i < result.length && i < array.length; ++i) {
            const val = typeof value === 'number' ? value : value[i];
            result[i] = func(val, i, result);
        }
        return result;
    }
    return func(value);
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   vec2_transformMat4AsVector: () => (/* binding */ vec2_transformMat4AsVector),
/* harmony export */   vec3_transformMat2: () => (/* binding */ vec3_transformMat2),
/* harmony export */   vec3_transformMat4AsVector: () => (/* binding */ vec3_transformMat4AsVector),
/* harmony export */   vec4_transformMat2: () => (/* binding */ vec4_transformMat2),
/* harmony export */   vec4_transformMat3: () => (/* binding */ vec4_transformMat3)
/* harmony export */ });
// vec2 additions
function vec2_transformMat4AsVector(out, a, m) {
    const x = a[0];
    const y = a[1];
    const w = m[3] * x + m[7] * y || 1.0;
    out[0] = (m[0] * x + m[4] * y) / w;
    out[1] = (m[1] * x + m[5] * y) / w;
    return out;
}
// vec3 additions
// Transform as vector, only uses 3x3 minor matrix
function vec3_transformMat4AsVector(out, a, m) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = m[3] * x + m[7] * y + m[11] * z || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;
    return out;
}
function vec3_transformMat2(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    out[2] = a[2];
    return out;
}
// vec4 additions
function vec4_transformMat2(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function vec4_transformMat3(out, a, m) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    out[0] = m[0] * x + m[3] * y + m[6] * z;
    out[1] = m[1] * x + m[4] * y + m[7] * z;
    out[2] = m[2] * x + m[5] * y + m[8] * z;
    out[3] = a[3];
    return out;
}


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/lib/math-utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/lib/math-utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EPSILON1: () => (/* binding */ EPSILON1),
/* harmony export */   EPSILON10: () => (/* binding */ EPSILON10),
/* harmony export */   EPSILON11: () => (/* binding */ EPSILON11),
/* harmony export */   EPSILON12: () => (/* binding */ EPSILON12),
/* harmony export */   EPSILON13: () => (/* binding */ EPSILON13),
/* harmony export */   EPSILON14: () => (/* binding */ EPSILON14),
/* harmony export */   EPSILON15: () => (/* binding */ EPSILON15),
/* harmony export */   EPSILON16: () => (/* binding */ EPSILON16),
/* harmony export */   EPSILON17: () => (/* binding */ EPSILON17),
/* harmony export */   EPSILON18: () => (/* binding */ EPSILON18),
/* harmony export */   EPSILON19: () => (/* binding */ EPSILON19),
/* harmony export */   EPSILON2: () => (/* binding */ EPSILON2),
/* harmony export */   EPSILON20: () => (/* binding */ EPSILON20),
/* harmony export */   EPSILON3: () => (/* binding */ EPSILON3),
/* harmony export */   EPSILON4: () => (/* binding */ EPSILON4),
/* harmony export */   EPSILON5: () => (/* binding */ EPSILON5),
/* harmony export */   EPSILON6: () => (/* binding */ EPSILON6),
/* harmony export */   EPSILON7: () => (/* binding */ EPSILON7),
/* harmony export */   EPSILON8: () => (/* binding */ EPSILON8),
/* harmony export */   EPSILON9: () => (/* binding */ EPSILON9),
/* harmony export */   PI_OVER_FOUR: () => (/* binding */ PI_OVER_FOUR),
/* harmony export */   PI_OVER_SIX: () => (/* binding */ PI_OVER_SIX),
/* harmony export */   PI_OVER_TWO: () => (/* binding */ PI_OVER_TWO),
/* harmony export */   TWO_PI: () => (/* binding */ TWO_PI)
/* harmony export */ });
// NOTE: Added to make Cesium-derived test cases work
// TODO: Determine if/how to keep
const EPSILON1 = 1e-1;
const EPSILON2 = 1e-2;
const EPSILON3 = 1e-3;
const EPSILON4 = 1e-4;
const EPSILON5 = 1e-5;
const EPSILON6 = 1e-6;
const EPSILON7 = 1e-7;
const EPSILON8 = 1e-8;
const EPSILON9 = 1e-9;
const EPSILON10 = 1e-10;
const EPSILON11 = 1e-11;
const EPSILON12 = 1e-12;
const EPSILON13 = 1e-13;
const EPSILON14 = 1e-14;
const EPSILON15 = 1e-15;
const EPSILON16 = 1e-16;
const EPSILON17 = 1e-17;
const EPSILON18 = 1e-18;
const EPSILON19 = 1e-19;
const EPSILON20 = 1e-20;
const PI_OVER_TWO = Math.PI / 2;
const PI_OVER_FOUR = Math.PI / 4;
const PI_OVER_SIX = Math.PI / 6;
const TWO_PI = Math.PI * 2;


/***/ }),

/***/ "./node_modules/@math.gl/core/dist/lib/validators.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/core/dist/lib/validators.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkNumber: () => (/* binding */ checkNumber),
/* harmony export */   checkVector: () => (/* binding */ checkVector),
/* harmony export */   deprecated: () => (/* binding */ deprecated),
/* harmony export */   validateVector: () => (/* binding */ validateVector)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@math.gl/core/dist/lib/common.js");

function validateVector(v, length) {
    if (v.length !== length) {
        return false;
    }
    // Could be arguments "array" (v.every not availasble)
    for (let i = 0; i < v.length; ++i) {
        if (!Number.isFinite(v[i])) {
            return false;
        }
    }
    return true;
}
function checkNumber(value) {
    if (!Number.isFinite(value)) {
        throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
}
function checkVector(v, length, callerName = '') {
    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.config.debug && !validateVector(v, length)) {
        throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
    }
    return v;
}
const map = {};
function deprecated(method, version) {
    if (!map[method]) {
        map[method] = true;
        // eslint-disable-next-line
        console.warn(`${method} has been removed in version ${version}, see upgrade guide for more information`);
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/constants.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INTERSECTION: () => (/* binding */ INTERSECTION)
/* harmony export */ });
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md
const INTERSECTION = {
    OUTSIDE: -1, // Represents that an object is not contained within the frustum.
    INTERSECTING: 0, // Represents that an object intersects one of the frustum's planes.
    INSIDE: 1 // Represents that an object is fully within the frustum.
};


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AxisAlignedBoundingBox: () => (/* reexport safe */ _lib_bounding_volumes_axis_aligned_bounding_box_js__WEBPACK_IMPORTED_MODULE_1__.AxisAlignedBoundingBox),
/* harmony export */   BoundingSphere: () => (/* reexport safe */ _lib_bounding_volumes_bounding_sphere_js__WEBPACK_IMPORTED_MODULE_2__.BoundingSphere),
/* harmony export */   CullingVolume: () => (/* reexport safe */ _lib_culling_volume_js__WEBPACK_IMPORTED_MODULE_4__.CullingVolume),
/* harmony export */   INTERSECTION: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION),
/* harmony export */   OrientedBoundingBox: () => (/* reexport safe */ _lib_bounding_volumes_oriented_bounding_box_js__WEBPACK_IMPORTED_MODULE_3__.OrientedBoundingBox),
/* harmony export */   Plane: () => (/* reexport safe */ _lib_plane_js__WEBPACK_IMPORTED_MODULE_5__.Plane),
/* harmony export */   _PerspectiveFrustum: () => (/* reexport safe */ _lib_perspective_frustum_js__WEBPACK_IMPORTED_MODULE_7__.PerspectiveFrustum),
/* harmony export */   _PerspectiveOffCenterFrustum: () => (/* reexport safe */ _lib_perspective_off_center_frustum_js__WEBPACK_IMPORTED_MODULE_6__.PerspectiveOffCenterFrustum),
/* harmony export */   computeEigenDecomposition: () => (/* reexport safe */ _lib_algorithms_compute_eigen_decomposition_js__WEBPACK_IMPORTED_MODULE_10__.computeEigenDecomposition),
/* harmony export */   makeAxisAlignedBoundingBoxFromPoints: () => (/* reexport safe */ _lib_algorithms_bounding_box_from_points_js__WEBPACK_IMPORTED_MODULE_9__.makeAxisAlignedBoundingBoxFromPoints),
/* harmony export */   makeBoundingSphereFromPoints: () => (/* reexport safe */ _lib_algorithms_bounding_sphere_from_points_js__WEBPACK_IMPORTED_MODULE_8__.makeBoundingSphereFromPoints),
/* harmony export */   makeOrientedBoundingBoxFromPoints: () => (/* reexport safe */ _lib_algorithms_bounding_box_from_points_js__WEBPACK_IMPORTED_MODULE_9__.makeOrientedBoundingBoxFromPoints)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@math.gl/culling/dist/constants.js");
/* harmony import */ var _lib_bounding_volumes_axis_aligned_bounding_box_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/bounding-volumes/axis-aligned-bounding-box.js */ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/axis-aligned-bounding-box.js");
/* harmony import */ var _lib_bounding_volumes_bounding_sphere_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/bounding-volumes/bounding-sphere.js */ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/bounding-sphere.js");
/* harmony import */ var _lib_bounding_volumes_oriented_bounding_box_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/bounding-volumes/oriented-bounding-box.js */ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/oriented-bounding-box.js");
/* harmony import */ var _lib_culling_volume_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/culling-volume.js */ "./node_modules/@math.gl/culling/dist/lib/culling-volume.js");
/* harmony import */ var _lib_plane_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/plane.js */ "./node_modules/@math.gl/culling/dist/lib/plane.js");
/* harmony import */ var _lib_perspective_off_center_frustum_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/perspective-off-center-frustum.js */ "./node_modules/@math.gl/culling/dist/lib/perspective-off-center-frustum.js");
/* harmony import */ var _lib_perspective_frustum_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/perspective-frustum.js */ "./node_modules/@math.gl/culling/dist/lib/perspective-frustum.js");
/* harmony import */ var _lib_algorithms_bounding_sphere_from_points_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/algorithms/bounding-sphere-from-points.js */ "./node_modules/@math.gl/culling/dist/lib/algorithms/bounding-sphere-from-points.js");
/* harmony import */ var _lib_algorithms_bounding_box_from_points_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/algorithms/bounding-box-from-points.js */ "./node_modules/@math.gl/culling/dist/lib/algorithms/bounding-box-from-points.js");
/* harmony import */ var _lib_algorithms_compute_eigen_decomposition_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/algorithms/compute-eigen-decomposition.js */ "./node_modules/@math.gl/culling/dist/lib/algorithms/compute-eigen-decomposition.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md













/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/algorithms/bounding-box-from-points.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/algorithms/bounding-box-from-points.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeAxisAlignedBoundingBoxFromPoints: () => (/* binding */ makeAxisAlignedBoundingBoxFromPoints),
/* harmony export */   makeOrientedBoundingBoxFromPoints: () => (/* binding */ makeOrientedBoundingBoxFromPoints)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix3.js");
/* harmony import */ var _compute_eigen_decomposition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compute-eigen-decomposition.js */ "./node_modules/@math.gl/culling/dist/lib/algorithms/compute-eigen-decomposition.js");
/* harmony import */ var _bounding_volumes_oriented_bounding_box_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bounding-volumes/oriented-bounding-box.js */ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/oriented-bounding-box.js");
/* harmony import */ var _bounding_volumes_axis_aligned_bounding_box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bounding-volumes/axis-aligned-bounding-box.js */ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/axis-aligned-bounding-box.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md




const scratchVector2 = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3();
const scratchVector3 = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3();
const scratchVector4 = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3();
const scratchVector5 = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3();
const scratchVector6 = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3();
const scratchCovarianceResult = new _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.Matrix3();
const scratchEigenResult = {
    diagonal: new _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.Matrix3(),
    unitary: new _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.Matrix3()
};
/**
 * Computes an instance of an OrientedBoundingBox of the given positions.
 *
 * This is an implementation of Stefan Gottschalk's Collision Queries using Oriented Bounding Boxes solution (PHD thesis).
 * Reference: http://gamma.cs.unc.edu/users/gottschalk/main.pdf
 */
/* eslint-disable max-statements */
function makeOrientedBoundingBoxFromPoints(positions, result = new _bounding_volumes_oriented_bounding_box_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBoundingBox()) {
    if (!positions || positions.length === 0) {
        result.halfAxes = new _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);
        result.center = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3();
        return result;
    }
    const length = positions.length;
    const meanPoint = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0);
    for (const position of positions) {
        meanPoint.add(position);
    }
    const invLength = 1.0 / length;
    meanPoint.multiplyByScalar(invLength);
    let exx = 0.0;
    let exy = 0.0;
    let exz = 0.0;
    let eyy = 0.0;
    let eyz = 0.0;
    let ezz = 0.0;
    for (const position of positions) {
        const p = scratchVector2.copy(position).subtract(meanPoint);
        exx += p.x * p.x;
        exy += p.x * p.y;
        exz += p.x * p.z;
        eyy += p.y * p.y;
        eyz += p.y * p.z;
        ezz += p.z * p.z;
    }
    exx *= invLength;
    exy *= invLength;
    exz *= invLength;
    eyy *= invLength;
    eyz *= invLength;
    ezz *= invLength;
    const covarianceMatrix = scratchCovarianceResult;
    covarianceMatrix[0] = exx;
    covarianceMatrix[1] = exy;
    covarianceMatrix[2] = exz;
    covarianceMatrix[3] = exy;
    covarianceMatrix[4] = eyy;
    covarianceMatrix[5] = eyz;
    covarianceMatrix[6] = exz;
    covarianceMatrix[7] = eyz;
    covarianceMatrix[8] = ezz;
    const { unitary } = (0,_compute_eigen_decomposition_js__WEBPACK_IMPORTED_MODULE_0__.computeEigenDecomposition)(covarianceMatrix, scratchEigenResult);
    const rotation = result.halfAxes.copy(unitary);
    let v1 = rotation.getColumn(0, scratchVector4);
    let v2 = rotation.getColumn(1, scratchVector5);
    let v3 = rotation.getColumn(2, scratchVector6);
    let u1 = -Number.MAX_VALUE;
    let u2 = -Number.MAX_VALUE;
    let u3 = -Number.MAX_VALUE;
    let l1 = Number.MAX_VALUE;
    let l2 = Number.MAX_VALUE;
    let l3 = Number.MAX_VALUE;
    for (const position of positions) {
        scratchVector2.copy(position);
        u1 = Math.max(scratchVector2.dot(v1), u1);
        u2 = Math.max(scratchVector2.dot(v2), u2);
        u3 = Math.max(scratchVector2.dot(v3), u3);
        l1 = Math.min(scratchVector2.dot(v1), l1);
        l2 = Math.min(scratchVector2.dot(v2), l2);
        l3 = Math.min(scratchVector2.dot(v3), l3);
    }
    v1 = v1.multiplyByScalar(0.5 * (l1 + u1));
    v2 = v2.multiplyByScalar(0.5 * (l2 + u2));
    v3 = v3.multiplyByScalar(0.5 * (l3 + u3));
    result.center.copy(v1).add(v2).add(v3);
    const scale = scratchVector3.set(u1 - l1, u2 - l2, u3 - l3).multiplyByScalar(0.5);
    const scaleMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.Matrix3([scale[0], 0, 0, 0, scale[1], 0, 0, 0, scale[2]]);
    result.halfAxes.multiplyRight(scaleMatrix);
    return result;
}
/**
 * Computes an instance of an AxisAlignedBoundingBox. The box is determined by
 * finding the points spaced the farthest apart on the x, y, and z axes.
 */
function makeAxisAlignedBoundingBoxFromPoints(positions, result = new _bounding_volumes_axis_aligned_bounding_box_js__WEBPACK_IMPORTED_MODULE_2__.AxisAlignedBoundingBox()) {
    if (!positions || positions.length === 0) {
        result.minimum.set(0, 0, 0);
        result.maximum.set(0, 0, 0);
        result.center.set(0, 0, 0);
        result.halfDiagonal.set(0, 0, 0);
        return result;
    }
    let minimumX = positions[0][0];
    let minimumY = positions[0][1];
    let minimumZ = positions[0][2];
    let maximumX = positions[0][0];
    let maximumY = positions[0][1];
    let maximumZ = positions[0][2];
    for (const p of positions) {
        const x = p[0];
        const y = p[1];
        const z = p[2];
        minimumX = Math.min(x, minimumX);
        maximumX = Math.max(x, maximumX);
        minimumY = Math.min(y, minimumY);
        maximumY = Math.max(y, maximumY);
        minimumZ = Math.min(z, minimumZ);
        maximumZ = Math.max(z, maximumZ);
    }
    result.minimum.set(minimumX, minimumY, minimumZ);
    result.maximum.set(maximumX, maximumY, maximumZ);
    result.center.copy(result.minimum).add(result.maximum).scale(0.5);
    result.halfDiagonal.copy(result.maximum).subtract(result.center);
    return result;
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/algorithms/bounding-sphere-from-points.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/algorithms/bounding-sphere-from-points.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeBoundingSphereFromPoints: () => (/* binding */ makeBoundingSphereFromPoints)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _bounding_volumes_bounding_sphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bounding-volumes/bounding-sphere.js */ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/bounding-sphere.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md


/* eslint-disable */
const fromPointsXMin = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsYMin = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsZMin = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsXMax = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsYMax = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsZMax = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsCurrentPos = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsScratch = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsRitterCenter = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsMinBoxPt = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsMaxBoxPt = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const fromPointsNaiveCenterScratch = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
// const volumeConstant = (4.0 / 3.0) * Math.PI;
/**
 * Computes a tight-fitting bounding sphere enclosing a list of 3D Cartesian points.
 *
 * The bounding sphere is computed by running two algorithms, a naive algorithm and
 * Ritter's algorithm. The smaller of the two spheres is used to ensure a tight fit.
 * Bounding sphere computation article http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding
 *
 * @param positions An array of points that the bounding sphere will enclose.
 * @param result Optional object onto which to store the result.
 * @returns The modified result parameter or a new `BoundingSphere` instance if not provided.
 */
function makeBoundingSphereFromPoints(positions, result = new _bounding_volumes_bounding_sphere_js__WEBPACK_IMPORTED_MODULE_0__.BoundingSphere()) {
    if (!positions || positions.length === 0) {
        return result.fromCenterRadius([0, 0, 0], 0);
    }
    const currentPos = fromPointsCurrentPos.copy(positions[0]);
    const xMin = fromPointsXMin.copy(currentPos);
    const yMin = fromPointsYMin.copy(currentPos);
    const zMin = fromPointsZMin.copy(currentPos);
    const xMax = fromPointsXMax.copy(currentPos);
    const yMax = fromPointsYMax.copy(currentPos);
    const zMax = fromPointsZMax.copy(currentPos);
    for (const position of positions) {
        currentPos.copy(position);
        const x = currentPos.x;
        const y = currentPos.y;
        const z = currentPos.z;
        // Store points containing the the smallest and largest components
        if (x < xMin.x) {
            xMin.copy(currentPos);
        }
        if (x > xMax.x) {
            xMax.copy(currentPos);
        }
        if (y < yMin.y) {
            yMin.copy(currentPos);
        }
        if (y > yMax.y) {
            yMax.copy(currentPos);
        }
        if (z < zMin.z) {
            zMin.copy(currentPos);
        }
        if (z > zMax.z) {
            zMax.copy(currentPos);
        }
    }
    // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).
    const xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();
    const ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();
    const zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();
    // Set the diameter endpoints to the largest span.
    let diameter1 = xMin;
    let diameter2 = xMax;
    let maxSpan = xSpan;
    if (ySpan > maxSpan) {
        maxSpan = ySpan;
        diameter1 = yMin;
        diameter2 = yMax;
    }
    if (zSpan > maxSpan) {
        maxSpan = zSpan;
        diameter1 = zMin;
        diameter2 = zMax;
    }
    // Calculate the center of the initial sphere found by Ritter's algorithm
    const ritterCenter = fromPointsRitterCenter;
    ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
    ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
    ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
    // Calculate the radius of the initial sphere found by Ritter's algorithm
    let radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();
    let ritterRadius = Math.sqrt(radiusSquared);
    // Find the center of the sphere found using the Naive method.
    const minBoxPt = fromPointsMinBoxPt;
    minBoxPt.x = xMin.x;
    minBoxPt.y = yMin.y;
    minBoxPt.z = zMin.z;
    const maxBoxPt = fromPointsMaxBoxPt;
    maxBoxPt.x = xMax.x;
    maxBoxPt.y = yMax.y;
    maxBoxPt.z = zMax.z;
    const naiveCenter = fromPointsNaiveCenterScratch
        .copy(minBoxPt)
        .add(maxBoxPt)
        .multiplyByScalar(0.5);
    // Begin 2nd pass to find naive radius and modify the ritter sphere.
    let naiveRadius = 0;
    for (const position of positions) {
        currentPos.copy(position);
        // Find the furthest point from the naive center to calculate the naive radius.
        const r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();
        if (r > naiveRadius) {
            naiveRadius = r;
        }
        // Make adjustments to the Ritter Sphere to include all points.
        const oldCenterToPointSquared = fromPointsScratch
            .copy(currentPos)
            .subtract(ritterCenter)
            .magnitudeSquared();
        if (oldCenterToPointSquared > radiusSquared) {
            const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
            // Calculate new radius to include the point that lies outside
            ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
            radiusSquared = ritterRadius * ritterRadius;
            // Calculate center of new Ritter sphere
            const oldToNew = oldCenterToPoint - ritterRadius;
            ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
            ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
            ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
        }
    }
    if (ritterRadius < naiveRadius) {
        ritterCenter.to(result.center);
        result.radius = ritterRadius;
    }
    else {
        naiveCenter.to(result.center);
        result.radius = naiveRadius;
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/algorithms/compute-eigen-decomposition.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/algorithms/compute-eigen-decomposition.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   computeEigenDecomposition: () => (/* binding */ computeEigenDecomposition)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/math-utils.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md

const scratchMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Matrix3();
const scratchUnitary = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Matrix3();
const scratchDiagonal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Matrix3();
const jMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Matrix3();
const jMatrixTranspose = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Matrix3();
/**
 * Computes the eigenvectors and eigenvalues of a symmetric matrix.
 *
 * - Returns a diagonal matrix and unitary matrix such that:
 * `matrix = unitary matrix * diagonal matrix * transpose(unitary matrix)`
 * - The values along the diagonal of the diagonal matrix are the eigenvalues. The columns
 * of the unitary matrix are the corresponding eigenvectors.
 * - This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,
 * section 8.4.3 The Classical Jacobi Algorithm
 *
 * @param matrix The 3x3 matrix to decompose into diagonal and unitary matrix. Expected to be symmetric.
 * @param result Optional object with unitary and diagonal properties which are matrices onto which to store the result.
 * @returns An object with unitary and diagonal properties which are the unitary and diagonal matrices, respectively.
 *
 * @example
 * const a = //... symmetric matrix
 * const result = {
 *   unitary : new Matrix3(),
 *   diagonal : new Matrix3()
 * };
 * computeEigenDecomposition(a, result);
 *
 * const unitaryTranspose = Matrix3.transpose(result.unitary, new Matrix3());
 * const b = Matrix3.multiply(result.unitary, result.diagonal, new Matrix3());
 * Matrix3.multiply(b, unitaryTranspose, b); // b is now equal to a
 *
 * const lambda = result.diagonal.getColumn(0, new Vector3()).x;  // first eigenvalue
 * const v = result.unitary.getColumn(0, new Vector3());          // first eigenvector
 * const c = v.multiplyByScalar(lambda);                          // equal to v.transformByMatrix3(a)
 */
function computeEigenDecomposition(matrix, 
// @ts-expect-error accept empty object type
result = {}) {
    const EIGEN_TOLERANCE = _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.EPSILON20;
    const EIGEN_MAX_SWEEPS = 10;
    let count = 0;
    let sweep = 0;
    const unitaryMatrix = scratchUnitary;
    const diagonalMatrix = scratchDiagonal;
    unitaryMatrix.identity();
    diagonalMatrix.copy(matrix);
    const epsilon = EIGEN_TOLERANCE * computeFrobeniusNorm(diagonalMatrix);
    while (sweep < EIGEN_MAX_SWEEPS && offDiagonalFrobeniusNorm(diagonalMatrix) > epsilon) {
        shurDecomposition(diagonalMatrix, jMatrix);
        jMatrixTranspose.copy(jMatrix).transpose();
        diagonalMatrix.multiplyRight(jMatrix);
        diagonalMatrix.multiplyLeft(jMatrixTranspose);
        unitaryMatrix.multiplyRight(jMatrix);
        if (++count > 2) {
            ++sweep;
            count = 0;
        }
    }
    result.unitary = unitaryMatrix.toTarget(result.unitary);
    result.diagonal = diagonalMatrix.toTarget(result.diagonal);
    return result;
}
function computeFrobeniusNorm(matrix) {
    let norm = 0.0;
    for (let i = 0; i < 9; ++i) {
        const temp = matrix[i];
        norm += temp * temp;
    }
    return Math.sqrt(norm);
}
const rowVal = [1, 0, 0];
const colVal = [2, 2, 1];
// Computes the "off-diagonal" Frobenius norm.
// Assumes matrix is symmetric.
function offDiagonalFrobeniusNorm(matrix) {
    let norm = 0.0;
    for (let i = 0; i < 3; ++i) {
        const temp = matrix[scratchMatrix.getElementIndex(colVal[i], rowVal[i])];
        norm += 2.0 * temp * temp;
    }
    return Math.sqrt(norm);
}
// The routine takes a matrix, which is assumed to be symmetric, and
// finds the largest off-diagonal term, and then creates
// a matrix (result) which can be used to help reduce it
//
// This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,
// section 8.4.2 The 2by2 Symmetric Schur Decomposition.
//
// eslint-disable-next-line max-statements
function shurDecomposition(matrix, result) {
    const tolerance = _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.EPSILON15;
    let maxDiagonal = 0.0;
    let rotAxis = 1;
    // find pivot (rotAxis) based on max diagonal of matrix
    for (let i = 0; i < 3; ++i) {
        const temp = Math.abs(matrix[scratchMatrix.getElementIndex(colVal[i], rowVal[i])]);
        if (temp > maxDiagonal) {
            rotAxis = i;
            maxDiagonal = temp;
        }
    }
    const p = rowVal[rotAxis];
    const q = colVal[rotAxis];
    let c = 1.0;
    let s = 0.0;
    if (Math.abs(matrix[scratchMatrix.getElementIndex(q, p)]) > tolerance) {
        const qq = matrix[scratchMatrix.getElementIndex(q, q)];
        const pp = matrix[scratchMatrix.getElementIndex(p, p)];
        const qp = matrix[scratchMatrix.getElementIndex(q, p)];
        const tau = (qq - pp) / 2.0 / qp;
        let t;
        if (tau < 0.0) {
            t = -1.0 / (-tau + Math.sqrt(1.0 + tau * tau));
        }
        else {
            t = 1.0 / (tau + Math.sqrt(1.0 + tau * tau));
        }
        c = 1.0 / Math.sqrt(1.0 + t * t);
        s = t * c;
    }
    // Copy into result
    _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Matrix3.IDENTITY.to(result);
    result[scratchMatrix.getElementIndex(p, p)] = result[scratchMatrix.getElementIndex(q, q)] = c;
    result[scratchMatrix.getElementIndex(q, p)] = s;
    result[scratchMatrix.getElementIndex(p, q)] = -s;
    return result;
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/axis-aligned-bounding-box.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/bounding-volumes/axis-aligned-bounding-box.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AxisAlignedBoundingBox: () => (/* binding */ AxisAlignedBoundingBox)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "./node_modules/@math.gl/culling/dist/constants.js");


const scratchVector = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const scratchNormal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
/**
 * An axis aligned bounding box - aligned with coordinate axes
 * @see BoundingVolume
 * @see BoundingRectangle
 * @see OrientedBoundingBox
 */
class AxisAlignedBoundingBox {
    /**
     * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.
     * @param minimum=[0, 0, 0] The minimum point along the x, y, and z axes.
     * @param maximum=[0, 0, 0] The maximum point along the x, y, and z axes.
     * @param center The center of the box; automatically computed if not supplied.
     */
    constructor(minimum = [0, 0, 0], maximum = [0, 0, 0], center) {
        // If center was not defined, compute it.
        center = center || scratchVector.copy(minimum).add(maximum).scale(0.5);
        this.center = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3(center);
        this.halfDiagonal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3(maximum).subtract(this.center);
        /**
         * The minimum point defining the bounding box.
         * @type {Vector3}
         * @default {@link 0, 0, 0}
         */
        this.minimum = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3(minimum);
        /**
         * The maximum point defining the bounding box.
         * @type {Vector3}
         * @default {@link 0, 0, 0}
         */
        this.maximum = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3(maximum);
    }
    /**
     * Duplicates a AxisAlignedBoundingBox instance.
     *
     * @returns {AxisAlignedBoundingBox} A new AxisAlignedBoundingBox instance.
     */
    clone() {
        return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);
    }
    /**
     * Compares the provided AxisAlignedBoundingBox componentwise and returns
     * <code>true</code> if they are equal, <code>false</code> otherwise.
     *
     * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox to compare with.
     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.
     */
    equals(right) {
        return (this === right ||
            (Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum)));
    }
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns itself, i.e. the modified BoundingVolume.
     */
    transform(transform) {
        this.center.transformAsPoint(transform);
        // TODO - this.halfDiagonal.transformAsVector(transform);
        this.halfDiagonal.transform(transform);
        this.minimum.transform(transform);
        this.maximum.transform(transform);
        return this;
    }
    /**
     * Determines which side of a plane a box is located.
     */
    intersectPlane(plane) {
        const { halfDiagonal } = this;
        const normal = scratchNormal.from(plane.normal);
        const e = halfDiagonal.x * Math.abs(normal.x) +
            halfDiagonal.y * Math.abs(normal.y) +
            halfDiagonal.z * Math.abs(normal.z);
        const s = this.center.dot(normal) + plane.distance; // signed distance from center
        if (s - e > 0) {
            return _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INSIDE;
        }
        if (s + e < 0) {
            // Not in front because normals point inward
            return _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.OUTSIDE;
        }
        return _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INTERSECTING;
    }
    /** Computes the estimated distance from the closest point on a bounding box to a point. */
    distanceTo(point) {
        return Math.sqrt(this.distanceSquaredTo(point));
    }
    /** Computes the estimated distance squared from the closest point on a bounding box to a point. */
    distanceSquaredTo(point) {
        const offset = scratchVector.from(point).subtract(this.center);
        const { halfDiagonal } = this;
        let distanceSquared = 0.0;
        let d;
        d = Math.abs(offset.x) - halfDiagonal.x;
        if (d > 0) {
            distanceSquared += d * d;
        }
        d = Math.abs(offset.y) - halfDiagonal.y;
        if (d > 0) {
            distanceSquared += d * d;
        }
        d = Math.abs(offset.z) - halfDiagonal.z;
        if (d > 0) {
            distanceSquared += d * d;
        }
        return distanceSquared;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/bounding-sphere.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/bounding-volumes/bounding-sphere.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BoundingSphere: () => (/* binding */ BoundingSphere)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/mat4.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "./node_modules/@math.gl/culling/dist/constants.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md


const scratchVector = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const scratchVector2 = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
/** A BoundingSphere */
class BoundingSphere {
    /** Creates a bounding sphere */
    constructor(center = [0, 0, 0], radius = 0.0) {
        this.radius = -0;
        this.center = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3();
        this.fromCenterRadius(center, radius);
    }
    /** Sets the bounding sphere from `center` and `radius`. */
    fromCenterRadius(center, radius) {
        this.center.from(center);
        this.radius = radius;
        return this;
    }
    /**
     * Computes a bounding sphere from the corner points of an axis-aligned bounding box.  The sphere
     * tightly and fully encompasses the box.
     */
    fromCornerPoints(corner, oppositeCorner) {
        oppositeCorner = scratchVector.from(oppositeCorner);
        this.center = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector3().from(corner).add(oppositeCorner).scale(0.5);
        this.radius = this.center.distance(oppositeCorner);
        return this;
    }
    /** Compares the provided BoundingSphere component wise */
    equals(right) {
        return (this === right ||
            (Boolean(right) && this.center.equals(right.center) && this.radius === right.radius));
    }
    /** Duplicates a BoundingSphere instance. */
    clone() {
        return new BoundingSphere(this.center, this.radius);
    }
    /** Computes a bounding sphere that contains both the left and right bounding spheres. */
    union(boundingSphere) {
        const leftCenter = this.center;
        const leftRadius = this.radius;
        const rightCenter = boundingSphere.center;
        const rightRadius = boundingSphere.radius;
        const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);
        const centerSeparation = toRightCenter.magnitude();
        if (leftRadius >= centerSeparation + rightRadius) {
            // Left sphere wins.
            return this.clone();
        }
        if (rightRadius >= centerSeparation + leftRadius) {
            // Right sphere wins.
            return boundingSphere.clone();
        }
        // There are two tangent points, one on far side of each sphere.
        const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;
        // Compute the center point halfway between the two tangent points.
        scratchVector2
            .copy(toRightCenter)
            .scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation)
            .add(leftCenter);
        this.center.copy(scratchVector2);
        this.radius = halfDistanceBetweenTangentPoints;
        return this;
    }
    /** Computes a bounding sphere by enlarging the provided sphere to contain the provided point. */
    expand(point) {
        const scratchPoint = scratchVector.from(point);
        const radius = scratchPoint.subtract(this.center).magnitude();
        if (radius > this.radius) {
            this.radius = radius;
        }
        return this;
    }
    // BoundingVolume interface
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param sphere The bounding sphere to apply the transformation to.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns self.
     */
    transform(transform) {
        this.center.transform(transform);
        const scale = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.getScaling(scratchVector, transform);
        this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;
        return this;
    }
    /** Computes the estimated distance squared from the closest point on a bounding sphere to a point. */
    distanceSquaredTo(point) {
        const d = this.distanceTo(point);
        return d * d;
    }
    /** Computes the estimated distance from the closest point on a bounding sphere to a point. */
    distanceTo(point) {
        const scratchPoint = scratchVector.from(point);
        const delta = scratchPoint.subtract(this.center);
        return Math.max(0, delta.len() - this.radius);
    }
    /** Determines which side of a plane a sphere is located. */
    intersectPlane(plane) {
        const center = this.center;
        const radius = this.radius;
        const normal = plane.normal;
        const distanceToPlane = normal.dot(center) + plane.distance;
        // The center point is negative side of the plane normal
        if (distanceToPlane < -radius) {
            return _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.OUTSIDE;
        }
        // The center point is positive side of the plane, but radius extends beyond it; partial overlap
        if (distanceToPlane < radius) {
            return _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INTERSECTING;
        }
        // The center point and radius is positive side of the plane
        return _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INSIDE;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/oriented-bounding-box.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/bounding-volumes/oriented-bounding-box.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OrientedBoundingBox: () => (/* binding */ OrientedBoundingBox)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/quaternion.js");
/* harmony import */ var _bounding_sphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bounding-sphere.js */ "./node_modules/@math.gl/culling/dist/lib/bounding-volumes/bounding-sphere.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants.js */ "./node_modules/@math.gl/culling/dist/constants.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md



const scratchVector3 = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchOffset = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchVectorU = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchVectorV = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchVectorW = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchCorner = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchToCenter = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const MATRIX3 = {
    COLUMN0ROW0: 0,
    COLUMN0ROW1: 1,
    COLUMN0ROW2: 2,
    COLUMN1ROW0: 3,
    COLUMN1ROW1: 4,
    COLUMN1ROW2: 5,
    COLUMN2ROW0: 6,
    COLUMN2ROW1: 7,
    COLUMN2ROW2: 8
};
/**
 * An OrientedBoundingBox of some object is a closed and convex cuboid.
 * It can provide a tighter bounding volume than `BoundingSphere` or
 * `AxisAlignedBoundingBox` in many cases.
 */
class OrientedBoundingBox {
    constructor(center = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {
        this.center = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3().from(center);
        this.halfAxes = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix3(halfAxes);
    }
    /** Returns an array with three halfSizes for the bounding box */
    get halfSize() {
        const xAxis = this.halfAxes.getColumn(0);
        const yAxis = this.halfAxes.getColumn(1);
        const zAxis = this.halfAxes.getColumn(2);
        return [new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(xAxis).len(), new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(yAxis).len(), new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(zAxis).len()];
    }
    /** Returns a quaternion describing the orientation of the bounding box */
    get quaternion() {
        const xAxis = this.halfAxes.getColumn(0);
        const yAxis = this.halfAxes.getColumn(1);
        const zAxis = this.halfAxes.getColumn(2);
        const normXAxis = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(xAxis).normalize();
        const normYAxis = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(yAxis).normalize();
        const normZAxis = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3(zAxis).normalize();
        return new _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.Quaternion().fromMatrix3(new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));
    }
    /**
     * Create OrientedBoundingBox from quaternion based OBB,
     */
    fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {
        const quaternionObject = new _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.Quaternion(quaternion);
        const directionsMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix3().fromQuaternion(quaternionObject);
        directionsMatrix[0] = directionsMatrix[0] * halfSize[0];
        directionsMatrix[1] = directionsMatrix[1] * halfSize[0];
        directionsMatrix[2] = directionsMatrix[2] * halfSize[0];
        directionsMatrix[3] = directionsMatrix[3] * halfSize[1];
        directionsMatrix[4] = directionsMatrix[4] * halfSize[1];
        directionsMatrix[5] = directionsMatrix[5] * halfSize[1];
        directionsMatrix[6] = directionsMatrix[6] * halfSize[2];
        directionsMatrix[7] = directionsMatrix[7] * halfSize[2];
        directionsMatrix[8] = directionsMatrix[8] * halfSize[2];
        this.center = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3().from(center);
        this.halfAxes = directionsMatrix;
        return this;
    }
    /** Duplicates a OrientedBoundingBox instance. */
    clone() {
        return new OrientedBoundingBox(this.center, this.halfAxes);
    }
    /** Compares the provided OrientedBoundingBox component wise and returns */
    equals(right) {
        return (this === right ||
            (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes)));
    }
    /** Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box. */
    getBoundingSphere(result = new _bounding_sphere_js__WEBPACK_IMPORTED_MODULE_0__.BoundingSphere()) {
        const halfAxes = this.halfAxes;
        const u = halfAxes.getColumn(0, scratchVectorU);
        const v = halfAxes.getColumn(1, scratchVectorV);
        const w = halfAxes.getColumn(2, scratchVectorW);
        // Calculate "corner" vector
        const cornerVector = scratchVector3.copy(u).add(v).add(w);
        result.center.copy(this.center);
        result.radius = cornerVector.magnitude();
        return result;
    }
    /** Determines which side of a plane the oriented bounding box is located. */
    intersectPlane(plane) {
        const center = this.center;
        const normal = plane.normal;
        const halfAxes = this.halfAxes;
        const normalX = normal.x;
        const normalY = normal.y;
        const normalZ = normal.z;
        // Plane is used as if it is its normal; the first three components are assumed to be normalized
        const radEffective = Math.abs(normalX * halfAxes[MATRIX3.COLUMN0ROW0] +
            normalY * halfAxes[MATRIX3.COLUMN0ROW1] +
            normalZ * halfAxes[MATRIX3.COLUMN0ROW2]) +
            Math.abs(normalX * halfAxes[MATRIX3.COLUMN1ROW0] +
                normalY * halfAxes[MATRIX3.COLUMN1ROW1] +
                normalZ * halfAxes[MATRIX3.COLUMN1ROW2]) +
            Math.abs(normalX * halfAxes[MATRIX3.COLUMN2ROW0] +
                normalY * halfAxes[MATRIX3.COLUMN2ROW1] +
                normalZ * halfAxes[MATRIX3.COLUMN2ROW2]);
        const distanceToPlane = normal.dot(center) + plane.distance;
        if (distanceToPlane <= -radEffective) {
            // The entire box is on the negative side of the plane normal
            return _constants_js__WEBPACK_IMPORTED_MODULE_1__.INTERSECTION.OUTSIDE;
        }
        else if (distanceToPlane >= radEffective) {
            // The entire box is on the positive side of the plane normal
            return _constants_js__WEBPACK_IMPORTED_MODULE_1__.INTERSECTION.INSIDE;
        }
        return _constants_js__WEBPACK_IMPORTED_MODULE_1__.INTERSECTION.INTERSECTING;
    }
    /** Computes the estimated distance from the closest point on a bounding box to a point. */
    distanceTo(point) {
        return Math.sqrt(this.distanceSquaredTo(point));
    }
    /**
     * Computes the estimated distance squared from the closest point
     * on a bounding box to a point.
     * See Geometric Tools for Computer Graphics 10.4.2
     */
    distanceSquaredTo(point) {
        // Computes the estimated distance squared from the
        // closest point on a bounding box to a point.
        // See Geometric Tools for Computer Graphics 10.4.2
        const offset = scratchOffset.from(point).subtract(this.center);
        const halfAxes = this.halfAxes;
        const u = halfAxes.getColumn(0, scratchVectorU);
        const v = halfAxes.getColumn(1, scratchVectorV);
        const w = halfAxes.getColumn(2, scratchVectorW);
        const uHalf = u.magnitude();
        const vHalf = v.magnitude();
        const wHalf = w.magnitude();
        u.normalize();
        v.normalize();
        w.normalize();
        let distanceSquared = 0.0;
        let d;
        d = Math.abs(offset.dot(u)) - uHalf;
        if (d > 0) {
            distanceSquared += d * d;
        }
        d = Math.abs(offset.dot(v)) - vHalf;
        if (d > 0) {
            distanceSquared += d * d;
        }
        d = Math.abs(offset.dot(w)) - wHalf;
        if (d > 0) {
            distanceSquared += d * d;
        }
        return distanceSquared;
    }
    /**
     * The distances calculated by the vector from the center of the bounding box
     * to position projected onto direction.
     *
     * - If you imagine the infinite number of planes with normal direction,
     *   this computes the smallest distance to the closest and farthest planes
     *   from `position` that intersect the bounding box.
     *
     * @param position The position to calculate the distance from.
     * @param direction The direction from position.
     * @param result An Interval (array of length 2) to store the nearest and farthest distances.
     * @returns Interval (array of length 2) with nearest and farthest distances
     *   on the bounding box from position in direction.
     */
    // eslint-disable-next-line max-statements
    computePlaneDistances(position, direction, result = [-0, -0]) {
        let minDist = Number.POSITIVE_INFINITY;
        let maxDist = Number.NEGATIVE_INFINITY;
        const center = this.center;
        const halfAxes = this.halfAxes;
        const u = halfAxes.getColumn(0, scratchVectorU);
        const v = halfAxes.getColumn(1, scratchVectorV);
        const w = halfAxes.getColumn(2, scratchVectorW);
        // project first corner
        const corner = scratchCorner.copy(u).add(v).add(w).add(center);
        const toCenter = scratchToCenter.copy(corner).subtract(position);
        let mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        // project second corner
        corner.copy(center).add(u).add(v).subtract(w);
        toCenter.copy(corner).subtract(position);
        mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        // project third corner
        corner.copy(center).add(u).subtract(v).add(w);
        toCenter.copy(corner).subtract(position);
        mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        // project fourth corner
        corner.copy(center).add(u).subtract(v).subtract(w);
        toCenter.copy(corner).subtract(position);
        mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        // project fifth corner
        center.copy(corner).subtract(u).add(v).add(w);
        toCenter.copy(corner).subtract(position);
        mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        // project sixth corner
        center.copy(corner).subtract(u).add(v).subtract(w);
        toCenter.copy(corner).subtract(position);
        mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        // project seventh corner
        center.copy(corner).subtract(u).subtract(v).add(w);
        toCenter.copy(corner).subtract(position);
        mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        // project eighth corner
        center.copy(corner).subtract(u).subtract(v).subtract(w);
        toCenter.copy(corner).subtract(position);
        mag = direction.dot(toCenter);
        minDist = Math.min(mag, minDist);
        maxDist = Math.max(mag, maxDist);
        result[0] = minDist;
        result[1] = maxDist;
        return result;
    }
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns itself, i.e. the modified BoundingVolume.
     */
    transform(transformation) {
        this.center.transformAsPoint(transformation);
        const xAxis = this.halfAxes.getColumn(0, scratchVectorU);
        xAxis.transformAsPoint(transformation);
        const yAxis = this.halfAxes.getColumn(1, scratchVectorV);
        yAxis.transformAsPoint(transformation);
        const zAxis = this.halfAxes.getColumn(2, scratchVectorW);
        zAxis.transformAsPoint(transformation);
        this.halfAxes = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix3([...xAxis, ...yAxis, ...zAxis]);
        return this;
    }
    getTransform() {
        // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);
        // return modelMatrix;
        throw new Error('not implemented');
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/culling-volume.js":
/*!******************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/culling-volume.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CullingVolume: () => (/* binding */ CullingVolume)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/assert.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/@math.gl/culling/dist/constants.js");
/* harmony import */ var _plane_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane.js */ "./node_modules/@math.gl/culling/dist/lib/plane.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md
/* eslint-disable */



// X, Y, Z Unit vectors
const faces = [new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3([1, 0, 0]), new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3([0, 1, 0]), new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3([0, 0, 1])];
const scratchPlaneCenter = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchPlaneNormal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
// const scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);
/** A culling volume defined by planes. */
class CullingVolume {
    /**
     * Create a new `CullingVolume` bounded by an array of clipping planed
     * @param planes Array of clipping planes.
     * */
    constructor(planes = []) {
        this.planes = planes;
    }
    /**
     * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.
     * The planes are aligned to the x, y, and z axes in world coordinates.
     */
    fromBoundingSphere(boundingSphere) {
        this.planes.length = 2 * faces.length;
        const center = boundingSphere.center;
        const radius = boundingSphere.radius;
        let planeIndex = 0;
        for (const faceNormal of faces) {
            let plane0 = this.planes[planeIndex];
            let plane1 = this.planes[planeIndex + 1];
            if (!plane0) {
                plane0 = this.planes[planeIndex] = new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane();
            }
            if (!plane1) {
                plane1 = this.planes[planeIndex + 1] = new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane();
            }
            const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);
            // const plane0Distance = -faceNormal.dot(plane0Center);
            plane0.fromPointNormal(plane0Center, faceNormal);
            const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);
            const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();
            // const plane1Distance = -negatedFaceNormal.dot(plane1Center);
            plane1.fromPointNormal(plane1Center, negatedFaceNormal);
            planeIndex += 2;
        }
        return this;
    }
    /** Determines whether a bounding volume intersects the culling volume. */
    computeVisibility(boundingVolume) {
        // const planes = this.planes;
        let intersect = _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INSIDE;
        for (const plane of this.planes) {
            const result = boundingVolume.intersectPlane(plane);
            switch (result) {
                case _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.OUTSIDE:
                    // We are done
                    return _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.OUTSIDE;
                case _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INTERSECTING:
                    // If no other intersection is outside, return INTERSECTING
                    intersect = _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INTERSECTING;
                    break;
                default:
            }
        }
        return intersect;
    }
    /**
     * Determines whether a bounding volume intersects the culling volume.
     *
     * @param parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling
     *   volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then
     *   the parent (and therefore this) volume is completely inside plane[planeIndex]
     *   and that plane check can be skipped.
     */
    computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_3__.assert)(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');
        if (parentPlaneMask === CullingVolume.MASK_OUTSIDE ||
            parentPlaneMask === CullingVolume.MASK_INSIDE) {
            // parent is completely outside or completely inside, so this child is as well.
            return parentPlaneMask;
        }
        // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.
        // (Because if there are fewer than 31 planes, the upper bits wont be changed.)
        let mask = CullingVolume.MASK_INSIDE;
        const planes = this.planes;
        for (let k = 0; k < this.planes.length; ++k) {
            // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.
            const flag = k < 31 ? 1 << k : 0;
            if (k < 31 && (parentPlaneMask & flag) === 0) {
                // boundingVolume is known to be INSIDE this plane.
                continue;
            }
            const plane = planes[k];
            const result = boundingVolume.intersectPlane(plane);
            if (result === _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.OUTSIDE) {
                return CullingVolume.MASK_OUTSIDE;
            }
            else if (result === _constants_js__WEBPACK_IMPORTED_MODULE_0__.INTERSECTION.INTERSECTING) {
                mask |= flag;
            }
        }
        return mask;
    }
}
/**
 * For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value
 * represents the case where the object bounding volume is entirely outside the culling volume.
 */
CullingVolume.MASK_OUTSIDE = 0xffffffff;
/**
 * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value
 * represents the case where the object bounding volume is entirely inside the culling volume.
 */
CullingVolume.MASK_INSIDE = 0x00000000;
/**
 * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value
 * represents the case where the object bounding volume (may) intersect all planes of the culling volume.
 */
CullingVolume.MASK_INDETERMINATE = 0x7fffffff;


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/perspective-frustum.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/perspective-frustum.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PerspectiveFrustum: () => (/* binding */ PerspectiveFrustum)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector2.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/assert.js");
/* harmony import */ var _perspective_off_center_frustum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./perspective-off-center-frustum.js */ "./node_modules/@math.gl/culling/dist/lib/perspective-off-center-frustum.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md
// Note: This class is still an experimental export, mainly used by other test cases
// - It has not been fully adapted to math.gl conventions
// - Documentation has not been ported


const defined = (val) => val !== null && typeof val !== 'undefined';
/**
 * The viewing frustum is defined by 6 planes.
 * Each plane is represented by a {@link Vector4} object, where the x, y, and z components
 * define the unit vector normal to the plane, and the w component is the distance of the
 * plane from the origin/camera position.
 *
 * @alias PerspectiveFrustum
 *
 * @example
 * var frustum = new PerspectiveFrustum({
 *     fov : Math.PI_OVER_THREE,
 *     aspectRatio : canvas.clientWidth / canvas.clientHeight
 *     near : 1.0,
 *     far : 1000.0
 * });
 *
 * @see PerspectiveOffCenterFrustum
 */
class PerspectiveFrustum {
    constructor(options = {}) {
        this._offCenterFrustum = new _perspective_off_center_frustum_js__WEBPACK_IMPORTED_MODULE_0__.PerspectiveOffCenterFrustum();
        const { fov, aspectRatio, near = 1.0, far = 500000000.0, xOffset = 0.0, yOffset = 0.0 } = options;
        this.fov = fov;
        this.aspectRatio = aspectRatio;
        this.near = near;
        this.far = far;
        this.xOffset = xOffset;
        this.yOffset = yOffset;
    }
    /**
     * Returns a duplicate of a PerspectiveFrustum instance.
     */
    clone() {
        return new PerspectiveFrustum({
            aspectRatio: this.aspectRatio,
            fov: this.fov,
            near: this.near,
            far: this.far
        });
    }
    /**
     * Compares the provided PerspectiveFrustum componentwise and returns
     * <code>true</code> if they are equal, <code>false</code> otherwise.
     */
    equals(other) {
        if (!defined(other) || !(other instanceof PerspectiveFrustum)) {
            return false;
        }
        this._update();
        other._update();
        return (this.fov === other.fov &&
            this.aspectRatio === other.aspectRatio &&
            this.near === other.near &&
            this.far === other.far &&
            this._offCenterFrustum.equals(other._offCenterFrustum));
    }
    /**
     * Gets the perspective projection matrix computed from the view this.
     */
    get projectionMatrix() {
        this._update();
        return this._offCenterFrustum.projectionMatrix;
    }
    /**
     * The perspective projection matrix computed from the view frustum with an infinite far plane.
     */
    get infiniteProjectionMatrix() {
        this._update();
        return this._offCenterFrustum.infiniteProjectionMatrix;
    }
    /**
     * Gets the angle of the vertical field of view, in radians.
     */
    get fovy() {
        this._update();
        return this._fovy;
    }
    /**
     * @private
     */
    get sseDenominator() {
        this._update();
        return this._sseDenominator;
    }
    /**
     * Creates a culling volume for this this.ion.
     * @returns {CullingVolume} A culling volume at the given position and orientation.
     *
     * @example
     * // Check if a bounding volume intersects the this.
     * var cullingVolume = this.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);
     * var intersect = cullingVolume.computeVisibility(boundingVolume);
     */
    computeCullingVolume(
    /** A Vector3 defines the eye position. */
    position, 
    /** A Vector3 defines the view direction. */
    direction, 
    /** A Vector3 defines the up direction. */
    up) {
        this._update();
        return this._offCenterFrustum.computeCullingVolume(position, direction, up);
    }
    /**
     * Returns the pixel's width and height in meters.
     * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.
     *
     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.
     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.
     *
     * @example
     * // Example 1
     * // Get the width and height of a pixel.
     * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());
     *
     * @example
     * // Example 2
     * // Get the width and height of a pixel if the near plane was set to 'distance'.
     * // For example, get the size of a pixel of an image on a billboard.
     * var position = camera.position;
     * var direction = camera.direction;
     * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive
     * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector
     * var distance = Vector3.magnitude(toCenterProj);
     * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());
     */
    getPixelDimensions(
    /** The width of the drawing buffer. */
    drawingBufferWidth, 
    /** The height of the drawing buffer. */
    drawingBufferHeight, 
    /** The distance to the near plane in meters. */
    distance, 
    /** The object onto which to store the result. */
    result) {
        this._update();
        return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result || new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__.Vector2());
    }
    // eslint-disable-next-line complexity, max-statements
    _update() {
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(Number.isFinite(this.fov) &&
            Number.isFinite(this.aspectRatio) &&
            Number.isFinite(this.near) &&
            Number.isFinite(this.far));
        // 'fov, aspectRatio, near, or far parameters are not set.'
        const f = this._offCenterFrustum;
        if (this.fov !== this._fov ||
            this.aspectRatio !== this._aspectRatio ||
            this.near !== this._near ||
            this.far !== this._far ||
            this.xOffset !== this._xOffset ||
            this.yOffset !== this._yOffset) {
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(this.fov >= 0 && this.fov < Math.PI);
            // throw new DeveloperError('fov must be in the range [0, PI).');
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(this.aspectRatio > 0);
            // throw new DeveloperError('aspectRatio must be positive.');
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(this.near >= 0 && this.near < this.far);
            // throw new DeveloperError('near must be greater than zero and less than far.');
            this._aspectRatio = this.aspectRatio;
            this._fov = this.fov;
            this._fovy =
                this.aspectRatio <= 1
                    ? this.fov
                    : Math.atan(Math.tan(this.fov * 0.5) / this.aspectRatio) * 2.0;
            this._near = this.near;
            this._far = this.far;
            this._sseDenominator = 2.0 * Math.tan(0.5 * this._fovy);
            this._xOffset = this.xOffset;
            this._yOffset = this.yOffset;
            f.top = this.near * Math.tan(0.5 * this._fovy);
            f.bottom = -f.top;
            f.right = this.aspectRatio * f.top;
            f.left = -f.right;
            f.near = this.near;
            f.far = this.far;
            f.right += this.xOffset;
            f.left += this.xOffset;
            f.top += this.yOffset;
            f.bottom += this.yOffset;
        }
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/perspective-off-center-frustum.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/perspective-off-center-frustum.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PerspectiveOffCenterFrustum: () => (/* binding */ PerspectiveOffCenterFrustum)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/matrix4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/assert.js");
/* harmony import */ var _culling_volume_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./culling-volume.js */ "./node_modules/@math.gl/culling/dist/lib/culling-volume.js");
/* harmony import */ var _plane_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane.js */ "./node_modules/@math.gl/culling/dist/lib/plane.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md
// Note: This class is still an experimental export, mainly used by other test cases
// - It has not been fully adapted to math.gl conventions
// - Documentation has not been ported



const scratchPlaneUpVector = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchPlaneRightVector = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchPlaneNearCenter = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchPlaneFarCenter = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const scratchPlaneNormal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3();
class PerspectiveOffCenterFrustum {
    /**
     * The viewing frustum is defined by 6 planes.
     * Each plane is represented by a {@link Vector4} object, where the x, y, and z components
     * define the unit vector normal to the plane, and the w component is the distance of the
     * plane from the origin/camera position.
     *
     * @alias PerspectiveOffCenterFrustum
     *
     * @example
     * const frustum = new PerspectiveOffCenterFrustum({
     *     left : -1.0,
     *     right : 1.0,
     *     top : 1.0,
     *     bottom : -1.0,
     *     near : 1.0,
     *     far : 100.0
     * });
     *
     * @see PerspectiveFrustum
     */
    constructor(options = {}) {
        this._cullingVolume = new _culling_volume_js__WEBPACK_IMPORTED_MODULE_0__.CullingVolume([
            new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane(),
            new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane(),
            new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane(),
            new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane(),
            new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane(),
            new _plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane()
        ]);
        this._perspectiveMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4();
        this._infinitePerspective = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4();
        const { near = 1.0, far = 500000000.0 } = options;
        this.left = options.left;
        this._left = undefined;
        this.right = options.right;
        this._right = undefined;
        this.top = options.top;
        this._top = undefined;
        this.bottom = options.bottom;
        this._bottom = undefined;
        this.near = near;
        this._near = near;
        this.far = far;
        this._far = far;
    }
    /**
     * Returns a duplicate of a PerspectiveOffCenterFrustum instance.
     * @returns {PerspectiveOffCenterFrustum} A new PerspectiveFrustum instance.
     * */
    clone() {
        return new PerspectiveOffCenterFrustum({
            right: this.right,
            left: this.left,
            top: this.top,
            bottom: this.bottom,
            near: this.near,
            far: this.far
        });
    }
    /**
     * Compares the provided PerspectiveOffCenterFrustum componentwise and returns
     * <code>true</code> if they are equal, <code>false</code> otherwise.
     *
     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.
     */
    equals(other) {
        return (other &&
            other instanceof PerspectiveOffCenterFrustum &&
            this.right === other.right &&
            this.left === other.left &&
            this.top === other.top &&
            this.bottom === other.bottom &&
            this.near === other.near &&
            this.far === other.far);
    }
    /**
     * Gets the perspective projection matrix computed from the view frustum.
     * @memberof PerspectiveOffCenterFrustum.prototype
     * @type {Matrix4}
     *
     * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix
     */
    get projectionMatrix() {
        this._update();
        return this._perspectiveMatrix;
    }
    /**
     * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.
     * @memberof PerspectiveOffCenterFrustum.prototype
     * @type {Matrix4}
     *
     * @see PerspectiveOffCenterFrustum#projectionMatrix
     */
    get infiniteProjectionMatrix() {
        this._update();
        return this._infinitePerspective;
    }
    /**
     * Creates a culling volume for this frustum.
     * @returns {CullingVolume} A culling volume at the given position and orientation.
     *
     * @example
     * // Check if a bounding volume intersects the frustum.
     * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);
     * const intersect = cullingVolume.computeVisibility(boundingVolume);
     */
    // eslint-disable-next-line complexity, max-statements
    computeCullingVolume(
    /** A Vector3 defines the eye position. */
    position, 
    /** A Vector3 defines the view direction. */
    direction, 
    /** A Vector3 defines the up direction. */
    up) {
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(position, 'position is required.');
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(direction, 'direction is required.');
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(up, 'up is required.');
        const planes = this._cullingVolume.planes;
        up = scratchPlaneUpVector.copy(up).normalize();
        const right = scratchPlaneRightVector.copy(direction).cross(up).normalize();
        const nearCenter = scratchPlaneNearCenter
            .copy(direction)
            .multiplyByScalar(this.near)
            .add(position);
        const farCenter = scratchPlaneFarCenter
            .copy(direction)
            .multiplyByScalar(this.far)
            .add(position);
        let normal = scratchPlaneNormal;
        // Left plane computation
        normal.copy(right).multiplyByScalar(this.left).add(nearCenter).subtract(position).cross(up);
        planes[0].fromPointNormal(position, normal);
        // Right plane computation
        normal
            .copy(right)
            .multiplyByScalar(this.right)
            .add(nearCenter)
            .subtract(position)
            .cross(up)
            .negate();
        planes[1].fromPointNormal(position, normal);
        // Bottom plane computation
        normal
            .copy(up)
            .multiplyByScalar(this.bottom)
            .add(nearCenter)
            .subtract(position)
            .cross(right)
            .negate();
        planes[2].fromPointNormal(position, normal);
        // Top plane computation
        normal.copy(up).multiplyByScalar(this.top).add(nearCenter).subtract(position).cross(right);
        planes[3].fromPointNormal(position, normal);
        normal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.Vector3().copy(direction);
        // Near plane computation
        planes[4].fromPointNormal(nearCenter, normal);
        // Far plane computation
        normal.negate();
        planes[5].fromPointNormal(farCenter, normal);
        return this._cullingVolume;
    }
    /**
     * Returns the pixel's width and height in meters.
     *
     * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.
     *
     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.
     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.
     *
     * @example
     * // Example 1
     * // Get the width and height of a pixel.
     * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());
     *
     * @example
     * // Example 2
     * // Get the width and height of a pixel if the near plane was set to 'distance'.
     * // For example, get the size of a pixel of an image on a billboard.
     * const position = camera.position;
     * const direction = camera.direction;
     * const toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive
     * const toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector
     * const distance = Vector3.magnitude(toCenterProj);
     * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());
     */
    getPixelDimensions(
    /** The width of the drawing buffer. */
    drawingBufferWidth, 
    /** The height of the drawing buffer. */
    drawingBufferHeight, 
    /** The distance to the near plane in meters. */
    distance, 
    /** The object onto which to store the result. */
    result) {
        this._update();
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));
        // 'Both drawingBufferWidth and drawingBufferHeight are required.'
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(drawingBufferWidth > 0);
        // 'drawingBufferWidth must be greater than zero.'
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(drawingBufferHeight > 0);
        // 'drawingBufferHeight must be greater than zero.'
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(distance > 0);
        // 'distance is required.');
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(result);
        // 'A result object is required.');
        const inverseNear = 1.0 / this.near;
        let tanTheta = this.top * inverseNear;
        const pixelHeight = (2.0 * distance * tanTheta) / drawingBufferHeight;
        tanTheta = this.right * inverseNear;
        const pixelWidth = (2.0 * distance * tanTheta) / drawingBufferWidth;
        result.x = pixelWidth;
        result.y = pixelHeight;
        return result;
    }
    // eslint-disable-next-line complexity, max-statements
    _update() {
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(Number.isFinite(this.right) &&
            Number.isFinite(this.left) &&
            Number.isFinite(this.top) &&
            Number.isFinite(this.bottom) &&
            Number.isFinite(this.near) &&
            Number.isFinite(this.far));
        // throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');
        const { top, bottom, right, left, near, far } = this;
        if (top !== this._top ||
            bottom !== this._bottom ||
            left !== this._left ||
            right !== this._right ||
            near !== this._near ||
            far !== this._far) {
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(this.near > 0 && this.near < this.far, 'near must be greater than zero and less than far.');
            this._left = left;
            this._right = right;
            this._top = top;
            this._bottom = bottom;
            this._near = near;
            this._far = far;
            this._perspectiveMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4().frustum({
                left,
                right,
                bottom,
                top,
                near,
                far
            });
            this._infinitePerspective = new _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.Matrix4().frustum({
                left,
                right,
                bottom,
                top,
                near,
                far: Infinity
            });
        }
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/culling/dist/lib/plane.js":
/*!*********************************************************!*\
  !*** ./node_modules/@math.gl/culling/dist/lib/plane.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Plane: () => (/* binding */ Plane)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/classes/vector3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/assert.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
// This file is derived from the Cesium math library under Apache 2 license
// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md
/* eslint-disable */

const scratchPosition = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const scratchNormal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Vector3();
// A plane in Hessian Normal Form
class Plane {
    constructor(normal = [0, 0, 1], distance = 0) {
        this.normal = new _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        this.distance = -0;
        this.fromNormalDistance(normal, distance);
    }
    /** Creates a plane from a normal and a distance from the origin. */
    fromNormalDistance(normal, distance) {
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(distance));
        this.normal.from(normal).normalize();
        this.distance = distance;
        return this;
    }
    /** Creates a plane from a normal and a point on the plane. */
    fromPointNormal(point, normal) {
        point = scratchPosition.from(point);
        this.normal.from(normal).normalize();
        const distance = -this.normal.dot(point);
        this.distance = distance;
        return this;
    }
    /** Creates a plane from the general equation */
    fromCoefficients(a, b, c, d) {
        this.normal.set(a, b, c);
        (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)((0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.equals)(this.normal.len(), 1));
        this.distance = d;
        return this;
    }
    /** Duplicates a Plane instance. */
    clone() {
        return new Plane(this.normal, this.distance);
    }
    /** Compares the provided Planes by normal and distance */
    equals(right) {
        return (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.equals)(this.distance, right.distance) && (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_2__.equals)(this.normal, right.normal);
    }
    /** Computes the signed shortest distance of a point to a plane.
     * The sign of the distance determines which side of the plane the point is on.
     */
    getPointDistance(point) {
        return this.normal.dot(point) + this.distance;
    }
    /** Transforms the plane by the given transformation matrix. */
    transform(matrix4) {
        const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();
        const point = this.normal.scale(-this.distance).transform(matrix4);
        return this.fromPointNormal(point, normal);
    }
    projectPointOntoPlane(point, result = [0, 0, 0]) {
        const scratchPoint = scratchPosition.from(point);
        // projectedPoint = point - (normal.point + scale) * normal
        const pointDistance = this.getPointDistance(scratchPoint);
        const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);
        return scratchPoint.subtract(scaledNormal).to(result);
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/cut-by-grid.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/cut-by-grid.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cutPolygonByGrid: () => (/* binding */ cutPolygonByGrid),
/* harmony export */   cutPolylineByGrid: () => (/* binding */ cutPolylineByGrid)
/* harmony export */ });
/* harmony import */ var _lineclip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lineclip.js */ "./node_modules/@math.gl/polygon/dist/lineclip.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@math.gl/polygon/dist/utils.js");
/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */


function cutPolylineByGrid(positions, options) {
    const { size = 2, broken = false, gridResolution = 10, gridOffset = [0, 0], startIndex = 0, endIndex = positions.length } = options || {};
    const numPoints = (endIndex - startIndex) / size;
    let part = [];
    const result = [part];
    const a = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPointAtIndex)(positions, 0, size, startIndex);
    let b;
    let codeB;
    const cell = getGridCell(a, gridResolution, gridOffset, []);
    const scratchPoint = [];
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(part, a);
    for (let i = 1; i < numPoints; i++) {
        b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPointAtIndex)(positions, i, size, startIndex, b);
        codeB = (0,_lineclip_js__WEBPACK_IMPORTED_MODULE_0__.bitCode)(b, cell);
        while (codeB) {
            // find the intersection with the current cell
            (0,_lineclip_js__WEBPACK_IMPORTED_MODULE_0__.intersect)(a, b, codeB, cell, scratchPoint);
            const codeAlt = (0,_lineclip_js__WEBPACK_IMPORTED_MODULE_0__.bitCode)(scratchPoint, cell);
            if (codeAlt) {
                (0,_lineclip_js__WEBPACK_IMPORTED_MODULE_0__.intersect)(a, scratchPoint, codeAlt, cell, scratchPoint);
                codeB = codeAlt;
            }
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(part, scratchPoint);
            // move to the next cell
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copy)(a, scratchPoint);
            moveToNeighborCell(cell, gridResolution, codeB);
            if (broken && part.length > size) {
                part = [];
                result.push(part);
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(part, a);
            }
            codeB = (0,_lineclip_js__WEBPACK_IMPORTED_MODULE_0__.bitCode)(b, cell);
        }
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(part, b);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copy)(a, b);
    }
    return broken ? result : result[0];
}
const TYPE_INSIDE = 0;
const TYPE_BORDER = 1;
/**
 * Cuts a polygon by a pre-defined grid
 */
function cutPolygonByGrid(positions, holeIndices = null, options) {
    if (!positions.length) {
        // input is empty
        return [];
    }
    const { size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false } = options || {};
    const result = [];
    const queue = [
        {
            pos: positions,
            types: edgeTypes ? new Array(positions.length / size).fill(TYPE_BORDER) : null,
            holes: holeIndices || []
        }
    ];
    const bbox = [[], []];
    // @ts-ignore
    let cell = [];
    // Recursively bisect polygon until every part fit in a single grid cell
    while (queue.length) {
        const { pos, types, holes } = queue.shift();
        // Get the bounding box of the outer polygon
        getBoundingBox(pos, size, holes[0] || pos.length, bbox);
        cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);
        const code = (0,_lineclip_js__WEBPACK_IMPORTED_MODULE_0__.bitCode)(bbox[1], cell);
        if (code) {
            // Split the outer ring at the boundary
            let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);
            const polygonLow = { pos: parts[0].pos, types: parts[0].types, holes: [] };
            const polygonHigh = { pos: parts[1].pos, types: parts[1].types, holes: [] };
            queue.push(polygonLow, polygonHigh);
            // Split each hole at the boundary
            for (let i = 0; i < holes.length; i++) {
                parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);
                if (parts[0]) {
                    polygonLow.holes.push(polygonLow.pos.length);
                    polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);
                    if (edgeTypes) {
                        polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);
                    }
                }
                if (parts[1]) {
                    polygonHigh.holes.push(polygonHigh.pos.length);
                    polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);
                    if (edgeTypes) {
                        polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);
                    }
                }
            }
        }
        else {
            // Polygon fits in a single cell, no more processing required
            const polygon = { positions: pos };
            if (edgeTypes) {
                polygon.edgeTypes = types;
            }
            if (holes.length) {
                polygon.holeIndices = holes;
            }
            result.push(polygon);
        }
    }
    return result;
}
// edgeTypes:
// TYPE_BORDER - edge from the original polygon
// TYPE_INSIDE - inside the original polygon
// eslint-disable-next-line max-params
function bisectPolygon(positions, edgeTypes, size, startIndex, endIndex, bbox, edge) {
    const numPoints = (endIndex - startIndex) / size;
    const resultLow = [];
    const resultHigh = [];
    const typesLow = [];
    const typesHigh = [];
    const scratchPoint = [];
    let p;
    let side;
    let type;
    const prev = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPointAtIndex)(positions, numPoints - 1, size, startIndex);
    let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);
    let prevType = edgeTypes && edgeTypes[numPoints - 1];
    let lowPointCount = 0;
    let highPointCount = 0;
    for (let i = 0; i < numPoints; i++) {
        p = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPointAtIndex)(positions, i, size, startIndex, p);
        side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);
        type = edgeTypes && edgeTypes[startIndex / size + i];
        // if segment goes through the boundary, add an intersection
        if (side && prevSide && prevSide !== side) {
            (0,_lineclip_js__WEBPACK_IMPORTED_MODULE_0__.intersect)(prev, p, edge, bbox, scratchPoint);
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(resultLow, scratchPoint) && typesLow.push(prevType);
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(resultHigh, scratchPoint) && typesHigh.push(prevType);
        }
        if (side <= 0) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(resultLow, p) && typesLow.push(type);
            lowPointCount -= side;
        }
        else if (typesLow.length) {
            typesLow[typesLow.length - 1] = TYPE_INSIDE;
        }
        if (side >= 0) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(resultHigh, p) && typesHigh.push(type);
            highPointCount += side;
        }
        else if (typesHigh.length) {
            typesHigh[typesHigh.length - 1] = TYPE_INSIDE;
        }
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.copy)(prev, p);
        prevSide = side;
        prevType = type;
    }
    return [
        lowPointCount ? { pos: resultLow, types: edgeTypes && typesLow } : null,
        highPointCount ? { pos: resultHigh, types: edgeTypes && typesHigh } : null
    ];
}
function getGridCell(p, gridResolution, gridOffset, out) {
    const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];
    const bottom = Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];
    out[0] = left;
    out[1] = bottom;
    out[2] = left + gridResolution;
    out[3] = bottom + gridResolution;
    return out;
}
function moveToNeighborCell(cell, gridResolution, edge) {
    if (edge & 8) {
        // top
        cell[1] += gridResolution;
        cell[3] += gridResolution;
    }
    else if (edge & 4) {
        // bottom
        cell[1] -= gridResolution;
        cell[3] -= gridResolution;
    }
    else if (edge & 2) {
        // right
        cell[0] += gridResolution;
        cell[2] += gridResolution;
    }
    else if (edge & 1) {
        // left
        cell[0] -= gridResolution;
        cell[2] -= gridResolution;
    }
}
function getBoundingBox(positions, size, endIndex, out) {
    let minX = Infinity;
    let maxX = -Infinity;
    let minY = Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < endIndex; i += size) {
        const x = positions[i];
        const y = positions[i + 1];
        minX = x < minX ? x : minX;
        maxX = x > maxX ? x : maxX;
        minY = y < minY ? y : minY;
        maxY = y > maxY ? y : maxY;
    }
    out[0][0] = minX;
    out[0][1] = minY;
    out[1][0] = maxX;
    out[1][1] = maxY;
    return out;
}
function concatInPlace(arr1, arr2) {
    for (let i = 0; i < arr2.length; i++) {
        arr1.push(arr2[i]);
    }
    return arr1;
}


/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/cut-by-mercator-bounds.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/cut-by-mercator-bounds.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cutPolygonByMercatorBounds: () => (/* binding */ cutPolygonByMercatorBounds),
/* harmony export */   cutPolylineByMercatorBounds: () => (/* binding */ cutPolylineByMercatorBounds)
/* harmony export */ });
/* harmony import */ var _cut_by_grid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cut-by-grid.js */ "./node_modules/@math.gl/polygon/dist/cut-by-grid.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@math.gl/polygon/dist/utils.js");


// https://en.wikipedia.org/wiki/Web_Mercator_projection
const DEFAULT_MAX_LATITUDE = 85.051129;
/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */
function cutPolylineByMercatorBounds(positions, options) {
    const { size = 2, startIndex = 0, endIndex = positions.length, normalize = true } = options || {};
    // Remap longitudes so that each segment takes the shorter path
    const newPositions = positions.slice(startIndex, endIndex);
    wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);
    const parts = (0,_cut_by_grid_js__WEBPACK_IMPORTED_MODULE_0__.cutPolylineByGrid)(newPositions, {
        size,
        broken: true,
        gridResolution: 360,
        gridOffset: [-180, -180]
    });
    if (normalize) {
        // Each part is guaranteed to be in a single copy of the world
        // Map longitudes back to [-180, 180]
        for (const part of parts) {
            shiftLongitudesIntoRange(part, size);
        }
    }
    return parts;
}
/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */
function cutPolygonByMercatorBounds(positions, holeIndices = null, options) {
    const { size = 2, normalize = true, edgeTypes = false } = options || {};
    holeIndices = holeIndices || [];
    const newPositions = [];
    const newHoleIndices = [];
    let srcStartIndex = 0;
    let targetIndex = 0;
    for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {
        // srcStartIndex/srcEndIndex define the ring in the original positions
        const srcEndIndex = holeIndices[ringIndex] || positions.length;
        // targetStartIndex/targetIndex define the ring in newPositions
        const targetStartIndex = targetIndex;
        // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices
        // The insertion point is defined by the vertex closest to the pole
        // Split the the ring by the insertion point when copying to newPositions
        const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);
        for (let i = splitIndex; i < srcEndIndex; i++) {
            newPositions[targetIndex++] = positions[i];
        }
        for (let i = srcStartIndex; i < splitIndex; i++) {
            newPositions[targetIndex++] = positions[i];
        }
        // Remap longitudes so that each segment takes the shorter path
        wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);
        // Handle the case when the ring contains a pole
        insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);
        srcStartIndex = srcEndIndex;
        newHoleIndices[ringIndex] = targetIndex;
    }
    newHoleIndices.pop();
    const parts = (0,_cut_by_grid_js__WEBPACK_IMPORTED_MODULE_0__.cutPolygonByGrid)(newPositions, newHoleIndices, {
        size,
        gridResolution: 360,
        gridOffset: [-180, -180],
        edgeTypes
    });
    if (normalize) {
        // Each part is guaranteed to be in a single copy of the world
        // Map longitudes back to [-180, 180]
        for (const part of parts) {
            // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us
            shiftLongitudesIntoRange(part.positions, size);
        }
    }
    return parts;
}
/* Helpers */
// See comments for insertPoleVertices
function findSplitIndex(positions, size, startIndex, endIndex) {
    let maxLat = -1;
    let pointIndex = -1;
    for (let i = startIndex + 1; i < endIndex; i += size) {
        const lat = Math.abs(positions[i]);
        if (lat > maxLat) {
            maxLat = lat;
            pointIndex = i - 1;
        }
    }
    return pointIndex;
}
// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png
//
// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge
// of map into the polygon. This requires adding two vertices that represent the pole, by
// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.
//
// We select the insertion position carefully so that the inserted line segments do not
// intersect with the ring itself. This is ensured by findSplitIndex, which returns the
// vertex closest to the pole.
function insertPoleVertices(positions, size, startIndex, endIndex, maxLatitude = DEFAULT_MAX_LATITUDE) {
    // Check if the ring contains a pole
    const firstLng = positions[startIndex];
    const lastLng = positions[endIndex - size];
    if (Math.abs(firstLng - lastLng) > 180) {
        // The ring does not make a round trip
        // Add the nearest pole to the vertices so that the polygon tesselates correctly
        const p = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPointAtIndex)(positions, 0, size, startIndex);
        // Copy the first vertex to the world of the last vertex
        p[0] += Math.round((lastLng - firstLng) / 360) * 360;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(positions, p);
        // Project the copied vertex to the edge of the map
        p[1] = Math.sign(p[1]) * maxLatitude;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(positions, p);
        // Project the first vertex to the edge of the map
        p[0] = firstLng;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.push)(positions, p);
    }
}
function wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {
    let prevLng = positions[0];
    let lng;
    for (let i = startIndex; i < endIndex; i += size) {
        lng = positions[i];
        const delta = lng - prevLng;
        if (delta > 180 || delta < -180) {
            lng -= Math.round(delta / 360) * 360;
        }
        positions[i] = prevLng = lng;
    }
}
function shiftLongitudesIntoRange(positions, size) {
    let refLng;
    const pointCount = positions.length / size;
    // Find a longitude that is not on the edge of a world
    // Which we will use to determine which world copy it is
    for (let i = 0; i < pointCount; i++) {
        refLng = positions[i * size];
        if ((refLng + 180) % 360 !== 0) {
            break;
        }
    }
    const delta = -Math.round(refLng / 360) * 360;
    if (delta === 0) {
        return;
    }
    for (let i = 0; i < pointCount; i++) {
        positions[i * size] += delta;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/earcut.js":
/*!******************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/earcut.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   earcut: () => (/* binding */ earcut)
/* harmony export */ });
/* harmony import */ var _polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polygon-utils.js */ "./node_modules/@math.gl/polygon/dist/polygon-utils.js");
/*
  Adapted from https://github.com/mapbox/earcut to allow passing in
  of outline and hole areas using the `areas` parameter. As the
  areas are calcuted as part of classifying the polygon rings
  we can pass them in again to avoid recomputation

  ISC License

  Copyright (c) 2016, Mapbox

  Permission to use, copy, modify, and/or distribute this software for any purpose
  with or without fee is hereby granted, provided that the above copyright notice
  and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
  THIS SOFTWARE.

 */

/**
 * Computes a triangulation of a polygon
 * @param positions a flat array of the vertex positions that define the polygon.
 * @param holeIndices an array of hole indices if any (e.g. [5, 8] for a 12-vertex input would mean one hole with vertices 5–7 and another with 8–11).
 * @param dim the number of elements in each vertex. Size `2` will interpret `positions` as `[x0, y0, x1, y1, ...]` and size `3` will interpret `positions` as `[x0, y0, z0, x1, y1, z1, ...]`. Default `2`.
 * @param areas areas of outer polygon and holes as computed by `getPolygonSignedArea()`. Can be optionally supplied to speed up triangulation
 * @returns array of indices into the `positions` array that describes the triangulation of the polygon
 * Adapted from https://github.com/mapbox/earcut
 */
function earcut(positions, holeIndices, dim = 2, areas, plane = 'xy') {
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : positions.length;
    let outerNode = linkedList(positions, 0, outerLen, dim, true, areas && areas[0], plane);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev)
        return triangles;
    let invSize;
    let maxX;
    let maxY;
    let minX;
    let minY;
    let x;
    let y;
    if (hasHoles)
        outerNode = eliminateHoles(positions, holeIndices, outerNode, dim, areas, plane);
    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (positions.length > 80 * dim) {
        minX = maxX = positions[0];
        minY = maxY = positions[1];
        for (let i = dim; i < outerLen; i += dim) {
            x = positions[i];
            y = positions[i + 1];
            if (x < minX)
                minX = x;
            if (y < minY)
                minY = y;
            if (x > maxX)
                maxX = x;
            if (y > maxY)
                maxY = y;
        }
        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 32767 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
    return triangles;
}
// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise, area, plane) {
    let i;
    let last;
    if (area === undefined) {
        area = (0,_polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPolygonSignedArea)(data, { start, end, size: dim, plane });
    }
    let i0 = _polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.DimIndex[plane[0]];
    let i1 = _polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.DimIndex[plane[1]];
    // Note that the signed area calculation in math.gl
    // has the opposite sign to that which was originally
    // present in earcut, thus the `< 0` is reversed
    if (clockwise === area < 0) {
        for (i = start; i < end; i += dim)
            last = insertNode(i, data[i + i0], data[i + i1], last);
    }
    else {
        for (i = end - dim; i >= start; i -= dim)
            last = insertNode(i, data[i + i0], data[i + i1], last);
    }
    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }
    return last;
}
// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start)
        return start;
    if (!end)
        end = start;
    let p = start;
    let again;
    do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next)
                break;
            again = true;
        }
        else {
            p = p.next;
        }
    } while (again || p !== end);
    return end;
}
// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear)
        return;
    // interlink polygon nodes in z-order
    if (!pass && invSize)
        indexCurve(ear, minX, minY, invSize);
    let stop = ear;
    let prev;
    let next;
    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push((prev.i / dim) | 0);
            triangles.push((ear.i / dim) | 0);
            triangles.push((next.i / dim) | 0);
            removeNode(ear);
            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
                // if this didn't work, try curing all small self-intersections locally
            }
            else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
                // as a last resort, try splitting the remaining polygon into two
            }
            else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }
            break;
        }
    }
}
// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    const a = ear.prev;
    const b = ear;
    const c = ear.next;
    if (area(a, b, c) >= 0)
        return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear
    const ax = a.x;
    const bx = b.x;
    const cx = c.x;
    const ay = a.y;
    const by = b.y;
    const cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    const x0 = ax < bx ? (ax < cx ? ax : cx) : bx < cx ? bx : cx;
    const y0 = ay < by ? (ay < cy ? ay : cy) : by < cy ? by : cy;
    const x1 = ax > bx ? (ax > cx ? ax : cx) : bx > cx ? bx : cx;
    const y1 = ay > by ? (ay > cy ? ay : cy) : by > cy ? by : cy;
    let p = c.next;
    while (p !== a) {
        if (p.x >= x0 &&
            p.x <= x1 &&
            p.y >= y0 &&
            p.y <= y1 &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0)
            return false;
        p = p.next;
    }
    return true;
}
function isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev;
    const b = ear;
    const c = ear.next;
    if (area(a, b, c) >= 0)
        return false; // reflex, can't be an ear
    const ax = a.x;
    const bx = b.x;
    const cx = c.x;
    const ay = a.y;
    const by = b.y;
    const cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    const x0 = ax < bx ? (ax < cx ? ax : cx) : bx < cx ? bx : cx;
    const y0 = ay < by ? (ay < cy ? ay : cy) : by < cy ? by : cy;
    const x1 = ax > bx ? (ax > cx ? ax : cx) : bx > cx ? bx : cx;
    const y1 = ay > by ? (ay > cy ? ay : cy) : by > cy ? by : cy;
    // z-order range for the current triangle bbox;
    const minZ = zOrder(x0, y0, minX, minY, invSize);
    const maxZ = zOrder(x1, y1, minX, minY, invSize);
    let p = ear.prevZ;
    let n = ear.nextZ;
    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p.x >= x0 &&
            p.x <= x1 &&
            p.y >= y0 &&
            p.y <= y1 &&
            p !== a &&
            p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0)
            return false;
        p = p.prevZ;
        if (n.x >= x0 &&
            n.x <= x1 &&
            n.y >= y0 &&
            n.y <= y1 &&
            n !== a &&
            n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0)
            return false;
        n = n.nextZ;
    }
    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p.x >= x0 &&
            p.x <= x1 &&
            p.y >= y0 &&
            p.y <= y1 &&
            p !== a &&
            p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0)
            return false;
        p = p.prevZ;
    }
    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n.x >= x0 &&
            n.x <= x1 &&
            n.y >= y0 &&
            n.y <= y1 &&
            n !== a &&
            n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0)
            return false;
        n = n.nextZ;
    }
    return true;
}
// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
        const a = p.prev;
        const b = p.next.next;
        if (!equals(a, b) &&
            intersects(a, p, p.next, b) &&
            locallyInside(a, b) &&
            locallyInside(b, a)) {
            triangles.push((a.i / dim) | 0);
            triangles.push((p.i / dim) | 0);
            triangles.push((b.i / dim) | 0);
            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    } while (p !== start);
    return filterPoints(p);
}
// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    let a = start;
    do {
        let b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                let c = splitPolygon(a, b);
                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);
                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}
// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim, areas, plane) {
    const queue = [];
    let i;
    let len;
    let start;
    let end;
    let list;
    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false, areas && areas[i + 1], plane);
        if (list === list.next)
            list.steiner = true;
        queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        outerNode = eliminateHole(queue[i], outerNode);
    }
    return outerNode;
}
function compareX(a, b) {
    return a.x - b.x;
}
// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    const bridge = findHoleBridge(hole, outerNode);
    if (!bridge) {
        return outerNode;
    }
    const bridgeReverse = splitPolygon(bridge, hole);
    // filter collinear points around the cuts
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
}
// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    let p = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity;
    let m;
    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            const x = p.x + ((hy - p.y) * (p.next.x - p.x)) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx)
                    return m; // hole touches outer segment; pick leftmost endpoint
            }
        }
        p = p.next;
    } while (p !== outerNode);
    if (!m)
        return null;
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point
    const stop = m;
    const mx = m.x;
    const my = m.y;
    let tanMin = Infinity;
    let tan;
    p = m;
    do {
        if (hx >= p.x &&
            p.x >= mx &&
            hx !== p.x &&
            pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
            if (locallyInside(p, hole) &&
                (tan < tanMin ||
                    (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    } while (p !== stop);
    return m;
}
// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
        if (p.z === 0)
            p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
}
// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    let e;
    let i;
    let inSize = 1;
    let numMerges;
    let p;
    let pSize;
    let q;
    let qSize;
    let tail;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q)
                    break;
            }
            qSize = inSize;
            while (pSize > 0 || (qSize > 0 && q)) {
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                }
                else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail)
                    tail.nextZ = e;
                else
                    list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    } while (numMerges > 1);
    return list;
}
// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = ((x - minX) * invSize) | 0;
    y = ((y - minY) * invSize) | 0;
    x = (x | (x << 8)) & 0x00ff00ff;
    x = (x | (x << 4)) & 0x0f0f0f0f;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;
    y = (y | (y << 8)) & 0x00ff00ff;
    y = (y | (y << 4)) & 0x0f0f0f0f;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;
    return x | (y << 1);
}
// find the leftmost node of a polygon ring
function getLeftmost(start) {
    let p = start;
    let leftmost = start;
    do {
        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y))
            leftmost = p;
        p = p.next;
    } while (p !== start);
    return leftmost;
}
// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return ((cx - px) * (ay - py) >= (ax - px) * (cy - py) &&
        (ax - px) * (by - py) >= (bx - px) * (ay - py) &&
        (bx - px) * (cy - py) >= (cx - px) * (by - py));
}
// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return (a.next.i !== b.i &&
        a.prev.i !== b.i &&
        !intersectsPolygon(a, b) && // dones't intersect other edges
        ((locallyInside(a, b) &&
            locallyInside(b, a) &&
            middleInside(a, b) && // locally visible
            (area(a.prev, a, b.prev) || area(a, b.prev, b))) || // does not create opposite-facing sectors
            (equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0))); // special zero-length case
}
// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    const o1 = sign(area(p1, q1, p2));
    const o2 = sign(area(p1, q1, q2));
    const o3 = sign(area(p2, q2, p1));
    const o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4)
        return true; // general case
    if (o1 === 0 && onSegment(p1, p2, q1))
        return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && onSegment(p1, q2, q1))
        return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && onSegment(p2, p1, q2))
        return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && onSegment(p2, q1, q2))
        return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
    return false;
}
// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p, q, r) {
    return (q.x <= Math.max(p.x, r.x) &&
        q.x >= Math.min(p.x, r.x) &&
        q.y <= Math.max(p.y, r.y) &&
        q.y >= Math.min(p.y, r.y));
}
function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    let p = a;
    do {
        if (p.i !== a.i &&
            p.next.i !== a.i &&
            p.i !== b.i &&
            p.next.i !== b.i &&
            intersects(p, p.next, a, b))
            return true;
        p = p.next;
    } while (p !== a);
    return false;
}
// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0
        ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0
        : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    let p = a;
    let inside = false;
    const px = (a.x + b.x) / 2;
    const py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py &&
            p.next.y !== p.y &&
            px < ((p.next.x - p.x) * (py - p.y)) / (p.next.y - p.y) + p.x)
            inside = !inside;
        p = p.next;
    } while (p !== a);
    return inside;
}
// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    const a2 = new Vertex(a.i, a.x, a.y);
    const b2 = new Vertex(b.i, b.x, b.y);
    const an = a.next;
    const bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    const p = new Vertex(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    }
    else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ)
        p.prevZ.nextZ = p.nextZ;
    if (p.nextZ)
        p.nextZ.prevZ = p.prevZ;
}
class Vertex {
    constructor(i, x, y) {
        // previous and next vertex nodes in a polygon ring
        this.prev = null;
        this.next = null;
        // z-order curve value
        this.z = 0;
        // previous and next nodes in z-order
        this.prevZ = null;
        this.nextZ = null;
        // indicates whether this is a steiner point
        this.steiner = false;
        this.i = i;
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Polygon: () => (/* reexport safe */ _polygon_js__WEBPACK_IMPORTED_MODULE_0__.Polygon),
/* harmony export */   WINDING: () => (/* reexport safe */ _polygon_utils_js__WEBPACK_IMPORTED_MODULE_1__.WINDING),
/* harmony export */   _Polygon: () => (/* reexport safe */ _polygon_js__WEBPACK_IMPORTED_MODULE_0__.Polygon),
/* harmony export */   clipPolygon: () => (/* reexport safe */ _lineclip_js__WEBPACK_IMPORTED_MODULE_3__.clipPolygon),
/* harmony export */   clipPolyline: () => (/* reexport safe */ _lineclip_js__WEBPACK_IMPORTED_MODULE_3__.clipPolyline),
/* harmony export */   cutPolygonByGrid: () => (/* reexport safe */ _cut_by_grid_js__WEBPACK_IMPORTED_MODULE_4__.cutPolygonByGrid),
/* harmony export */   cutPolygonByMercatorBounds: () => (/* reexport safe */ _cut_by_mercator_bounds_js__WEBPACK_IMPORTED_MODULE_5__.cutPolygonByMercatorBounds),
/* harmony export */   cutPolylineByGrid: () => (/* reexport safe */ _cut_by_grid_js__WEBPACK_IMPORTED_MODULE_4__.cutPolylineByGrid),
/* harmony export */   cutPolylineByMercatorBounds: () => (/* reexport safe */ _cut_by_mercator_bounds_js__WEBPACK_IMPORTED_MODULE_5__.cutPolylineByMercatorBounds),
/* harmony export */   earcut: () => (/* reexport safe */ _earcut_js__WEBPACK_IMPORTED_MODULE_2__.earcut),
/* harmony export */   forEachSegmentInPolygon: () => (/* reexport safe */ _polygon_utils_js__WEBPACK_IMPORTED_MODULE_1__.forEachSegmentInPolygon),
/* harmony export */   getPolygonSignedArea: () => (/* reexport safe */ _polygon_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPolygonSignedArea),
/* harmony export */   getPolygonWindingDirection: () => (/* reexport safe */ _polygon_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPolygonWindingDirection),
/* harmony export */   modifyPolygonWindingDirection: () => (/* reexport safe */ _polygon_utils_js__WEBPACK_IMPORTED_MODULE_1__.modifyPolygonWindingDirection)
/* harmony export */ });
/* harmony import */ var _polygon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polygon.js */ "./node_modules/@math.gl/polygon/dist/polygon.js");
/* harmony import */ var _polygon_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polygon-utils.js */ "./node_modules/@math.gl/polygon/dist/polygon-utils.js");
/* harmony import */ var _earcut_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./earcut.js */ "./node_modules/@math.gl/polygon/dist/earcut.js");
/* harmony import */ var _lineclip_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lineclip.js */ "./node_modules/@math.gl/polygon/dist/lineclip.js");
/* harmony import */ var _cut_by_grid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cut-by-grid.js */ "./node_modules/@math.gl/polygon/dist/cut-by-grid.js");
/* harmony import */ var _cut_by_mercator_bounds_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cut-by-mercator-bounds.js */ "./node_modules/@math.gl/polygon/dist/cut-by-mercator-bounds.js");






/** @deprecated */



/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/lineclip.js":
/*!********************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/lineclip.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bitCode: () => (/* binding */ bitCode),
/* harmony export */   clipPolygon: () => (/* binding */ clipPolygon),
/* harmony export */   clipPolyline: () => (/* binding */ clipPolyline),
/* harmony export */   intersect: () => (/* binding */ intersect)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@math.gl/polygon/dist/utils.js");
/*
  Adapted from https://github.com/mapbox/lineclip to work with flat arrays
  and 3d positions

  ISC License

  Copyright (c) 2015, Mapbox

  Permission to use, copy, modify, and/or distribute this software for any purpose
  with or without fee is hereby granted, provided that the above copyright notice
  and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
  THIS SOFTWARE.

 */
/* eslint-disable max-statements, max-depth, complexity */

/**
 * Cohen-Sutherland line clipping algorithm, adapted to efficiently
 * handle polylines rather than just segments
 */
function clipPolyline(positions, bbox, options) {
    const { size = 2, startIndex = 0, endIndex = positions.length } = options || {};
    const numPoints = (endIndex - startIndex) / size;
    const result = [];
    let part = [];
    let a;
    let b;
    let codeA = -1;
    let codeB;
    let lastCode;
    for (let i = 1; i < numPoints; i++) {
        a = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPointAtIndex)(positions, i - 1, size, startIndex, a);
        b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPointAtIndex)(positions, i, size, startIndex, b);
        if (codeA < 0) {
            codeA = bitCode(a, bbox);
        }
        codeB = lastCode = bitCode(b, bbox);
        // eslint-disable-next-line no-constant-condition
        while (true) {
            if (!(codeA | codeB)) {
                // accept
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.push)(part, a);
                if (codeB !== lastCode) {
                    // segment went outside
                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.push)(part, b);
                    if (i < numPoints - 1) {
                        // start a new line
                        result.push(part);
                        part = [];
                    }
                }
                else if (i === numPoints - 1) {
                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.push)(part, b);
                }
                break;
            }
            else if (codeA & codeB) {
                // trivial reject
                break;
            }
            else if (codeA) {
                // a outside, intersect with clip edge
                intersect(a, b, codeA, bbox, a);
                codeA = bitCode(a, bbox);
            }
            else {
                // b outside
                intersect(a, b, codeB, bbox, b);
                codeB = bitCode(b, bbox);
            }
        }
        codeA = lastCode;
    }
    if (part.length)
        result.push(part);
    return result;
}
/**
 * Sutherland-Hodgeman polygon clipping algorithm
 * polygon must be closed (first vertex == last vertex)
 */
function clipPolygon(positions, bbox, options) {
    const { size = 2, endIndex = positions.length } = options || {};
    let { startIndex = 0 } = options || {};
    let numPoints = (endIndex - startIndex) / size;
    let result;
    let p;
    let prev;
    let inside;
    let prevInside;
    // clip against each side of the clip rectangle
    for (let edge = 1; edge <= 8; edge *= 2) {
        result = [];
        prev = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPointAtIndex)(positions, numPoints - 1, size, startIndex, prev);
        prevInside = !(bitCode(prev, bbox) & edge);
        for (let i = 0; i < numPoints; i++) {
            p = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPointAtIndex)(positions, i, size, startIndex, p);
            inside = !(bitCode(p, bbox) & edge);
            // if segment goes through the clip window, add an intersection
            if (inside !== prevInside)
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.push)(result, intersect(prev, p, edge, bbox));
            if (inside)
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.push)(result, p); // add a point if it's inside
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copy)(prev, p);
            prevInside = inside;
        }
        // close loop
        positions = result;
        startIndex = 0;
        numPoints = result.length / size;
        if (!numPoints)
            break;
    }
    return result;
}
/** intersect a segment against one of the 4 lines that make up the bbox */
function intersect(a, b, edge, bbox, out = []) {
    let t;
    // Forces out[snapI] to be on the bbox edge
    // Interpolation introduces precision issue which may cause lineclip to be
    // stuck in an infinite loop
    let snap;
    if (edge & 8) {
        // top
        t = (bbox[3] - a[1]) / (b[1] - a[1]);
        snap = 3;
    }
    else if (edge & 4) {
        // bottom
        t = (bbox[1] - a[1]) / (b[1] - a[1]);
        snap = 1;
    }
    else if (edge & 2) {
        // right
        t = (bbox[2] - a[0]) / (b[0] - a[0]);
        snap = 2;
    }
    else if (edge & 1) {
        // left
        t = (bbox[0] - a[0]) / (b[0] - a[0]);
        snap = 0;
    }
    else {
        return null;
    }
    for (let i = 0; i < a.length; i++) {
        out[i] = (snap & 1) === i ? bbox[snap] : t * (b[i] - a[i]) + a[i];
    }
    return out;
}
/**
 * bit code reflects the point position relative to the bbox:
 *         left  mid  right
 *    top  1001  1000  1010
 *    mid  0001  0000  0010
 * bottom  0101  0100  0110
 */
function bitCode(p, bbox) {
    let code = 0;
    if (p[0] < bbox[0])
        code |= 1;
    // left
    else if (p[0] > bbox[2])
        code |= 2; // right
    if (p[1] < bbox[1])
        code |= 4;
    // bottom
    else if (p[1] > bbox[3])
        code |= 8; // top
    return code;
}


/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/polygon-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/polygon-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DimIndex: () => (/* binding */ DimIndex),
/* harmony export */   WINDING: () => (/* binding */ WINDING),
/* harmony export */   forEachSegmentInPolygon: () => (/* binding */ forEachSegmentInPolygon),
/* harmony export */   forEachSegmentInPolygonPoints: () => (/* binding */ forEachSegmentInPolygonPoints),
/* harmony export */   getPolygonSignedArea: () => (/* binding */ getPolygonSignedArea),
/* harmony export */   getPolygonSignedAreaPoints: () => (/* binding */ getPolygonSignedAreaPoints),
/* harmony export */   getPolygonWindingDirection: () => (/* binding */ getPolygonWindingDirection),
/* harmony export */   getPolygonWindingDirectionPoints: () => (/* binding */ getPolygonWindingDirectionPoints),
/* harmony export */   modifyPolygonWindingDirection: () => (/* binding */ modifyPolygonWindingDirection),
/* harmony export */   modifyPolygonWindingDirectionPoints: () => (/* binding */ modifyPolygonWindingDirectionPoints)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */

const WINDING = {
    CLOCKWISE: 1,
    COUNTER_CLOCKWISE: -1
};
/**
 * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.
 * Note: points are modified in-place.
 * @param points An array that represents points of the polygon.
 * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.
 * @param options Parameters of the polygon.
 * @return Returns true if the winding direction was changed.
 */
function modifyPolygonWindingDirection(points, direction, options = {}) {
    const windingDirection = getPolygonWindingDirection(points, options);
    if (windingDirection !== direction) {
        reversePolygon(points, options);
        return true;
    }
    return false;
}
/**
 * Returns winding direction of the polygon.
 * @param points An array that represents points of the polygon.
 * @param options Parameters of the polygon.
 * @returns Winding direction of the polygon.
 */
function getPolygonWindingDirection(points, options = {}) {
    return Math.sign(getPolygonSignedArea(points, options));
}
const DimIndex = {
    x: 0,
    y: 1,
    z: 2
};
/**
 * Returns signed area of the polygon.
 * @param points An array that represents points of the polygon.
 * @param options Parameters of the polygon.
 * @returns Signed area of the polygon.
 * https://en.wikipedia.org/wiki/Shoelace_formula
 */
function getPolygonSignedArea(points, options = {}) {
    const { start = 0, end = points.length, plane = 'xy' } = options;
    const dim = options.size || 2;
    let area = 0;
    const i0 = DimIndex[plane[0]];
    const i1 = DimIndex[plane[1]];
    for (let i = start, j = end - dim; i < end; i += dim) {
        area += (points[i + i0] - points[j + i0]) * (points[i + i1] + points[j + i1]);
        j = i;
    }
    return area / 2;
}
/**
 * Calls the visitor callback for each segment in the polygon.
 * @param points An array that represents points of the polygon
 * @param visitor A callback to call for each segment.
 * @param options Parameters of the polygon.
 */
function forEachSegmentInPolygon(points, visitor, options = {}) {
    const { start = 0, end = points.length, size = 2, isClosed } = options;
    const numPoints = (end - start) / size;
    for (let i = 0; i < numPoints - 1; ++i) {
        visitor(points[start + i * size], points[start + i * size + 1], points[start + (i + 1) * size], points[start + (i + 1) * size + 1], i, i + 1);
    }
    const endPointIndex = start + (numPoints - 1) * size;
    const isClosedEx = isClosed ||
        ((0,_math_gl_core__WEBPACK_IMPORTED_MODULE_0__.equals)(points[start], points[endPointIndex]) &&
            (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_0__.equals)(points[start + 1], points[endPointIndex + 1]));
    if (!isClosedEx) {
        visitor(points[endPointIndex], points[endPointIndex + 1], points[start], points[start + 1], numPoints - 1, 0);
    }
}
function reversePolygon(points, options) {
    const { start = 0, end = points.length, size = 2 } = options;
    const numPoints = (end - start) / size;
    const numSwaps = Math.floor(numPoints / 2);
    for (let i = 0; i < numSwaps; ++i) {
        const b1 = start + i * size;
        const b2 = start + (numPoints - 1 - i) * size;
        for (let j = 0; j < size; ++j) {
            const tmp = points[b1 + j];
            points[b1 + j] = points[b2 + j];
            points[b2 + j] = tmp;
        }
    }
}
/**
 * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.
 * Note: points are modified in-place.
 * @param points Array of points that represent the polygon.
 * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.
 * @param options Parameters of the polygon.
 * @return Returns true if the winding direction was changed.
 */
function modifyPolygonWindingDirectionPoints(points, direction, options = {}) {
    const currentDirection = getPolygonWindingDirectionPoints(points, options);
    if (currentDirection !== direction) {
        points.reverse();
        return true;
    }
    return false;
}
/**
 * Returns winding direction of the polygon.
 * @param points Array of points that represent the polygon.
 * @param options Parameters of the polygon.
 * @returns Winding direction of the polygon.
 */
function getPolygonWindingDirectionPoints(points, options = {}) {
    return Math.sign(getPolygonSignedAreaPoints(points, options));
}
/**
 * Returns signed area of the polygon.
 * @param points Array of points that represent the polygon.
 * @param options Parameters of the polygon.
 * @returns Signed area of the polygon.
 */
function getPolygonSignedAreaPoints(points, options = {}) {
    // https://en.wikipedia.org/wiki/Shoelace_formula
    const { start = 0, end = points.length, plane = 'xy' } = options;
    let area = 0;
    const i0 = DimIndex[plane[0]];
    const i1 = DimIndex[plane[1]];
    for (let i = start, j = end - 1; i < end; ++i) {
        area += (points[i][i0] - points[j][i0]) * (points[i][i1] + points[j][i1]);
        j = i;
    }
    return area / 2;
}
/**
 * Calls visitor callback for each segment in the polygon.
 * @param points Array of points that represent the polygon.
 * @param visitor A callback to call for each segment.
 * @param options Parameters of the polygon.
 */
function forEachSegmentInPolygonPoints(points, visitor, options = {}) {
    const { start = 0, end = points.length, isClosed } = options;
    for (let i = start; i < end - 1; ++i) {
        visitor(points[i], points[i + 1], i, i + 1);
    }
    const isClosedEx = isClosed || (0,_math_gl_core__WEBPACK_IMPORTED_MODULE_0__.equals)(points[end - 1], points[0]);
    if (!isClosedEx) {
        visitor(points[end - 1], points[0], end - 1, 0);
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/polygon.js":
/*!*******************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/polygon.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Polygon: () => (/* binding */ Polygon)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/lib/common.js");
/* harmony import */ var _polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polygon-utils.js */ "./node_modules/@math.gl/polygon/dist/polygon-utils.js");
/* eslint-disable no-undef, no-console */


class Polygon {
    constructor(points, options = {}) {
        this.points = points;
        this.isFlatArray = !(0,_math_gl_core__WEBPACK_IMPORTED_MODULE_1__.isArray)(points[0]);
        this.options = {
            start: options.start || 0,
            end: options.end || points.length,
            size: options.size || 2,
            isClosed: options.isClosed
        };
        Object.freeze(this);
    }
    /**
     * Returns signed area of the polygon.
     * @returns Signed area of the polygon.
     */
    getSignedArea() {
        if (this.isFlatArray)
            return (0,_polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPolygonSignedArea)(this.points, this.options);
        return (0,_polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPolygonSignedAreaPoints)(this.points, this.options);
    }
    /**
     * Returns absolute area of the polygon.
     * @returns Absolute area of the polygon.
     */
    getArea() {
        return Math.abs(this.getSignedArea());
    }
    /**
     * Returns winding direction of the polygon.
     * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.
     */
    getWindingDirection() {
        return Math.sign(this.getSignedArea());
    }
    /**
     * Calls the visitor callback for each segment in the polygon.
     * @param visitor A callback to call for each segment.
     */
    forEachSegment(visitor) {
        if (this.isFlatArray) {
            (0,_polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.forEachSegmentInPolygon)(this.points, 
            // eslint-disable-next-line max-params
            (x1, y1, x2, y2, i1, i2) => {
                // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment
                visitor([x1, y1], [x2, y2], i1, i2);
            }, this.options);
        }
        else {
            (0,_polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.forEachSegmentInPolygonPoints)(this.points, visitor, this.options);
        }
    }
    /**
     * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.
     * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.
     * @return Returns true if the winding direction was changed.
     */
    modifyWindingDirection(direction) {
        if (this.isFlatArray) {
            return (0,_polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.modifyPolygonWindingDirection)(this.points, direction, this.options);
        }
        return (0,_polygon_utils_js__WEBPACK_IMPORTED_MODULE_0__.modifyPolygonWindingDirectionPoints)(this.points, direction, this.options);
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/polygon/dist/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/@math.gl/polygon/dist/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   getPointAtIndex: () => (/* binding */ getPointAtIndex),
/* harmony export */   push: () => (/* binding */ push)
/* harmony export */ });
function push(target, source) {
    const size = source.length;
    const startIndex = target.length;
    // dedupe, if source is the same point as the last vertex
    if (startIndex > 0) {
        let isDuplicate = true;
        for (let i = 0; i < size; i++) {
            if (target[startIndex - size + i] !== source[i]) {
                isDuplicate = false;
                break;
            }
        }
        if (isDuplicate) {
            return false;
        }
    }
    for (let i = 0; i < size; i++) {
        target[startIndex + i] = source[i];
    }
    return true;
}
function copy(target, source) {
    const size = source.length;
    for (let i = 0; i < size; i++) {
        target[i] = source[i];
    }
}
function getPointAtIndex(positions, index, size, offset, out = []) {
    const startI = offset + index * size;
    for (let i = 0; i < size; i++) {
        out[i] = positions[startI + i];
    }
    return out;
}


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/assert.js":
/*!***********************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/assert.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
// Replacement for the external assert method to reduce bundle size
// Note: We don't use the second "message" argument in calling code,
// so no need to support it here
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || '@math.gl/web-mercator: assertion failed.');
    }
}


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/fit-bounds.js":
/*!***************************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/fit-bounds.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fitBounds: () => (/* binding */ fitBounds)
/* harmony export */ });
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ "./node_modules/@math.gl/web-mercator/dist/assert.js");
/* harmony import */ var _math_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math-utils.js */ "./node_modules/@math.gl/web-mercator/dist/math-utils.js");
/* harmony import */ var _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./web-mercator-utils.js */ "./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js");



/**
 * Returns map settings {latitude, longitude, zoom}
 * that will contain the provided corners within the provided width.
 *
 * > _Note: Only supports non-perspective mode._
 *
 * @param options fit bounds parameters
 * @returns - latitude, longitude and zoom
 */
function fitBounds(options) {
    const { width, height, bounds, minExtent = 0, // 0.01 would be about 1000 meters (degree is ~110KM)
    maxZoom = 24, // ~x4,000,000 => About 10 meter extents
    offset = [0, 0] } = options;
    const [[west, south], [east, north]] = bounds;
    const padding = getPaddingObject(options.padding);
    const nw = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__.lngLatToWorld)([west, (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(north, -_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__.MAX_LATITUDE, _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__.MAX_LATITUDE)]);
    const se = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__.lngLatToWorld)([east, (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(south, -_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__.MAX_LATITUDE, _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__.MAX_LATITUDE)]);
    // width/height on the Web Mercator plane
    const size = [
        Math.max(Math.abs(se[0] - nw[0]), minExtent),
        Math.max(Math.abs(se[1] - nw[1]), minExtent)
    ];
    const targetSize = [
        width - padding.left - padding.right - Math.abs(offset[0]) * 2,
        height - padding.top - padding.bottom - Math.abs(offset[1]) * 2
    ];
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(targetSize[0] > 0 && targetSize[1] > 0);
    // scale = screen pixels per unit on the Web Mercator plane
    const scaleX = targetSize[0] / size[0];
    const scaleY = targetSize[1] / size[1];
    // Find how much we need to shift the center
    const offsetX = (padding.right - padding.left) / 2 / scaleX;
    const offsetY = (padding.top - padding.bottom) / 2 / scaleY;
    const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];
    const centerLngLat = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_2__.worldToLngLat)(center);
    const zoom = Math.min(maxZoom, (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.log2)(Math.abs(Math.min(scaleX, scaleY))));
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(Number.isFinite(zoom));
    return {
        longitude: centerLngLat[0],
        latitude: centerLngLat[1],
        zoom
    };
}
// Helpers
function getPaddingObject(padding = 0) {
    if (typeof padding === 'number') {
        return {
            top: padding,
            bottom: padding,
            left: padding,
            right: padding
        };
    }
    // Make sure all the required properties are set
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(Number.isFinite(padding.top) &&
        Number.isFinite(padding.bottom) &&
        Number.isFinite(padding.left) &&
        Number.isFinite(padding.right));
    return padding;
}


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/fly-to-viewport.js":
/*!********************************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/fly-to-viewport.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   flyToViewport: () => (/* binding */ flyToViewport),
/* harmony export */   getFlyToDuration: () => (/* binding */ getFlyToDuration)
/* harmony export */ });
/* harmony import */ var _math_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math-utils.js */ "./node_modules/@math.gl/web-mercator/dist/math-utils.js");
/* harmony import */ var _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./web-mercator-utils.js */ "./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");



const EPSILON = 0.01;
const VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];
const DEFAULT_OPTS = {
    curve: 1.414,
    speed: 1.2
    // screenSpeed and maxDuration are used only if specified
};
/**
 * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.
 * It implements “Smooth and efficient zooming and panning.” algorithm by
 * "Jarke J. van Wijk and Wim A.A. Nuij"
 */
function flyToViewport(startProps, endProps, t, options) {
    // Equations from above paper are referred where needed.
    const { startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0 } = getFlyToTransitionParams(startProps, endProps, options);
    // If change in center is too small, do linear interpolaiton.
    if (u1 < EPSILON) {
        const viewport = {};
        for (const key of VIEWPORT_TRANSITION_PROPS) {
            const startValue = startProps[key];
            const endValue = endProps[key];
            // @ts-ignore-error properties are populated dynamically
            viewport[key] = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.lerp)(startValue, endValue, t);
        }
        // @ts-expect-error properties are populated dynamically
        return viewport;
    }
    const s = t * S;
    const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);
    const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;
    const scaleIncrement = 1 / w; // Using w method for scaling.
    const newZoom = startZoom + (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.scaleToZoom)(scaleIncrement);
    const newCenterWorld = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.scale([], uDelta, u);
    _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.add(newCenterWorld, newCenterWorld, startCenterXY);
    const newCenter = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.worldToLngLat)(newCenterWorld);
    return {
        longitude: newCenter[0],
        latitude: newCenter[1],
        zoom: newZoom
    };
}
// returns transition duration in milliseconds
function getFlyToDuration(startProps, endProps, options) {
    const opts = { ...DEFAULT_OPTS, ...options };
    const { screenSpeed, speed, maxDuration } = opts;
    const { S, rho } = getFlyToTransitionParams(startProps, endProps, opts);
    const length = 1000 * S;
    let duration;
    if (Number.isFinite(screenSpeed)) {
        duration = length / (screenSpeed / rho);
    }
    else {
        duration = length / speed;
    }
    return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;
}
// Private Methods
// Calculate all parameters that are static for given startProps and endProps
function getFlyToTransitionParams(startProps, endProps, opts) {
    opts = Object.assign({}, DEFAULT_OPTS, opts);
    const rho = opts.curve;
    const startZoom = startProps.zoom;
    const startCenter = [startProps.longitude, startProps.latitude];
    const startScale = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.zoomToScale)(startZoom);
    const endZoom = endProps.zoom;
    const endCenter = [endProps.longitude, endProps.latitude];
    const scale = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.zoomToScale)(endZoom - startZoom);
    const startCenterXY = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)(startCenter);
    const endCenterXY = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)(endCenter);
    const uDelta = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.sub([], endCenterXY, startCenterXY);
    const w0 = Math.max(startProps.width, startProps.height);
    const w1 = w0 / scale;
    const u1 = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.length(uDelta) * startScale;
    // u0 is treated as '0' in Eq (9).
    // If u1 is too small, will generate invalid number
    const _u1 = Math.max(u1, EPSILON);
    // Implement Equation (9) from above algorithm.
    const rho2 = rho * rho;
    const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);
    const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);
    const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);
    const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    const S = (r1 - r0) / rho;
    return { startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1 };
}


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/get-bounds.js":
/*!***************************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/get-bounds.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBounds: () => (/* binding */ getBounds)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");
/* harmony import */ var _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./web-mercator-utils.js */ "./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js");
/* harmony import */ var _math_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math-utils.js */ "./node_modules/@math.gl/web-mercator/dist/math-utils.js");
/* eslint-disable camelcase */



const DEGREES_TO_RADIANS = Math.PI / 180;
/*
 * Returns the quad at the intersection of the frustum and the given z plane
 * @param {WebMercatorViewport} viewport
 * @param {Number} z - elevation in meters
 */
function getBounds(viewport, z = 0) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    const { width, height, unproject } = viewport;
    const unprojectOps = { targetZ: z };
    const bottomLeft = unproject([0, height], unprojectOps);
    const bottomRight = unproject([width, height], unprojectOps);
    let topLeft;
    let topRight;
    const halfFov = viewport.fovy
        ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS
        : Math.atan(0.5 / viewport.altitude);
    const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;
    // The top plane is parallel to the ground if halfFov == angleToGround
    if (halfFov > angleToGround - 0.01) {
        // intersect with the far plane
        topLeft = unprojectOnFarPlane(viewport, 0, z);
        topRight = unprojectOnFarPlane(viewport, width, z);
    }
    else {
        // intersect with the top plane
        topLeft = unproject([0, 0], unprojectOps);
        topRight = unproject([width, 0], unprojectOps);
    }
    return [bottomLeft, bottomRight, topRight, topLeft];
}
/*
 * Find a point on the far clipping plane of the viewport
 * @param {WebMercatorViewport} viewport
 * @param {Number} x - projected x in screen space
 * @param {Number} targetZ - the elevation of the point in meters
 */
function unprojectOnFarPlane(viewport, x, targetZ) {
    const { pixelUnprojectionMatrix } = viewport;
    const coord0 = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.transformVector)(pixelUnprojectionMatrix, [x, 0, 1, 1]);
    const coord1 = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.transformVector)(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);
    const z = targetZ * viewport.distanceScales.unitsPerMeter[2];
    const t = (z - coord0[2]) / (coord1[2] - coord0[2]);
    const coord = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.lerp([], coord0, coord1, t);
    const result = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_0__.worldToLngLat)(coord);
    result.push(targetZ);
    return result;
}


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MAX_LATITUDE: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.MAX_LATITUDE),
/* harmony export */   WebMercatorViewport: () => (/* reexport safe */ _web_mercator_viewport_js__WEBPACK_IMPORTED_MODULE_0__.WebMercatorViewport),
/* harmony export */   addMetersToLngLat: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.addMetersToLngLat),
/* harmony export */   altitudeToFovy: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.altitudeToFovy),
/* harmony export */   "default": () => (/* reexport safe */ _web_mercator_viewport_js__WEBPACK_IMPORTED_MODULE_0__.WebMercatorViewport),
/* harmony export */   fitBounds: () => (/* reexport safe */ _fit_bounds_js__WEBPACK_IMPORTED_MODULE_2__.fitBounds),
/* harmony export */   flyToViewport: () => (/* reexport safe */ _fly_to_viewport_js__WEBPACK_IMPORTED_MODULE_4__.flyToViewport),
/* harmony export */   fovyToAltitude: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.fovyToAltitude),
/* harmony export */   getBounds: () => (/* reexport safe */ _get_bounds_js__WEBPACK_IMPORTED_MODULE_1__.getBounds),
/* harmony export */   getDistanceScales: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.getDistanceScales),
/* harmony export */   getFlyToDuration: () => (/* reexport safe */ _fly_to_viewport_js__WEBPACK_IMPORTED_MODULE_4__.getFlyToDuration),
/* harmony export */   getMeterZoom: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.getMeterZoom),
/* harmony export */   getProjectionMatrix: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.getProjectionMatrix),
/* harmony export */   getProjectionParameters: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.getProjectionParameters),
/* harmony export */   getViewMatrix: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.getViewMatrix),
/* harmony export */   lngLatToWorld: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.lngLatToWorld),
/* harmony export */   normalizeViewportProps: () => (/* reexport safe */ _normalize_viewport_props_js__WEBPACK_IMPORTED_MODULE_3__.normalizeViewportProps),
/* harmony export */   pixelsToWorld: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.pixelsToWorld),
/* harmony export */   scaleToZoom: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.scaleToZoom),
/* harmony export */   unitsPerMeter: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.unitsPerMeter),
/* harmony export */   worldToLngLat: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.worldToLngLat),
/* harmony export */   worldToPixels: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.worldToPixels),
/* harmony export */   zoomToScale: () => (/* reexport safe */ _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__.zoomToScale)
/* harmony export */ });
/* harmony import */ var _web_mercator_viewport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./web-mercator-viewport.js */ "./node_modules/@math.gl/web-mercator/dist/web-mercator-viewport.js");
/* harmony import */ var _get_bounds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-bounds.js */ "./node_modules/@math.gl/web-mercator/dist/get-bounds.js");
/* harmony import */ var _fit_bounds_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fit-bounds.js */ "./node_modules/@math.gl/web-mercator/dist/fit-bounds.js");
/* harmony import */ var _normalize_viewport_props_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./normalize-viewport-props.js */ "./node_modules/@math.gl/web-mercator/dist/normalize-viewport-props.js");
/* harmony import */ var _fly_to_viewport_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fly-to-viewport.js */ "./node_modules/@math.gl/web-mercator/dist/fly-to-viewport.js");
/* harmony import */ var _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./web-mercator-utils.js */ "./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js");
// Classic web-mercator-project






/** @deprecated default export */



/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/math-utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/math-utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   createMat4: () => (/* binding */ createMat4),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   log2: () => (/* binding */ log2),
/* harmony export */   mod: () => (/* binding */ mod),
/* harmony export */   transformVector: () => (/* binding */ transformVector)
/* harmony export */ });
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec4.js");

// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()
function createMat4() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}
// Transforms a vec4 with a projection matrix
function transformVector(matrix, vector) {
    const result = _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.transformMat4([], vector, matrix);
    _math_gl_core__WEBPACK_IMPORTED_MODULE_0__.scale(result, result, 1 / result[3]);
    return result;
}
function mod(value, divisor) {
    const modulus = value % divisor;
    return modulus < 0 ? divisor + modulus : modulus;
}
function lerp(start, end, step) {
    return step * end + (1 - step) * start;
}
function clamp(x, min, max) {
    return x < min ? min : x > max ? max : x;
}
function ieLog2(x) {
    return Math.log(x) * Math.LOG2E;
}
// Handle missing log2 in IE 11
const log2 = Math.log2 || ieLog2;


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/normalize-viewport-props.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/normalize-viewport-props.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizeViewportProps: () => (/* binding */ normalizeViewportProps)
/* harmony export */ });
/* harmony import */ var _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./web-mercator-utils.js */ "./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js");
/* harmony import */ var _math_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math-utils.js */ "./node_modules/@math.gl/web-mercator/dist/math-utils.js");


// defined by mapbox-gl
const TILE_SIZE = 512;
/**
 * Apply mathematical constraints to viewport props
 * @param props
 */
// eslint-disable-next-line complexity
function normalizeViewportProps(props) {
    const { width, height, pitch = 0 } = props;
    let { longitude, latitude, zoom, bearing = 0 } = props;
    // Normalize degrees
    if (longitude < -180 || longitude > 180) {
        longitude = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.mod)(longitude + 180, 360) - 180;
    }
    if (bearing < -180 || bearing > 180) {
        bearing = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.mod)(bearing + 180, 360) - 180;
    }
    // Constrain zoom and shift center at low zoom levels
    const minZoom = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_1__.log2)(height / TILE_SIZE);
    if (zoom <= minZoom) {
        zoom = minZoom;
        latitude = 0;
    }
    else {
        // Eliminate white space above and below the map
        const halfHeightPixels = height / 2 / Math.pow(2, zoom);
        const minLatitude = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_0__.worldToLngLat)([0, halfHeightPixels])[1];
        if (latitude < minLatitude) {
            latitude = minLatitude;
        }
        else {
            const maxLatitude = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_0__.worldToLngLat)([0, TILE_SIZE - halfHeightPixels])[1];
            if (latitude > maxLatitude) {
                latitude = maxLatitude;
            }
        }
    }
    return { width, height, longitude, latitude, zoom, pitch, bearing };
}


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_ALTITUDE: () => (/* binding */ DEFAULT_ALTITUDE),
/* harmony export */   MAX_LATITUDE: () => (/* binding */ MAX_LATITUDE),
/* harmony export */   addMetersToLngLat: () => (/* binding */ addMetersToLngLat),
/* harmony export */   altitudeToFovy: () => (/* binding */ altitudeToFovy),
/* harmony export */   fovyToAltitude: () => (/* binding */ fovyToAltitude),
/* harmony export */   getDistanceScales: () => (/* binding */ getDistanceScales),
/* harmony export */   getMeterZoom: () => (/* binding */ getMeterZoom),
/* harmony export */   getProjectionMatrix: () => (/* binding */ getProjectionMatrix),
/* harmony export */   getProjectionParameters: () => (/* binding */ getProjectionParameters),
/* harmony export */   getViewMatrix: () => (/* binding */ getViewMatrix),
/* harmony export */   lngLatToWorld: () => (/* binding */ lngLatToWorld),
/* harmony export */   pixelsToWorld: () => (/* binding */ pixelsToWorld),
/* harmony export */   scaleToZoom: () => (/* binding */ scaleToZoom),
/* harmony export */   unitsPerMeter: () => (/* binding */ unitsPerMeter),
/* harmony export */   worldToLngLat: () => (/* binding */ worldToLngLat),
/* harmony export */   worldToPixels: () => (/* binding */ worldToPixels),
/* harmony export */   zoomToScale: () => (/* binding */ zoomToScale)
/* harmony export */ });
/* harmony import */ var _math_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math-utils.js */ "./node_modules/@math.gl/web-mercator/dist/math-utils.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/mat4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ "./node_modules/@math.gl/web-mercator/dist/assert.js");
// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE



// CONSTANTS
const PI = Math.PI;
const PI_4 = PI / 4;
const DEGREES_TO_RADIANS = PI / 180;
const RADIANS_TO_DEGREES = 180 / PI;
const TILE_SIZE = 512;
// Average circumference (40075 km equatorial, 40007 km meridional)
const EARTH_CIRCUMFERENCE = 40.03e6;
// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2
const MAX_LATITUDE = 85.051129;
// Mapbox default altitude
const DEFAULT_ALTITUDE = 1.5;
/** Logarithimic zoom to linear scale **/
function zoomToScale(zoom) {
    return Math.pow(2, zoom);
}
/** Linear scale to logarithimic zoom **/
function scaleToZoom(scale) {
    return (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.log2)(scale);
}
/**
 * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.
 * Performs the nonlinear part of the web mercator projection.
 * Remaining projection is done with 4x4 matrices which also handles
 * perspective.
 *
 * @param lngLat - [lng, lat] coordinates
 *   Specifies a point on the sphere to project onto the map.
 * @return [x,y] coordinates.
 */
function lngLatToWorld(lngLat) {
    const [lng, lat] = lngLat;
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(lng));
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');
    const lambda2 = lng * DEGREES_TO_RADIANS;
    const phi2 = lat * DEGREES_TO_RADIANS;
    const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);
    const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);
    return [x, y];
}
/**
 * Unproject world point [x,y] on map onto {lat, lon} on sphere
 *
 * @param xy - array with [x,y] members
 *  representing point on projected map plane
 * @return - array with [x,y] of point on sphere.
 *   Has toArray method if you need a GeoJSON Array.
 *   Per cartographic tradition, lat and lon are specified as degrees.
 */
function worldToLngLat(xy) {
    const [x, y] = xy;
    const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;
    const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);
    return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];
}
/**
 * Returns the zoom level that gives a 1 meter pixel at a certain latitude
 * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)
 */
function getMeterZoom(options) {
    const { latitude } = options;
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(latitude));
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
    return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;
}
/**
 * Calculate the conversion from meter to common units at a given latitude
 * This is a cheaper version of `getDistanceScales`
 * @param latitude center latitude in degrees
 * @returns common units per meter
 */
function unitsPerMeter(latitude) {
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
    return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;
}
/**
 * Calculate distance scales in meters around current lat/lon, both for
 * degrees and pixels.
 * In mercator projection mode, the distance scales vary significantly
 * with latitude.
 */
function getDistanceScales(options) {
    const { latitude, longitude, highPrecision = false } = options;
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(latitude) && Number.isFinite(longitude));
    const worldSize = TILE_SIZE;
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
    /**
     * Number of pixels occupied by one degree longitude around current lat/lon:
       unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)
         = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)
       unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)
         = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)
     */
    const unitsPerDegreeX = worldSize / 360;
    const unitsPerDegreeY = unitsPerDegreeX / latCosine;
    /**
     * Number of pixels occupied by one meter around current lat/lon:
     */
    const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;
    /**
     * LngLat: longitude -> east and latitude -> north (bottom left)
     * UTM meter offset: x -> east and y -> north (bottom left)
     * World space: x -> east and y -> south (top left)
     *
     * Y needs to be flipped when converting delta degree/meter to delta pixels
     */
    const result = {
        unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],
        metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],
        unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],
        degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]
    };
    /**
     * Taylor series 2nd order for 1/latCosine
       f'(a) * (x - a)
         = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat
         = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat
     */
    if (highPrecision) {
        const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;
        const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;
        const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;
        const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;
        result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];
        result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];
    }
    // Main results, used for converting meters to latlng deltas and scaling offsets
    return result;
}
/**
 * Offset a lng/lat position by meterOffset (northing, easting)
 */
function addMetersToLngLat(lngLatZ, xyz) {
    const [longitude, latitude, z0] = lngLatZ;
    const [x, y, z] = xyz;
    const { unitsPerMeter, unitsPerMeter2 } = getDistanceScales({
        longitude,
        latitude,
        highPrecision: true
    });
    const worldspace = lngLatToWorld(lngLatZ);
    worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);
    worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);
    const newLngLat = worldToLngLat(worldspace);
    const newZ = (z0 || 0) + (z || 0);
    return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;
}
/**
 *
 * view and projection matrix creation is intentionally kept compatible with
 * mapbox-gl's implementation to ensure that seamless interoperation
 * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js
 */
function getViewMatrix(options) {
    const { 
    // Viewport props
    height, pitch, bearing, altitude, 
    // Pre-calculated parameters
    scale, center } = options;
    // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES
    // Note that mercator world coordinates typically need to be flipped
    //
    // Note: As usual, matrix operation orders should be read in reverse
    // since vectors will be multiplied from the right during transformation
    const vm = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.createMat4)();
    // Move camera to altitude (along the pitch & bearing direction)
    _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.translate(vm, vm, [0, 0, -altitude]);
    // Rotate by bearing, and then by pitch (which tilts the view)
    _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);
    _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);
    const relativeScale = scale / height;
    _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);
    if (center) {
        _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.translate(vm, vm, _math_gl_core__WEBPACK_IMPORTED_MODULE_3__.negate([], center));
    }
    return vm;
}
/**
 * Calculates mapbox compatible projection matrix from parameters
 *
 * @param options.width Width of "viewport" or window
 * @param options.height Height of "viewport" or window
 * @param options.scale Scale at the current zoom
 * @param options.center Offset of the target, vec3 in world space
 * @param options.offset Offset of the focal point, vec2 in screen space
 * @param options.pitch Camera angle in degrees (0 is straight down)
 * @param options.fovy field of view in degrees
 * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`
 * @param options.nearZMultiplier control z buffer
 * @param options.farZMultiplier control z buffer
 * @returns project parameters object
 */
function getProjectionParameters(options) {
    const { width, height, altitude, pitch = 0, offset, center, scale, nearZMultiplier = 1, farZMultiplier = 1 } = options;
    let { fovy = altitudeToFovy(DEFAULT_ALTITUDE) } = options;
    // For back-compatibility allow field of view to be
    // derived from altitude
    if (altitude !== undefined) {
        fovy = altitudeToFovy(altitude);
    }
    const fovRadians = fovy * DEGREES_TO_RADIANS;
    const pitchRadians = pitch * DEGREES_TO_RADIANS;
    // Distance from camera to the target
    const focalDistance = fovyToAltitude(fovy);
    let cameraToSeaLevelDistance = focalDistance;
    if (center) {
        cameraToSeaLevelDistance += (center[2] * scale) / Math.cos(pitchRadians) / height;
    }
    const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);
    // Find the distance from the center point to the center top
    // in focal distance units using law of sines.
    const topHalfSurfaceDistance = (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /
        Math.sin((0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));
    // Calculate z distance of the farthest fragment that should be rendered.
    const furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;
    // Matches mapbox limit
    const horizonDistance = cameraToSeaLevelDistance * 10;
    // Calculate z value of the farthest fragment that should be rendered.
    const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);
    return {
        fov: fovRadians,
        aspect: width / height,
        focalDistance,
        near: nearZMultiplier,
        far: farZ
    };
}
/**
 * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE
 *
 * To match mapbox's z buffer:
 *  - \<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1
 *  - \>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01
 *
 * @param options Viewport options
 * @param options.width Width of "viewport" or window
 * @param options.height Height of "viewport" or window
 * @param options.scale Scale at the current zoom
 * @param options.center Offset of the target, vec3 in world space
 * @param options.offset Offset of the focal point, vec2 in screen space
 * @param options.pitch Camera angle in degrees (0 is straight down)
 * @param options.fovy field of view in degrees
 * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`
 * @param options.nearZMultiplier control z buffer
 * @param options.farZMultiplier control z buffer
 * @returns 4x4 projection matrix
 */
function getProjectionMatrix(options) {
    const { fov, aspect, near, far } = getProjectionParameters(options);
    const projectionMatrix = _math_gl_core__WEBPACK_IMPORTED_MODULE_2__.perspective([], fov, // fov in radians
    aspect, // aspect ratio
    near, // near plane
    far // far plane
    );
    return projectionMatrix;
}
/**
 *
 * Convert an altitude to field of view such that the
 * focal distance is equal to the altitude
 *
 * @param altitude - altitude of camera in screen units
 * @return fovy field of view in degrees
 */
function altitudeToFovy(altitude) {
    return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;
}
/**
 *
 * Convert an field of view such that the
 * focal distance is equal to the altitude
 *
 * @param fovy - field of view in degrees
 * @return altitude altitude of camera in screen units
 */
function fovyToAltitude(fovy) {
    return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);
}
// Project flat coordinates to pixels on screen.
function worldToPixels(xyz, pixelProjectionMatrix) {
    const [x, y, z = 0] = xyz;
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));
    return (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.transformVector)(pixelProjectionMatrix, [x, y, z, 1]);
}
/**
 * Unproject pixels on screen to flat coordinates.
 *
 * @param xyz - pixel coordinate on screen.
 * @param pixelUnprojectionMatrix - unprojection matrix 4x4
 * @param targetZ - if pixel coordinate does not have a 3rd component (depth),
 *    targetZ is used as the elevation plane to unproject onto
 * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.
 */
function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {
    const [x, y, z] = xyz;
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');
    if (Number.isFinite(z)) {
        // Has depth component
        const coord = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.transformVector)(pixelUnprojectionMatrix, [x, y, z, 1]);
        return coord;
    }
    // since we don't know the correct projected z value for the point,
    // unproject two points to get a line and then find the point on that line with z=0
    const coord0 = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.transformVector)(pixelUnprojectionMatrix, [x, y, 0, 1]);
    const coord1 = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.transformVector)(pixelUnprojectionMatrix, [x, y, 1, 1]);
    const z0 = coord0[2];
    const z1 = coord1[2];
    const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);
    return _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.lerp([], coord0, coord1, t);
}


/***/ }),

/***/ "./node_modules/@math.gl/web-mercator/dist/web-mercator-viewport.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@math.gl/web-mercator/dist/web-mercator-viewport.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebMercatorViewport: () => (/* binding */ WebMercatorViewport)
/* harmony export */ });
/* harmony import */ var _math_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math-utils.js */ "./node_modules/@math.gl/web-mercator/dist/math-utils.js");
/* harmony import */ var _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./web-mercator-utils.js */ "./node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js");
/* harmony import */ var _fit_bounds_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fit-bounds.js */ "./node_modules/@math.gl/web-mercator/dist/fit-bounds.js");
/* harmony import */ var _get_bounds_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get-bounds.js */ "./node_modules/@math.gl/web-mercator/dist/get-bounds.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/mat4.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec3.js");
/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @math.gl/core */ "./node_modules/@math.gl/core/dist/gl-matrix/vec2.js");
// View and Projection Matrix calculations for mapbox-js style map view properties





/**
 * The WebMercatorViewport class creates
 * - view/projection matrices
 * - "uniform values" (for shaders) from mercator params
 *
 * Note: Instances are immutable in the sense that they only have accessors.
 * A new viewport instance should be created if any parameters have changed.
 */
class WebMercatorViewport {
    /**
     * @classdesc
     * Creates view/projection matrices from mercator params
     * Note: The Viewport is immutable in the sense that it only has accessors.
     * A new viewport instance should be created if any parameters have changed.
     */
    // eslint-disable-next-line max-statements
    constructor(props = { width: 1, height: 1 }) {
        /** Two viewports are equal if width and height are identical, and if
         * their view and projection matrices are (approximately) equal.
         */
        this.equals = (viewport) => {
            if (!(viewport instanceof WebMercatorViewport)) {
                return false;
            }
            return (viewport.width === this.width &&
                viewport.height === this.height &&
                _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.equals(viewport.projectionMatrix, this.projectionMatrix) &&
                _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.equals(viewport.viewMatrix, this.viewMatrix));
        };
        /**
         * Projects xyz (possibly latitude and longitude) to pixel coordinates in window
         * using viewport projection parameters
         * - [longitude, latitude] to [x, y]
         * - [longitude, latitude, Z] => [x, y, z]
         * Note: By default, returns top-left coordinates for canvas/SVG type render
         *
         * @param lngLatZ - [lng, lat] or [lng, lat, Z]
         * @param options - options
         * @param options.topLeft=true - Whether projected coords are top left
         * @return - screen coordinates [x, y] or [x, y, z], z as pixel depth
         */
        this.project = (lngLatZ, options = {}) => {
            const { topLeft = true } = options;
            const worldPosition = this.projectPosition(lngLatZ);
            const coord = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.worldToPixels)(worldPosition, this.pixelProjectionMatrix);
            const [x, y] = coord;
            const y2 = topLeft ? y : this.height - y;
            return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];
        };
        /**
         * Unproject pixel coordinates on screen onto world coordinates, possibly `[lon, lat]` on map.
         *
         * - [x, y] => [lng, lat]
         * - [x, y, z] => [lng, lat, Z]
         *
         * @param xyz - screen coordinates, z as pixel depth
         * @param options - options
         * @param options.topLeft=true - Whether projected coords are top left
         * @param options.targetZ=0 - If pixel depth is unknown, targetZ is used as
         *   the elevation plane to unproject onto
         * @return - [lng, lat, Z] or [X, Y, Z]
         */
        this.unproject = (xyz, options = {}) => {
            const { topLeft = true, targetZ = undefined } = options;
            const [x, y, z] = xyz;
            const y2 = topLeft ? y : this.height - y;
            const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];
            const coord = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.pixelsToWorld)([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);
            const [X, Y, Z] = this.unprojectPosition(coord);
            if (Number.isFinite(z)) {
                return [X, Y, Z];
            }
            return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];
        };
        // NON_LINEAR PROJECTION HOOKS
        // Used for web meractor projection
        this.projectPosition = (xyz) => {
            const [X, Y] = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)(xyz);
            const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];
            return [X, Y, Z];
        };
        this.unprojectPosition = (xyz) => {
            const [X, Y] = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.worldToLngLat)(xyz);
            const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];
            return [X, Y, Z];
        };
        let { 
        // Map state
        width, height, altitude = null, fovy = null } = props;
        const { latitude = 0, longitude = 0, zoom = 0, pitch = 0, bearing = 0, position = null, nearZMultiplier = 0.02, farZMultiplier = 1.01 } = props;
        // Silently allow apps to send in 0,0 to facilitate isomorphic render etc
        width = width || 1;
        height = height || 1;
        // `fovy` & `altitude` are independent parameters, one for the
        // projection and the latter for the view matrix. In the past,
        // the `fovy` was always derived from the `altitude`
        if (fovy === null && altitude === null) {
            altitude = _web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ALTITUDE;
            fovy = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.altitudeToFovy)(altitude);
        }
        else if (fovy === null) {
            fovy = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.altitudeToFovy)(altitude);
        }
        else if (altitude === null) {
            altitude = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.fovyToAltitude)(fovy);
        }
        const scale = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.zoomToScale)(zoom);
        // Altitude - prevent division by 0
        // TODO - just throw an Error instead?
        altitude = Math.max(0.75, altitude);
        const distanceScales = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDistanceScales)({ longitude, latitude });
        const center = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)([longitude, latitude]);
        center.push(0);
        if (position) {
            _math_gl_core__WEBPACK_IMPORTED_MODULE_5__.add(center, center, _math_gl_core__WEBPACK_IMPORTED_MODULE_5__.mul([], position, distanceScales.unitsPerMeter));
        }
        this.projectionMatrix = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.getProjectionMatrix)({
            width,
            height,
            scale,
            center,
            pitch,
            fovy,
            nearZMultiplier,
            farZMultiplier
        });
        this.viewMatrix = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.getViewMatrix)({
            height,
            scale,
            center,
            pitch,
            bearing,
            altitude
        });
        // Save parameters
        this.width = width;
        this.height = height;
        this.scale = scale;
        this.latitude = latitude;
        this.longitude = longitude;
        this.zoom = zoom;
        this.pitch = pitch;
        this.bearing = bearing;
        this.altitude = altitude;
        this.fovy = fovy;
        this.center = center;
        this.meterOffset = position || [0, 0, 0];
        this.distanceScales = distanceScales;
        this._initMatrices();
        Object.freeze(this);
    }
    _initMatrices() {
        const { width, height, projectionMatrix, viewMatrix } = this;
        // Note: As usual, matrix operations should be applied in "reverse" order
        // since vectors will be multiplied in from the right during transformation
        const vpm = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.createMat4)();
        _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.multiply(vpm, vpm, projectionMatrix);
        _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.multiply(vpm, vpm, viewMatrix);
        this.viewProjectionMatrix = vpm;
        // Calculate matrices and scales needed for projection
        /**
         * Builds matrices that converts preprojected lngLats to screen pixels
         * and vice versa.
         * Note: Currently returns bottom-left coordinates!
         * Note: Starts with the GL projection matrix and adds steps to the
         *       scale and translate that matrix onto the window.
         * Note: WebGL controls clip space to screen projection with gl.viewport
         *       and does not need this step.
         */
        const m = (0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.createMat4)();
        // matrix for conversion from location to screen coordinates
        _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.scale(m, m, [width / 2, -height / 2, 1]);
        _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.translate(m, m, [1, -1, 0]);
        _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.multiply(m, m, vpm);
        const mInverse = _math_gl_core__WEBPACK_IMPORTED_MODULE_4__.invert((0,_math_utils_js__WEBPACK_IMPORTED_MODULE_0__.createMat4)(), m);
        if (!mInverse) {
            throw new Error('Pixel project matrix not invertible');
        }
        this.pixelProjectionMatrix = m;
        this.pixelUnprojectionMatrix = mInverse;
    }
    /**
     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.
     * Performs the nonlinear part of the web mercator projection.
     * Remaining projection is done with 4x4 matrices which also handles
     * perspective.
     *
     * @param lngLat - [lng, lat] coordinates
     *   Specifies a point on the sphere to project onto the map.
     * @return [x,y] coordinates.
     */
    projectFlat(lngLat) {
        return (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)(lngLat);
    }
    /**
     * Unproject world point [x,y] on map onto {lat, lon} on sphere
     *
     * @param xy - array with [x,y] members
     *  representing point on projected map plane
     * @return - array with [lat,lon] of point on sphere.
     *   Has toArray method if you need a GeoJSON Array.
     *   Per cartographic tradition, lat and lon are specified as degrees.
     */
    unprojectFlat(xy) {
        return (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.worldToLngLat)(xy);
    }
    /**
     * Get the map center that place a given [lng, lat] coordinate at screen point [x, y]
     * @param opt
     * @param opt.lngLat - [lng,lat] coordinates
     *   Specifies a point on the sphere.
     * @param opt.pos - [x,y] coordinates
     *   Specifies a point on the screen.
     * @return [lng,lat] new map center.
     */
    getMapCenterByLngLatPosition({ lngLat, pos }) {
        const fromLocation = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.pixelsToWorld)(pos, this.pixelUnprojectionMatrix);
        const toLocation = (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)(lngLat);
        const translate = _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.add([], toLocation, _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.negate([], fromLocation));
        const newCenter = _math_gl_core__WEBPACK_IMPORTED_MODULE_6__.add([], this.center, translate);
        return (0,_web_mercator_utils_js__WEBPACK_IMPORTED_MODULE_1__.worldToLngLat)(newCenter);
    }
    /**
     * Returns a new viewport that fit around the given rectangle.
     * Only supports non-perspective mode.
     * @param bounds - [[lon, lat], [lon, lat]]
     * @param [options]
     * @param [options.padding] - The amount of padding in pixels to add to the given bounds.
     * @param [options.offset] - The center of the given bounds relative to the map's center,
     *    [x, y] measured in pixels.
     * @returns {WebMercatorViewport}
     */
    fitBounds(bounds, options = {}) {
        const { width, height } = this;
        const { longitude, latitude, zoom } = (0,_fit_bounds_js__WEBPACK_IMPORTED_MODULE_2__.fitBounds)(Object.assign({ width, height, bounds }, options));
        return new WebMercatorViewport({ width, height, longitude, latitude, zoom });
    }
    /**
     * Returns the bounding box of the viewport.
     * @param [options]
     * @param [options.z] - The altitude at which the bounds should be calculated.
     * @returns {Array} bounds - [[lon, lat], [lon, lat]]
     */
    getBounds(options) {
        const corners = this.getBoundingRegion(options);
        const west = Math.min(...corners.map((p) => p[0]));
        const east = Math.max(...corners.map((p) => p[0]));
        const south = Math.min(...corners.map((p) => p[1]));
        const north = Math.max(...corners.map((p) => p[1]));
        return [
            [west, south],
            [east, north]
        ];
    }
    /**
     * Returns the bounding box of the viewport.
     * @param [options]
     * @param [options.z] - The altitude at which the bounds should be calculated.
     * @returns {Array} an array of 4 points that define the visible region
     */
    getBoundingRegion(options = {}) {
        return (0,_get_bounds_js__WEBPACK_IMPORTED_MODULE_3__.getBounds)(this, options.z || 0);
    }
    // DEPRECATED
    /** @deprecated Legacy method name */
    getLocationAtPoint({ lngLat, pos }) {
        return this.getMapCenterByLngLatPosition({ lngLat, pos });
    }
}


/***/ }),

/***/ "./node_modules/@probe.gl/env/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@probe.gl/env/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION),
/* harmony export */   assert: () => (/* reexport safe */ _utils_assert_js__WEBPACK_IMPORTED_MODULE_4__.assert),
/* harmony export */   console: () => (/* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.console),
/* harmony export */   document: () => (/* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.document),
/* harmony export */   getBrowser: () => (/* reexport safe */ _lib_get_browser_js__WEBPACK_IMPORTED_MODULE_2__.getBrowser),
/* harmony export */   global: () => (/* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.global),
/* harmony export */   isBrowser: () => (/* reexport safe */ _lib_is_browser_js__WEBPACK_IMPORTED_MODULE_1__.isBrowser),
/* harmony export */   isElectron: () => (/* reexport safe */ _lib_is_electron_js__WEBPACK_IMPORTED_MODULE_3__.isElectron),
/* harmony export */   isMobile: () => (/* reexport safe */ _lib_get_browser_js__WEBPACK_IMPORTED_MODULE_2__.isMobile),
/* harmony export */   process: () => (/* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.process),
/* harmony export */   self: () => (/* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.self),
/* harmony export */   window: () => (/* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.window)
/* harmony export */ });
/* harmony import */ var _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/globals.js */ "./node_modules/@probe.gl/env/dist/lib/globals.js");
/* harmony import */ var _lib_is_browser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/is-browser.js */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */ var _lib_get_browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/get-browser.js */ "./node_modules/@probe.gl/env/dist/lib/get-browser.js");
/* harmony import */ var _lib_is_electron_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/is-electron.js */ "./node_modules/@probe.gl/env/dist/lib/is-electron.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/assert.js */ "./node_modules/@probe.gl/env/dist/utils/assert.js");
// Extract injected version from package.json (injected by babel plugin)
// @ts-expect-error
const VERSION =  true ? "4.0.7" : 0;
// ENVIRONMENT




// ENVIRONMENT'S ASSERT IS 5-15KB, SO WE PROVIDE OUR OWN

// TODO - wish we could just export a constant
// export const isBrowser = checkIfBrowser();


/***/ }),

/***/ "./node_modules/@probe.gl/env/dist/lib/get-browser.js":
/*!************************************************************!*\
  !*** ./node_modules/@probe.gl/env/dist/lib/get-browser.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBrowser: () => (/* binding */ getBrowser),
/* harmony export */   isMobile: () => (/* binding */ isMobile)
/* harmony export */ });
/* harmony import */ var _is_browser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-browser.js */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */ var _is_electron_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-electron.js */ "./node_modules/@probe.gl/env/dist/lib/is-electron.js");
/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./globals.js */ "./node_modules/@probe.gl/env/dist/lib/globals.js");
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// This function is needed in initialization stages,
// make sure it can be imported in isolation



function isMobile() {
    return typeof globalThis.orientation !== 'undefined';
}
// Simple browser detection
// `mockUserAgent` parameter allows user agent to be overridden for testing
/* eslint-disable complexity */
function getBrowser(mockUserAgent) {
    if (!mockUserAgent && !(0,_is_browser_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser)()) {
        return 'Node';
    }
    if ((0,_is_electron_js__WEBPACK_IMPORTED_MODULE_1__.isElectron)(mockUserAgent)) {
        return 'Electron';
    }
    const userAgent = mockUserAgent || _globals_js__WEBPACK_IMPORTED_MODULE_2__.navigator.userAgent || '';
    // NOTE: Order of tests matter, as many agents list Chrome etc.
    if (userAgent.indexOf('Edge') > -1) {
        return 'Edge';
    }
    if (globalThis.chrome) {
        return 'Chrome';
    }
    if (globalThis.safari) {
        return 'Safari';
    }
    if (globalThis.mozInnerScreenX) {
        return 'Firefox';
    }
    return 'Unknown';
}


/***/ }),

/***/ "./node_modules/@probe.gl/env/dist/lib/globals.js":
/*!********************************************************!*\
  !*** ./node_modules/@probe.gl/env/dist/lib/globals.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   console: () => (/* binding */ console_),
/* harmony export */   document: () => (/* binding */ document_),
/* harmony export */   global: () => (/* binding */ global_),
/* harmony export */   navigator: () => (/* binding */ navigator_),
/* harmony export */   process: () => (/* binding */ process_),
/* harmony export */   self: () => (/* binding */ global_),
/* harmony export */   window: () => (/* binding */ window_)
/* harmony export */ });
// Do not name these variables the same as the global objects - will break bundling
const global_ = globalThis;
const window_ = globalThis;
const document_ = globalThis.document || {};
const process_ = globalThis.process || {};
const console_ = globalThis.console;
const navigator_ = globalThis.navigator || {};



/***/ }),

/***/ "./node_modules/@probe.gl/env/dist/lib/is-browser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@probe.gl/env/dist/lib/is-browser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isBrowser: () => (/* binding */ isBrowser)
/* harmony export */ });
/* harmony import */ var _is_electron_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-electron.js */ "./node_modules/@probe.gl/env/dist/lib/is-electron.js");
// This function is needed in initialization stages,
// make sure it can be imported in isolation

/** Check if in browser by duck-typing Node context */
function isBrowser() {
    const isNode = 
    // @ts-expect-error
    typeof process === 'object' && String(process) === '[object process]' && !process?.browser;
    return !isNode || (0,_is_electron_js__WEBPACK_IMPORTED_MODULE_0__.isElectron)();
}


/***/ }),

/***/ "./node_modules/@probe.gl/env/dist/lib/is-electron.js":
/*!************************************************************!*\
  !*** ./node_modules/@probe.gl/env/dist/lib/is-electron.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isElectron: () => (/* binding */ isElectron)
/* harmony export */ });
// based on https://github.com/cheton/is-electron
// https://github.com/electron/electron/issues/2288
/* eslint-disable complexity */
function isElectron(mockUserAgent) {
    // Renderer process
    // @ts-expect-error
    if (typeof window !== 'undefined' && window.process?.type === 'renderer') {
        return true;
    }
    // Main process
    // eslint-disable-next-line
    if (typeof process !== 'undefined' && Boolean(process.versions?.['electron'])) {
        return true;
    }
    // Detect the user agent when the `nodeIntegration` option is set to true
    const realUserAgent = typeof navigator !== 'undefined' && navigator.userAgent;
    const userAgent = mockUserAgent || realUserAgent;
    return Boolean(userAgent && userAgent.indexOf('Electron') >= 0);
}


/***/ }),

/***/ "./node_modules/@probe.gl/env/dist/utils/assert.js":
/*!*********************************************************!*\
  !*** ./node_modules/@probe.gl/env/dist/utils/assert.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assert: () => (/* binding */ assert)
/* harmony export */ });
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'Assertion failed');
    }
}


/***/ }),

/***/ "./node_modules/@probe.gl/log/dist/log.js":
/*!************************************************!*\
  !*** ./node_modules/@probe.gl/log/dist/log.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Log: () => (/* binding */ Log),
/* harmony export */   normalizeArguments: () => (/* binding */ normalizeArguments)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/index.js");
/* harmony import */ var _utils_local_storage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/local-storage.js */ "./node_modules/@probe.gl/log/dist/utils/local-storage.js");
/* harmony import */ var _utils_formatters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/formatters.js */ "./node_modules/@probe.gl/log/dist/utils/formatters.js");
/* harmony import */ var _utils_color_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/color.js */ "./node_modules/@probe.gl/log/dist/utils/color.js");
/* harmony import */ var _utils_autobind_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/autobind.js */ "./node_modules/@probe.gl/log/dist/utils/autobind.js");
/* harmony import */ var _utils_assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/assert.js */ "./node_modules/@probe.gl/log/dist/utils/assert.js");
/* harmony import */ var _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/hi-res-timestamp.js */ "./node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js");
// probe.gl, MIT license
/* eslint-disable no-console */







// Instrumentation in other packages may override console methods, so preserve them here
const originalConsole = {
    debug: (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() ? console.debug || console.log : console.log,
    log: console.log,
    info: console.info,
    warn: console.warn,
    error: console.error
};
const DEFAULT_LOG_CONFIGURATION = {
    enabled: true,
    level: 0
};
function noop() { } // eslint-disable-line @typescript-eslint/no-empty-function
const cache = {};
const ONCE = { once: true };
/** A console wrapper */
class Log {
    constructor({ id } = { id: '' }) {
        this.VERSION = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.VERSION;
        this._startTs = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
        this._deltaTs = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
        this.userData = {};
        // TODO - fix support from throttling groups
        this.LOG_THROTTLE_TIMEOUT = 0; // Time before throttled messages are logged again
        this.id = id;
        this.userData = {};
        this._storage = new _utils_local_storage_js__WEBPACK_IMPORTED_MODULE_3__.LocalStorage(`__probe-${this.id}__`, DEFAULT_LOG_CONFIGURATION);
        this.timeStamp(`${this.id} started`);
        (0,_utils_autobind_js__WEBPACK_IMPORTED_MODULE_4__.autobind)(this);
        Object.seal(this);
    }
    set level(newLevel) {
        this.setLevel(newLevel);
    }
    get level() {
        return this.getLevel();
    }
    isEnabled() {
        return this._storage.config.enabled;
    }
    getLevel() {
        return this._storage.config.level;
    }
    /** @return milliseconds, with fractions */
    getTotal() {
        return Number(((0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)() - this._startTs).toPrecision(10));
    }
    /** @return milliseconds, with fractions */
    getDelta() {
        return Number(((0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)() - this._deltaTs).toPrecision(10));
    }
    /** @deprecated use logLevel */
    set priority(newPriority) {
        this.level = newPriority;
    }
    /** @deprecated use logLevel */
    get priority() {
        return this.level;
    }
    /** @deprecated use logLevel */
    getPriority() {
        return this.level;
    }
    // Configure
    enable(enabled = true) {
        this._storage.setConfiguration({ enabled });
        return this;
    }
    setLevel(level) {
        this._storage.setConfiguration({ level });
        return this;
    }
    /** return the current status of the setting */
    get(setting) {
        return this._storage.config[setting];
    }
    // update the status of the setting
    set(setting, value) {
        this._storage.setConfiguration({ [setting]: value });
    }
    /** Logs the current settings as a table */
    settings() {
        if (console.table) {
            console.table(this._storage.config);
        }
        else {
            console.log(this._storage.config);
        }
    }
    // Unconditional logging
    assert(condition, message) {
        if (!condition) {
            throw new Error(message || 'Assertion failed');
        }
    }
    warn(message) {
        return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);
    }
    error(message) {
        return this._getLogFunction(0, message, originalConsole.error, arguments);
    }
    /** Print a deprecation warning */
    deprecated(oldUsage, newUsage) {
        return this.warn(`\`${oldUsage}\` is deprecated and will be removed \
in a later version. Use \`${newUsage}\` instead`);
    }
    /** Print a removal warning */
    removed(oldUsage, newUsage) {
        return this.error(`\`${oldUsage}\` has been removed. Use \`${newUsage}\` instead`);
    }
    probe(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {
            time: true,
            once: true
        });
    }
    log(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);
    }
    info(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.info, arguments);
    }
    once(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.debug || originalConsole.info, arguments, ONCE);
    }
    /** Logs an object as a table */
    table(logLevel, table, columns) {
        if (table) {
            return this._getLogFunction(logLevel, table, console.table || noop, (columns && [columns]), {
                tag: getTableHeader(table)
            });
        }
        return noop;
    }
    time(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);
    }
    timeEnd(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.timeEnd ? console.timeEnd : console.info);
    }
    timeStamp(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.timeStamp || noop);
    }
    group(logLevel, message, opts = { collapsed: false }) {
        const options = normalizeArguments({ logLevel, message, opts });
        const { collapsed } = opts;
        // @ts-expect-error
        options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;
        return this._getLogFunction(options);
    }
    groupCollapsed(logLevel, message, opts = {}) {
        return this.group(logLevel, message, Object.assign({}, opts, { collapsed: true }));
    }
    groupEnd(logLevel) {
        return this._getLogFunction(logLevel, '', console.groupEnd || noop);
    }
    // EXPERIMENTAL
    withGroup(logLevel, message, func) {
        this.group(logLevel, message)();
        try {
            func();
        }
        finally {
            this.groupEnd(logLevel)();
        }
    }
    trace() {
        if (console.trace) {
            console.trace();
        }
    }
    // PRIVATE METHODS
    /** Deduces log level from a variety of arguments */
    _shouldLog(logLevel) {
        return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);
    }
    _getLogFunction(logLevel, message, method, args, opts) {
        if (this._shouldLog(logLevel)) {
            // normalized opts + timings
            opts = normalizeArguments({ logLevel, message, args, opts });
            method = method || opts.method;
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_5__["default"])(method);
            opts.total = this.getTotal();
            opts.delta = this.getDelta();
            // reset delta timer
            this._deltaTs = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
            const tag = opts.tag || opts.message;
            if (opts.once && tag) {
                if (!cache[tag]) {
                    cache[tag] = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
                }
                else {
                    return noop;
                }
            }
            // TODO - Make throttling work with groups
            // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {
            //   return noop;
            // }
            message = decorateMessage(this.id, opts.message, opts);
            // Bind console function so that it can be called after being returned
            return method.bind(console, message, ...opts.args);
        }
        return noop;
    }
}
Log.VERSION = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.VERSION;
/**
 * Get logLevel from first argument:
 * - log(logLevel, message, args) => logLevel
 * - log(message, args) => 0
 * - log({logLevel, ...}, message, args) => logLevel
 * - log({logLevel, message, args}) => logLevel
 */
function normalizeLogLevel(logLevel) {
    if (!logLevel) {
        return 0;
    }
    let resolvedLevel;
    switch (typeof logLevel) {
        case 'number':
            resolvedLevel = logLevel;
            break;
        case 'object':
            // Backward compatibility
            // TODO - deprecate `priority`
            // @ts-expect-error
            resolvedLevel = logLevel.logLevel || logLevel.priority || 0;
            break;
        default:
            return 0;
    }
    // 'log level must be a number'
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_5__["default"])(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);
    return resolvedLevel;
}
/**
 * "Normalizes" the various argument patterns into an object with known types
 * - log(logLevel, message, args) => {logLevel, message, args}
 * - log(message, args) => {logLevel: 0, message, args}
 * - log({logLevel, ...}, message, args) => {logLevel, message, args}
 * - log({logLevel, message, args}) => {logLevel, message, args}
 */
function normalizeArguments(opts) {
    const { logLevel, message } = opts;
    opts.logLevel = normalizeLogLevel(logLevel);
    // We use `arguments` instead of rest parameters (...args) because IE
    // does not support the syntax. Rest parameters is transpiled to code with
    // perf impact. Doing it here instead avoids constructing args when logging is
    // disabled.
    // TODO - remove when/if IE support is dropped
    const args = opts.args ? Array.from(opts.args) : [];
    // args should only contain arguments that appear after `message`
    // eslint-disable-next-line no-empty
    while (args.length && args.shift() !== message) { }
    switch (typeof logLevel) {
        case 'string':
        case 'function':
            if (message !== undefined) {
                args.unshift(message);
            }
            opts.message = logLevel;
            break;
        case 'object':
            Object.assign(opts, logLevel);
            break;
        default:
    }
    // Resolve functions into strings by calling them
    if (typeof opts.message === 'function') {
        opts.message = opts.message();
    }
    const messageType = typeof opts.message;
    // 'log message must be a string' or object
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_5__["default"])(messageType === 'string' || messageType === 'object');
    // original opts + normalized opts + opts arg + fixed up message
    return Object.assign(opts, { args }, opts.opts);
}
function decorateMessage(id, message, opts) {
    if (typeof message === 'string') {
        const time = opts.time ? (0,_utils_formatters_js__WEBPACK_IMPORTED_MODULE_6__.leftPad)((0,_utils_formatters_js__WEBPACK_IMPORTED_MODULE_6__.formatTime)(opts.total)) : '';
        message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;
        message = (0,_utils_color_js__WEBPACK_IMPORTED_MODULE_7__.addColor)(message, opts.color, opts.background);
    }
    return message;
}
function getTableHeader(table) {
    for (const key in table) {
        for (const title in table[key]) {
            return title || 'untitled';
        }
    }
    return 'empty';
}


/***/ }),

/***/ "./node_modules/@probe.gl/log/dist/utils/assert.js":
/*!*********************************************************!*\
  !*** ./node_modules/@probe.gl/log/dist/utils/assert.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ assert)
/* harmony export */ });
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'Assertion failed');
    }
}


/***/ }),

/***/ "./node_modules/@probe.gl/log/dist/utils/autobind.js":
/*!***********************************************************!*\
  !*** ./node_modules/@probe.gl/log/dist/utils/autobind.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   autobind: () => (/* binding */ autobind)
/* harmony export */ });
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/**
 * Binds the "this" argument of all functions on a class instance to the instance
 * @param obj - class instance (typically a react component)
 */
function autobind(obj, predefined = ['constructor']) {
    const proto = Object.getPrototypeOf(obj);
    const propNames = Object.getOwnPropertyNames(proto);
    const object = obj;
    for (const key of propNames) {
        const value = object[key];
        if (typeof value === 'function') {
            if (!predefined.find(name => key === name)) {
                object[key] = value.bind(obj);
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@probe.gl/log/dist/utils/color.js":
/*!********************************************************!*\
  !*** ./node_modules/@probe.gl/log/dist/utils/color.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   COLOR: () => (/* binding */ COLOR),
/* harmony export */   addColor: () => (/* binding */ addColor)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");

var COLOR;
(function (COLOR) {
    COLOR[COLOR["BLACK"] = 30] = "BLACK";
    COLOR[COLOR["RED"] = 31] = "RED";
    COLOR[COLOR["GREEN"] = 32] = "GREEN";
    COLOR[COLOR["YELLOW"] = 33] = "YELLOW";
    COLOR[COLOR["BLUE"] = 34] = "BLUE";
    COLOR[COLOR["MAGENTA"] = 35] = "MAGENTA";
    COLOR[COLOR["CYAN"] = 36] = "CYAN";
    COLOR[COLOR["WHITE"] = 37] = "WHITE";
    COLOR[COLOR["BRIGHT_BLACK"] = 90] = "BRIGHT_BLACK";
    COLOR[COLOR["BRIGHT_RED"] = 91] = "BRIGHT_RED";
    COLOR[COLOR["BRIGHT_GREEN"] = 92] = "BRIGHT_GREEN";
    COLOR[COLOR["BRIGHT_YELLOW"] = 93] = "BRIGHT_YELLOW";
    COLOR[COLOR["BRIGHT_BLUE"] = 94] = "BRIGHT_BLUE";
    COLOR[COLOR["BRIGHT_MAGENTA"] = 95] = "BRIGHT_MAGENTA";
    COLOR[COLOR["BRIGHT_CYAN"] = 96] = "BRIGHT_CYAN";
    COLOR[COLOR["BRIGHT_WHITE"] = 97] = "BRIGHT_WHITE";
})(COLOR || (COLOR = {}));
const BACKGROUND_INCREMENT = 10;
function getColor(color) {
    if (typeof color !== 'string') {
        return color;
    }
    color = color.toUpperCase();
    return COLOR[color] || COLOR.WHITE;
}
function addColor(string, color, background) {
    if (!_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser && typeof string === 'string') {
        if (color) {
            const colorCode = getColor(color);
            string = `\u001b[${colorCode}m${string}\u001b[39m`;
        }
        if (background) {
            // background colors values are +10
            const colorCode = getColor(background);
            string = `\u001b[${colorCode + BACKGROUND_INCREMENT}m${string}\u001b[49m`;
        }
    }
    return string;
}


/***/ }),

/***/ "./node_modules/@probe.gl/log/dist/utils/formatters.js":
/*!*************************************************************!*\
  !*** ./node_modules/@probe.gl/log/dist/utils/formatters.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatTime: () => (/* binding */ formatTime),
/* harmony export */   formatValue: () => (/* binding */ formatValue),
/* harmony export */   leftPad: () => (/* binding */ leftPad),
/* harmony export */   rightPad: () => (/* binding */ rightPad)
/* harmony export */ });
// probe.gl, MIT license
/**
 * Format time
 */
function formatTime(ms) {
    let formatted;
    if (ms < 10) {
        formatted = `${ms.toFixed(2)}ms`;
    }
    else if (ms < 100) {
        formatted = `${ms.toFixed(1)}ms`;
    }
    else if (ms < 1000) {
        formatted = `${ms.toFixed(0)}ms`;
    }
    else {
        formatted = `${(ms / 1000).toFixed(2)}s`;
    }
    return formatted;
}
function leftPad(string, length = 8) {
    const padLength = Math.max(length - string.length, 0);
    return `${' '.repeat(padLength)}${string}`;
}
function rightPad(string, length = 8) {
    const padLength = Math.max(length - string.length, 0);
    return `${string}${' '.repeat(padLength)}`;
}
function formatValue(v, options = {}) {
    const EPSILON = 1e-16;
    const { isInteger = false } = options;
    if (Array.isArray(v) || ArrayBuffer.isView(v)) {
        return formatArrayValue(v, options);
    }
    if (!Number.isFinite(v)) {
        return String(v);
    }
    // @ts-expect-error
    if (Math.abs(v) < EPSILON) {
        return isInteger ? '0' : '0.';
    }
    if (isInteger) {
        // @ts-expect-error
        return v.toFixed(0);
    }
    // @ts-expect-error
    if (Math.abs(v) > 100 && Math.abs(v) < 10000) {
        // @ts-expect-error
        return v.toFixed(0);
    }
    // @ts-expect-error
    const string = v.toPrecision(2);
    const decimal = string.indexOf('.0');
    return decimal === string.length - 2 ? string.slice(0, -1) : string;
}
/** Helper to formatValue */
function formatArrayValue(v, options) {
    const { maxElts = 16, size = 1 } = options;
    let string = '[';
    for (let i = 0; i < v.length && i < maxElts; ++i) {
        if (i > 0) {
            string += `,${i % size === 0 ? ' ' : ''}`;
        }
        string += formatValue(v[i], options);
    }
    const terminator = v.length > maxElts ? '...' : ']';
    return `${string}${terminator}`;
}


/***/ }),

/***/ "./node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getHiResTimestamp: () => (/* binding */ getHiResTimestamp)
/* harmony export */ });
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @probe.gl/env */ "./node_modules/@probe.gl/env/dist/lib/globals.js");
// probe.gl, MIT license

/** Get best timer available. */
function getHiResTimestamp() {
    let timestamp;
    if ((0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() && _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window.performance) {
        timestamp = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window?.performance?.now?.();
    }
    else if ("hrtime" in _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process) {
        // @ts-ignore
        const timeParts = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process?.hrtime?.();
        timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;
    }
    else {
        timestamp = Date.now();
    }
    return timestamp;
}


/***/ }),

/***/ "./node_modules/@probe.gl/log/dist/utils/local-storage.js":
/*!****************************************************************!*\
  !*** ./node_modules/@probe.gl/log/dist/utils/local-storage.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalStorage: () => (/* binding */ LocalStorage)
/* harmony export */ });
// probe.gl, MIT license
function getStorage(type) {
    try {
        const storage = window[type];
        const x = '__storage_test__';
        storage.setItem(x, x);
        storage.removeItem(x);
        return storage;
    }
    catch (e) {
        return null;
    }
}
// Store keys in local storage via simple interface
class LocalStorage {
    constructor(id, defaultConfig, type = 'sessionStorage') {
        this.storage = getStorage(type);
        this.id = id;
        this.config = defaultConfig;
        this._loadConfiguration();
    }
    getConfiguration() {
        return this.config;
    }
    setConfiguration(configuration) {
        Object.assign(this.config, configuration);
        if (this.storage) {
            const serialized = JSON.stringify(this.config);
            this.storage.setItem(this.id, serialized);
        }
    }
    // Get config from persistent store, if available
    _loadConfiguration() {
        let configuration = {};
        if (this.storage) {
            const serializedConfiguration = this.storage.getItem(this.id);
            configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};
        }
        Object.assign(this.config, configuration);
        return this;
    }
}


/***/ }),

/***/ "./node_modules/@probe.gl/stats/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@probe.gl/stats/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stat: () => (/* reexport safe */ _lib_stat_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   Stats: () => (/* reexport safe */ _lib_stats_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   _getHiResTimestamp: () => (/* reexport safe */ _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _lib_stats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/stats.js */ "./node_modules/@probe.gl/stats/dist/lib/stats.js");
/* harmony import */ var _lib_stat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/stat.js */ "./node_modules/@probe.gl/stats/dist/lib/stat.js");
/* harmony import */ var _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/hi-res-timestamp.js */ "./node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js");


// UTILITIES



/***/ }),

/***/ "./node_modules/@probe.gl/stats/dist/lib/stat.js":
/*!*******************************************************!*\
  !*** ./node_modules/@probe.gl/stats/dist/lib/stat.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Stat)
/* harmony export */ });
/* harmony import */ var _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/hi-res-timestamp.js */ "./node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js");

class Stat {
    constructor(name, type) {
        this.sampleSize = 1;
        this.time = 0;
        this.count = 0;
        this.samples = 0;
        this.lastTiming = 0;
        this.lastSampleTime = 0;
        this.lastSampleCount = 0;
        this._count = 0;
        this._time = 0;
        this._samples = 0;
        this._startTime = 0;
        this._timerPending = false;
        this.name = name;
        this.type = type;
        this.reset();
    }
    reset() {
        this.time = 0;
        this.count = 0;
        this.samples = 0;
        this.lastTiming = 0;
        this.lastSampleTime = 0;
        this.lastSampleCount = 0;
        this._count = 0;
        this._time = 0;
        this._samples = 0;
        this._startTime = 0;
        this._timerPending = false;
        return this;
    }
    setSampleSize(samples) {
        this.sampleSize = samples;
        return this;
    }
    /** Call to increment count (+1) */
    incrementCount() {
        this.addCount(1);
        return this;
    }
    /** Call to decrement count (-1) */
    decrementCount() {
        this.subtractCount(1);
        return this;
    }
    /** Increase count */
    addCount(value) {
        this._count += value;
        this._samples++;
        this._checkSampling();
        return this;
    }
    /** Decrease count */
    subtractCount(value) {
        this._count -= value;
        this._samples++;
        this._checkSampling();
        return this;
    }
    /** Add an arbitrary timing and bump the count */
    addTime(time) {
        this._time += time;
        this.lastTiming = time;
        this._samples++;
        this._checkSampling();
        return this;
    }
    /** Start a timer */
    timeStart() {
        this._startTime = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
        this._timerPending = true;
        return this;
    }
    /** End a timer. Adds to time and bumps the timing count. */
    timeEnd() {
        if (!this._timerPending) {
            return this;
        }
        this.addTime((0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_0__["default"])() - this._startTime);
        this._timerPending = false;
        this._checkSampling();
        return this;
    }
    getSampleAverageCount() {
        return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;
    }
    /** Calculate average time / count for the previous window */
    getSampleAverageTime() {
        return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;
    }
    /** Calculate counts per second for the previous window */
    getSampleHz() {
        return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;
    }
    getAverageCount() {
        return this.samples > 0 ? this.count / this.samples : 0;
    }
    /** Calculate average time / count */
    getAverageTime() {
        return this.samples > 0 ? this.time / this.samples : 0;
    }
    /** Calculate counts per second */
    getHz() {
        return this.time > 0 ? this.samples / (this.time / 1000) : 0;
    }
    _checkSampling() {
        if (this._samples === this.sampleSize) {
            this.lastSampleTime = this._time;
            this.lastSampleCount = this._count;
            this.count += this._count;
            this.time += this._time;
            this.samples += this._samples;
            this._time = 0;
            this._count = 0;
            this._samples = 0;
        }
    }
}


/***/ }),

/***/ "./node_modules/@probe.gl/stats/dist/lib/stats.js":
/*!********************************************************!*\
  !*** ./node_modules/@probe.gl/stats/dist/lib/stats.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Stats)
/* harmony export */ });
/* harmony import */ var _stat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stat.js */ "./node_modules/@probe.gl/stats/dist/lib/stat.js");
// probe.gl, MIT license

/** A "bag" of `Stat` objects, can be visualized using `StatsWidget` */
class Stats {
    constructor(options) {
        this.stats = {};
        this.id = options.id;
        this.stats = {};
        this._initializeStats(options.stats);
        Object.seal(this);
    }
    /** Acquire a stat. Create if it doesn't exist. */
    get(name, type = 'count') {
        return this._getOrCreate({ name, type });
    }
    get size() {
        return Object.keys(this.stats).length;
    }
    /** Reset all stats */
    reset() {
        for (const stat of Object.values(this.stats)) {
            stat.reset();
        }
        return this;
    }
    forEach(fn) {
        for (const stat of Object.values(this.stats)) {
            fn(stat);
        }
    }
    getTable() {
        const table = {};
        this.forEach(stat => {
            table[stat.name] = {
                time: stat.time || 0,
                count: stat.count || 0,
                average: stat.getAverageTime() || 0,
                hz: stat.getHz() || 0
            };
        });
        return table;
    }
    _initializeStats(stats = []) {
        stats.forEach(stat => this._getOrCreate(stat));
    }
    _getOrCreate(stat) {
        const { name, type } = stat;
        let result = this.stats[name];
        if (!result) {
            if (stat instanceof _stat_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
                result = stat;
            }
            else {
                result = new _stat_js__WEBPACK_IMPORTED_MODULE_0__["default"](name, type);
            }
            this.stats[name] = result;
        }
        return result;
    }
}


/***/ }),

/***/ "./node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getHiResTimestamp)
/* harmony export */ });
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function getHiResTimestamp() {
    let timestamp;
    // Get best timer available.
    if (typeof window !== 'undefined' && window.performance) {
        timestamp = window.performance.now();
    }
    else if (typeof process !== 'undefined' && process.hrtime) {
        const timeParts = process.hrtime();
        timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;
    }
    else {
        timestamp = Date.now();
    }
    return timestamp;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/lib/deck.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/lib/layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/geo-layers/dist/terrain-layer/terrain-layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/geo-layers/dist/tile-layer/tile-layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/layers/dist/scatterplot-layer/scatterplot-layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/layers/dist/bitmap-layer/bitmap-layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/layers/dist/column-layer/column-layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/layers/dist/line-layer/line-layer.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/views/first-person-view.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/views/globe-view.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js");
/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! deck.gl */ "./node_modules/@deck.gl/core/dist/views/map-view.js");
/* harmony import */ var _loaders_gl_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @loaders.gl/core */ "./node_modules/@loaders.gl/core/dist/lib/api/load.js");
/* harmony import */ var _loaders_gl_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @loaders.gl/core */ "./node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js");
/* harmony import */ var _loaders_gl_csv__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @loaders.gl/csv */ "./node_modules/@loaders.gl/csv/dist/csv-loader.js");
/* harmony import */ var _loaders_gl_images__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @loaders.gl/images */ "./node_modules/@loaders.gl/images/dist/image-loader.js");
/* harmony import */ var _loaders_gl_terrain__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @loaders.gl/terrain */ "./node_modules/@loaders.gl/terrain/dist/index.js");
/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @luma.gl/gltools */ "./node_modules/@luma.gl/gltools/dist/esm/index.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/geometry/geometry.js");
/* harmony import */ var _luma_gl_engine__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @luma.gl/engine */ "./node_modules/@luma.gl/engine/dist/model/model.js");
/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @luma.gl/core */ "./node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");











//registerLoaders([ImageLoader, TerrainLoader]);

const deck = {
    // deck.gl
    Deck: deck_gl__WEBPACK_IMPORTED_MODULE_1__["default"], 
    Layer: deck_gl__WEBPACK_IMPORTED_MODULE_2__["default"], TerrainLayer: deck_gl__WEBPACK_IMPORTED_MODULE_3__["default"], TileLayer: deck_gl__WEBPACK_IMPORTED_MODULE_4__["default"], ScatterplotLayer: deck_gl__WEBPACK_IMPORTED_MODULE_5__["default"], BitmapLayer: deck_gl__WEBPACK_IMPORTED_MODULE_6__["default"], GeoJsonLayer: deck_gl__WEBPACK_IMPORTED_MODULE_7__["default"], ColumnLayer: deck_gl__WEBPACK_IMPORTED_MODULE_8__["default"],
    LineLayer: deck_gl__WEBPACK_IMPORTED_MODULE_9__["default"],
    WebMercatorViewport: deck_gl__WEBPACK_IMPORTED_MODULE_10__["default"],
    FirstPersonView: deck_gl__WEBPACK_IMPORTED_MODULE_11__["default"], _GlobeView: deck_gl__WEBPACK_IMPORTED_MODULE_12__["default"],
    project32: deck_gl__WEBPACK_IMPORTED_MODULE_13__["default"], picking: deck_gl__WEBPACK_IMPORTED_MODULE_14__["default"],
    // deck.gl/core
    MapView: deck_gl__WEBPACK_IMPORTED_MODULE_15__["default"]
};

const luma = {
    load: _loaders_gl_core__WEBPACK_IMPORTED_MODULE_16__.load, registerLoaders: _loaders_gl_core__WEBPACK_IMPORTED_MODULE_17__.registerLoaders,
    Geometry: _luma_gl_engine__WEBPACK_IMPORTED_MODULE_18__.Geometry, Model: _luma_gl_engine__WEBPACK_IMPORTED_MODULE_19__.Model, log: _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__.log, Buffer: _luma_gl_core__WEBPACK_IMPORTED_MODULE_20__.Buffer
}

const loaders = {
    registerLoaders: _loaders_gl_core__WEBPACK_IMPORTED_MODULE_17__.registerLoaders,
    CSVLoader: _loaders_gl_csv__WEBPACK_IMPORTED_MODULE_21__.CSVLoader, ImageLoader: _loaders_gl_images__WEBPACK_IMPORTED_MODULE_22__.ImageLoader, TerrainLoader: _loaders_gl_terrain__WEBPACK_IMPORTED_MODULE_23__.TerrainLoader    
}

window.deck = deck;
window.luma = luma;
window.loaders = loaders;
window.isWebGL2 = _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__.isWebGL2;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (deck);
})();

/******/ })()
;
//# sourceMappingURL=g5-deck.gl.js.map